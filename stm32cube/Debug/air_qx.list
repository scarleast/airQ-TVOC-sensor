
air_qx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c8e8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e94  0800c9a8  0800c9a8  0001c9a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d83c  0800d83c  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  0800d83c  0800d83c  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d83c  0800d83c  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d83c  0800d83c  0001d83c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d840  0800d840  0001d840  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800d844  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d4  200001e8  0800da28  000201e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200003bc  0800da28  000203bc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000184f3  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b00  00000000  00000000  000386ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013f8  00000000  00000000  0003c200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001250  00000000  00000000  0003d5f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014739  00000000  00000000  0003e848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a120  00000000  00000000  00052f81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006f52b  00000000  00000000  0006d0a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000dc5cc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005bc4  00000000  00000000  000dc620  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001e8 	.word	0x200001e8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800c990 	.word	0x0800c990

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001ec 	.word	0x200001ec
 8000104:	0800c990 	.word	0x0800c990

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	1c10      	adds	r0, r2, #0
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	1c19      	adds	r1, r3, #0
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 f8dd 	bl	80015fc <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 f827 	bl	80014a0 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 f8cf 	bl	80015fc <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 f8c5 	bl	80015fc <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 f849 	bl	8001518 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 f83f 	bl	8001518 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_d2uiz>:
 80004a8:	b570      	push	{r4, r5, r6, lr}
 80004aa:	2200      	movs	r2, #0
 80004ac:	4b0c      	ldr	r3, [pc, #48]	; (80004e0 <__aeabi_d2uiz+0x38>)
 80004ae:	0004      	movs	r4, r0
 80004b0:	000d      	movs	r5, r1
 80004b2:	f7ff ffef 	bl	8000494 <__aeabi_dcmpge>
 80004b6:	2800      	cmp	r0, #0
 80004b8:	d104      	bne.n	80004c4 <__aeabi_d2uiz+0x1c>
 80004ba:	0020      	movs	r0, r4
 80004bc:	0029      	movs	r1, r5
 80004be:	f001 ff29 	bl	8002314 <__aeabi_d2iz>
 80004c2:	bd70      	pop	{r4, r5, r6, pc}
 80004c4:	4b06      	ldr	r3, [pc, #24]	; (80004e0 <__aeabi_d2uiz+0x38>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	0020      	movs	r0, r4
 80004ca:	0029      	movs	r1, r5
 80004cc:	f001 fb72 	bl	8001bb4 <__aeabi_dsub>
 80004d0:	f001 ff20 	bl	8002314 <__aeabi_d2iz>
 80004d4:	2380      	movs	r3, #128	; 0x80
 80004d6:	061b      	lsls	r3, r3, #24
 80004d8:	469c      	mov	ip, r3
 80004da:	4460      	add	r0, ip
 80004dc:	e7f1      	b.n	80004c2 <__aeabi_d2uiz+0x1a>
 80004de:	46c0      	nop			; (mov r8, r8)
 80004e0:	41e00000 	.word	0x41e00000

080004e4 <__aeabi_d2lz>:
 80004e4:	b570      	push	{r4, r5, r6, lr}
 80004e6:	0005      	movs	r5, r0
 80004e8:	000c      	movs	r4, r1
 80004ea:	2200      	movs	r2, #0
 80004ec:	2300      	movs	r3, #0
 80004ee:	0028      	movs	r0, r5
 80004f0:	0021      	movs	r1, r4
 80004f2:	f7ff ffb1 	bl	8000458 <__aeabi_dcmplt>
 80004f6:	2800      	cmp	r0, #0
 80004f8:	d108      	bne.n	800050c <__aeabi_d2lz+0x28>
 80004fa:	0028      	movs	r0, r5
 80004fc:	0021      	movs	r1, r4
 80004fe:	f000 f80f 	bl	8000520 <__aeabi_d2ulz>
 8000502:	0002      	movs	r2, r0
 8000504:	000b      	movs	r3, r1
 8000506:	0010      	movs	r0, r2
 8000508:	0019      	movs	r1, r3
 800050a:	bd70      	pop	{r4, r5, r6, pc}
 800050c:	2380      	movs	r3, #128	; 0x80
 800050e:	061b      	lsls	r3, r3, #24
 8000510:	18e1      	adds	r1, r4, r3
 8000512:	0028      	movs	r0, r5
 8000514:	f000 f804 	bl	8000520 <__aeabi_d2ulz>
 8000518:	2300      	movs	r3, #0
 800051a:	4242      	negs	r2, r0
 800051c:	418b      	sbcs	r3, r1
 800051e:	e7f2      	b.n	8000506 <__aeabi_d2lz+0x22>

08000520 <__aeabi_d2ulz>:
 8000520:	b570      	push	{r4, r5, r6, lr}
 8000522:	2200      	movs	r2, #0
 8000524:	4b0b      	ldr	r3, [pc, #44]	; (8000554 <__aeabi_d2ulz+0x34>)
 8000526:	000d      	movs	r5, r1
 8000528:	0004      	movs	r4, r0
 800052a:	f001 f8d7 	bl	80016dc <__aeabi_dmul>
 800052e:	f7ff ffbb 	bl	80004a8 <__aeabi_d2uiz>
 8000532:	0006      	movs	r6, r0
 8000534:	f001 ff54 	bl	80023e0 <__aeabi_ui2d>
 8000538:	2200      	movs	r2, #0
 800053a:	4b07      	ldr	r3, [pc, #28]	; (8000558 <__aeabi_d2ulz+0x38>)
 800053c:	f001 f8ce 	bl	80016dc <__aeabi_dmul>
 8000540:	0002      	movs	r2, r0
 8000542:	000b      	movs	r3, r1
 8000544:	0020      	movs	r0, r4
 8000546:	0029      	movs	r1, r5
 8000548:	f001 fb34 	bl	8001bb4 <__aeabi_dsub>
 800054c:	f7ff ffac 	bl	80004a8 <__aeabi_d2uiz>
 8000550:	0031      	movs	r1, r6
 8000552:	bd70      	pop	{r4, r5, r6, pc}
 8000554:	3df00000 	.word	0x3df00000
 8000558:	41f00000 	.word	0x41f00000

0800055c <__aeabi_l2d>:
 800055c:	b570      	push	{r4, r5, r6, lr}
 800055e:	0006      	movs	r6, r0
 8000560:	0008      	movs	r0, r1
 8000562:	f001 ff0d 	bl	8002380 <__aeabi_i2d>
 8000566:	2200      	movs	r2, #0
 8000568:	4b06      	ldr	r3, [pc, #24]	; (8000584 <__aeabi_l2d+0x28>)
 800056a:	f001 f8b7 	bl	80016dc <__aeabi_dmul>
 800056e:	000d      	movs	r5, r1
 8000570:	0004      	movs	r4, r0
 8000572:	0030      	movs	r0, r6
 8000574:	f001 ff34 	bl	80023e0 <__aeabi_ui2d>
 8000578:	002b      	movs	r3, r5
 800057a:	0022      	movs	r2, r4
 800057c:	f000 f93e 	bl	80007fc <__aeabi_dadd>
 8000580:	bd70      	pop	{r4, r5, r6, pc}
 8000582:	46c0      	nop			; (mov r8, r8)
 8000584:	41f00000 	.word	0x41f00000

08000588 <__aeabi_fmul>:
 8000588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800058a:	4657      	mov	r7, sl
 800058c:	464e      	mov	r6, r9
 800058e:	4645      	mov	r5, r8
 8000590:	46de      	mov	lr, fp
 8000592:	0244      	lsls	r4, r0, #9
 8000594:	b5e0      	push	{r5, r6, r7, lr}
 8000596:	0045      	lsls	r5, r0, #1
 8000598:	1c0f      	adds	r7, r1, #0
 800059a:	0a64      	lsrs	r4, r4, #9
 800059c:	0e2d      	lsrs	r5, r5, #24
 800059e:	0fc6      	lsrs	r6, r0, #31
 80005a0:	2d00      	cmp	r5, #0
 80005a2:	d047      	beq.n	8000634 <__aeabi_fmul+0xac>
 80005a4:	2dff      	cmp	r5, #255	; 0xff
 80005a6:	d04d      	beq.n	8000644 <__aeabi_fmul+0xbc>
 80005a8:	2300      	movs	r3, #0
 80005aa:	2080      	movs	r0, #128	; 0x80
 80005ac:	469a      	mov	sl, r3
 80005ae:	469b      	mov	fp, r3
 80005b0:	00e4      	lsls	r4, r4, #3
 80005b2:	04c0      	lsls	r0, r0, #19
 80005b4:	4304      	orrs	r4, r0
 80005b6:	3d7f      	subs	r5, #127	; 0x7f
 80005b8:	0278      	lsls	r0, r7, #9
 80005ba:	0a43      	lsrs	r3, r0, #9
 80005bc:	4699      	mov	r9, r3
 80005be:	007a      	lsls	r2, r7, #1
 80005c0:	0ffb      	lsrs	r3, r7, #31
 80005c2:	4698      	mov	r8, r3
 80005c4:	0e12      	lsrs	r2, r2, #24
 80005c6:	464b      	mov	r3, r9
 80005c8:	d044      	beq.n	8000654 <__aeabi_fmul+0xcc>
 80005ca:	2aff      	cmp	r2, #255	; 0xff
 80005cc:	d011      	beq.n	80005f2 <__aeabi_fmul+0x6a>
 80005ce:	00d8      	lsls	r0, r3, #3
 80005d0:	2380      	movs	r3, #128	; 0x80
 80005d2:	04db      	lsls	r3, r3, #19
 80005d4:	4303      	orrs	r3, r0
 80005d6:	4699      	mov	r9, r3
 80005d8:	2000      	movs	r0, #0
 80005da:	3a7f      	subs	r2, #127	; 0x7f
 80005dc:	18ad      	adds	r5, r5, r2
 80005de:	4647      	mov	r7, r8
 80005e0:	4653      	mov	r3, sl
 80005e2:	4077      	eors	r7, r6
 80005e4:	1c69      	adds	r1, r5, #1
 80005e6:	2b0f      	cmp	r3, #15
 80005e8:	d83f      	bhi.n	800066a <__aeabi_fmul+0xe2>
 80005ea:	4a72      	ldr	r2, [pc, #456]	; (80007b4 <__aeabi_fmul+0x22c>)
 80005ec:	009b      	lsls	r3, r3, #2
 80005ee:	58d3      	ldr	r3, [r2, r3]
 80005f0:	469f      	mov	pc, r3
 80005f2:	35ff      	adds	r5, #255	; 0xff
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d000      	beq.n	80005fa <__aeabi_fmul+0x72>
 80005f8:	e079      	b.n	80006ee <__aeabi_fmul+0x166>
 80005fa:	4652      	mov	r2, sl
 80005fc:	2302      	movs	r3, #2
 80005fe:	431a      	orrs	r2, r3
 8000600:	4692      	mov	sl, r2
 8000602:	2002      	movs	r0, #2
 8000604:	e7eb      	b.n	80005de <__aeabi_fmul+0x56>
 8000606:	4647      	mov	r7, r8
 8000608:	464c      	mov	r4, r9
 800060a:	4683      	mov	fp, r0
 800060c:	465b      	mov	r3, fp
 800060e:	2b02      	cmp	r3, #2
 8000610:	d028      	beq.n	8000664 <__aeabi_fmul+0xdc>
 8000612:	2b03      	cmp	r3, #3
 8000614:	d100      	bne.n	8000618 <__aeabi_fmul+0x90>
 8000616:	e0c6      	b.n	80007a6 <__aeabi_fmul+0x21e>
 8000618:	2b01      	cmp	r3, #1
 800061a:	d14f      	bne.n	80006bc <__aeabi_fmul+0x134>
 800061c:	2000      	movs	r0, #0
 800061e:	2400      	movs	r4, #0
 8000620:	05c0      	lsls	r0, r0, #23
 8000622:	07ff      	lsls	r7, r7, #31
 8000624:	4320      	orrs	r0, r4
 8000626:	4338      	orrs	r0, r7
 8000628:	bcf0      	pop	{r4, r5, r6, r7}
 800062a:	46bb      	mov	fp, r7
 800062c:	46b2      	mov	sl, r6
 800062e:	46a9      	mov	r9, r5
 8000630:	46a0      	mov	r8, r4
 8000632:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000634:	2c00      	cmp	r4, #0
 8000636:	d171      	bne.n	800071c <__aeabi_fmul+0x194>
 8000638:	2304      	movs	r3, #4
 800063a:	469a      	mov	sl, r3
 800063c:	3b03      	subs	r3, #3
 800063e:	2500      	movs	r5, #0
 8000640:	469b      	mov	fp, r3
 8000642:	e7b9      	b.n	80005b8 <__aeabi_fmul+0x30>
 8000644:	2c00      	cmp	r4, #0
 8000646:	d163      	bne.n	8000710 <__aeabi_fmul+0x188>
 8000648:	2308      	movs	r3, #8
 800064a:	469a      	mov	sl, r3
 800064c:	3b06      	subs	r3, #6
 800064e:	25ff      	movs	r5, #255	; 0xff
 8000650:	469b      	mov	fp, r3
 8000652:	e7b1      	b.n	80005b8 <__aeabi_fmul+0x30>
 8000654:	2b00      	cmp	r3, #0
 8000656:	d150      	bne.n	80006fa <__aeabi_fmul+0x172>
 8000658:	4652      	mov	r2, sl
 800065a:	3301      	adds	r3, #1
 800065c:	431a      	orrs	r2, r3
 800065e:	4692      	mov	sl, r2
 8000660:	2001      	movs	r0, #1
 8000662:	e7bc      	b.n	80005de <__aeabi_fmul+0x56>
 8000664:	20ff      	movs	r0, #255	; 0xff
 8000666:	2400      	movs	r4, #0
 8000668:	e7da      	b.n	8000620 <__aeabi_fmul+0x98>
 800066a:	4648      	mov	r0, r9
 800066c:	0c26      	lsrs	r6, r4, #16
 800066e:	0424      	lsls	r4, r4, #16
 8000670:	0c22      	lsrs	r2, r4, #16
 8000672:	0404      	lsls	r4, r0, #16
 8000674:	0c24      	lsrs	r4, r4, #16
 8000676:	464b      	mov	r3, r9
 8000678:	0020      	movs	r0, r4
 800067a:	0c1b      	lsrs	r3, r3, #16
 800067c:	4350      	muls	r0, r2
 800067e:	4374      	muls	r4, r6
 8000680:	435a      	muls	r2, r3
 8000682:	435e      	muls	r6, r3
 8000684:	1912      	adds	r2, r2, r4
 8000686:	0c03      	lsrs	r3, r0, #16
 8000688:	189b      	adds	r3, r3, r2
 800068a:	429c      	cmp	r4, r3
 800068c:	d903      	bls.n	8000696 <__aeabi_fmul+0x10e>
 800068e:	2280      	movs	r2, #128	; 0x80
 8000690:	0252      	lsls	r2, r2, #9
 8000692:	4694      	mov	ip, r2
 8000694:	4466      	add	r6, ip
 8000696:	0400      	lsls	r0, r0, #16
 8000698:	041a      	lsls	r2, r3, #16
 800069a:	0c00      	lsrs	r0, r0, #16
 800069c:	1812      	adds	r2, r2, r0
 800069e:	0194      	lsls	r4, r2, #6
 80006a0:	1e60      	subs	r0, r4, #1
 80006a2:	4184      	sbcs	r4, r0
 80006a4:	0c1b      	lsrs	r3, r3, #16
 80006a6:	0e92      	lsrs	r2, r2, #26
 80006a8:	199b      	adds	r3, r3, r6
 80006aa:	4314      	orrs	r4, r2
 80006ac:	019b      	lsls	r3, r3, #6
 80006ae:	431c      	orrs	r4, r3
 80006b0:	011b      	lsls	r3, r3, #4
 80006b2:	d572      	bpl.n	800079a <__aeabi_fmul+0x212>
 80006b4:	2001      	movs	r0, #1
 80006b6:	0863      	lsrs	r3, r4, #1
 80006b8:	4004      	ands	r4, r0
 80006ba:	431c      	orrs	r4, r3
 80006bc:	0008      	movs	r0, r1
 80006be:	307f      	adds	r0, #127	; 0x7f
 80006c0:	2800      	cmp	r0, #0
 80006c2:	dd3c      	ble.n	800073e <__aeabi_fmul+0x1b6>
 80006c4:	0763      	lsls	r3, r4, #29
 80006c6:	d004      	beq.n	80006d2 <__aeabi_fmul+0x14a>
 80006c8:	230f      	movs	r3, #15
 80006ca:	4023      	ands	r3, r4
 80006cc:	2b04      	cmp	r3, #4
 80006ce:	d000      	beq.n	80006d2 <__aeabi_fmul+0x14a>
 80006d0:	3404      	adds	r4, #4
 80006d2:	0123      	lsls	r3, r4, #4
 80006d4:	d503      	bpl.n	80006de <__aeabi_fmul+0x156>
 80006d6:	3180      	adds	r1, #128	; 0x80
 80006d8:	0008      	movs	r0, r1
 80006da:	4b37      	ldr	r3, [pc, #220]	; (80007b8 <__aeabi_fmul+0x230>)
 80006dc:	401c      	ands	r4, r3
 80006de:	28fe      	cmp	r0, #254	; 0xfe
 80006e0:	dcc0      	bgt.n	8000664 <__aeabi_fmul+0xdc>
 80006e2:	01a4      	lsls	r4, r4, #6
 80006e4:	0a64      	lsrs	r4, r4, #9
 80006e6:	b2c0      	uxtb	r0, r0
 80006e8:	e79a      	b.n	8000620 <__aeabi_fmul+0x98>
 80006ea:	0037      	movs	r7, r6
 80006ec:	e78e      	b.n	800060c <__aeabi_fmul+0x84>
 80006ee:	4652      	mov	r2, sl
 80006f0:	2303      	movs	r3, #3
 80006f2:	431a      	orrs	r2, r3
 80006f4:	4692      	mov	sl, r2
 80006f6:	2003      	movs	r0, #3
 80006f8:	e771      	b.n	80005de <__aeabi_fmul+0x56>
 80006fa:	4648      	mov	r0, r9
 80006fc:	f001 ff1e 	bl	800253c <__clzsi2>
 8000700:	464a      	mov	r2, r9
 8000702:	1f43      	subs	r3, r0, #5
 8000704:	409a      	lsls	r2, r3
 8000706:	1a2d      	subs	r5, r5, r0
 8000708:	4691      	mov	r9, r2
 800070a:	2000      	movs	r0, #0
 800070c:	3d76      	subs	r5, #118	; 0x76
 800070e:	e766      	b.n	80005de <__aeabi_fmul+0x56>
 8000710:	230c      	movs	r3, #12
 8000712:	469a      	mov	sl, r3
 8000714:	3b09      	subs	r3, #9
 8000716:	25ff      	movs	r5, #255	; 0xff
 8000718:	469b      	mov	fp, r3
 800071a:	e74d      	b.n	80005b8 <__aeabi_fmul+0x30>
 800071c:	0020      	movs	r0, r4
 800071e:	f001 ff0d 	bl	800253c <__clzsi2>
 8000722:	2576      	movs	r5, #118	; 0x76
 8000724:	1f43      	subs	r3, r0, #5
 8000726:	409c      	lsls	r4, r3
 8000728:	2300      	movs	r3, #0
 800072a:	426d      	negs	r5, r5
 800072c:	469a      	mov	sl, r3
 800072e:	469b      	mov	fp, r3
 8000730:	1a2d      	subs	r5, r5, r0
 8000732:	e741      	b.n	80005b8 <__aeabi_fmul+0x30>
 8000734:	2480      	movs	r4, #128	; 0x80
 8000736:	2700      	movs	r7, #0
 8000738:	20ff      	movs	r0, #255	; 0xff
 800073a:	03e4      	lsls	r4, r4, #15
 800073c:	e770      	b.n	8000620 <__aeabi_fmul+0x98>
 800073e:	2301      	movs	r3, #1
 8000740:	1a1b      	subs	r3, r3, r0
 8000742:	2b1b      	cmp	r3, #27
 8000744:	dd00      	ble.n	8000748 <__aeabi_fmul+0x1c0>
 8000746:	e769      	b.n	800061c <__aeabi_fmul+0x94>
 8000748:	319e      	adds	r1, #158	; 0x9e
 800074a:	0020      	movs	r0, r4
 800074c:	408c      	lsls	r4, r1
 800074e:	40d8      	lsrs	r0, r3
 8000750:	1e63      	subs	r3, r4, #1
 8000752:	419c      	sbcs	r4, r3
 8000754:	4304      	orrs	r4, r0
 8000756:	0763      	lsls	r3, r4, #29
 8000758:	d004      	beq.n	8000764 <__aeabi_fmul+0x1dc>
 800075a:	230f      	movs	r3, #15
 800075c:	4023      	ands	r3, r4
 800075e:	2b04      	cmp	r3, #4
 8000760:	d000      	beq.n	8000764 <__aeabi_fmul+0x1dc>
 8000762:	3404      	adds	r4, #4
 8000764:	0163      	lsls	r3, r4, #5
 8000766:	d51a      	bpl.n	800079e <__aeabi_fmul+0x216>
 8000768:	2001      	movs	r0, #1
 800076a:	2400      	movs	r4, #0
 800076c:	e758      	b.n	8000620 <__aeabi_fmul+0x98>
 800076e:	2080      	movs	r0, #128	; 0x80
 8000770:	03c0      	lsls	r0, r0, #15
 8000772:	4204      	tst	r4, r0
 8000774:	d009      	beq.n	800078a <__aeabi_fmul+0x202>
 8000776:	464b      	mov	r3, r9
 8000778:	4203      	tst	r3, r0
 800077a:	d106      	bne.n	800078a <__aeabi_fmul+0x202>
 800077c:	464c      	mov	r4, r9
 800077e:	4304      	orrs	r4, r0
 8000780:	0264      	lsls	r4, r4, #9
 8000782:	4647      	mov	r7, r8
 8000784:	20ff      	movs	r0, #255	; 0xff
 8000786:	0a64      	lsrs	r4, r4, #9
 8000788:	e74a      	b.n	8000620 <__aeabi_fmul+0x98>
 800078a:	2080      	movs	r0, #128	; 0x80
 800078c:	03c0      	lsls	r0, r0, #15
 800078e:	4304      	orrs	r4, r0
 8000790:	0264      	lsls	r4, r4, #9
 8000792:	0037      	movs	r7, r6
 8000794:	20ff      	movs	r0, #255	; 0xff
 8000796:	0a64      	lsrs	r4, r4, #9
 8000798:	e742      	b.n	8000620 <__aeabi_fmul+0x98>
 800079a:	0029      	movs	r1, r5
 800079c:	e78e      	b.n	80006bc <__aeabi_fmul+0x134>
 800079e:	01a4      	lsls	r4, r4, #6
 80007a0:	2000      	movs	r0, #0
 80007a2:	0a64      	lsrs	r4, r4, #9
 80007a4:	e73c      	b.n	8000620 <__aeabi_fmul+0x98>
 80007a6:	2080      	movs	r0, #128	; 0x80
 80007a8:	03c0      	lsls	r0, r0, #15
 80007aa:	4304      	orrs	r4, r0
 80007ac:	0264      	lsls	r4, r4, #9
 80007ae:	20ff      	movs	r0, #255	; 0xff
 80007b0:	0a64      	lsrs	r4, r4, #9
 80007b2:	e735      	b.n	8000620 <__aeabi_fmul+0x98>
 80007b4:	0800ca58 	.word	0x0800ca58
 80007b8:	f7ffffff 	.word	0xf7ffffff

080007bc <__aeabi_f2iz>:
 80007bc:	0241      	lsls	r1, r0, #9
 80007be:	0042      	lsls	r2, r0, #1
 80007c0:	0fc3      	lsrs	r3, r0, #31
 80007c2:	0a49      	lsrs	r1, r1, #9
 80007c4:	2000      	movs	r0, #0
 80007c6:	0e12      	lsrs	r2, r2, #24
 80007c8:	2a7e      	cmp	r2, #126	; 0x7e
 80007ca:	d903      	bls.n	80007d4 <__aeabi_f2iz+0x18>
 80007cc:	2a9d      	cmp	r2, #157	; 0x9d
 80007ce:	d902      	bls.n	80007d6 <__aeabi_f2iz+0x1a>
 80007d0:	4a09      	ldr	r2, [pc, #36]	; (80007f8 <__aeabi_f2iz+0x3c>)
 80007d2:	1898      	adds	r0, r3, r2
 80007d4:	4770      	bx	lr
 80007d6:	2080      	movs	r0, #128	; 0x80
 80007d8:	0400      	lsls	r0, r0, #16
 80007da:	4301      	orrs	r1, r0
 80007dc:	2a95      	cmp	r2, #149	; 0x95
 80007de:	dc07      	bgt.n	80007f0 <__aeabi_f2iz+0x34>
 80007e0:	2096      	movs	r0, #150	; 0x96
 80007e2:	1a82      	subs	r2, r0, r2
 80007e4:	40d1      	lsrs	r1, r2
 80007e6:	4248      	negs	r0, r1
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d1f3      	bne.n	80007d4 <__aeabi_f2iz+0x18>
 80007ec:	0008      	movs	r0, r1
 80007ee:	e7f1      	b.n	80007d4 <__aeabi_f2iz+0x18>
 80007f0:	3a96      	subs	r2, #150	; 0x96
 80007f2:	4091      	lsls	r1, r2
 80007f4:	e7f7      	b.n	80007e6 <__aeabi_f2iz+0x2a>
 80007f6:	46c0      	nop			; (mov r8, r8)
 80007f8:	7fffffff 	.word	0x7fffffff

080007fc <__aeabi_dadd>:
 80007fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007fe:	464f      	mov	r7, r9
 8000800:	46d6      	mov	lr, sl
 8000802:	4646      	mov	r6, r8
 8000804:	000d      	movs	r5, r1
 8000806:	0001      	movs	r1, r0
 8000808:	0018      	movs	r0, r3
 800080a:	b5c0      	push	{r6, r7, lr}
 800080c:	0017      	movs	r7, r2
 800080e:	032b      	lsls	r3, r5, #12
 8000810:	0a5a      	lsrs	r2, r3, #9
 8000812:	0f4b      	lsrs	r3, r1, #29
 8000814:	4313      	orrs	r3, r2
 8000816:	00ca      	lsls	r2, r1, #3
 8000818:	4691      	mov	r9, r2
 800081a:	0302      	lsls	r2, r0, #12
 800081c:	006e      	lsls	r6, r5, #1
 800081e:	0041      	lsls	r1, r0, #1
 8000820:	0a52      	lsrs	r2, r2, #9
 8000822:	0fec      	lsrs	r4, r5, #31
 8000824:	0f7d      	lsrs	r5, r7, #29
 8000826:	4315      	orrs	r5, r2
 8000828:	0d76      	lsrs	r6, r6, #21
 800082a:	0d49      	lsrs	r1, r1, #21
 800082c:	0fc0      	lsrs	r0, r0, #31
 800082e:	4682      	mov	sl, r0
 8000830:	46ac      	mov	ip, r5
 8000832:	00ff      	lsls	r7, r7, #3
 8000834:	1a72      	subs	r2, r6, r1
 8000836:	4284      	cmp	r4, r0
 8000838:	d100      	bne.n	800083c <__aeabi_dadd+0x40>
 800083a:	e098      	b.n	800096e <__aeabi_dadd+0x172>
 800083c:	2a00      	cmp	r2, #0
 800083e:	dc00      	bgt.n	8000842 <__aeabi_dadd+0x46>
 8000840:	e081      	b.n	8000946 <__aeabi_dadd+0x14a>
 8000842:	2900      	cmp	r1, #0
 8000844:	d100      	bne.n	8000848 <__aeabi_dadd+0x4c>
 8000846:	e0b6      	b.n	80009b6 <__aeabi_dadd+0x1ba>
 8000848:	49c9      	ldr	r1, [pc, #804]	; (8000b70 <__aeabi_dadd+0x374>)
 800084a:	428e      	cmp	r6, r1
 800084c:	d100      	bne.n	8000850 <__aeabi_dadd+0x54>
 800084e:	e172      	b.n	8000b36 <__aeabi_dadd+0x33a>
 8000850:	2180      	movs	r1, #128	; 0x80
 8000852:	0028      	movs	r0, r5
 8000854:	0409      	lsls	r1, r1, #16
 8000856:	4308      	orrs	r0, r1
 8000858:	4684      	mov	ip, r0
 800085a:	2a38      	cmp	r2, #56	; 0x38
 800085c:	dd00      	ble.n	8000860 <__aeabi_dadd+0x64>
 800085e:	e15e      	b.n	8000b1e <__aeabi_dadd+0x322>
 8000860:	2a1f      	cmp	r2, #31
 8000862:	dd00      	ble.n	8000866 <__aeabi_dadd+0x6a>
 8000864:	e1ee      	b.n	8000c44 <__aeabi_dadd+0x448>
 8000866:	2020      	movs	r0, #32
 8000868:	0039      	movs	r1, r7
 800086a:	4665      	mov	r5, ip
 800086c:	1a80      	subs	r0, r0, r2
 800086e:	4087      	lsls	r7, r0
 8000870:	40d1      	lsrs	r1, r2
 8000872:	4085      	lsls	r5, r0
 8000874:	430d      	orrs	r5, r1
 8000876:	0039      	movs	r1, r7
 8000878:	1e4f      	subs	r7, r1, #1
 800087a:	41b9      	sbcs	r1, r7
 800087c:	4667      	mov	r7, ip
 800087e:	40d7      	lsrs	r7, r2
 8000880:	4329      	orrs	r1, r5
 8000882:	1bdb      	subs	r3, r3, r7
 8000884:	464a      	mov	r2, r9
 8000886:	1a55      	subs	r5, r2, r1
 8000888:	45a9      	cmp	r9, r5
 800088a:	4189      	sbcs	r1, r1
 800088c:	4249      	negs	r1, r1
 800088e:	1a5b      	subs	r3, r3, r1
 8000890:	4698      	mov	r8, r3
 8000892:	4643      	mov	r3, r8
 8000894:	021b      	lsls	r3, r3, #8
 8000896:	d400      	bmi.n	800089a <__aeabi_dadd+0x9e>
 8000898:	e0cc      	b.n	8000a34 <__aeabi_dadd+0x238>
 800089a:	4643      	mov	r3, r8
 800089c:	025b      	lsls	r3, r3, #9
 800089e:	0a5b      	lsrs	r3, r3, #9
 80008a0:	4698      	mov	r8, r3
 80008a2:	4643      	mov	r3, r8
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d100      	bne.n	80008aa <__aeabi_dadd+0xae>
 80008a8:	e12c      	b.n	8000b04 <__aeabi_dadd+0x308>
 80008aa:	4640      	mov	r0, r8
 80008ac:	f001 fe46 	bl	800253c <__clzsi2>
 80008b0:	0001      	movs	r1, r0
 80008b2:	3908      	subs	r1, #8
 80008b4:	2220      	movs	r2, #32
 80008b6:	0028      	movs	r0, r5
 80008b8:	4643      	mov	r3, r8
 80008ba:	1a52      	subs	r2, r2, r1
 80008bc:	408b      	lsls	r3, r1
 80008be:	40d0      	lsrs	r0, r2
 80008c0:	408d      	lsls	r5, r1
 80008c2:	4303      	orrs	r3, r0
 80008c4:	428e      	cmp	r6, r1
 80008c6:	dd00      	ble.n	80008ca <__aeabi_dadd+0xce>
 80008c8:	e117      	b.n	8000afa <__aeabi_dadd+0x2fe>
 80008ca:	1b8e      	subs	r6, r1, r6
 80008cc:	1c72      	adds	r2, r6, #1
 80008ce:	2a1f      	cmp	r2, #31
 80008d0:	dd00      	ble.n	80008d4 <__aeabi_dadd+0xd8>
 80008d2:	e1a7      	b.n	8000c24 <__aeabi_dadd+0x428>
 80008d4:	2120      	movs	r1, #32
 80008d6:	0018      	movs	r0, r3
 80008d8:	002e      	movs	r6, r5
 80008da:	1a89      	subs	r1, r1, r2
 80008dc:	408d      	lsls	r5, r1
 80008de:	4088      	lsls	r0, r1
 80008e0:	40d6      	lsrs	r6, r2
 80008e2:	40d3      	lsrs	r3, r2
 80008e4:	1e69      	subs	r1, r5, #1
 80008e6:	418d      	sbcs	r5, r1
 80008e8:	4330      	orrs	r0, r6
 80008ea:	4698      	mov	r8, r3
 80008ec:	2600      	movs	r6, #0
 80008ee:	4305      	orrs	r5, r0
 80008f0:	076b      	lsls	r3, r5, #29
 80008f2:	d009      	beq.n	8000908 <__aeabi_dadd+0x10c>
 80008f4:	230f      	movs	r3, #15
 80008f6:	402b      	ands	r3, r5
 80008f8:	2b04      	cmp	r3, #4
 80008fa:	d005      	beq.n	8000908 <__aeabi_dadd+0x10c>
 80008fc:	1d2b      	adds	r3, r5, #4
 80008fe:	42ab      	cmp	r3, r5
 8000900:	41ad      	sbcs	r5, r5
 8000902:	426d      	negs	r5, r5
 8000904:	44a8      	add	r8, r5
 8000906:	001d      	movs	r5, r3
 8000908:	4643      	mov	r3, r8
 800090a:	021b      	lsls	r3, r3, #8
 800090c:	d400      	bmi.n	8000910 <__aeabi_dadd+0x114>
 800090e:	e094      	b.n	8000a3a <__aeabi_dadd+0x23e>
 8000910:	4b97      	ldr	r3, [pc, #604]	; (8000b70 <__aeabi_dadd+0x374>)
 8000912:	1c72      	adds	r2, r6, #1
 8000914:	429a      	cmp	r2, r3
 8000916:	d100      	bne.n	800091a <__aeabi_dadd+0x11e>
 8000918:	e09d      	b.n	8000a56 <__aeabi_dadd+0x25a>
 800091a:	4641      	mov	r1, r8
 800091c:	4b95      	ldr	r3, [pc, #596]	; (8000b74 <__aeabi_dadd+0x378>)
 800091e:	08ed      	lsrs	r5, r5, #3
 8000920:	4019      	ands	r1, r3
 8000922:	000b      	movs	r3, r1
 8000924:	0552      	lsls	r2, r2, #21
 8000926:	0749      	lsls	r1, r1, #29
 8000928:	025b      	lsls	r3, r3, #9
 800092a:	4329      	orrs	r1, r5
 800092c:	0b1b      	lsrs	r3, r3, #12
 800092e:	0d52      	lsrs	r2, r2, #21
 8000930:	0512      	lsls	r2, r2, #20
 8000932:	4313      	orrs	r3, r2
 8000934:	07e4      	lsls	r4, r4, #31
 8000936:	4323      	orrs	r3, r4
 8000938:	0008      	movs	r0, r1
 800093a:	0019      	movs	r1, r3
 800093c:	bce0      	pop	{r5, r6, r7}
 800093e:	46ba      	mov	sl, r7
 8000940:	46b1      	mov	r9, r6
 8000942:	46a8      	mov	r8, r5
 8000944:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000946:	2a00      	cmp	r2, #0
 8000948:	d043      	beq.n	80009d2 <__aeabi_dadd+0x1d6>
 800094a:	1b8a      	subs	r2, r1, r6
 800094c:	2e00      	cmp	r6, #0
 800094e:	d000      	beq.n	8000952 <__aeabi_dadd+0x156>
 8000950:	e12a      	b.n	8000ba8 <__aeabi_dadd+0x3ac>
 8000952:	464c      	mov	r4, r9
 8000954:	431c      	orrs	r4, r3
 8000956:	d100      	bne.n	800095a <__aeabi_dadd+0x15e>
 8000958:	e1d1      	b.n	8000cfe <__aeabi_dadd+0x502>
 800095a:	1e54      	subs	r4, r2, #1
 800095c:	2a01      	cmp	r2, #1
 800095e:	d100      	bne.n	8000962 <__aeabi_dadd+0x166>
 8000960:	e21f      	b.n	8000da2 <__aeabi_dadd+0x5a6>
 8000962:	4d83      	ldr	r5, [pc, #524]	; (8000b70 <__aeabi_dadd+0x374>)
 8000964:	42aa      	cmp	r2, r5
 8000966:	d100      	bne.n	800096a <__aeabi_dadd+0x16e>
 8000968:	e272      	b.n	8000e50 <__aeabi_dadd+0x654>
 800096a:	0022      	movs	r2, r4
 800096c:	e123      	b.n	8000bb6 <__aeabi_dadd+0x3ba>
 800096e:	2a00      	cmp	r2, #0
 8000970:	dc00      	bgt.n	8000974 <__aeabi_dadd+0x178>
 8000972:	e098      	b.n	8000aa6 <__aeabi_dadd+0x2aa>
 8000974:	2900      	cmp	r1, #0
 8000976:	d042      	beq.n	80009fe <__aeabi_dadd+0x202>
 8000978:	497d      	ldr	r1, [pc, #500]	; (8000b70 <__aeabi_dadd+0x374>)
 800097a:	428e      	cmp	r6, r1
 800097c:	d100      	bne.n	8000980 <__aeabi_dadd+0x184>
 800097e:	e0da      	b.n	8000b36 <__aeabi_dadd+0x33a>
 8000980:	2180      	movs	r1, #128	; 0x80
 8000982:	0028      	movs	r0, r5
 8000984:	0409      	lsls	r1, r1, #16
 8000986:	4308      	orrs	r0, r1
 8000988:	4684      	mov	ip, r0
 800098a:	2a38      	cmp	r2, #56	; 0x38
 800098c:	dd00      	ble.n	8000990 <__aeabi_dadd+0x194>
 800098e:	e129      	b.n	8000be4 <__aeabi_dadd+0x3e8>
 8000990:	2a1f      	cmp	r2, #31
 8000992:	dc00      	bgt.n	8000996 <__aeabi_dadd+0x19a>
 8000994:	e187      	b.n	8000ca6 <__aeabi_dadd+0x4aa>
 8000996:	0011      	movs	r1, r2
 8000998:	4665      	mov	r5, ip
 800099a:	3920      	subs	r1, #32
 800099c:	40cd      	lsrs	r5, r1
 800099e:	2a20      	cmp	r2, #32
 80009a0:	d004      	beq.n	80009ac <__aeabi_dadd+0x1b0>
 80009a2:	2040      	movs	r0, #64	; 0x40
 80009a4:	4661      	mov	r1, ip
 80009a6:	1a82      	subs	r2, r0, r2
 80009a8:	4091      	lsls	r1, r2
 80009aa:	430f      	orrs	r7, r1
 80009ac:	0039      	movs	r1, r7
 80009ae:	1e4f      	subs	r7, r1, #1
 80009b0:	41b9      	sbcs	r1, r7
 80009b2:	430d      	orrs	r5, r1
 80009b4:	e11b      	b.n	8000bee <__aeabi_dadd+0x3f2>
 80009b6:	0029      	movs	r1, r5
 80009b8:	4339      	orrs	r1, r7
 80009ba:	d100      	bne.n	80009be <__aeabi_dadd+0x1c2>
 80009bc:	e0b5      	b.n	8000b2a <__aeabi_dadd+0x32e>
 80009be:	1e51      	subs	r1, r2, #1
 80009c0:	2a01      	cmp	r2, #1
 80009c2:	d100      	bne.n	80009c6 <__aeabi_dadd+0x1ca>
 80009c4:	e1ab      	b.n	8000d1e <__aeabi_dadd+0x522>
 80009c6:	486a      	ldr	r0, [pc, #424]	; (8000b70 <__aeabi_dadd+0x374>)
 80009c8:	4282      	cmp	r2, r0
 80009ca:	d100      	bne.n	80009ce <__aeabi_dadd+0x1d2>
 80009cc:	e1b2      	b.n	8000d34 <__aeabi_dadd+0x538>
 80009ce:	000a      	movs	r2, r1
 80009d0:	e743      	b.n	800085a <__aeabi_dadd+0x5e>
 80009d2:	4969      	ldr	r1, [pc, #420]	; (8000b78 <__aeabi_dadd+0x37c>)
 80009d4:	1c75      	adds	r5, r6, #1
 80009d6:	420d      	tst	r5, r1
 80009d8:	d000      	beq.n	80009dc <__aeabi_dadd+0x1e0>
 80009da:	e0cf      	b.n	8000b7c <__aeabi_dadd+0x380>
 80009dc:	2e00      	cmp	r6, #0
 80009de:	d000      	beq.n	80009e2 <__aeabi_dadd+0x1e6>
 80009e0:	e193      	b.n	8000d0a <__aeabi_dadd+0x50e>
 80009e2:	4649      	mov	r1, r9
 80009e4:	4319      	orrs	r1, r3
 80009e6:	d100      	bne.n	80009ea <__aeabi_dadd+0x1ee>
 80009e8:	e1d1      	b.n	8000d8e <__aeabi_dadd+0x592>
 80009ea:	4661      	mov	r1, ip
 80009ec:	4339      	orrs	r1, r7
 80009ee:	d000      	beq.n	80009f2 <__aeabi_dadd+0x1f6>
 80009f0:	e1e3      	b.n	8000dba <__aeabi_dadd+0x5be>
 80009f2:	4649      	mov	r1, r9
 80009f4:	0758      	lsls	r0, r3, #29
 80009f6:	08c9      	lsrs	r1, r1, #3
 80009f8:	4301      	orrs	r1, r0
 80009fa:	08db      	lsrs	r3, r3, #3
 80009fc:	e026      	b.n	8000a4c <__aeabi_dadd+0x250>
 80009fe:	0029      	movs	r1, r5
 8000a00:	4339      	orrs	r1, r7
 8000a02:	d100      	bne.n	8000a06 <__aeabi_dadd+0x20a>
 8000a04:	e091      	b.n	8000b2a <__aeabi_dadd+0x32e>
 8000a06:	1e51      	subs	r1, r2, #1
 8000a08:	2a01      	cmp	r2, #1
 8000a0a:	d005      	beq.n	8000a18 <__aeabi_dadd+0x21c>
 8000a0c:	4858      	ldr	r0, [pc, #352]	; (8000b70 <__aeabi_dadd+0x374>)
 8000a0e:	4282      	cmp	r2, r0
 8000a10:	d100      	bne.n	8000a14 <__aeabi_dadd+0x218>
 8000a12:	e18f      	b.n	8000d34 <__aeabi_dadd+0x538>
 8000a14:	000a      	movs	r2, r1
 8000a16:	e7b8      	b.n	800098a <__aeabi_dadd+0x18e>
 8000a18:	003d      	movs	r5, r7
 8000a1a:	444d      	add	r5, r9
 8000a1c:	454d      	cmp	r5, r9
 8000a1e:	4189      	sbcs	r1, r1
 8000a20:	4463      	add	r3, ip
 8000a22:	4698      	mov	r8, r3
 8000a24:	4249      	negs	r1, r1
 8000a26:	4488      	add	r8, r1
 8000a28:	4643      	mov	r3, r8
 8000a2a:	2602      	movs	r6, #2
 8000a2c:	021b      	lsls	r3, r3, #8
 8000a2e:	d500      	bpl.n	8000a32 <__aeabi_dadd+0x236>
 8000a30:	e0eb      	b.n	8000c0a <__aeabi_dadd+0x40e>
 8000a32:	3e01      	subs	r6, #1
 8000a34:	076b      	lsls	r3, r5, #29
 8000a36:	d000      	beq.n	8000a3a <__aeabi_dadd+0x23e>
 8000a38:	e75c      	b.n	80008f4 <__aeabi_dadd+0xf8>
 8000a3a:	4643      	mov	r3, r8
 8000a3c:	08e9      	lsrs	r1, r5, #3
 8000a3e:	075a      	lsls	r2, r3, #29
 8000a40:	4311      	orrs	r1, r2
 8000a42:	0032      	movs	r2, r6
 8000a44:	08db      	lsrs	r3, r3, #3
 8000a46:	484a      	ldr	r0, [pc, #296]	; (8000b70 <__aeabi_dadd+0x374>)
 8000a48:	4282      	cmp	r2, r0
 8000a4a:	d021      	beq.n	8000a90 <__aeabi_dadd+0x294>
 8000a4c:	031b      	lsls	r3, r3, #12
 8000a4e:	0552      	lsls	r2, r2, #21
 8000a50:	0b1b      	lsrs	r3, r3, #12
 8000a52:	0d52      	lsrs	r2, r2, #21
 8000a54:	e76c      	b.n	8000930 <__aeabi_dadd+0x134>
 8000a56:	2300      	movs	r3, #0
 8000a58:	2100      	movs	r1, #0
 8000a5a:	e769      	b.n	8000930 <__aeabi_dadd+0x134>
 8000a5c:	002a      	movs	r2, r5
 8000a5e:	433a      	orrs	r2, r7
 8000a60:	d069      	beq.n	8000b36 <__aeabi_dadd+0x33a>
 8000a62:	464a      	mov	r2, r9
 8000a64:	0758      	lsls	r0, r3, #29
 8000a66:	08d1      	lsrs	r1, r2, #3
 8000a68:	08da      	lsrs	r2, r3, #3
 8000a6a:	2380      	movs	r3, #128	; 0x80
 8000a6c:	031b      	lsls	r3, r3, #12
 8000a6e:	4308      	orrs	r0, r1
 8000a70:	421a      	tst	r2, r3
 8000a72:	d007      	beq.n	8000a84 <__aeabi_dadd+0x288>
 8000a74:	0029      	movs	r1, r5
 8000a76:	08ed      	lsrs	r5, r5, #3
 8000a78:	421d      	tst	r5, r3
 8000a7a:	d103      	bne.n	8000a84 <__aeabi_dadd+0x288>
 8000a7c:	002a      	movs	r2, r5
 8000a7e:	08ff      	lsrs	r7, r7, #3
 8000a80:	0748      	lsls	r0, r1, #29
 8000a82:	4338      	orrs	r0, r7
 8000a84:	0f43      	lsrs	r3, r0, #29
 8000a86:	00c1      	lsls	r1, r0, #3
 8000a88:	075b      	lsls	r3, r3, #29
 8000a8a:	08c9      	lsrs	r1, r1, #3
 8000a8c:	4319      	orrs	r1, r3
 8000a8e:	0013      	movs	r3, r2
 8000a90:	000a      	movs	r2, r1
 8000a92:	431a      	orrs	r2, r3
 8000a94:	d100      	bne.n	8000a98 <__aeabi_dadd+0x29c>
 8000a96:	e213      	b.n	8000ec0 <__aeabi_dadd+0x6c4>
 8000a98:	2280      	movs	r2, #128	; 0x80
 8000a9a:	0312      	lsls	r2, r2, #12
 8000a9c:	4313      	orrs	r3, r2
 8000a9e:	031b      	lsls	r3, r3, #12
 8000aa0:	4a33      	ldr	r2, [pc, #204]	; (8000b70 <__aeabi_dadd+0x374>)
 8000aa2:	0b1b      	lsrs	r3, r3, #12
 8000aa4:	e744      	b.n	8000930 <__aeabi_dadd+0x134>
 8000aa6:	2a00      	cmp	r2, #0
 8000aa8:	d04b      	beq.n	8000b42 <__aeabi_dadd+0x346>
 8000aaa:	1b8a      	subs	r2, r1, r6
 8000aac:	2e00      	cmp	r6, #0
 8000aae:	d100      	bne.n	8000ab2 <__aeabi_dadd+0x2b6>
 8000ab0:	e0e7      	b.n	8000c82 <__aeabi_dadd+0x486>
 8000ab2:	482f      	ldr	r0, [pc, #188]	; (8000b70 <__aeabi_dadd+0x374>)
 8000ab4:	4281      	cmp	r1, r0
 8000ab6:	d100      	bne.n	8000aba <__aeabi_dadd+0x2be>
 8000ab8:	e195      	b.n	8000de6 <__aeabi_dadd+0x5ea>
 8000aba:	2080      	movs	r0, #128	; 0x80
 8000abc:	0400      	lsls	r0, r0, #16
 8000abe:	4303      	orrs	r3, r0
 8000ac0:	2a38      	cmp	r2, #56	; 0x38
 8000ac2:	dd00      	ble.n	8000ac6 <__aeabi_dadd+0x2ca>
 8000ac4:	e143      	b.n	8000d4e <__aeabi_dadd+0x552>
 8000ac6:	2a1f      	cmp	r2, #31
 8000ac8:	dd00      	ble.n	8000acc <__aeabi_dadd+0x2d0>
 8000aca:	e1db      	b.n	8000e84 <__aeabi_dadd+0x688>
 8000acc:	2020      	movs	r0, #32
 8000ace:	001d      	movs	r5, r3
 8000ad0:	464e      	mov	r6, r9
 8000ad2:	1a80      	subs	r0, r0, r2
 8000ad4:	4085      	lsls	r5, r0
 8000ad6:	40d6      	lsrs	r6, r2
 8000ad8:	4335      	orrs	r5, r6
 8000ada:	464e      	mov	r6, r9
 8000adc:	4086      	lsls	r6, r0
 8000ade:	0030      	movs	r0, r6
 8000ae0:	40d3      	lsrs	r3, r2
 8000ae2:	1e46      	subs	r6, r0, #1
 8000ae4:	41b0      	sbcs	r0, r6
 8000ae6:	449c      	add	ip, r3
 8000ae8:	4305      	orrs	r5, r0
 8000aea:	19ed      	adds	r5, r5, r7
 8000aec:	42bd      	cmp	r5, r7
 8000aee:	419b      	sbcs	r3, r3
 8000af0:	425b      	negs	r3, r3
 8000af2:	4463      	add	r3, ip
 8000af4:	4698      	mov	r8, r3
 8000af6:	000e      	movs	r6, r1
 8000af8:	e07f      	b.n	8000bfa <__aeabi_dadd+0x3fe>
 8000afa:	4a1e      	ldr	r2, [pc, #120]	; (8000b74 <__aeabi_dadd+0x378>)
 8000afc:	1a76      	subs	r6, r6, r1
 8000afe:	4013      	ands	r3, r2
 8000b00:	4698      	mov	r8, r3
 8000b02:	e6f5      	b.n	80008f0 <__aeabi_dadd+0xf4>
 8000b04:	0028      	movs	r0, r5
 8000b06:	f001 fd19 	bl	800253c <__clzsi2>
 8000b0a:	0001      	movs	r1, r0
 8000b0c:	3118      	adds	r1, #24
 8000b0e:	291f      	cmp	r1, #31
 8000b10:	dc00      	bgt.n	8000b14 <__aeabi_dadd+0x318>
 8000b12:	e6cf      	b.n	80008b4 <__aeabi_dadd+0xb8>
 8000b14:	002b      	movs	r3, r5
 8000b16:	3808      	subs	r0, #8
 8000b18:	4083      	lsls	r3, r0
 8000b1a:	2500      	movs	r5, #0
 8000b1c:	e6d2      	b.n	80008c4 <__aeabi_dadd+0xc8>
 8000b1e:	4662      	mov	r2, ip
 8000b20:	433a      	orrs	r2, r7
 8000b22:	0011      	movs	r1, r2
 8000b24:	1e4f      	subs	r7, r1, #1
 8000b26:	41b9      	sbcs	r1, r7
 8000b28:	e6ac      	b.n	8000884 <__aeabi_dadd+0x88>
 8000b2a:	4649      	mov	r1, r9
 8000b2c:	0758      	lsls	r0, r3, #29
 8000b2e:	08c9      	lsrs	r1, r1, #3
 8000b30:	4301      	orrs	r1, r0
 8000b32:	08db      	lsrs	r3, r3, #3
 8000b34:	e787      	b.n	8000a46 <__aeabi_dadd+0x24a>
 8000b36:	4649      	mov	r1, r9
 8000b38:	075a      	lsls	r2, r3, #29
 8000b3a:	08c9      	lsrs	r1, r1, #3
 8000b3c:	4311      	orrs	r1, r2
 8000b3e:	08db      	lsrs	r3, r3, #3
 8000b40:	e7a6      	b.n	8000a90 <__aeabi_dadd+0x294>
 8000b42:	490d      	ldr	r1, [pc, #52]	; (8000b78 <__aeabi_dadd+0x37c>)
 8000b44:	1c70      	adds	r0, r6, #1
 8000b46:	4208      	tst	r0, r1
 8000b48:	d000      	beq.n	8000b4c <__aeabi_dadd+0x350>
 8000b4a:	e0bb      	b.n	8000cc4 <__aeabi_dadd+0x4c8>
 8000b4c:	2e00      	cmp	r6, #0
 8000b4e:	d000      	beq.n	8000b52 <__aeabi_dadd+0x356>
 8000b50:	e114      	b.n	8000d7c <__aeabi_dadd+0x580>
 8000b52:	4649      	mov	r1, r9
 8000b54:	4319      	orrs	r1, r3
 8000b56:	d100      	bne.n	8000b5a <__aeabi_dadd+0x35e>
 8000b58:	e175      	b.n	8000e46 <__aeabi_dadd+0x64a>
 8000b5a:	0029      	movs	r1, r5
 8000b5c:	4339      	orrs	r1, r7
 8000b5e:	d000      	beq.n	8000b62 <__aeabi_dadd+0x366>
 8000b60:	e17e      	b.n	8000e60 <__aeabi_dadd+0x664>
 8000b62:	4649      	mov	r1, r9
 8000b64:	0758      	lsls	r0, r3, #29
 8000b66:	08c9      	lsrs	r1, r1, #3
 8000b68:	4301      	orrs	r1, r0
 8000b6a:	08db      	lsrs	r3, r3, #3
 8000b6c:	e76e      	b.n	8000a4c <__aeabi_dadd+0x250>
 8000b6e:	46c0      	nop			; (mov r8, r8)
 8000b70:	000007ff 	.word	0x000007ff
 8000b74:	ff7fffff 	.word	0xff7fffff
 8000b78:	000007fe 	.word	0x000007fe
 8000b7c:	4649      	mov	r1, r9
 8000b7e:	1bcd      	subs	r5, r1, r7
 8000b80:	4661      	mov	r1, ip
 8000b82:	1a58      	subs	r0, r3, r1
 8000b84:	45a9      	cmp	r9, r5
 8000b86:	4189      	sbcs	r1, r1
 8000b88:	4249      	negs	r1, r1
 8000b8a:	4688      	mov	r8, r1
 8000b8c:	0001      	movs	r1, r0
 8000b8e:	4640      	mov	r0, r8
 8000b90:	1a09      	subs	r1, r1, r0
 8000b92:	4688      	mov	r8, r1
 8000b94:	0209      	lsls	r1, r1, #8
 8000b96:	d500      	bpl.n	8000b9a <__aeabi_dadd+0x39e>
 8000b98:	e0a6      	b.n	8000ce8 <__aeabi_dadd+0x4ec>
 8000b9a:	4641      	mov	r1, r8
 8000b9c:	4329      	orrs	r1, r5
 8000b9e:	d000      	beq.n	8000ba2 <__aeabi_dadd+0x3a6>
 8000ba0:	e67f      	b.n	80008a2 <__aeabi_dadd+0xa6>
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	2400      	movs	r4, #0
 8000ba6:	e751      	b.n	8000a4c <__aeabi_dadd+0x250>
 8000ba8:	4cc7      	ldr	r4, [pc, #796]	; (8000ec8 <__aeabi_dadd+0x6cc>)
 8000baa:	42a1      	cmp	r1, r4
 8000bac:	d100      	bne.n	8000bb0 <__aeabi_dadd+0x3b4>
 8000bae:	e0c7      	b.n	8000d40 <__aeabi_dadd+0x544>
 8000bb0:	2480      	movs	r4, #128	; 0x80
 8000bb2:	0424      	lsls	r4, r4, #16
 8000bb4:	4323      	orrs	r3, r4
 8000bb6:	2a38      	cmp	r2, #56	; 0x38
 8000bb8:	dc54      	bgt.n	8000c64 <__aeabi_dadd+0x468>
 8000bba:	2a1f      	cmp	r2, #31
 8000bbc:	dd00      	ble.n	8000bc0 <__aeabi_dadd+0x3c4>
 8000bbe:	e0cc      	b.n	8000d5a <__aeabi_dadd+0x55e>
 8000bc0:	2420      	movs	r4, #32
 8000bc2:	4648      	mov	r0, r9
 8000bc4:	1aa4      	subs	r4, r4, r2
 8000bc6:	001d      	movs	r5, r3
 8000bc8:	464e      	mov	r6, r9
 8000bca:	40a0      	lsls	r0, r4
 8000bcc:	40d6      	lsrs	r6, r2
 8000bce:	40a5      	lsls	r5, r4
 8000bd0:	0004      	movs	r4, r0
 8000bd2:	40d3      	lsrs	r3, r2
 8000bd4:	4662      	mov	r2, ip
 8000bd6:	4335      	orrs	r5, r6
 8000bd8:	1e66      	subs	r6, r4, #1
 8000bda:	41b4      	sbcs	r4, r6
 8000bdc:	1ad3      	subs	r3, r2, r3
 8000bde:	469c      	mov	ip, r3
 8000be0:	4325      	orrs	r5, r4
 8000be2:	e044      	b.n	8000c6e <__aeabi_dadd+0x472>
 8000be4:	4662      	mov	r2, ip
 8000be6:	433a      	orrs	r2, r7
 8000be8:	0015      	movs	r5, r2
 8000bea:	1e6f      	subs	r7, r5, #1
 8000bec:	41bd      	sbcs	r5, r7
 8000bee:	444d      	add	r5, r9
 8000bf0:	454d      	cmp	r5, r9
 8000bf2:	4189      	sbcs	r1, r1
 8000bf4:	4249      	negs	r1, r1
 8000bf6:	4688      	mov	r8, r1
 8000bf8:	4498      	add	r8, r3
 8000bfa:	4643      	mov	r3, r8
 8000bfc:	021b      	lsls	r3, r3, #8
 8000bfe:	d400      	bmi.n	8000c02 <__aeabi_dadd+0x406>
 8000c00:	e718      	b.n	8000a34 <__aeabi_dadd+0x238>
 8000c02:	4bb1      	ldr	r3, [pc, #708]	; (8000ec8 <__aeabi_dadd+0x6cc>)
 8000c04:	3601      	adds	r6, #1
 8000c06:	429e      	cmp	r6, r3
 8000c08:	d049      	beq.n	8000c9e <__aeabi_dadd+0x4a2>
 8000c0a:	4642      	mov	r2, r8
 8000c0c:	4baf      	ldr	r3, [pc, #700]	; (8000ecc <__aeabi_dadd+0x6d0>)
 8000c0e:	2101      	movs	r1, #1
 8000c10:	401a      	ands	r2, r3
 8000c12:	0013      	movs	r3, r2
 8000c14:	086a      	lsrs	r2, r5, #1
 8000c16:	400d      	ands	r5, r1
 8000c18:	4315      	orrs	r5, r2
 8000c1a:	07d9      	lsls	r1, r3, #31
 8000c1c:	085b      	lsrs	r3, r3, #1
 8000c1e:	4698      	mov	r8, r3
 8000c20:	430d      	orrs	r5, r1
 8000c22:	e665      	b.n	80008f0 <__aeabi_dadd+0xf4>
 8000c24:	0018      	movs	r0, r3
 8000c26:	3e1f      	subs	r6, #31
 8000c28:	40f0      	lsrs	r0, r6
 8000c2a:	2a20      	cmp	r2, #32
 8000c2c:	d003      	beq.n	8000c36 <__aeabi_dadd+0x43a>
 8000c2e:	2140      	movs	r1, #64	; 0x40
 8000c30:	1a8a      	subs	r2, r1, r2
 8000c32:	4093      	lsls	r3, r2
 8000c34:	431d      	orrs	r5, r3
 8000c36:	1e69      	subs	r1, r5, #1
 8000c38:	418d      	sbcs	r5, r1
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	2600      	movs	r6, #0
 8000c3e:	4698      	mov	r8, r3
 8000c40:	4305      	orrs	r5, r0
 8000c42:	e6f7      	b.n	8000a34 <__aeabi_dadd+0x238>
 8000c44:	0011      	movs	r1, r2
 8000c46:	4665      	mov	r5, ip
 8000c48:	3920      	subs	r1, #32
 8000c4a:	40cd      	lsrs	r5, r1
 8000c4c:	2a20      	cmp	r2, #32
 8000c4e:	d004      	beq.n	8000c5a <__aeabi_dadd+0x45e>
 8000c50:	2040      	movs	r0, #64	; 0x40
 8000c52:	4661      	mov	r1, ip
 8000c54:	1a82      	subs	r2, r0, r2
 8000c56:	4091      	lsls	r1, r2
 8000c58:	430f      	orrs	r7, r1
 8000c5a:	0039      	movs	r1, r7
 8000c5c:	1e4f      	subs	r7, r1, #1
 8000c5e:	41b9      	sbcs	r1, r7
 8000c60:	4329      	orrs	r1, r5
 8000c62:	e60f      	b.n	8000884 <__aeabi_dadd+0x88>
 8000c64:	464a      	mov	r2, r9
 8000c66:	4313      	orrs	r3, r2
 8000c68:	001d      	movs	r5, r3
 8000c6a:	1e6b      	subs	r3, r5, #1
 8000c6c:	419d      	sbcs	r5, r3
 8000c6e:	1b7d      	subs	r5, r7, r5
 8000c70:	42af      	cmp	r7, r5
 8000c72:	419b      	sbcs	r3, r3
 8000c74:	4662      	mov	r2, ip
 8000c76:	425b      	negs	r3, r3
 8000c78:	1ad3      	subs	r3, r2, r3
 8000c7a:	4698      	mov	r8, r3
 8000c7c:	4654      	mov	r4, sl
 8000c7e:	000e      	movs	r6, r1
 8000c80:	e607      	b.n	8000892 <__aeabi_dadd+0x96>
 8000c82:	4648      	mov	r0, r9
 8000c84:	4318      	orrs	r0, r3
 8000c86:	d100      	bne.n	8000c8a <__aeabi_dadd+0x48e>
 8000c88:	e0b3      	b.n	8000df2 <__aeabi_dadd+0x5f6>
 8000c8a:	1e50      	subs	r0, r2, #1
 8000c8c:	2a01      	cmp	r2, #1
 8000c8e:	d100      	bne.n	8000c92 <__aeabi_dadd+0x496>
 8000c90:	e10d      	b.n	8000eae <__aeabi_dadd+0x6b2>
 8000c92:	4d8d      	ldr	r5, [pc, #564]	; (8000ec8 <__aeabi_dadd+0x6cc>)
 8000c94:	42aa      	cmp	r2, r5
 8000c96:	d100      	bne.n	8000c9a <__aeabi_dadd+0x49e>
 8000c98:	e0a5      	b.n	8000de6 <__aeabi_dadd+0x5ea>
 8000c9a:	0002      	movs	r2, r0
 8000c9c:	e710      	b.n	8000ac0 <__aeabi_dadd+0x2c4>
 8000c9e:	0032      	movs	r2, r6
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	e644      	b.n	8000930 <__aeabi_dadd+0x134>
 8000ca6:	2120      	movs	r1, #32
 8000ca8:	0038      	movs	r0, r7
 8000caa:	1a89      	subs	r1, r1, r2
 8000cac:	4665      	mov	r5, ip
 8000cae:	408f      	lsls	r7, r1
 8000cb0:	408d      	lsls	r5, r1
 8000cb2:	40d0      	lsrs	r0, r2
 8000cb4:	1e79      	subs	r1, r7, #1
 8000cb6:	418f      	sbcs	r7, r1
 8000cb8:	4305      	orrs	r5, r0
 8000cba:	433d      	orrs	r5, r7
 8000cbc:	4667      	mov	r7, ip
 8000cbe:	40d7      	lsrs	r7, r2
 8000cc0:	19db      	adds	r3, r3, r7
 8000cc2:	e794      	b.n	8000bee <__aeabi_dadd+0x3f2>
 8000cc4:	4a80      	ldr	r2, [pc, #512]	; (8000ec8 <__aeabi_dadd+0x6cc>)
 8000cc6:	4290      	cmp	r0, r2
 8000cc8:	d100      	bne.n	8000ccc <__aeabi_dadd+0x4d0>
 8000cca:	e0ec      	b.n	8000ea6 <__aeabi_dadd+0x6aa>
 8000ccc:	0039      	movs	r1, r7
 8000cce:	4449      	add	r1, r9
 8000cd0:	4549      	cmp	r1, r9
 8000cd2:	4192      	sbcs	r2, r2
 8000cd4:	4463      	add	r3, ip
 8000cd6:	4252      	negs	r2, r2
 8000cd8:	189b      	adds	r3, r3, r2
 8000cda:	07dd      	lsls	r5, r3, #31
 8000cdc:	0849      	lsrs	r1, r1, #1
 8000cde:	085b      	lsrs	r3, r3, #1
 8000ce0:	4698      	mov	r8, r3
 8000ce2:	0006      	movs	r6, r0
 8000ce4:	430d      	orrs	r5, r1
 8000ce6:	e6a5      	b.n	8000a34 <__aeabi_dadd+0x238>
 8000ce8:	464a      	mov	r2, r9
 8000cea:	1abd      	subs	r5, r7, r2
 8000cec:	42af      	cmp	r7, r5
 8000cee:	4189      	sbcs	r1, r1
 8000cf0:	4662      	mov	r2, ip
 8000cf2:	4249      	negs	r1, r1
 8000cf4:	1ad3      	subs	r3, r2, r3
 8000cf6:	1a5b      	subs	r3, r3, r1
 8000cf8:	4698      	mov	r8, r3
 8000cfa:	4654      	mov	r4, sl
 8000cfc:	e5d1      	b.n	80008a2 <__aeabi_dadd+0xa6>
 8000cfe:	076c      	lsls	r4, r5, #29
 8000d00:	08f9      	lsrs	r1, r7, #3
 8000d02:	4321      	orrs	r1, r4
 8000d04:	08eb      	lsrs	r3, r5, #3
 8000d06:	0004      	movs	r4, r0
 8000d08:	e69d      	b.n	8000a46 <__aeabi_dadd+0x24a>
 8000d0a:	464a      	mov	r2, r9
 8000d0c:	431a      	orrs	r2, r3
 8000d0e:	d175      	bne.n	8000dfc <__aeabi_dadd+0x600>
 8000d10:	4661      	mov	r1, ip
 8000d12:	4339      	orrs	r1, r7
 8000d14:	d114      	bne.n	8000d40 <__aeabi_dadd+0x544>
 8000d16:	2380      	movs	r3, #128	; 0x80
 8000d18:	2400      	movs	r4, #0
 8000d1a:	031b      	lsls	r3, r3, #12
 8000d1c:	e6bc      	b.n	8000a98 <__aeabi_dadd+0x29c>
 8000d1e:	464a      	mov	r2, r9
 8000d20:	1bd5      	subs	r5, r2, r7
 8000d22:	45a9      	cmp	r9, r5
 8000d24:	4189      	sbcs	r1, r1
 8000d26:	4662      	mov	r2, ip
 8000d28:	4249      	negs	r1, r1
 8000d2a:	1a9b      	subs	r3, r3, r2
 8000d2c:	1a5b      	subs	r3, r3, r1
 8000d2e:	4698      	mov	r8, r3
 8000d30:	2601      	movs	r6, #1
 8000d32:	e5ae      	b.n	8000892 <__aeabi_dadd+0x96>
 8000d34:	464a      	mov	r2, r9
 8000d36:	08d1      	lsrs	r1, r2, #3
 8000d38:	075a      	lsls	r2, r3, #29
 8000d3a:	4311      	orrs	r1, r2
 8000d3c:	08db      	lsrs	r3, r3, #3
 8000d3e:	e6a7      	b.n	8000a90 <__aeabi_dadd+0x294>
 8000d40:	4663      	mov	r3, ip
 8000d42:	08f9      	lsrs	r1, r7, #3
 8000d44:	075a      	lsls	r2, r3, #29
 8000d46:	4654      	mov	r4, sl
 8000d48:	4311      	orrs	r1, r2
 8000d4a:	08db      	lsrs	r3, r3, #3
 8000d4c:	e6a0      	b.n	8000a90 <__aeabi_dadd+0x294>
 8000d4e:	464a      	mov	r2, r9
 8000d50:	4313      	orrs	r3, r2
 8000d52:	001d      	movs	r5, r3
 8000d54:	1e6b      	subs	r3, r5, #1
 8000d56:	419d      	sbcs	r5, r3
 8000d58:	e6c7      	b.n	8000aea <__aeabi_dadd+0x2ee>
 8000d5a:	0014      	movs	r4, r2
 8000d5c:	001e      	movs	r6, r3
 8000d5e:	3c20      	subs	r4, #32
 8000d60:	40e6      	lsrs	r6, r4
 8000d62:	2a20      	cmp	r2, #32
 8000d64:	d005      	beq.n	8000d72 <__aeabi_dadd+0x576>
 8000d66:	2440      	movs	r4, #64	; 0x40
 8000d68:	1aa2      	subs	r2, r4, r2
 8000d6a:	4093      	lsls	r3, r2
 8000d6c:	464a      	mov	r2, r9
 8000d6e:	431a      	orrs	r2, r3
 8000d70:	4691      	mov	r9, r2
 8000d72:	464d      	mov	r5, r9
 8000d74:	1e6b      	subs	r3, r5, #1
 8000d76:	419d      	sbcs	r5, r3
 8000d78:	4335      	orrs	r5, r6
 8000d7a:	e778      	b.n	8000c6e <__aeabi_dadd+0x472>
 8000d7c:	464a      	mov	r2, r9
 8000d7e:	431a      	orrs	r2, r3
 8000d80:	d000      	beq.n	8000d84 <__aeabi_dadd+0x588>
 8000d82:	e66b      	b.n	8000a5c <__aeabi_dadd+0x260>
 8000d84:	076b      	lsls	r3, r5, #29
 8000d86:	08f9      	lsrs	r1, r7, #3
 8000d88:	4319      	orrs	r1, r3
 8000d8a:	08eb      	lsrs	r3, r5, #3
 8000d8c:	e680      	b.n	8000a90 <__aeabi_dadd+0x294>
 8000d8e:	4661      	mov	r1, ip
 8000d90:	4339      	orrs	r1, r7
 8000d92:	d054      	beq.n	8000e3e <__aeabi_dadd+0x642>
 8000d94:	4663      	mov	r3, ip
 8000d96:	08f9      	lsrs	r1, r7, #3
 8000d98:	075c      	lsls	r4, r3, #29
 8000d9a:	4321      	orrs	r1, r4
 8000d9c:	08db      	lsrs	r3, r3, #3
 8000d9e:	0004      	movs	r4, r0
 8000da0:	e654      	b.n	8000a4c <__aeabi_dadd+0x250>
 8000da2:	464a      	mov	r2, r9
 8000da4:	1abd      	subs	r5, r7, r2
 8000da6:	42af      	cmp	r7, r5
 8000da8:	4189      	sbcs	r1, r1
 8000daa:	4662      	mov	r2, ip
 8000dac:	4249      	negs	r1, r1
 8000dae:	1ad3      	subs	r3, r2, r3
 8000db0:	1a5b      	subs	r3, r3, r1
 8000db2:	4698      	mov	r8, r3
 8000db4:	0004      	movs	r4, r0
 8000db6:	2601      	movs	r6, #1
 8000db8:	e56b      	b.n	8000892 <__aeabi_dadd+0x96>
 8000dba:	464a      	mov	r2, r9
 8000dbc:	1bd5      	subs	r5, r2, r7
 8000dbe:	45a9      	cmp	r9, r5
 8000dc0:	4189      	sbcs	r1, r1
 8000dc2:	4662      	mov	r2, ip
 8000dc4:	4249      	negs	r1, r1
 8000dc6:	1a9a      	subs	r2, r3, r2
 8000dc8:	1a52      	subs	r2, r2, r1
 8000dca:	4690      	mov	r8, r2
 8000dcc:	0212      	lsls	r2, r2, #8
 8000dce:	d532      	bpl.n	8000e36 <__aeabi_dadd+0x63a>
 8000dd0:	464a      	mov	r2, r9
 8000dd2:	1abd      	subs	r5, r7, r2
 8000dd4:	42af      	cmp	r7, r5
 8000dd6:	4189      	sbcs	r1, r1
 8000dd8:	4662      	mov	r2, ip
 8000dda:	4249      	negs	r1, r1
 8000ddc:	1ad3      	subs	r3, r2, r3
 8000dde:	1a5b      	subs	r3, r3, r1
 8000de0:	4698      	mov	r8, r3
 8000de2:	0004      	movs	r4, r0
 8000de4:	e584      	b.n	80008f0 <__aeabi_dadd+0xf4>
 8000de6:	4663      	mov	r3, ip
 8000de8:	08f9      	lsrs	r1, r7, #3
 8000dea:	075a      	lsls	r2, r3, #29
 8000dec:	4311      	orrs	r1, r2
 8000dee:	08db      	lsrs	r3, r3, #3
 8000df0:	e64e      	b.n	8000a90 <__aeabi_dadd+0x294>
 8000df2:	08f9      	lsrs	r1, r7, #3
 8000df4:	0768      	lsls	r0, r5, #29
 8000df6:	4301      	orrs	r1, r0
 8000df8:	08eb      	lsrs	r3, r5, #3
 8000dfa:	e624      	b.n	8000a46 <__aeabi_dadd+0x24a>
 8000dfc:	4662      	mov	r2, ip
 8000dfe:	433a      	orrs	r2, r7
 8000e00:	d100      	bne.n	8000e04 <__aeabi_dadd+0x608>
 8000e02:	e698      	b.n	8000b36 <__aeabi_dadd+0x33a>
 8000e04:	464a      	mov	r2, r9
 8000e06:	08d1      	lsrs	r1, r2, #3
 8000e08:	075a      	lsls	r2, r3, #29
 8000e0a:	4311      	orrs	r1, r2
 8000e0c:	08da      	lsrs	r2, r3, #3
 8000e0e:	2380      	movs	r3, #128	; 0x80
 8000e10:	031b      	lsls	r3, r3, #12
 8000e12:	421a      	tst	r2, r3
 8000e14:	d008      	beq.n	8000e28 <__aeabi_dadd+0x62c>
 8000e16:	4660      	mov	r0, ip
 8000e18:	08c5      	lsrs	r5, r0, #3
 8000e1a:	421d      	tst	r5, r3
 8000e1c:	d104      	bne.n	8000e28 <__aeabi_dadd+0x62c>
 8000e1e:	4654      	mov	r4, sl
 8000e20:	002a      	movs	r2, r5
 8000e22:	08f9      	lsrs	r1, r7, #3
 8000e24:	0743      	lsls	r3, r0, #29
 8000e26:	4319      	orrs	r1, r3
 8000e28:	0f4b      	lsrs	r3, r1, #29
 8000e2a:	00c9      	lsls	r1, r1, #3
 8000e2c:	075b      	lsls	r3, r3, #29
 8000e2e:	08c9      	lsrs	r1, r1, #3
 8000e30:	4319      	orrs	r1, r3
 8000e32:	0013      	movs	r3, r2
 8000e34:	e62c      	b.n	8000a90 <__aeabi_dadd+0x294>
 8000e36:	4641      	mov	r1, r8
 8000e38:	4329      	orrs	r1, r5
 8000e3a:	d000      	beq.n	8000e3e <__aeabi_dadd+0x642>
 8000e3c:	e5fa      	b.n	8000a34 <__aeabi_dadd+0x238>
 8000e3e:	2300      	movs	r3, #0
 8000e40:	000a      	movs	r2, r1
 8000e42:	2400      	movs	r4, #0
 8000e44:	e602      	b.n	8000a4c <__aeabi_dadd+0x250>
 8000e46:	076b      	lsls	r3, r5, #29
 8000e48:	08f9      	lsrs	r1, r7, #3
 8000e4a:	4319      	orrs	r1, r3
 8000e4c:	08eb      	lsrs	r3, r5, #3
 8000e4e:	e5fd      	b.n	8000a4c <__aeabi_dadd+0x250>
 8000e50:	4663      	mov	r3, ip
 8000e52:	08f9      	lsrs	r1, r7, #3
 8000e54:	075b      	lsls	r3, r3, #29
 8000e56:	4319      	orrs	r1, r3
 8000e58:	4663      	mov	r3, ip
 8000e5a:	0004      	movs	r4, r0
 8000e5c:	08db      	lsrs	r3, r3, #3
 8000e5e:	e617      	b.n	8000a90 <__aeabi_dadd+0x294>
 8000e60:	003d      	movs	r5, r7
 8000e62:	444d      	add	r5, r9
 8000e64:	4463      	add	r3, ip
 8000e66:	454d      	cmp	r5, r9
 8000e68:	4189      	sbcs	r1, r1
 8000e6a:	4698      	mov	r8, r3
 8000e6c:	4249      	negs	r1, r1
 8000e6e:	4488      	add	r8, r1
 8000e70:	4643      	mov	r3, r8
 8000e72:	021b      	lsls	r3, r3, #8
 8000e74:	d400      	bmi.n	8000e78 <__aeabi_dadd+0x67c>
 8000e76:	e5dd      	b.n	8000a34 <__aeabi_dadd+0x238>
 8000e78:	4642      	mov	r2, r8
 8000e7a:	4b14      	ldr	r3, [pc, #80]	; (8000ecc <__aeabi_dadd+0x6d0>)
 8000e7c:	2601      	movs	r6, #1
 8000e7e:	401a      	ands	r2, r3
 8000e80:	4690      	mov	r8, r2
 8000e82:	e5d7      	b.n	8000a34 <__aeabi_dadd+0x238>
 8000e84:	0010      	movs	r0, r2
 8000e86:	001e      	movs	r6, r3
 8000e88:	3820      	subs	r0, #32
 8000e8a:	40c6      	lsrs	r6, r0
 8000e8c:	2a20      	cmp	r2, #32
 8000e8e:	d005      	beq.n	8000e9c <__aeabi_dadd+0x6a0>
 8000e90:	2040      	movs	r0, #64	; 0x40
 8000e92:	1a82      	subs	r2, r0, r2
 8000e94:	4093      	lsls	r3, r2
 8000e96:	464a      	mov	r2, r9
 8000e98:	431a      	orrs	r2, r3
 8000e9a:	4691      	mov	r9, r2
 8000e9c:	464d      	mov	r5, r9
 8000e9e:	1e6b      	subs	r3, r5, #1
 8000ea0:	419d      	sbcs	r5, r3
 8000ea2:	4335      	orrs	r5, r6
 8000ea4:	e621      	b.n	8000aea <__aeabi_dadd+0x2ee>
 8000ea6:	0002      	movs	r2, r0
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	2100      	movs	r1, #0
 8000eac:	e540      	b.n	8000930 <__aeabi_dadd+0x134>
 8000eae:	464a      	mov	r2, r9
 8000eb0:	19d5      	adds	r5, r2, r7
 8000eb2:	42bd      	cmp	r5, r7
 8000eb4:	4189      	sbcs	r1, r1
 8000eb6:	4463      	add	r3, ip
 8000eb8:	4698      	mov	r8, r3
 8000eba:	4249      	negs	r1, r1
 8000ebc:	4488      	add	r8, r1
 8000ebe:	e5b3      	b.n	8000a28 <__aeabi_dadd+0x22c>
 8000ec0:	2100      	movs	r1, #0
 8000ec2:	4a01      	ldr	r2, [pc, #4]	; (8000ec8 <__aeabi_dadd+0x6cc>)
 8000ec4:	000b      	movs	r3, r1
 8000ec6:	e533      	b.n	8000930 <__aeabi_dadd+0x134>
 8000ec8:	000007ff 	.word	0x000007ff
 8000ecc:	ff7fffff 	.word	0xff7fffff

08000ed0 <__aeabi_ddiv>:
 8000ed0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ed2:	4657      	mov	r7, sl
 8000ed4:	464e      	mov	r6, r9
 8000ed6:	4645      	mov	r5, r8
 8000ed8:	46de      	mov	lr, fp
 8000eda:	b5e0      	push	{r5, r6, r7, lr}
 8000edc:	4681      	mov	r9, r0
 8000ede:	0005      	movs	r5, r0
 8000ee0:	030c      	lsls	r4, r1, #12
 8000ee2:	0048      	lsls	r0, r1, #1
 8000ee4:	4692      	mov	sl, r2
 8000ee6:	001f      	movs	r7, r3
 8000ee8:	b085      	sub	sp, #20
 8000eea:	0b24      	lsrs	r4, r4, #12
 8000eec:	0d40      	lsrs	r0, r0, #21
 8000eee:	0fce      	lsrs	r6, r1, #31
 8000ef0:	2800      	cmp	r0, #0
 8000ef2:	d059      	beq.n	8000fa8 <__aeabi_ddiv+0xd8>
 8000ef4:	4b87      	ldr	r3, [pc, #540]	; (8001114 <__aeabi_ddiv+0x244>)
 8000ef6:	4298      	cmp	r0, r3
 8000ef8:	d100      	bne.n	8000efc <__aeabi_ddiv+0x2c>
 8000efa:	e098      	b.n	800102e <__aeabi_ddiv+0x15e>
 8000efc:	0f6b      	lsrs	r3, r5, #29
 8000efe:	00e4      	lsls	r4, r4, #3
 8000f00:	431c      	orrs	r4, r3
 8000f02:	2380      	movs	r3, #128	; 0x80
 8000f04:	041b      	lsls	r3, r3, #16
 8000f06:	4323      	orrs	r3, r4
 8000f08:	4698      	mov	r8, r3
 8000f0a:	4b83      	ldr	r3, [pc, #524]	; (8001118 <__aeabi_ddiv+0x248>)
 8000f0c:	00ed      	lsls	r5, r5, #3
 8000f0e:	469b      	mov	fp, r3
 8000f10:	2300      	movs	r3, #0
 8000f12:	4699      	mov	r9, r3
 8000f14:	4483      	add	fp, r0
 8000f16:	9300      	str	r3, [sp, #0]
 8000f18:	033c      	lsls	r4, r7, #12
 8000f1a:	007b      	lsls	r3, r7, #1
 8000f1c:	4650      	mov	r0, sl
 8000f1e:	0b24      	lsrs	r4, r4, #12
 8000f20:	0d5b      	lsrs	r3, r3, #21
 8000f22:	0fff      	lsrs	r7, r7, #31
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d067      	beq.n	8000ff8 <__aeabi_ddiv+0x128>
 8000f28:	4a7a      	ldr	r2, [pc, #488]	; (8001114 <__aeabi_ddiv+0x244>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d018      	beq.n	8000f60 <__aeabi_ddiv+0x90>
 8000f2e:	497a      	ldr	r1, [pc, #488]	; (8001118 <__aeabi_ddiv+0x248>)
 8000f30:	0f42      	lsrs	r2, r0, #29
 8000f32:	468c      	mov	ip, r1
 8000f34:	00e4      	lsls	r4, r4, #3
 8000f36:	4659      	mov	r1, fp
 8000f38:	4314      	orrs	r4, r2
 8000f3a:	2280      	movs	r2, #128	; 0x80
 8000f3c:	4463      	add	r3, ip
 8000f3e:	0412      	lsls	r2, r2, #16
 8000f40:	1acb      	subs	r3, r1, r3
 8000f42:	4314      	orrs	r4, r2
 8000f44:	469b      	mov	fp, r3
 8000f46:	00c2      	lsls	r2, r0, #3
 8000f48:	2000      	movs	r0, #0
 8000f4a:	0033      	movs	r3, r6
 8000f4c:	407b      	eors	r3, r7
 8000f4e:	469a      	mov	sl, r3
 8000f50:	464b      	mov	r3, r9
 8000f52:	2b0f      	cmp	r3, #15
 8000f54:	d900      	bls.n	8000f58 <__aeabi_ddiv+0x88>
 8000f56:	e0ef      	b.n	8001138 <__aeabi_ddiv+0x268>
 8000f58:	4970      	ldr	r1, [pc, #448]	; (800111c <__aeabi_ddiv+0x24c>)
 8000f5a:	009b      	lsls	r3, r3, #2
 8000f5c:	58cb      	ldr	r3, [r1, r3]
 8000f5e:	469f      	mov	pc, r3
 8000f60:	4b6f      	ldr	r3, [pc, #444]	; (8001120 <__aeabi_ddiv+0x250>)
 8000f62:	4652      	mov	r2, sl
 8000f64:	469c      	mov	ip, r3
 8000f66:	4322      	orrs	r2, r4
 8000f68:	44e3      	add	fp, ip
 8000f6a:	2a00      	cmp	r2, #0
 8000f6c:	d000      	beq.n	8000f70 <__aeabi_ddiv+0xa0>
 8000f6e:	e095      	b.n	800109c <__aeabi_ddiv+0x1cc>
 8000f70:	4649      	mov	r1, r9
 8000f72:	2302      	movs	r3, #2
 8000f74:	4319      	orrs	r1, r3
 8000f76:	4689      	mov	r9, r1
 8000f78:	2400      	movs	r4, #0
 8000f7a:	2002      	movs	r0, #2
 8000f7c:	e7e5      	b.n	8000f4a <__aeabi_ddiv+0x7a>
 8000f7e:	2300      	movs	r3, #0
 8000f80:	2400      	movs	r4, #0
 8000f82:	2500      	movs	r5, #0
 8000f84:	4652      	mov	r2, sl
 8000f86:	051b      	lsls	r3, r3, #20
 8000f88:	4323      	orrs	r3, r4
 8000f8a:	07d2      	lsls	r2, r2, #31
 8000f8c:	4313      	orrs	r3, r2
 8000f8e:	0028      	movs	r0, r5
 8000f90:	0019      	movs	r1, r3
 8000f92:	b005      	add	sp, #20
 8000f94:	bcf0      	pop	{r4, r5, r6, r7}
 8000f96:	46bb      	mov	fp, r7
 8000f98:	46b2      	mov	sl, r6
 8000f9a:	46a9      	mov	r9, r5
 8000f9c:	46a0      	mov	r8, r4
 8000f9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000fa0:	2400      	movs	r4, #0
 8000fa2:	2500      	movs	r5, #0
 8000fa4:	4b5b      	ldr	r3, [pc, #364]	; (8001114 <__aeabi_ddiv+0x244>)
 8000fa6:	e7ed      	b.n	8000f84 <__aeabi_ddiv+0xb4>
 8000fa8:	464b      	mov	r3, r9
 8000faa:	4323      	orrs	r3, r4
 8000fac:	4698      	mov	r8, r3
 8000fae:	d100      	bne.n	8000fb2 <__aeabi_ddiv+0xe2>
 8000fb0:	e089      	b.n	80010c6 <__aeabi_ddiv+0x1f6>
 8000fb2:	2c00      	cmp	r4, #0
 8000fb4:	d100      	bne.n	8000fb8 <__aeabi_ddiv+0xe8>
 8000fb6:	e1e0      	b.n	800137a <__aeabi_ddiv+0x4aa>
 8000fb8:	0020      	movs	r0, r4
 8000fba:	f001 fabf 	bl	800253c <__clzsi2>
 8000fbe:	0001      	movs	r1, r0
 8000fc0:	0002      	movs	r2, r0
 8000fc2:	390b      	subs	r1, #11
 8000fc4:	231d      	movs	r3, #29
 8000fc6:	1a5b      	subs	r3, r3, r1
 8000fc8:	4649      	mov	r1, r9
 8000fca:	0010      	movs	r0, r2
 8000fcc:	40d9      	lsrs	r1, r3
 8000fce:	3808      	subs	r0, #8
 8000fd0:	4084      	lsls	r4, r0
 8000fd2:	000b      	movs	r3, r1
 8000fd4:	464d      	mov	r5, r9
 8000fd6:	4323      	orrs	r3, r4
 8000fd8:	4698      	mov	r8, r3
 8000fda:	4085      	lsls	r5, r0
 8000fdc:	4851      	ldr	r0, [pc, #324]	; (8001124 <__aeabi_ddiv+0x254>)
 8000fde:	033c      	lsls	r4, r7, #12
 8000fe0:	1a83      	subs	r3, r0, r2
 8000fe2:	469b      	mov	fp, r3
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	4699      	mov	r9, r3
 8000fe8:	9300      	str	r3, [sp, #0]
 8000fea:	007b      	lsls	r3, r7, #1
 8000fec:	4650      	mov	r0, sl
 8000fee:	0b24      	lsrs	r4, r4, #12
 8000ff0:	0d5b      	lsrs	r3, r3, #21
 8000ff2:	0fff      	lsrs	r7, r7, #31
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d197      	bne.n	8000f28 <__aeabi_ddiv+0x58>
 8000ff8:	4652      	mov	r2, sl
 8000ffa:	4322      	orrs	r2, r4
 8000ffc:	d055      	beq.n	80010aa <__aeabi_ddiv+0x1da>
 8000ffe:	2c00      	cmp	r4, #0
 8001000:	d100      	bne.n	8001004 <__aeabi_ddiv+0x134>
 8001002:	e1ca      	b.n	800139a <__aeabi_ddiv+0x4ca>
 8001004:	0020      	movs	r0, r4
 8001006:	f001 fa99 	bl	800253c <__clzsi2>
 800100a:	0002      	movs	r2, r0
 800100c:	3a0b      	subs	r2, #11
 800100e:	231d      	movs	r3, #29
 8001010:	0001      	movs	r1, r0
 8001012:	1a9b      	subs	r3, r3, r2
 8001014:	4652      	mov	r2, sl
 8001016:	3908      	subs	r1, #8
 8001018:	40da      	lsrs	r2, r3
 800101a:	408c      	lsls	r4, r1
 800101c:	4314      	orrs	r4, r2
 800101e:	4652      	mov	r2, sl
 8001020:	408a      	lsls	r2, r1
 8001022:	4b41      	ldr	r3, [pc, #260]	; (8001128 <__aeabi_ddiv+0x258>)
 8001024:	4458      	add	r0, fp
 8001026:	469b      	mov	fp, r3
 8001028:	4483      	add	fp, r0
 800102a:	2000      	movs	r0, #0
 800102c:	e78d      	b.n	8000f4a <__aeabi_ddiv+0x7a>
 800102e:	464b      	mov	r3, r9
 8001030:	4323      	orrs	r3, r4
 8001032:	4698      	mov	r8, r3
 8001034:	d140      	bne.n	80010b8 <__aeabi_ddiv+0x1e8>
 8001036:	2308      	movs	r3, #8
 8001038:	4699      	mov	r9, r3
 800103a:	3b06      	subs	r3, #6
 800103c:	2500      	movs	r5, #0
 800103e:	4683      	mov	fp, r0
 8001040:	9300      	str	r3, [sp, #0]
 8001042:	e769      	b.n	8000f18 <__aeabi_ddiv+0x48>
 8001044:	46b2      	mov	sl, r6
 8001046:	9b00      	ldr	r3, [sp, #0]
 8001048:	2b02      	cmp	r3, #2
 800104a:	d0a9      	beq.n	8000fa0 <__aeabi_ddiv+0xd0>
 800104c:	2b03      	cmp	r3, #3
 800104e:	d100      	bne.n	8001052 <__aeabi_ddiv+0x182>
 8001050:	e211      	b.n	8001476 <__aeabi_ddiv+0x5a6>
 8001052:	2b01      	cmp	r3, #1
 8001054:	d093      	beq.n	8000f7e <__aeabi_ddiv+0xae>
 8001056:	4a35      	ldr	r2, [pc, #212]	; (800112c <__aeabi_ddiv+0x25c>)
 8001058:	445a      	add	r2, fp
 800105a:	2a00      	cmp	r2, #0
 800105c:	dc00      	bgt.n	8001060 <__aeabi_ddiv+0x190>
 800105e:	e13c      	b.n	80012da <__aeabi_ddiv+0x40a>
 8001060:	076b      	lsls	r3, r5, #29
 8001062:	d000      	beq.n	8001066 <__aeabi_ddiv+0x196>
 8001064:	e1a7      	b.n	80013b6 <__aeabi_ddiv+0x4e6>
 8001066:	08ed      	lsrs	r5, r5, #3
 8001068:	4643      	mov	r3, r8
 800106a:	01db      	lsls	r3, r3, #7
 800106c:	d506      	bpl.n	800107c <__aeabi_ddiv+0x1ac>
 800106e:	4642      	mov	r2, r8
 8001070:	4b2f      	ldr	r3, [pc, #188]	; (8001130 <__aeabi_ddiv+0x260>)
 8001072:	401a      	ands	r2, r3
 8001074:	4690      	mov	r8, r2
 8001076:	2280      	movs	r2, #128	; 0x80
 8001078:	00d2      	lsls	r2, r2, #3
 800107a:	445a      	add	r2, fp
 800107c:	4b2d      	ldr	r3, [pc, #180]	; (8001134 <__aeabi_ddiv+0x264>)
 800107e:	429a      	cmp	r2, r3
 8001080:	dc8e      	bgt.n	8000fa0 <__aeabi_ddiv+0xd0>
 8001082:	4643      	mov	r3, r8
 8001084:	0552      	lsls	r2, r2, #21
 8001086:	0758      	lsls	r0, r3, #29
 8001088:	025c      	lsls	r4, r3, #9
 800108a:	4305      	orrs	r5, r0
 800108c:	0b24      	lsrs	r4, r4, #12
 800108e:	0d53      	lsrs	r3, r2, #21
 8001090:	e778      	b.n	8000f84 <__aeabi_ddiv+0xb4>
 8001092:	46ba      	mov	sl, r7
 8001094:	46a0      	mov	r8, r4
 8001096:	0015      	movs	r5, r2
 8001098:	9000      	str	r0, [sp, #0]
 800109a:	e7d4      	b.n	8001046 <__aeabi_ddiv+0x176>
 800109c:	464a      	mov	r2, r9
 800109e:	2303      	movs	r3, #3
 80010a0:	431a      	orrs	r2, r3
 80010a2:	4691      	mov	r9, r2
 80010a4:	2003      	movs	r0, #3
 80010a6:	4652      	mov	r2, sl
 80010a8:	e74f      	b.n	8000f4a <__aeabi_ddiv+0x7a>
 80010aa:	4649      	mov	r1, r9
 80010ac:	2301      	movs	r3, #1
 80010ae:	4319      	orrs	r1, r3
 80010b0:	4689      	mov	r9, r1
 80010b2:	2400      	movs	r4, #0
 80010b4:	2001      	movs	r0, #1
 80010b6:	e748      	b.n	8000f4a <__aeabi_ddiv+0x7a>
 80010b8:	230c      	movs	r3, #12
 80010ba:	4699      	mov	r9, r3
 80010bc:	3b09      	subs	r3, #9
 80010be:	46a0      	mov	r8, r4
 80010c0:	4683      	mov	fp, r0
 80010c2:	9300      	str	r3, [sp, #0]
 80010c4:	e728      	b.n	8000f18 <__aeabi_ddiv+0x48>
 80010c6:	2304      	movs	r3, #4
 80010c8:	4699      	mov	r9, r3
 80010ca:	2300      	movs	r3, #0
 80010cc:	469b      	mov	fp, r3
 80010ce:	3301      	adds	r3, #1
 80010d0:	2500      	movs	r5, #0
 80010d2:	9300      	str	r3, [sp, #0]
 80010d4:	e720      	b.n	8000f18 <__aeabi_ddiv+0x48>
 80010d6:	2300      	movs	r3, #0
 80010d8:	2480      	movs	r4, #128	; 0x80
 80010da:	469a      	mov	sl, r3
 80010dc:	2500      	movs	r5, #0
 80010de:	4b0d      	ldr	r3, [pc, #52]	; (8001114 <__aeabi_ddiv+0x244>)
 80010e0:	0324      	lsls	r4, r4, #12
 80010e2:	e74f      	b.n	8000f84 <__aeabi_ddiv+0xb4>
 80010e4:	2380      	movs	r3, #128	; 0x80
 80010e6:	4641      	mov	r1, r8
 80010e8:	031b      	lsls	r3, r3, #12
 80010ea:	4219      	tst	r1, r3
 80010ec:	d008      	beq.n	8001100 <__aeabi_ddiv+0x230>
 80010ee:	421c      	tst	r4, r3
 80010f0:	d106      	bne.n	8001100 <__aeabi_ddiv+0x230>
 80010f2:	431c      	orrs	r4, r3
 80010f4:	0324      	lsls	r4, r4, #12
 80010f6:	46ba      	mov	sl, r7
 80010f8:	0015      	movs	r5, r2
 80010fa:	4b06      	ldr	r3, [pc, #24]	; (8001114 <__aeabi_ddiv+0x244>)
 80010fc:	0b24      	lsrs	r4, r4, #12
 80010fe:	e741      	b.n	8000f84 <__aeabi_ddiv+0xb4>
 8001100:	2480      	movs	r4, #128	; 0x80
 8001102:	4643      	mov	r3, r8
 8001104:	0324      	lsls	r4, r4, #12
 8001106:	431c      	orrs	r4, r3
 8001108:	0324      	lsls	r4, r4, #12
 800110a:	46b2      	mov	sl, r6
 800110c:	4b01      	ldr	r3, [pc, #4]	; (8001114 <__aeabi_ddiv+0x244>)
 800110e:	0b24      	lsrs	r4, r4, #12
 8001110:	e738      	b.n	8000f84 <__aeabi_ddiv+0xb4>
 8001112:	46c0      	nop			; (mov r8, r8)
 8001114:	000007ff 	.word	0x000007ff
 8001118:	fffffc01 	.word	0xfffffc01
 800111c:	0800ca98 	.word	0x0800ca98
 8001120:	fffff801 	.word	0xfffff801
 8001124:	fffffc0d 	.word	0xfffffc0d
 8001128:	000003f3 	.word	0x000003f3
 800112c:	000003ff 	.word	0x000003ff
 8001130:	feffffff 	.word	0xfeffffff
 8001134:	000007fe 	.word	0x000007fe
 8001138:	4544      	cmp	r4, r8
 800113a:	d200      	bcs.n	800113e <__aeabi_ddiv+0x26e>
 800113c:	e116      	b.n	800136c <__aeabi_ddiv+0x49c>
 800113e:	d100      	bne.n	8001142 <__aeabi_ddiv+0x272>
 8001140:	e111      	b.n	8001366 <__aeabi_ddiv+0x496>
 8001142:	2301      	movs	r3, #1
 8001144:	425b      	negs	r3, r3
 8001146:	469c      	mov	ip, r3
 8001148:	002e      	movs	r6, r5
 800114a:	4640      	mov	r0, r8
 800114c:	2500      	movs	r5, #0
 800114e:	44e3      	add	fp, ip
 8001150:	0223      	lsls	r3, r4, #8
 8001152:	0e14      	lsrs	r4, r2, #24
 8001154:	431c      	orrs	r4, r3
 8001156:	0c1b      	lsrs	r3, r3, #16
 8001158:	4699      	mov	r9, r3
 800115a:	0423      	lsls	r3, r4, #16
 800115c:	0c1f      	lsrs	r7, r3, #16
 800115e:	0212      	lsls	r2, r2, #8
 8001160:	4649      	mov	r1, r9
 8001162:	9200      	str	r2, [sp, #0]
 8001164:	9701      	str	r7, [sp, #4]
 8001166:	f7ff f871 	bl	800024c <__aeabi_uidivmod>
 800116a:	0002      	movs	r2, r0
 800116c:	437a      	muls	r2, r7
 800116e:	040b      	lsls	r3, r1, #16
 8001170:	0c31      	lsrs	r1, r6, #16
 8001172:	4680      	mov	r8, r0
 8001174:	4319      	orrs	r1, r3
 8001176:	428a      	cmp	r2, r1
 8001178:	d90b      	bls.n	8001192 <__aeabi_ddiv+0x2c2>
 800117a:	2301      	movs	r3, #1
 800117c:	425b      	negs	r3, r3
 800117e:	469c      	mov	ip, r3
 8001180:	1909      	adds	r1, r1, r4
 8001182:	44e0      	add	r8, ip
 8001184:	428c      	cmp	r4, r1
 8001186:	d804      	bhi.n	8001192 <__aeabi_ddiv+0x2c2>
 8001188:	428a      	cmp	r2, r1
 800118a:	d902      	bls.n	8001192 <__aeabi_ddiv+0x2c2>
 800118c:	1e83      	subs	r3, r0, #2
 800118e:	4698      	mov	r8, r3
 8001190:	1909      	adds	r1, r1, r4
 8001192:	1a88      	subs	r0, r1, r2
 8001194:	4649      	mov	r1, r9
 8001196:	f7ff f859 	bl	800024c <__aeabi_uidivmod>
 800119a:	0409      	lsls	r1, r1, #16
 800119c:	468c      	mov	ip, r1
 800119e:	0431      	lsls	r1, r6, #16
 80011a0:	4666      	mov	r6, ip
 80011a2:	9a01      	ldr	r2, [sp, #4]
 80011a4:	0c09      	lsrs	r1, r1, #16
 80011a6:	4342      	muls	r2, r0
 80011a8:	0003      	movs	r3, r0
 80011aa:	4331      	orrs	r1, r6
 80011ac:	428a      	cmp	r2, r1
 80011ae:	d904      	bls.n	80011ba <__aeabi_ddiv+0x2ea>
 80011b0:	1909      	adds	r1, r1, r4
 80011b2:	3b01      	subs	r3, #1
 80011b4:	428c      	cmp	r4, r1
 80011b6:	d800      	bhi.n	80011ba <__aeabi_ddiv+0x2ea>
 80011b8:	e111      	b.n	80013de <__aeabi_ddiv+0x50e>
 80011ba:	1a89      	subs	r1, r1, r2
 80011bc:	4642      	mov	r2, r8
 80011be:	9e00      	ldr	r6, [sp, #0]
 80011c0:	0412      	lsls	r2, r2, #16
 80011c2:	431a      	orrs	r2, r3
 80011c4:	0c33      	lsrs	r3, r6, #16
 80011c6:	001f      	movs	r7, r3
 80011c8:	0c10      	lsrs	r0, r2, #16
 80011ca:	4690      	mov	r8, r2
 80011cc:	9302      	str	r3, [sp, #8]
 80011ce:	0413      	lsls	r3, r2, #16
 80011d0:	0432      	lsls	r2, r6, #16
 80011d2:	0c16      	lsrs	r6, r2, #16
 80011d4:	0032      	movs	r2, r6
 80011d6:	0c1b      	lsrs	r3, r3, #16
 80011d8:	435a      	muls	r2, r3
 80011da:	9603      	str	r6, [sp, #12]
 80011dc:	437b      	muls	r3, r7
 80011de:	4346      	muls	r6, r0
 80011e0:	4378      	muls	r0, r7
 80011e2:	0c17      	lsrs	r7, r2, #16
 80011e4:	46bc      	mov	ip, r7
 80011e6:	199b      	adds	r3, r3, r6
 80011e8:	4463      	add	r3, ip
 80011ea:	429e      	cmp	r6, r3
 80011ec:	d903      	bls.n	80011f6 <__aeabi_ddiv+0x326>
 80011ee:	2680      	movs	r6, #128	; 0x80
 80011f0:	0276      	lsls	r6, r6, #9
 80011f2:	46b4      	mov	ip, r6
 80011f4:	4460      	add	r0, ip
 80011f6:	0c1e      	lsrs	r6, r3, #16
 80011f8:	1830      	adds	r0, r6, r0
 80011fa:	0416      	lsls	r6, r2, #16
 80011fc:	041b      	lsls	r3, r3, #16
 80011fe:	0c36      	lsrs	r6, r6, #16
 8001200:	199e      	adds	r6, r3, r6
 8001202:	4281      	cmp	r1, r0
 8001204:	d200      	bcs.n	8001208 <__aeabi_ddiv+0x338>
 8001206:	e09c      	b.n	8001342 <__aeabi_ddiv+0x472>
 8001208:	d100      	bne.n	800120c <__aeabi_ddiv+0x33c>
 800120a:	e097      	b.n	800133c <__aeabi_ddiv+0x46c>
 800120c:	1bae      	subs	r6, r5, r6
 800120e:	1a09      	subs	r1, r1, r0
 8001210:	42b5      	cmp	r5, r6
 8001212:	4180      	sbcs	r0, r0
 8001214:	4240      	negs	r0, r0
 8001216:	1a08      	subs	r0, r1, r0
 8001218:	4284      	cmp	r4, r0
 800121a:	d100      	bne.n	800121e <__aeabi_ddiv+0x34e>
 800121c:	e111      	b.n	8001442 <__aeabi_ddiv+0x572>
 800121e:	4649      	mov	r1, r9
 8001220:	f7ff f814 	bl	800024c <__aeabi_uidivmod>
 8001224:	9a01      	ldr	r2, [sp, #4]
 8001226:	040b      	lsls	r3, r1, #16
 8001228:	4342      	muls	r2, r0
 800122a:	0c31      	lsrs	r1, r6, #16
 800122c:	0005      	movs	r5, r0
 800122e:	4319      	orrs	r1, r3
 8001230:	428a      	cmp	r2, r1
 8001232:	d907      	bls.n	8001244 <__aeabi_ddiv+0x374>
 8001234:	1909      	adds	r1, r1, r4
 8001236:	3d01      	subs	r5, #1
 8001238:	428c      	cmp	r4, r1
 800123a:	d803      	bhi.n	8001244 <__aeabi_ddiv+0x374>
 800123c:	428a      	cmp	r2, r1
 800123e:	d901      	bls.n	8001244 <__aeabi_ddiv+0x374>
 8001240:	1e85      	subs	r5, r0, #2
 8001242:	1909      	adds	r1, r1, r4
 8001244:	1a88      	subs	r0, r1, r2
 8001246:	4649      	mov	r1, r9
 8001248:	f7ff f800 	bl	800024c <__aeabi_uidivmod>
 800124c:	0409      	lsls	r1, r1, #16
 800124e:	468c      	mov	ip, r1
 8001250:	0431      	lsls	r1, r6, #16
 8001252:	4666      	mov	r6, ip
 8001254:	9a01      	ldr	r2, [sp, #4]
 8001256:	0c09      	lsrs	r1, r1, #16
 8001258:	4342      	muls	r2, r0
 800125a:	0003      	movs	r3, r0
 800125c:	4331      	orrs	r1, r6
 800125e:	428a      	cmp	r2, r1
 8001260:	d907      	bls.n	8001272 <__aeabi_ddiv+0x3a2>
 8001262:	1909      	adds	r1, r1, r4
 8001264:	3b01      	subs	r3, #1
 8001266:	428c      	cmp	r4, r1
 8001268:	d803      	bhi.n	8001272 <__aeabi_ddiv+0x3a2>
 800126a:	428a      	cmp	r2, r1
 800126c:	d901      	bls.n	8001272 <__aeabi_ddiv+0x3a2>
 800126e:	1e83      	subs	r3, r0, #2
 8001270:	1909      	adds	r1, r1, r4
 8001272:	9e03      	ldr	r6, [sp, #12]
 8001274:	1a89      	subs	r1, r1, r2
 8001276:	0032      	movs	r2, r6
 8001278:	042d      	lsls	r5, r5, #16
 800127a:	431d      	orrs	r5, r3
 800127c:	9f02      	ldr	r7, [sp, #8]
 800127e:	042b      	lsls	r3, r5, #16
 8001280:	0c1b      	lsrs	r3, r3, #16
 8001282:	435a      	muls	r2, r3
 8001284:	437b      	muls	r3, r7
 8001286:	469c      	mov	ip, r3
 8001288:	0c28      	lsrs	r0, r5, #16
 800128a:	4346      	muls	r6, r0
 800128c:	0c13      	lsrs	r3, r2, #16
 800128e:	44b4      	add	ip, r6
 8001290:	4463      	add	r3, ip
 8001292:	4378      	muls	r0, r7
 8001294:	429e      	cmp	r6, r3
 8001296:	d903      	bls.n	80012a0 <__aeabi_ddiv+0x3d0>
 8001298:	2680      	movs	r6, #128	; 0x80
 800129a:	0276      	lsls	r6, r6, #9
 800129c:	46b4      	mov	ip, r6
 800129e:	4460      	add	r0, ip
 80012a0:	0c1e      	lsrs	r6, r3, #16
 80012a2:	0412      	lsls	r2, r2, #16
 80012a4:	041b      	lsls	r3, r3, #16
 80012a6:	0c12      	lsrs	r2, r2, #16
 80012a8:	1830      	adds	r0, r6, r0
 80012aa:	189b      	adds	r3, r3, r2
 80012ac:	4281      	cmp	r1, r0
 80012ae:	d306      	bcc.n	80012be <__aeabi_ddiv+0x3ee>
 80012b0:	d002      	beq.n	80012b8 <__aeabi_ddiv+0x3e8>
 80012b2:	2301      	movs	r3, #1
 80012b4:	431d      	orrs	r5, r3
 80012b6:	e6ce      	b.n	8001056 <__aeabi_ddiv+0x186>
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d100      	bne.n	80012be <__aeabi_ddiv+0x3ee>
 80012bc:	e6cb      	b.n	8001056 <__aeabi_ddiv+0x186>
 80012be:	1861      	adds	r1, r4, r1
 80012c0:	1e6e      	subs	r6, r5, #1
 80012c2:	42a1      	cmp	r1, r4
 80012c4:	d200      	bcs.n	80012c8 <__aeabi_ddiv+0x3f8>
 80012c6:	e0a4      	b.n	8001412 <__aeabi_ddiv+0x542>
 80012c8:	4281      	cmp	r1, r0
 80012ca:	d200      	bcs.n	80012ce <__aeabi_ddiv+0x3fe>
 80012cc:	e0c9      	b.n	8001462 <__aeabi_ddiv+0x592>
 80012ce:	d100      	bne.n	80012d2 <__aeabi_ddiv+0x402>
 80012d0:	e0d9      	b.n	8001486 <__aeabi_ddiv+0x5b6>
 80012d2:	0035      	movs	r5, r6
 80012d4:	e7ed      	b.n	80012b2 <__aeabi_ddiv+0x3e2>
 80012d6:	2501      	movs	r5, #1
 80012d8:	426d      	negs	r5, r5
 80012da:	2101      	movs	r1, #1
 80012dc:	1a89      	subs	r1, r1, r2
 80012de:	2938      	cmp	r1, #56	; 0x38
 80012e0:	dd00      	ble.n	80012e4 <__aeabi_ddiv+0x414>
 80012e2:	e64c      	b.n	8000f7e <__aeabi_ddiv+0xae>
 80012e4:	291f      	cmp	r1, #31
 80012e6:	dc00      	bgt.n	80012ea <__aeabi_ddiv+0x41a>
 80012e8:	e07f      	b.n	80013ea <__aeabi_ddiv+0x51a>
 80012ea:	231f      	movs	r3, #31
 80012ec:	425b      	negs	r3, r3
 80012ee:	1a9a      	subs	r2, r3, r2
 80012f0:	4643      	mov	r3, r8
 80012f2:	40d3      	lsrs	r3, r2
 80012f4:	2920      	cmp	r1, #32
 80012f6:	d004      	beq.n	8001302 <__aeabi_ddiv+0x432>
 80012f8:	4644      	mov	r4, r8
 80012fa:	4a65      	ldr	r2, [pc, #404]	; (8001490 <__aeabi_ddiv+0x5c0>)
 80012fc:	445a      	add	r2, fp
 80012fe:	4094      	lsls	r4, r2
 8001300:	4325      	orrs	r5, r4
 8001302:	1e6a      	subs	r2, r5, #1
 8001304:	4195      	sbcs	r5, r2
 8001306:	2207      	movs	r2, #7
 8001308:	432b      	orrs	r3, r5
 800130a:	0015      	movs	r5, r2
 800130c:	2400      	movs	r4, #0
 800130e:	401d      	ands	r5, r3
 8001310:	421a      	tst	r2, r3
 8001312:	d100      	bne.n	8001316 <__aeabi_ddiv+0x446>
 8001314:	e0a1      	b.n	800145a <__aeabi_ddiv+0x58a>
 8001316:	220f      	movs	r2, #15
 8001318:	2400      	movs	r4, #0
 800131a:	401a      	ands	r2, r3
 800131c:	2a04      	cmp	r2, #4
 800131e:	d100      	bne.n	8001322 <__aeabi_ddiv+0x452>
 8001320:	e098      	b.n	8001454 <__aeabi_ddiv+0x584>
 8001322:	1d1a      	adds	r2, r3, #4
 8001324:	429a      	cmp	r2, r3
 8001326:	419b      	sbcs	r3, r3
 8001328:	425b      	negs	r3, r3
 800132a:	18e4      	adds	r4, r4, r3
 800132c:	0013      	movs	r3, r2
 800132e:	0222      	lsls	r2, r4, #8
 8001330:	d400      	bmi.n	8001334 <__aeabi_ddiv+0x464>
 8001332:	e08f      	b.n	8001454 <__aeabi_ddiv+0x584>
 8001334:	2301      	movs	r3, #1
 8001336:	2400      	movs	r4, #0
 8001338:	2500      	movs	r5, #0
 800133a:	e623      	b.n	8000f84 <__aeabi_ddiv+0xb4>
 800133c:	42b5      	cmp	r5, r6
 800133e:	d300      	bcc.n	8001342 <__aeabi_ddiv+0x472>
 8001340:	e764      	b.n	800120c <__aeabi_ddiv+0x33c>
 8001342:	4643      	mov	r3, r8
 8001344:	1e5a      	subs	r2, r3, #1
 8001346:	9b00      	ldr	r3, [sp, #0]
 8001348:	469c      	mov	ip, r3
 800134a:	4465      	add	r5, ip
 800134c:	001f      	movs	r7, r3
 800134e:	429d      	cmp	r5, r3
 8001350:	419b      	sbcs	r3, r3
 8001352:	425b      	negs	r3, r3
 8001354:	191b      	adds	r3, r3, r4
 8001356:	18c9      	adds	r1, r1, r3
 8001358:	428c      	cmp	r4, r1
 800135a:	d23a      	bcs.n	80013d2 <__aeabi_ddiv+0x502>
 800135c:	4288      	cmp	r0, r1
 800135e:	d863      	bhi.n	8001428 <__aeabi_ddiv+0x558>
 8001360:	d060      	beq.n	8001424 <__aeabi_ddiv+0x554>
 8001362:	4690      	mov	r8, r2
 8001364:	e752      	b.n	800120c <__aeabi_ddiv+0x33c>
 8001366:	42aa      	cmp	r2, r5
 8001368:	d900      	bls.n	800136c <__aeabi_ddiv+0x49c>
 800136a:	e6ea      	b.n	8001142 <__aeabi_ddiv+0x272>
 800136c:	4643      	mov	r3, r8
 800136e:	07de      	lsls	r6, r3, #31
 8001370:	0858      	lsrs	r0, r3, #1
 8001372:	086b      	lsrs	r3, r5, #1
 8001374:	431e      	orrs	r6, r3
 8001376:	07ed      	lsls	r5, r5, #31
 8001378:	e6ea      	b.n	8001150 <__aeabi_ddiv+0x280>
 800137a:	4648      	mov	r0, r9
 800137c:	f001 f8de 	bl	800253c <__clzsi2>
 8001380:	0001      	movs	r1, r0
 8001382:	0002      	movs	r2, r0
 8001384:	3115      	adds	r1, #21
 8001386:	3220      	adds	r2, #32
 8001388:	291c      	cmp	r1, #28
 800138a:	dc00      	bgt.n	800138e <__aeabi_ddiv+0x4be>
 800138c:	e61a      	b.n	8000fc4 <__aeabi_ddiv+0xf4>
 800138e:	464b      	mov	r3, r9
 8001390:	3808      	subs	r0, #8
 8001392:	4083      	lsls	r3, r0
 8001394:	2500      	movs	r5, #0
 8001396:	4698      	mov	r8, r3
 8001398:	e620      	b.n	8000fdc <__aeabi_ddiv+0x10c>
 800139a:	f001 f8cf 	bl	800253c <__clzsi2>
 800139e:	0003      	movs	r3, r0
 80013a0:	001a      	movs	r2, r3
 80013a2:	3215      	adds	r2, #21
 80013a4:	3020      	adds	r0, #32
 80013a6:	2a1c      	cmp	r2, #28
 80013a8:	dc00      	bgt.n	80013ac <__aeabi_ddiv+0x4dc>
 80013aa:	e630      	b.n	800100e <__aeabi_ddiv+0x13e>
 80013ac:	4654      	mov	r4, sl
 80013ae:	3b08      	subs	r3, #8
 80013b0:	2200      	movs	r2, #0
 80013b2:	409c      	lsls	r4, r3
 80013b4:	e635      	b.n	8001022 <__aeabi_ddiv+0x152>
 80013b6:	230f      	movs	r3, #15
 80013b8:	402b      	ands	r3, r5
 80013ba:	2b04      	cmp	r3, #4
 80013bc:	d100      	bne.n	80013c0 <__aeabi_ddiv+0x4f0>
 80013be:	e652      	b.n	8001066 <__aeabi_ddiv+0x196>
 80013c0:	2305      	movs	r3, #5
 80013c2:	425b      	negs	r3, r3
 80013c4:	42ab      	cmp	r3, r5
 80013c6:	419b      	sbcs	r3, r3
 80013c8:	3504      	adds	r5, #4
 80013ca:	425b      	negs	r3, r3
 80013cc:	08ed      	lsrs	r5, r5, #3
 80013ce:	4498      	add	r8, r3
 80013d0:	e64a      	b.n	8001068 <__aeabi_ddiv+0x198>
 80013d2:	428c      	cmp	r4, r1
 80013d4:	d1c5      	bne.n	8001362 <__aeabi_ddiv+0x492>
 80013d6:	42af      	cmp	r7, r5
 80013d8:	d9c0      	bls.n	800135c <__aeabi_ddiv+0x48c>
 80013da:	4690      	mov	r8, r2
 80013dc:	e716      	b.n	800120c <__aeabi_ddiv+0x33c>
 80013de:	428a      	cmp	r2, r1
 80013e0:	d800      	bhi.n	80013e4 <__aeabi_ddiv+0x514>
 80013e2:	e6ea      	b.n	80011ba <__aeabi_ddiv+0x2ea>
 80013e4:	1e83      	subs	r3, r0, #2
 80013e6:	1909      	adds	r1, r1, r4
 80013e8:	e6e7      	b.n	80011ba <__aeabi_ddiv+0x2ea>
 80013ea:	4a2a      	ldr	r2, [pc, #168]	; (8001494 <__aeabi_ddiv+0x5c4>)
 80013ec:	0028      	movs	r0, r5
 80013ee:	445a      	add	r2, fp
 80013f0:	4643      	mov	r3, r8
 80013f2:	4095      	lsls	r5, r2
 80013f4:	4093      	lsls	r3, r2
 80013f6:	40c8      	lsrs	r0, r1
 80013f8:	1e6a      	subs	r2, r5, #1
 80013fa:	4195      	sbcs	r5, r2
 80013fc:	4644      	mov	r4, r8
 80013fe:	4303      	orrs	r3, r0
 8001400:	432b      	orrs	r3, r5
 8001402:	40cc      	lsrs	r4, r1
 8001404:	075a      	lsls	r2, r3, #29
 8001406:	d092      	beq.n	800132e <__aeabi_ddiv+0x45e>
 8001408:	220f      	movs	r2, #15
 800140a:	401a      	ands	r2, r3
 800140c:	2a04      	cmp	r2, #4
 800140e:	d188      	bne.n	8001322 <__aeabi_ddiv+0x452>
 8001410:	e78d      	b.n	800132e <__aeabi_ddiv+0x45e>
 8001412:	0035      	movs	r5, r6
 8001414:	4281      	cmp	r1, r0
 8001416:	d000      	beq.n	800141a <__aeabi_ddiv+0x54a>
 8001418:	e74b      	b.n	80012b2 <__aeabi_ddiv+0x3e2>
 800141a:	9a00      	ldr	r2, [sp, #0]
 800141c:	4293      	cmp	r3, r2
 800141e:	d000      	beq.n	8001422 <__aeabi_ddiv+0x552>
 8001420:	e747      	b.n	80012b2 <__aeabi_ddiv+0x3e2>
 8001422:	e618      	b.n	8001056 <__aeabi_ddiv+0x186>
 8001424:	42ae      	cmp	r6, r5
 8001426:	d99c      	bls.n	8001362 <__aeabi_ddiv+0x492>
 8001428:	2302      	movs	r3, #2
 800142a:	425b      	negs	r3, r3
 800142c:	469c      	mov	ip, r3
 800142e:	9b00      	ldr	r3, [sp, #0]
 8001430:	44e0      	add	r8, ip
 8001432:	469c      	mov	ip, r3
 8001434:	4465      	add	r5, ip
 8001436:	429d      	cmp	r5, r3
 8001438:	419b      	sbcs	r3, r3
 800143a:	425b      	negs	r3, r3
 800143c:	191b      	adds	r3, r3, r4
 800143e:	18c9      	adds	r1, r1, r3
 8001440:	e6e4      	b.n	800120c <__aeabi_ddiv+0x33c>
 8001442:	4a15      	ldr	r2, [pc, #84]	; (8001498 <__aeabi_ddiv+0x5c8>)
 8001444:	445a      	add	r2, fp
 8001446:	2a00      	cmp	r2, #0
 8001448:	dc00      	bgt.n	800144c <__aeabi_ddiv+0x57c>
 800144a:	e744      	b.n	80012d6 <__aeabi_ddiv+0x406>
 800144c:	2301      	movs	r3, #1
 800144e:	2500      	movs	r5, #0
 8001450:	4498      	add	r8, r3
 8001452:	e609      	b.n	8001068 <__aeabi_ddiv+0x198>
 8001454:	0765      	lsls	r5, r4, #29
 8001456:	0264      	lsls	r4, r4, #9
 8001458:	0b24      	lsrs	r4, r4, #12
 800145a:	08db      	lsrs	r3, r3, #3
 800145c:	431d      	orrs	r5, r3
 800145e:	2300      	movs	r3, #0
 8001460:	e590      	b.n	8000f84 <__aeabi_ddiv+0xb4>
 8001462:	9e00      	ldr	r6, [sp, #0]
 8001464:	3d02      	subs	r5, #2
 8001466:	0072      	lsls	r2, r6, #1
 8001468:	42b2      	cmp	r2, r6
 800146a:	41bf      	sbcs	r7, r7
 800146c:	427f      	negs	r7, r7
 800146e:	193c      	adds	r4, r7, r4
 8001470:	1909      	adds	r1, r1, r4
 8001472:	9200      	str	r2, [sp, #0]
 8001474:	e7ce      	b.n	8001414 <__aeabi_ddiv+0x544>
 8001476:	2480      	movs	r4, #128	; 0x80
 8001478:	4643      	mov	r3, r8
 800147a:	0324      	lsls	r4, r4, #12
 800147c:	431c      	orrs	r4, r3
 800147e:	0324      	lsls	r4, r4, #12
 8001480:	4b06      	ldr	r3, [pc, #24]	; (800149c <__aeabi_ddiv+0x5cc>)
 8001482:	0b24      	lsrs	r4, r4, #12
 8001484:	e57e      	b.n	8000f84 <__aeabi_ddiv+0xb4>
 8001486:	9a00      	ldr	r2, [sp, #0]
 8001488:	429a      	cmp	r2, r3
 800148a:	d3ea      	bcc.n	8001462 <__aeabi_ddiv+0x592>
 800148c:	0035      	movs	r5, r6
 800148e:	e7c4      	b.n	800141a <__aeabi_ddiv+0x54a>
 8001490:	0000043e 	.word	0x0000043e
 8001494:	0000041e 	.word	0x0000041e
 8001498:	000003ff 	.word	0x000003ff
 800149c:	000007ff 	.word	0x000007ff

080014a0 <__eqdf2>:
 80014a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014a2:	464f      	mov	r7, r9
 80014a4:	4646      	mov	r6, r8
 80014a6:	46d6      	mov	lr, sl
 80014a8:	4694      	mov	ip, r2
 80014aa:	4691      	mov	r9, r2
 80014ac:	031a      	lsls	r2, r3, #12
 80014ae:	0b12      	lsrs	r2, r2, #12
 80014b0:	4d18      	ldr	r5, [pc, #96]	; (8001514 <__eqdf2+0x74>)
 80014b2:	b5c0      	push	{r6, r7, lr}
 80014b4:	004c      	lsls	r4, r1, #1
 80014b6:	030f      	lsls	r7, r1, #12
 80014b8:	4692      	mov	sl, r2
 80014ba:	005a      	lsls	r2, r3, #1
 80014bc:	0006      	movs	r6, r0
 80014be:	4680      	mov	r8, r0
 80014c0:	0b3f      	lsrs	r7, r7, #12
 80014c2:	2001      	movs	r0, #1
 80014c4:	0d64      	lsrs	r4, r4, #21
 80014c6:	0fc9      	lsrs	r1, r1, #31
 80014c8:	0d52      	lsrs	r2, r2, #21
 80014ca:	0fdb      	lsrs	r3, r3, #31
 80014cc:	42ac      	cmp	r4, r5
 80014ce:	d00a      	beq.n	80014e6 <__eqdf2+0x46>
 80014d0:	42aa      	cmp	r2, r5
 80014d2:	d003      	beq.n	80014dc <__eqdf2+0x3c>
 80014d4:	4294      	cmp	r4, r2
 80014d6:	d101      	bne.n	80014dc <__eqdf2+0x3c>
 80014d8:	4557      	cmp	r7, sl
 80014da:	d00d      	beq.n	80014f8 <__eqdf2+0x58>
 80014dc:	bce0      	pop	{r5, r6, r7}
 80014de:	46ba      	mov	sl, r7
 80014e0:	46b1      	mov	r9, r6
 80014e2:	46a8      	mov	r8, r5
 80014e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014e6:	003d      	movs	r5, r7
 80014e8:	4335      	orrs	r5, r6
 80014ea:	d1f7      	bne.n	80014dc <__eqdf2+0x3c>
 80014ec:	42a2      	cmp	r2, r4
 80014ee:	d1f5      	bne.n	80014dc <__eqdf2+0x3c>
 80014f0:	4652      	mov	r2, sl
 80014f2:	4665      	mov	r5, ip
 80014f4:	432a      	orrs	r2, r5
 80014f6:	d1f1      	bne.n	80014dc <__eqdf2+0x3c>
 80014f8:	2001      	movs	r0, #1
 80014fa:	45c8      	cmp	r8, r9
 80014fc:	d1ee      	bne.n	80014dc <__eqdf2+0x3c>
 80014fe:	4299      	cmp	r1, r3
 8001500:	d006      	beq.n	8001510 <__eqdf2+0x70>
 8001502:	2c00      	cmp	r4, #0
 8001504:	d1ea      	bne.n	80014dc <__eqdf2+0x3c>
 8001506:	433e      	orrs	r6, r7
 8001508:	0030      	movs	r0, r6
 800150a:	1e46      	subs	r6, r0, #1
 800150c:	41b0      	sbcs	r0, r6
 800150e:	e7e5      	b.n	80014dc <__eqdf2+0x3c>
 8001510:	2000      	movs	r0, #0
 8001512:	e7e3      	b.n	80014dc <__eqdf2+0x3c>
 8001514:	000007ff 	.word	0x000007ff

08001518 <__gedf2>:
 8001518:	b5f0      	push	{r4, r5, r6, r7, lr}
 800151a:	464e      	mov	r6, r9
 800151c:	4645      	mov	r5, r8
 800151e:	4657      	mov	r7, sl
 8001520:	46de      	mov	lr, fp
 8001522:	0004      	movs	r4, r0
 8001524:	0018      	movs	r0, r3
 8001526:	b5e0      	push	{r5, r6, r7, lr}
 8001528:	0016      	movs	r6, r2
 800152a:	031b      	lsls	r3, r3, #12
 800152c:	0b1b      	lsrs	r3, r3, #12
 800152e:	4d32      	ldr	r5, [pc, #200]	; (80015f8 <__gedf2+0xe0>)
 8001530:	030f      	lsls	r7, r1, #12
 8001532:	004a      	lsls	r2, r1, #1
 8001534:	4699      	mov	r9, r3
 8001536:	0043      	lsls	r3, r0, #1
 8001538:	46a4      	mov	ip, r4
 800153a:	46b0      	mov	r8, r6
 800153c:	0b3f      	lsrs	r7, r7, #12
 800153e:	0d52      	lsrs	r2, r2, #21
 8001540:	0fc9      	lsrs	r1, r1, #31
 8001542:	0d5b      	lsrs	r3, r3, #21
 8001544:	0fc0      	lsrs	r0, r0, #31
 8001546:	42aa      	cmp	r2, r5
 8001548:	d029      	beq.n	800159e <__gedf2+0x86>
 800154a:	42ab      	cmp	r3, r5
 800154c:	d018      	beq.n	8001580 <__gedf2+0x68>
 800154e:	2a00      	cmp	r2, #0
 8001550:	d12a      	bne.n	80015a8 <__gedf2+0x90>
 8001552:	433c      	orrs	r4, r7
 8001554:	46a3      	mov	fp, r4
 8001556:	4265      	negs	r5, r4
 8001558:	4165      	adcs	r5, r4
 800155a:	2b00      	cmp	r3, #0
 800155c:	d102      	bne.n	8001564 <__gedf2+0x4c>
 800155e:	464c      	mov	r4, r9
 8001560:	4326      	orrs	r6, r4
 8001562:	d027      	beq.n	80015b4 <__gedf2+0x9c>
 8001564:	2d00      	cmp	r5, #0
 8001566:	d115      	bne.n	8001594 <__gedf2+0x7c>
 8001568:	4281      	cmp	r1, r0
 800156a:	d028      	beq.n	80015be <__gedf2+0xa6>
 800156c:	2002      	movs	r0, #2
 800156e:	3901      	subs	r1, #1
 8001570:	4008      	ands	r0, r1
 8001572:	3801      	subs	r0, #1
 8001574:	bcf0      	pop	{r4, r5, r6, r7}
 8001576:	46bb      	mov	fp, r7
 8001578:	46b2      	mov	sl, r6
 800157a:	46a9      	mov	r9, r5
 800157c:	46a0      	mov	r8, r4
 800157e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001580:	464d      	mov	r5, r9
 8001582:	432e      	orrs	r6, r5
 8001584:	d12f      	bne.n	80015e6 <__gedf2+0xce>
 8001586:	2a00      	cmp	r2, #0
 8001588:	d1ee      	bne.n	8001568 <__gedf2+0x50>
 800158a:	433c      	orrs	r4, r7
 800158c:	4265      	negs	r5, r4
 800158e:	4165      	adcs	r5, r4
 8001590:	2d00      	cmp	r5, #0
 8001592:	d0e9      	beq.n	8001568 <__gedf2+0x50>
 8001594:	2800      	cmp	r0, #0
 8001596:	d1ed      	bne.n	8001574 <__gedf2+0x5c>
 8001598:	2001      	movs	r0, #1
 800159a:	4240      	negs	r0, r0
 800159c:	e7ea      	b.n	8001574 <__gedf2+0x5c>
 800159e:	003d      	movs	r5, r7
 80015a0:	4325      	orrs	r5, r4
 80015a2:	d120      	bne.n	80015e6 <__gedf2+0xce>
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d0eb      	beq.n	8001580 <__gedf2+0x68>
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d1dd      	bne.n	8001568 <__gedf2+0x50>
 80015ac:	464c      	mov	r4, r9
 80015ae:	4326      	orrs	r6, r4
 80015b0:	d1da      	bne.n	8001568 <__gedf2+0x50>
 80015b2:	e7db      	b.n	800156c <__gedf2+0x54>
 80015b4:	465b      	mov	r3, fp
 80015b6:	2000      	movs	r0, #0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d0db      	beq.n	8001574 <__gedf2+0x5c>
 80015bc:	e7d6      	b.n	800156c <__gedf2+0x54>
 80015be:	429a      	cmp	r2, r3
 80015c0:	dc0a      	bgt.n	80015d8 <__gedf2+0xc0>
 80015c2:	dbe7      	blt.n	8001594 <__gedf2+0x7c>
 80015c4:	454f      	cmp	r7, r9
 80015c6:	d8d1      	bhi.n	800156c <__gedf2+0x54>
 80015c8:	d010      	beq.n	80015ec <__gedf2+0xd4>
 80015ca:	2000      	movs	r0, #0
 80015cc:	454f      	cmp	r7, r9
 80015ce:	d2d1      	bcs.n	8001574 <__gedf2+0x5c>
 80015d0:	2900      	cmp	r1, #0
 80015d2:	d0e1      	beq.n	8001598 <__gedf2+0x80>
 80015d4:	0008      	movs	r0, r1
 80015d6:	e7cd      	b.n	8001574 <__gedf2+0x5c>
 80015d8:	4243      	negs	r3, r0
 80015da:	4158      	adcs	r0, r3
 80015dc:	2302      	movs	r3, #2
 80015de:	4240      	negs	r0, r0
 80015e0:	4018      	ands	r0, r3
 80015e2:	3801      	subs	r0, #1
 80015e4:	e7c6      	b.n	8001574 <__gedf2+0x5c>
 80015e6:	2002      	movs	r0, #2
 80015e8:	4240      	negs	r0, r0
 80015ea:	e7c3      	b.n	8001574 <__gedf2+0x5c>
 80015ec:	45c4      	cmp	ip, r8
 80015ee:	d8bd      	bhi.n	800156c <__gedf2+0x54>
 80015f0:	2000      	movs	r0, #0
 80015f2:	45c4      	cmp	ip, r8
 80015f4:	d2be      	bcs.n	8001574 <__gedf2+0x5c>
 80015f6:	e7eb      	b.n	80015d0 <__gedf2+0xb8>
 80015f8:	000007ff 	.word	0x000007ff

080015fc <__ledf2>:
 80015fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015fe:	464e      	mov	r6, r9
 8001600:	4645      	mov	r5, r8
 8001602:	4657      	mov	r7, sl
 8001604:	46de      	mov	lr, fp
 8001606:	0004      	movs	r4, r0
 8001608:	0018      	movs	r0, r3
 800160a:	b5e0      	push	{r5, r6, r7, lr}
 800160c:	0016      	movs	r6, r2
 800160e:	031b      	lsls	r3, r3, #12
 8001610:	0b1b      	lsrs	r3, r3, #12
 8001612:	4d31      	ldr	r5, [pc, #196]	; (80016d8 <__ledf2+0xdc>)
 8001614:	030f      	lsls	r7, r1, #12
 8001616:	004a      	lsls	r2, r1, #1
 8001618:	4699      	mov	r9, r3
 800161a:	0043      	lsls	r3, r0, #1
 800161c:	46a4      	mov	ip, r4
 800161e:	46b0      	mov	r8, r6
 8001620:	0b3f      	lsrs	r7, r7, #12
 8001622:	0d52      	lsrs	r2, r2, #21
 8001624:	0fc9      	lsrs	r1, r1, #31
 8001626:	0d5b      	lsrs	r3, r3, #21
 8001628:	0fc0      	lsrs	r0, r0, #31
 800162a:	42aa      	cmp	r2, r5
 800162c:	d011      	beq.n	8001652 <__ledf2+0x56>
 800162e:	42ab      	cmp	r3, r5
 8001630:	d014      	beq.n	800165c <__ledf2+0x60>
 8001632:	2a00      	cmp	r2, #0
 8001634:	d12f      	bne.n	8001696 <__ledf2+0x9a>
 8001636:	433c      	orrs	r4, r7
 8001638:	46a3      	mov	fp, r4
 800163a:	4265      	negs	r5, r4
 800163c:	4165      	adcs	r5, r4
 800163e:	2b00      	cmp	r3, #0
 8001640:	d114      	bne.n	800166c <__ledf2+0x70>
 8001642:	464c      	mov	r4, r9
 8001644:	4326      	orrs	r6, r4
 8001646:	d111      	bne.n	800166c <__ledf2+0x70>
 8001648:	465b      	mov	r3, fp
 800164a:	2000      	movs	r0, #0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d017      	beq.n	8001680 <__ledf2+0x84>
 8001650:	e010      	b.n	8001674 <__ledf2+0x78>
 8001652:	003d      	movs	r5, r7
 8001654:	4325      	orrs	r5, r4
 8001656:	d112      	bne.n	800167e <__ledf2+0x82>
 8001658:	4293      	cmp	r3, r2
 800165a:	d11c      	bne.n	8001696 <__ledf2+0x9a>
 800165c:	464d      	mov	r5, r9
 800165e:	432e      	orrs	r6, r5
 8001660:	d10d      	bne.n	800167e <__ledf2+0x82>
 8001662:	2a00      	cmp	r2, #0
 8001664:	d104      	bne.n	8001670 <__ledf2+0x74>
 8001666:	433c      	orrs	r4, r7
 8001668:	4265      	negs	r5, r4
 800166a:	4165      	adcs	r5, r4
 800166c:	2d00      	cmp	r5, #0
 800166e:	d10d      	bne.n	800168c <__ledf2+0x90>
 8001670:	4281      	cmp	r1, r0
 8001672:	d016      	beq.n	80016a2 <__ledf2+0xa6>
 8001674:	2002      	movs	r0, #2
 8001676:	3901      	subs	r1, #1
 8001678:	4008      	ands	r0, r1
 800167a:	3801      	subs	r0, #1
 800167c:	e000      	b.n	8001680 <__ledf2+0x84>
 800167e:	2002      	movs	r0, #2
 8001680:	bcf0      	pop	{r4, r5, r6, r7}
 8001682:	46bb      	mov	fp, r7
 8001684:	46b2      	mov	sl, r6
 8001686:	46a9      	mov	r9, r5
 8001688:	46a0      	mov	r8, r4
 800168a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800168c:	2800      	cmp	r0, #0
 800168e:	d1f7      	bne.n	8001680 <__ledf2+0x84>
 8001690:	2001      	movs	r0, #1
 8001692:	4240      	negs	r0, r0
 8001694:	e7f4      	b.n	8001680 <__ledf2+0x84>
 8001696:	2b00      	cmp	r3, #0
 8001698:	d1ea      	bne.n	8001670 <__ledf2+0x74>
 800169a:	464c      	mov	r4, r9
 800169c:	4326      	orrs	r6, r4
 800169e:	d1e7      	bne.n	8001670 <__ledf2+0x74>
 80016a0:	e7e8      	b.n	8001674 <__ledf2+0x78>
 80016a2:	429a      	cmp	r2, r3
 80016a4:	dd06      	ble.n	80016b4 <__ledf2+0xb8>
 80016a6:	4243      	negs	r3, r0
 80016a8:	4158      	adcs	r0, r3
 80016aa:	2302      	movs	r3, #2
 80016ac:	4240      	negs	r0, r0
 80016ae:	4018      	ands	r0, r3
 80016b0:	3801      	subs	r0, #1
 80016b2:	e7e5      	b.n	8001680 <__ledf2+0x84>
 80016b4:	429a      	cmp	r2, r3
 80016b6:	dbe9      	blt.n	800168c <__ledf2+0x90>
 80016b8:	454f      	cmp	r7, r9
 80016ba:	d8db      	bhi.n	8001674 <__ledf2+0x78>
 80016bc:	d006      	beq.n	80016cc <__ledf2+0xd0>
 80016be:	2000      	movs	r0, #0
 80016c0:	454f      	cmp	r7, r9
 80016c2:	d2dd      	bcs.n	8001680 <__ledf2+0x84>
 80016c4:	2900      	cmp	r1, #0
 80016c6:	d0e3      	beq.n	8001690 <__ledf2+0x94>
 80016c8:	0008      	movs	r0, r1
 80016ca:	e7d9      	b.n	8001680 <__ledf2+0x84>
 80016cc:	45c4      	cmp	ip, r8
 80016ce:	d8d1      	bhi.n	8001674 <__ledf2+0x78>
 80016d0:	2000      	movs	r0, #0
 80016d2:	45c4      	cmp	ip, r8
 80016d4:	d2d4      	bcs.n	8001680 <__ledf2+0x84>
 80016d6:	e7f5      	b.n	80016c4 <__ledf2+0xc8>
 80016d8:	000007ff 	.word	0x000007ff

080016dc <__aeabi_dmul>:
 80016dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016de:	4657      	mov	r7, sl
 80016e0:	464e      	mov	r6, r9
 80016e2:	4645      	mov	r5, r8
 80016e4:	46de      	mov	lr, fp
 80016e6:	b5e0      	push	{r5, r6, r7, lr}
 80016e8:	4698      	mov	r8, r3
 80016ea:	030c      	lsls	r4, r1, #12
 80016ec:	004b      	lsls	r3, r1, #1
 80016ee:	0006      	movs	r6, r0
 80016f0:	4692      	mov	sl, r2
 80016f2:	b087      	sub	sp, #28
 80016f4:	0b24      	lsrs	r4, r4, #12
 80016f6:	0d5b      	lsrs	r3, r3, #21
 80016f8:	0fcf      	lsrs	r7, r1, #31
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d06c      	beq.n	80017d8 <__aeabi_dmul+0xfc>
 80016fe:	4add      	ldr	r2, [pc, #884]	; (8001a74 <__aeabi_dmul+0x398>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d100      	bne.n	8001706 <__aeabi_dmul+0x2a>
 8001704:	e086      	b.n	8001814 <__aeabi_dmul+0x138>
 8001706:	0f42      	lsrs	r2, r0, #29
 8001708:	00e4      	lsls	r4, r4, #3
 800170a:	4314      	orrs	r4, r2
 800170c:	2280      	movs	r2, #128	; 0x80
 800170e:	0412      	lsls	r2, r2, #16
 8001710:	4314      	orrs	r4, r2
 8001712:	4ad9      	ldr	r2, [pc, #868]	; (8001a78 <__aeabi_dmul+0x39c>)
 8001714:	00c5      	lsls	r5, r0, #3
 8001716:	4694      	mov	ip, r2
 8001718:	4463      	add	r3, ip
 800171a:	9300      	str	r3, [sp, #0]
 800171c:	2300      	movs	r3, #0
 800171e:	4699      	mov	r9, r3
 8001720:	469b      	mov	fp, r3
 8001722:	4643      	mov	r3, r8
 8001724:	4642      	mov	r2, r8
 8001726:	031e      	lsls	r6, r3, #12
 8001728:	0fd2      	lsrs	r2, r2, #31
 800172a:	005b      	lsls	r3, r3, #1
 800172c:	4650      	mov	r0, sl
 800172e:	4690      	mov	r8, r2
 8001730:	0b36      	lsrs	r6, r6, #12
 8001732:	0d5b      	lsrs	r3, r3, #21
 8001734:	d100      	bne.n	8001738 <__aeabi_dmul+0x5c>
 8001736:	e078      	b.n	800182a <__aeabi_dmul+0x14e>
 8001738:	4ace      	ldr	r2, [pc, #824]	; (8001a74 <__aeabi_dmul+0x398>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d01d      	beq.n	800177a <__aeabi_dmul+0x9e>
 800173e:	49ce      	ldr	r1, [pc, #824]	; (8001a78 <__aeabi_dmul+0x39c>)
 8001740:	0f42      	lsrs	r2, r0, #29
 8001742:	468c      	mov	ip, r1
 8001744:	9900      	ldr	r1, [sp, #0]
 8001746:	4463      	add	r3, ip
 8001748:	00f6      	lsls	r6, r6, #3
 800174a:	468c      	mov	ip, r1
 800174c:	4316      	orrs	r6, r2
 800174e:	2280      	movs	r2, #128	; 0x80
 8001750:	449c      	add	ip, r3
 8001752:	0412      	lsls	r2, r2, #16
 8001754:	4663      	mov	r3, ip
 8001756:	4316      	orrs	r6, r2
 8001758:	00c2      	lsls	r2, r0, #3
 800175a:	2000      	movs	r0, #0
 800175c:	9300      	str	r3, [sp, #0]
 800175e:	9900      	ldr	r1, [sp, #0]
 8001760:	4643      	mov	r3, r8
 8001762:	3101      	adds	r1, #1
 8001764:	468c      	mov	ip, r1
 8001766:	4649      	mov	r1, r9
 8001768:	407b      	eors	r3, r7
 800176a:	9301      	str	r3, [sp, #4]
 800176c:	290f      	cmp	r1, #15
 800176e:	d900      	bls.n	8001772 <__aeabi_dmul+0x96>
 8001770:	e07e      	b.n	8001870 <__aeabi_dmul+0x194>
 8001772:	4bc2      	ldr	r3, [pc, #776]	; (8001a7c <__aeabi_dmul+0x3a0>)
 8001774:	0089      	lsls	r1, r1, #2
 8001776:	5859      	ldr	r1, [r3, r1]
 8001778:	468f      	mov	pc, r1
 800177a:	4652      	mov	r2, sl
 800177c:	9b00      	ldr	r3, [sp, #0]
 800177e:	4332      	orrs	r2, r6
 8001780:	d000      	beq.n	8001784 <__aeabi_dmul+0xa8>
 8001782:	e156      	b.n	8001a32 <__aeabi_dmul+0x356>
 8001784:	49bb      	ldr	r1, [pc, #748]	; (8001a74 <__aeabi_dmul+0x398>)
 8001786:	2600      	movs	r6, #0
 8001788:	468c      	mov	ip, r1
 800178a:	4463      	add	r3, ip
 800178c:	4649      	mov	r1, r9
 800178e:	9300      	str	r3, [sp, #0]
 8001790:	2302      	movs	r3, #2
 8001792:	4319      	orrs	r1, r3
 8001794:	4689      	mov	r9, r1
 8001796:	2002      	movs	r0, #2
 8001798:	e7e1      	b.n	800175e <__aeabi_dmul+0x82>
 800179a:	4643      	mov	r3, r8
 800179c:	9301      	str	r3, [sp, #4]
 800179e:	0034      	movs	r4, r6
 80017a0:	0015      	movs	r5, r2
 80017a2:	4683      	mov	fp, r0
 80017a4:	465b      	mov	r3, fp
 80017a6:	2b02      	cmp	r3, #2
 80017a8:	d05e      	beq.n	8001868 <__aeabi_dmul+0x18c>
 80017aa:	2b03      	cmp	r3, #3
 80017ac:	d100      	bne.n	80017b0 <__aeabi_dmul+0xd4>
 80017ae:	e1f3      	b.n	8001b98 <__aeabi_dmul+0x4bc>
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d000      	beq.n	80017b6 <__aeabi_dmul+0xda>
 80017b4:	e118      	b.n	80019e8 <__aeabi_dmul+0x30c>
 80017b6:	2200      	movs	r2, #0
 80017b8:	2400      	movs	r4, #0
 80017ba:	2500      	movs	r5, #0
 80017bc:	9b01      	ldr	r3, [sp, #4]
 80017be:	0512      	lsls	r2, r2, #20
 80017c0:	4322      	orrs	r2, r4
 80017c2:	07db      	lsls	r3, r3, #31
 80017c4:	431a      	orrs	r2, r3
 80017c6:	0028      	movs	r0, r5
 80017c8:	0011      	movs	r1, r2
 80017ca:	b007      	add	sp, #28
 80017cc:	bcf0      	pop	{r4, r5, r6, r7}
 80017ce:	46bb      	mov	fp, r7
 80017d0:	46b2      	mov	sl, r6
 80017d2:	46a9      	mov	r9, r5
 80017d4:	46a0      	mov	r8, r4
 80017d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017d8:	0025      	movs	r5, r4
 80017da:	4305      	orrs	r5, r0
 80017dc:	d100      	bne.n	80017e0 <__aeabi_dmul+0x104>
 80017de:	e141      	b.n	8001a64 <__aeabi_dmul+0x388>
 80017e0:	2c00      	cmp	r4, #0
 80017e2:	d100      	bne.n	80017e6 <__aeabi_dmul+0x10a>
 80017e4:	e1ad      	b.n	8001b42 <__aeabi_dmul+0x466>
 80017e6:	0020      	movs	r0, r4
 80017e8:	f000 fea8 	bl	800253c <__clzsi2>
 80017ec:	0001      	movs	r1, r0
 80017ee:	0002      	movs	r2, r0
 80017f0:	390b      	subs	r1, #11
 80017f2:	231d      	movs	r3, #29
 80017f4:	0010      	movs	r0, r2
 80017f6:	1a5b      	subs	r3, r3, r1
 80017f8:	0031      	movs	r1, r6
 80017fa:	0035      	movs	r5, r6
 80017fc:	3808      	subs	r0, #8
 80017fe:	4084      	lsls	r4, r0
 8001800:	40d9      	lsrs	r1, r3
 8001802:	4085      	lsls	r5, r0
 8001804:	430c      	orrs	r4, r1
 8001806:	489e      	ldr	r0, [pc, #632]	; (8001a80 <__aeabi_dmul+0x3a4>)
 8001808:	1a83      	subs	r3, r0, r2
 800180a:	9300      	str	r3, [sp, #0]
 800180c:	2300      	movs	r3, #0
 800180e:	4699      	mov	r9, r3
 8001810:	469b      	mov	fp, r3
 8001812:	e786      	b.n	8001722 <__aeabi_dmul+0x46>
 8001814:	0005      	movs	r5, r0
 8001816:	4325      	orrs	r5, r4
 8001818:	d000      	beq.n	800181c <__aeabi_dmul+0x140>
 800181a:	e11c      	b.n	8001a56 <__aeabi_dmul+0x37a>
 800181c:	2208      	movs	r2, #8
 800181e:	9300      	str	r3, [sp, #0]
 8001820:	2302      	movs	r3, #2
 8001822:	2400      	movs	r4, #0
 8001824:	4691      	mov	r9, r2
 8001826:	469b      	mov	fp, r3
 8001828:	e77b      	b.n	8001722 <__aeabi_dmul+0x46>
 800182a:	4652      	mov	r2, sl
 800182c:	4332      	orrs	r2, r6
 800182e:	d100      	bne.n	8001832 <__aeabi_dmul+0x156>
 8001830:	e10a      	b.n	8001a48 <__aeabi_dmul+0x36c>
 8001832:	2e00      	cmp	r6, #0
 8001834:	d100      	bne.n	8001838 <__aeabi_dmul+0x15c>
 8001836:	e176      	b.n	8001b26 <__aeabi_dmul+0x44a>
 8001838:	0030      	movs	r0, r6
 800183a:	f000 fe7f 	bl	800253c <__clzsi2>
 800183e:	0002      	movs	r2, r0
 8001840:	3a0b      	subs	r2, #11
 8001842:	231d      	movs	r3, #29
 8001844:	0001      	movs	r1, r0
 8001846:	1a9b      	subs	r3, r3, r2
 8001848:	4652      	mov	r2, sl
 800184a:	3908      	subs	r1, #8
 800184c:	40da      	lsrs	r2, r3
 800184e:	408e      	lsls	r6, r1
 8001850:	4316      	orrs	r6, r2
 8001852:	4652      	mov	r2, sl
 8001854:	408a      	lsls	r2, r1
 8001856:	9b00      	ldr	r3, [sp, #0]
 8001858:	4989      	ldr	r1, [pc, #548]	; (8001a80 <__aeabi_dmul+0x3a4>)
 800185a:	1a18      	subs	r0, r3, r0
 800185c:	0003      	movs	r3, r0
 800185e:	468c      	mov	ip, r1
 8001860:	4463      	add	r3, ip
 8001862:	2000      	movs	r0, #0
 8001864:	9300      	str	r3, [sp, #0]
 8001866:	e77a      	b.n	800175e <__aeabi_dmul+0x82>
 8001868:	2400      	movs	r4, #0
 800186a:	2500      	movs	r5, #0
 800186c:	4a81      	ldr	r2, [pc, #516]	; (8001a74 <__aeabi_dmul+0x398>)
 800186e:	e7a5      	b.n	80017bc <__aeabi_dmul+0xe0>
 8001870:	0c2f      	lsrs	r7, r5, #16
 8001872:	042d      	lsls	r5, r5, #16
 8001874:	0c2d      	lsrs	r5, r5, #16
 8001876:	002b      	movs	r3, r5
 8001878:	0c11      	lsrs	r1, r2, #16
 800187a:	0412      	lsls	r2, r2, #16
 800187c:	0c12      	lsrs	r2, r2, #16
 800187e:	4353      	muls	r3, r2
 8001880:	4698      	mov	r8, r3
 8001882:	0013      	movs	r3, r2
 8001884:	0028      	movs	r0, r5
 8001886:	437b      	muls	r3, r7
 8001888:	4699      	mov	r9, r3
 800188a:	4348      	muls	r0, r1
 800188c:	4448      	add	r0, r9
 800188e:	4683      	mov	fp, r0
 8001890:	4640      	mov	r0, r8
 8001892:	000b      	movs	r3, r1
 8001894:	0c00      	lsrs	r0, r0, #16
 8001896:	4682      	mov	sl, r0
 8001898:	4658      	mov	r0, fp
 800189a:	437b      	muls	r3, r7
 800189c:	4450      	add	r0, sl
 800189e:	9302      	str	r3, [sp, #8]
 80018a0:	4581      	cmp	r9, r0
 80018a2:	d906      	bls.n	80018b2 <__aeabi_dmul+0x1d6>
 80018a4:	469a      	mov	sl, r3
 80018a6:	2380      	movs	r3, #128	; 0x80
 80018a8:	025b      	lsls	r3, r3, #9
 80018aa:	4699      	mov	r9, r3
 80018ac:	44ca      	add	sl, r9
 80018ae:	4653      	mov	r3, sl
 80018b0:	9302      	str	r3, [sp, #8]
 80018b2:	0c03      	lsrs	r3, r0, #16
 80018b4:	469b      	mov	fp, r3
 80018b6:	4643      	mov	r3, r8
 80018b8:	041b      	lsls	r3, r3, #16
 80018ba:	0400      	lsls	r0, r0, #16
 80018bc:	0c1b      	lsrs	r3, r3, #16
 80018be:	4698      	mov	r8, r3
 80018c0:	0003      	movs	r3, r0
 80018c2:	4443      	add	r3, r8
 80018c4:	9304      	str	r3, [sp, #16]
 80018c6:	0c33      	lsrs	r3, r6, #16
 80018c8:	4699      	mov	r9, r3
 80018ca:	002b      	movs	r3, r5
 80018cc:	0436      	lsls	r6, r6, #16
 80018ce:	0c36      	lsrs	r6, r6, #16
 80018d0:	4373      	muls	r3, r6
 80018d2:	4698      	mov	r8, r3
 80018d4:	0033      	movs	r3, r6
 80018d6:	437b      	muls	r3, r7
 80018d8:	469a      	mov	sl, r3
 80018da:	464b      	mov	r3, r9
 80018dc:	435d      	muls	r5, r3
 80018de:	435f      	muls	r7, r3
 80018e0:	4643      	mov	r3, r8
 80018e2:	4455      	add	r5, sl
 80018e4:	0c18      	lsrs	r0, r3, #16
 80018e6:	1940      	adds	r0, r0, r5
 80018e8:	4582      	cmp	sl, r0
 80018ea:	d903      	bls.n	80018f4 <__aeabi_dmul+0x218>
 80018ec:	2380      	movs	r3, #128	; 0x80
 80018ee:	025b      	lsls	r3, r3, #9
 80018f0:	469a      	mov	sl, r3
 80018f2:	4457      	add	r7, sl
 80018f4:	0c05      	lsrs	r5, r0, #16
 80018f6:	19eb      	adds	r3, r5, r7
 80018f8:	9305      	str	r3, [sp, #20]
 80018fa:	4643      	mov	r3, r8
 80018fc:	041d      	lsls	r5, r3, #16
 80018fe:	0c2d      	lsrs	r5, r5, #16
 8001900:	0400      	lsls	r0, r0, #16
 8001902:	1940      	adds	r0, r0, r5
 8001904:	0c25      	lsrs	r5, r4, #16
 8001906:	0424      	lsls	r4, r4, #16
 8001908:	0c24      	lsrs	r4, r4, #16
 800190a:	0027      	movs	r7, r4
 800190c:	4357      	muls	r7, r2
 800190e:	436a      	muls	r2, r5
 8001910:	4690      	mov	r8, r2
 8001912:	002a      	movs	r2, r5
 8001914:	0c3b      	lsrs	r3, r7, #16
 8001916:	469a      	mov	sl, r3
 8001918:	434a      	muls	r2, r1
 800191a:	4361      	muls	r1, r4
 800191c:	4441      	add	r1, r8
 800191e:	4451      	add	r1, sl
 8001920:	4483      	add	fp, r0
 8001922:	4588      	cmp	r8, r1
 8001924:	d903      	bls.n	800192e <__aeabi_dmul+0x252>
 8001926:	2380      	movs	r3, #128	; 0x80
 8001928:	025b      	lsls	r3, r3, #9
 800192a:	4698      	mov	r8, r3
 800192c:	4442      	add	r2, r8
 800192e:	043f      	lsls	r7, r7, #16
 8001930:	0c0b      	lsrs	r3, r1, #16
 8001932:	0c3f      	lsrs	r7, r7, #16
 8001934:	0409      	lsls	r1, r1, #16
 8001936:	19c9      	adds	r1, r1, r7
 8001938:	0027      	movs	r7, r4
 800193a:	4698      	mov	r8, r3
 800193c:	464b      	mov	r3, r9
 800193e:	4377      	muls	r7, r6
 8001940:	435c      	muls	r4, r3
 8001942:	436e      	muls	r6, r5
 8001944:	435d      	muls	r5, r3
 8001946:	0c3b      	lsrs	r3, r7, #16
 8001948:	4699      	mov	r9, r3
 800194a:	19a4      	adds	r4, r4, r6
 800194c:	444c      	add	r4, r9
 800194e:	4442      	add	r2, r8
 8001950:	9503      	str	r5, [sp, #12]
 8001952:	42a6      	cmp	r6, r4
 8001954:	d904      	bls.n	8001960 <__aeabi_dmul+0x284>
 8001956:	2380      	movs	r3, #128	; 0x80
 8001958:	025b      	lsls	r3, r3, #9
 800195a:	4698      	mov	r8, r3
 800195c:	4445      	add	r5, r8
 800195e:	9503      	str	r5, [sp, #12]
 8001960:	9b02      	ldr	r3, [sp, #8]
 8001962:	043f      	lsls	r7, r7, #16
 8001964:	445b      	add	r3, fp
 8001966:	001e      	movs	r6, r3
 8001968:	4283      	cmp	r3, r0
 800196a:	4180      	sbcs	r0, r0
 800196c:	0423      	lsls	r3, r4, #16
 800196e:	4698      	mov	r8, r3
 8001970:	9b05      	ldr	r3, [sp, #20]
 8001972:	0c3f      	lsrs	r7, r7, #16
 8001974:	4447      	add	r7, r8
 8001976:	4698      	mov	r8, r3
 8001978:	1876      	adds	r6, r6, r1
 800197a:	428e      	cmp	r6, r1
 800197c:	4189      	sbcs	r1, r1
 800197e:	4447      	add	r7, r8
 8001980:	4240      	negs	r0, r0
 8001982:	183d      	adds	r5, r7, r0
 8001984:	46a8      	mov	r8, r5
 8001986:	4693      	mov	fp, r2
 8001988:	4249      	negs	r1, r1
 800198a:	468a      	mov	sl, r1
 800198c:	44c3      	add	fp, r8
 800198e:	429f      	cmp	r7, r3
 8001990:	41bf      	sbcs	r7, r7
 8001992:	4580      	cmp	r8, r0
 8001994:	4180      	sbcs	r0, r0
 8001996:	9b03      	ldr	r3, [sp, #12]
 8001998:	44da      	add	sl, fp
 800199a:	4698      	mov	r8, r3
 800199c:	4653      	mov	r3, sl
 800199e:	4240      	negs	r0, r0
 80019a0:	427f      	negs	r7, r7
 80019a2:	4307      	orrs	r7, r0
 80019a4:	0c24      	lsrs	r4, r4, #16
 80019a6:	4593      	cmp	fp, r2
 80019a8:	4192      	sbcs	r2, r2
 80019aa:	458a      	cmp	sl, r1
 80019ac:	4189      	sbcs	r1, r1
 80019ae:	193f      	adds	r7, r7, r4
 80019b0:	0ddc      	lsrs	r4, r3, #23
 80019b2:	9b04      	ldr	r3, [sp, #16]
 80019b4:	0275      	lsls	r5, r6, #9
 80019b6:	431d      	orrs	r5, r3
 80019b8:	1e68      	subs	r0, r5, #1
 80019ba:	4185      	sbcs	r5, r0
 80019bc:	4653      	mov	r3, sl
 80019be:	4252      	negs	r2, r2
 80019c0:	4249      	negs	r1, r1
 80019c2:	430a      	orrs	r2, r1
 80019c4:	18bf      	adds	r7, r7, r2
 80019c6:	4447      	add	r7, r8
 80019c8:	0df6      	lsrs	r6, r6, #23
 80019ca:	027f      	lsls	r7, r7, #9
 80019cc:	4335      	orrs	r5, r6
 80019ce:	025a      	lsls	r2, r3, #9
 80019d0:	433c      	orrs	r4, r7
 80019d2:	4315      	orrs	r5, r2
 80019d4:	01fb      	lsls	r3, r7, #7
 80019d6:	d400      	bmi.n	80019da <__aeabi_dmul+0x2fe>
 80019d8:	e0c1      	b.n	8001b5e <__aeabi_dmul+0x482>
 80019da:	2101      	movs	r1, #1
 80019dc:	086a      	lsrs	r2, r5, #1
 80019de:	400d      	ands	r5, r1
 80019e0:	4315      	orrs	r5, r2
 80019e2:	07e2      	lsls	r2, r4, #31
 80019e4:	4315      	orrs	r5, r2
 80019e6:	0864      	lsrs	r4, r4, #1
 80019e8:	4926      	ldr	r1, [pc, #152]	; (8001a84 <__aeabi_dmul+0x3a8>)
 80019ea:	4461      	add	r1, ip
 80019ec:	2900      	cmp	r1, #0
 80019ee:	dd56      	ble.n	8001a9e <__aeabi_dmul+0x3c2>
 80019f0:	076b      	lsls	r3, r5, #29
 80019f2:	d009      	beq.n	8001a08 <__aeabi_dmul+0x32c>
 80019f4:	220f      	movs	r2, #15
 80019f6:	402a      	ands	r2, r5
 80019f8:	2a04      	cmp	r2, #4
 80019fa:	d005      	beq.n	8001a08 <__aeabi_dmul+0x32c>
 80019fc:	1d2a      	adds	r2, r5, #4
 80019fe:	42aa      	cmp	r2, r5
 8001a00:	41ad      	sbcs	r5, r5
 8001a02:	426d      	negs	r5, r5
 8001a04:	1964      	adds	r4, r4, r5
 8001a06:	0015      	movs	r5, r2
 8001a08:	01e3      	lsls	r3, r4, #7
 8001a0a:	d504      	bpl.n	8001a16 <__aeabi_dmul+0x33a>
 8001a0c:	2180      	movs	r1, #128	; 0x80
 8001a0e:	4a1e      	ldr	r2, [pc, #120]	; (8001a88 <__aeabi_dmul+0x3ac>)
 8001a10:	00c9      	lsls	r1, r1, #3
 8001a12:	4014      	ands	r4, r2
 8001a14:	4461      	add	r1, ip
 8001a16:	4a1d      	ldr	r2, [pc, #116]	; (8001a8c <__aeabi_dmul+0x3b0>)
 8001a18:	4291      	cmp	r1, r2
 8001a1a:	dd00      	ble.n	8001a1e <__aeabi_dmul+0x342>
 8001a1c:	e724      	b.n	8001868 <__aeabi_dmul+0x18c>
 8001a1e:	0762      	lsls	r2, r4, #29
 8001a20:	08ed      	lsrs	r5, r5, #3
 8001a22:	0264      	lsls	r4, r4, #9
 8001a24:	0549      	lsls	r1, r1, #21
 8001a26:	4315      	orrs	r5, r2
 8001a28:	0b24      	lsrs	r4, r4, #12
 8001a2a:	0d4a      	lsrs	r2, r1, #21
 8001a2c:	e6c6      	b.n	80017bc <__aeabi_dmul+0xe0>
 8001a2e:	9701      	str	r7, [sp, #4]
 8001a30:	e6b8      	b.n	80017a4 <__aeabi_dmul+0xc8>
 8001a32:	4a10      	ldr	r2, [pc, #64]	; (8001a74 <__aeabi_dmul+0x398>)
 8001a34:	2003      	movs	r0, #3
 8001a36:	4694      	mov	ip, r2
 8001a38:	4463      	add	r3, ip
 8001a3a:	464a      	mov	r2, r9
 8001a3c:	9300      	str	r3, [sp, #0]
 8001a3e:	2303      	movs	r3, #3
 8001a40:	431a      	orrs	r2, r3
 8001a42:	4691      	mov	r9, r2
 8001a44:	4652      	mov	r2, sl
 8001a46:	e68a      	b.n	800175e <__aeabi_dmul+0x82>
 8001a48:	4649      	mov	r1, r9
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	4319      	orrs	r1, r3
 8001a4e:	4689      	mov	r9, r1
 8001a50:	2600      	movs	r6, #0
 8001a52:	2001      	movs	r0, #1
 8001a54:	e683      	b.n	800175e <__aeabi_dmul+0x82>
 8001a56:	220c      	movs	r2, #12
 8001a58:	9300      	str	r3, [sp, #0]
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	0005      	movs	r5, r0
 8001a5e:	4691      	mov	r9, r2
 8001a60:	469b      	mov	fp, r3
 8001a62:	e65e      	b.n	8001722 <__aeabi_dmul+0x46>
 8001a64:	2304      	movs	r3, #4
 8001a66:	4699      	mov	r9, r3
 8001a68:	2300      	movs	r3, #0
 8001a6a:	9300      	str	r3, [sp, #0]
 8001a6c:	3301      	adds	r3, #1
 8001a6e:	2400      	movs	r4, #0
 8001a70:	469b      	mov	fp, r3
 8001a72:	e656      	b.n	8001722 <__aeabi_dmul+0x46>
 8001a74:	000007ff 	.word	0x000007ff
 8001a78:	fffffc01 	.word	0xfffffc01
 8001a7c:	0800cad8 	.word	0x0800cad8
 8001a80:	fffffc0d 	.word	0xfffffc0d
 8001a84:	000003ff 	.word	0x000003ff
 8001a88:	feffffff 	.word	0xfeffffff
 8001a8c:	000007fe 	.word	0x000007fe
 8001a90:	2300      	movs	r3, #0
 8001a92:	2480      	movs	r4, #128	; 0x80
 8001a94:	2500      	movs	r5, #0
 8001a96:	4a44      	ldr	r2, [pc, #272]	; (8001ba8 <__aeabi_dmul+0x4cc>)
 8001a98:	9301      	str	r3, [sp, #4]
 8001a9a:	0324      	lsls	r4, r4, #12
 8001a9c:	e68e      	b.n	80017bc <__aeabi_dmul+0xe0>
 8001a9e:	2001      	movs	r0, #1
 8001aa0:	1a40      	subs	r0, r0, r1
 8001aa2:	2838      	cmp	r0, #56	; 0x38
 8001aa4:	dd00      	ble.n	8001aa8 <__aeabi_dmul+0x3cc>
 8001aa6:	e686      	b.n	80017b6 <__aeabi_dmul+0xda>
 8001aa8:	281f      	cmp	r0, #31
 8001aaa:	dd5b      	ble.n	8001b64 <__aeabi_dmul+0x488>
 8001aac:	221f      	movs	r2, #31
 8001aae:	0023      	movs	r3, r4
 8001ab0:	4252      	negs	r2, r2
 8001ab2:	1a51      	subs	r1, r2, r1
 8001ab4:	40cb      	lsrs	r3, r1
 8001ab6:	0019      	movs	r1, r3
 8001ab8:	2820      	cmp	r0, #32
 8001aba:	d003      	beq.n	8001ac4 <__aeabi_dmul+0x3e8>
 8001abc:	4a3b      	ldr	r2, [pc, #236]	; (8001bac <__aeabi_dmul+0x4d0>)
 8001abe:	4462      	add	r2, ip
 8001ac0:	4094      	lsls	r4, r2
 8001ac2:	4325      	orrs	r5, r4
 8001ac4:	1e6a      	subs	r2, r5, #1
 8001ac6:	4195      	sbcs	r5, r2
 8001ac8:	002a      	movs	r2, r5
 8001aca:	430a      	orrs	r2, r1
 8001acc:	2107      	movs	r1, #7
 8001ace:	000d      	movs	r5, r1
 8001ad0:	2400      	movs	r4, #0
 8001ad2:	4015      	ands	r5, r2
 8001ad4:	4211      	tst	r1, r2
 8001ad6:	d05b      	beq.n	8001b90 <__aeabi_dmul+0x4b4>
 8001ad8:	210f      	movs	r1, #15
 8001ada:	2400      	movs	r4, #0
 8001adc:	4011      	ands	r1, r2
 8001ade:	2904      	cmp	r1, #4
 8001ae0:	d053      	beq.n	8001b8a <__aeabi_dmul+0x4ae>
 8001ae2:	1d11      	adds	r1, r2, #4
 8001ae4:	4291      	cmp	r1, r2
 8001ae6:	4192      	sbcs	r2, r2
 8001ae8:	4252      	negs	r2, r2
 8001aea:	18a4      	adds	r4, r4, r2
 8001aec:	000a      	movs	r2, r1
 8001aee:	0223      	lsls	r3, r4, #8
 8001af0:	d54b      	bpl.n	8001b8a <__aeabi_dmul+0x4ae>
 8001af2:	2201      	movs	r2, #1
 8001af4:	2400      	movs	r4, #0
 8001af6:	2500      	movs	r5, #0
 8001af8:	e660      	b.n	80017bc <__aeabi_dmul+0xe0>
 8001afa:	2380      	movs	r3, #128	; 0x80
 8001afc:	031b      	lsls	r3, r3, #12
 8001afe:	421c      	tst	r4, r3
 8001b00:	d009      	beq.n	8001b16 <__aeabi_dmul+0x43a>
 8001b02:	421e      	tst	r6, r3
 8001b04:	d107      	bne.n	8001b16 <__aeabi_dmul+0x43a>
 8001b06:	4333      	orrs	r3, r6
 8001b08:	031c      	lsls	r4, r3, #12
 8001b0a:	4643      	mov	r3, r8
 8001b0c:	0015      	movs	r5, r2
 8001b0e:	0b24      	lsrs	r4, r4, #12
 8001b10:	4a25      	ldr	r2, [pc, #148]	; (8001ba8 <__aeabi_dmul+0x4cc>)
 8001b12:	9301      	str	r3, [sp, #4]
 8001b14:	e652      	b.n	80017bc <__aeabi_dmul+0xe0>
 8001b16:	2280      	movs	r2, #128	; 0x80
 8001b18:	0312      	lsls	r2, r2, #12
 8001b1a:	4314      	orrs	r4, r2
 8001b1c:	0324      	lsls	r4, r4, #12
 8001b1e:	4a22      	ldr	r2, [pc, #136]	; (8001ba8 <__aeabi_dmul+0x4cc>)
 8001b20:	0b24      	lsrs	r4, r4, #12
 8001b22:	9701      	str	r7, [sp, #4]
 8001b24:	e64a      	b.n	80017bc <__aeabi_dmul+0xe0>
 8001b26:	f000 fd09 	bl	800253c <__clzsi2>
 8001b2a:	0003      	movs	r3, r0
 8001b2c:	001a      	movs	r2, r3
 8001b2e:	3215      	adds	r2, #21
 8001b30:	3020      	adds	r0, #32
 8001b32:	2a1c      	cmp	r2, #28
 8001b34:	dc00      	bgt.n	8001b38 <__aeabi_dmul+0x45c>
 8001b36:	e684      	b.n	8001842 <__aeabi_dmul+0x166>
 8001b38:	4656      	mov	r6, sl
 8001b3a:	3b08      	subs	r3, #8
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	409e      	lsls	r6, r3
 8001b40:	e689      	b.n	8001856 <__aeabi_dmul+0x17a>
 8001b42:	f000 fcfb 	bl	800253c <__clzsi2>
 8001b46:	0001      	movs	r1, r0
 8001b48:	0002      	movs	r2, r0
 8001b4a:	3115      	adds	r1, #21
 8001b4c:	3220      	adds	r2, #32
 8001b4e:	291c      	cmp	r1, #28
 8001b50:	dc00      	bgt.n	8001b54 <__aeabi_dmul+0x478>
 8001b52:	e64e      	b.n	80017f2 <__aeabi_dmul+0x116>
 8001b54:	0034      	movs	r4, r6
 8001b56:	3808      	subs	r0, #8
 8001b58:	2500      	movs	r5, #0
 8001b5a:	4084      	lsls	r4, r0
 8001b5c:	e653      	b.n	8001806 <__aeabi_dmul+0x12a>
 8001b5e:	9b00      	ldr	r3, [sp, #0]
 8001b60:	469c      	mov	ip, r3
 8001b62:	e741      	b.n	80019e8 <__aeabi_dmul+0x30c>
 8001b64:	4912      	ldr	r1, [pc, #72]	; (8001bb0 <__aeabi_dmul+0x4d4>)
 8001b66:	0022      	movs	r2, r4
 8001b68:	4461      	add	r1, ip
 8001b6a:	002e      	movs	r6, r5
 8001b6c:	408d      	lsls	r5, r1
 8001b6e:	408a      	lsls	r2, r1
 8001b70:	40c6      	lsrs	r6, r0
 8001b72:	1e69      	subs	r1, r5, #1
 8001b74:	418d      	sbcs	r5, r1
 8001b76:	4332      	orrs	r2, r6
 8001b78:	432a      	orrs	r2, r5
 8001b7a:	40c4      	lsrs	r4, r0
 8001b7c:	0753      	lsls	r3, r2, #29
 8001b7e:	d0b6      	beq.n	8001aee <__aeabi_dmul+0x412>
 8001b80:	210f      	movs	r1, #15
 8001b82:	4011      	ands	r1, r2
 8001b84:	2904      	cmp	r1, #4
 8001b86:	d1ac      	bne.n	8001ae2 <__aeabi_dmul+0x406>
 8001b88:	e7b1      	b.n	8001aee <__aeabi_dmul+0x412>
 8001b8a:	0765      	lsls	r5, r4, #29
 8001b8c:	0264      	lsls	r4, r4, #9
 8001b8e:	0b24      	lsrs	r4, r4, #12
 8001b90:	08d2      	lsrs	r2, r2, #3
 8001b92:	4315      	orrs	r5, r2
 8001b94:	2200      	movs	r2, #0
 8001b96:	e611      	b.n	80017bc <__aeabi_dmul+0xe0>
 8001b98:	2280      	movs	r2, #128	; 0x80
 8001b9a:	0312      	lsls	r2, r2, #12
 8001b9c:	4314      	orrs	r4, r2
 8001b9e:	0324      	lsls	r4, r4, #12
 8001ba0:	4a01      	ldr	r2, [pc, #4]	; (8001ba8 <__aeabi_dmul+0x4cc>)
 8001ba2:	0b24      	lsrs	r4, r4, #12
 8001ba4:	e60a      	b.n	80017bc <__aeabi_dmul+0xe0>
 8001ba6:	46c0      	nop			; (mov r8, r8)
 8001ba8:	000007ff 	.word	0x000007ff
 8001bac:	0000043e 	.word	0x0000043e
 8001bb0:	0000041e 	.word	0x0000041e

08001bb4 <__aeabi_dsub>:
 8001bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bb6:	4657      	mov	r7, sl
 8001bb8:	464e      	mov	r6, r9
 8001bba:	4645      	mov	r5, r8
 8001bbc:	46de      	mov	lr, fp
 8001bbe:	0004      	movs	r4, r0
 8001bc0:	b5e0      	push	{r5, r6, r7, lr}
 8001bc2:	001f      	movs	r7, r3
 8001bc4:	0010      	movs	r0, r2
 8001bc6:	030b      	lsls	r3, r1, #12
 8001bc8:	0f62      	lsrs	r2, r4, #29
 8001bca:	004e      	lsls	r6, r1, #1
 8001bcc:	0fcd      	lsrs	r5, r1, #31
 8001bce:	0a5b      	lsrs	r3, r3, #9
 8001bd0:	0339      	lsls	r1, r7, #12
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	0a49      	lsrs	r1, r1, #9
 8001bd6:	00e2      	lsls	r2, r4, #3
 8001bd8:	0f44      	lsrs	r4, r0, #29
 8001bda:	4321      	orrs	r1, r4
 8001bdc:	4cc2      	ldr	r4, [pc, #776]	; (8001ee8 <__aeabi_dsub+0x334>)
 8001bde:	4691      	mov	r9, r2
 8001be0:	4692      	mov	sl, r2
 8001be2:	00c0      	lsls	r0, r0, #3
 8001be4:	007a      	lsls	r2, r7, #1
 8001be6:	4680      	mov	r8, r0
 8001be8:	0d76      	lsrs	r6, r6, #21
 8001bea:	0d52      	lsrs	r2, r2, #21
 8001bec:	0fff      	lsrs	r7, r7, #31
 8001bee:	42a2      	cmp	r2, r4
 8001bf0:	d100      	bne.n	8001bf4 <__aeabi_dsub+0x40>
 8001bf2:	e0b4      	b.n	8001d5e <__aeabi_dsub+0x1aa>
 8001bf4:	2401      	movs	r4, #1
 8001bf6:	4067      	eors	r7, r4
 8001bf8:	46bb      	mov	fp, r7
 8001bfa:	42bd      	cmp	r5, r7
 8001bfc:	d100      	bne.n	8001c00 <__aeabi_dsub+0x4c>
 8001bfe:	e088      	b.n	8001d12 <__aeabi_dsub+0x15e>
 8001c00:	1ab4      	subs	r4, r6, r2
 8001c02:	46a4      	mov	ip, r4
 8001c04:	2c00      	cmp	r4, #0
 8001c06:	dc00      	bgt.n	8001c0a <__aeabi_dsub+0x56>
 8001c08:	e0b2      	b.n	8001d70 <__aeabi_dsub+0x1bc>
 8001c0a:	2a00      	cmp	r2, #0
 8001c0c:	d100      	bne.n	8001c10 <__aeabi_dsub+0x5c>
 8001c0e:	e0c5      	b.n	8001d9c <__aeabi_dsub+0x1e8>
 8001c10:	4ab5      	ldr	r2, [pc, #724]	; (8001ee8 <__aeabi_dsub+0x334>)
 8001c12:	4296      	cmp	r6, r2
 8001c14:	d100      	bne.n	8001c18 <__aeabi_dsub+0x64>
 8001c16:	e28b      	b.n	8002130 <__aeabi_dsub+0x57c>
 8001c18:	2280      	movs	r2, #128	; 0x80
 8001c1a:	0412      	lsls	r2, r2, #16
 8001c1c:	4311      	orrs	r1, r2
 8001c1e:	4662      	mov	r2, ip
 8001c20:	2a38      	cmp	r2, #56	; 0x38
 8001c22:	dd00      	ble.n	8001c26 <__aeabi_dsub+0x72>
 8001c24:	e1a1      	b.n	8001f6a <__aeabi_dsub+0x3b6>
 8001c26:	2a1f      	cmp	r2, #31
 8001c28:	dd00      	ble.n	8001c2c <__aeabi_dsub+0x78>
 8001c2a:	e216      	b.n	800205a <__aeabi_dsub+0x4a6>
 8001c2c:	2720      	movs	r7, #32
 8001c2e:	000c      	movs	r4, r1
 8001c30:	1abf      	subs	r7, r7, r2
 8001c32:	40bc      	lsls	r4, r7
 8001c34:	0002      	movs	r2, r0
 8001c36:	46a0      	mov	r8, r4
 8001c38:	4664      	mov	r4, ip
 8001c3a:	40b8      	lsls	r0, r7
 8001c3c:	40e2      	lsrs	r2, r4
 8001c3e:	4644      	mov	r4, r8
 8001c40:	4314      	orrs	r4, r2
 8001c42:	0002      	movs	r2, r0
 8001c44:	1e50      	subs	r0, r2, #1
 8001c46:	4182      	sbcs	r2, r0
 8001c48:	4660      	mov	r0, ip
 8001c4a:	40c1      	lsrs	r1, r0
 8001c4c:	4322      	orrs	r2, r4
 8001c4e:	1a5b      	subs	r3, r3, r1
 8001c50:	4649      	mov	r1, r9
 8001c52:	1a8c      	subs	r4, r1, r2
 8001c54:	45a1      	cmp	r9, r4
 8001c56:	4192      	sbcs	r2, r2
 8001c58:	4252      	negs	r2, r2
 8001c5a:	1a9b      	subs	r3, r3, r2
 8001c5c:	4698      	mov	r8, r3
 8001c5e:	4643      	mov	r3, r8
 8001c60:	021b      	lsls	r3, r3, #8
 8001c62:	d400      	bmi.n	8001c66 <__aeabi_dsub+0xb2>
 8001c64:	e117      	b.n	8001e96 <__aeabi_dsub+0x2e2>
 8001c66:	4643      	mov	r3, r8
 8001c68:	025b      	lsls	r3, r3, #9
 8001c6a:	0a5b      	lsrs	r3, r3, #9
 8001c6c:	4698      	mov	r8, r3
 8001c6e:	4643      	mov	r3, r8
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d100      	bne.n	8001c76 <__aeabi_dsub+0xc2>
 8001c74:	e16c      	b.n	8001f50 <__aeabi_dsub+0x39c>
 8001c76:	4640      	mov	r0, r8
 8001c78:	f000 fc60 	bl	800253c <__clzsi2>
 8001c7c:	0002      	movs	r2, r0
 8001c7e:	3a08      	subs	r2, #8
 8001c80:	2120      	movs	r1, #32
 8001c82:	0020      	movs	r0, r4
 8001c84:	4643      	mov	r3, r8
 8001c86:	1a89      	subs	r1, r1, r2
 8001c88:	4093      	lsls	r3, r2
 8001c8a:	40c8      	lsrs	r0, r1
 8001c8c:	4094      	lsls	r4, r2
 8001c8e:	4303      	orrs	r3, r0
 8001c90:	4296      	cmp	r6, r2
 8001c92:	dd00      	ble.n	8001c96 <__aeabi_dsub+0xe2>
 8001c94:	e157      	b.n	8001f46 <__aeabi_dsub+0x392>
 8001c96:	1b96      	subs	r6, r2, r6
 8001c98:	1c71      	adds	r1, r6, #1
 8001c9a:	291f      	cmp	r1, #31
 8001c9c:	dd00      	ble.n	8001ca0 <__aeabi_dsub+0xec>
 8001c9e:	e1cb      	b.n	8002038 <__aeabi_dsub+0x484>
 8001ca0:	2220      	movs	r2, #32
 8001ca2:	0018      	movs	r0, r3
 8001ca4:	0026      	movs	r6, r4
 8001ca6:	1a52      	subs	r2, r2, r1
 8001ca8:	4094      	lsls	r4, r2
 8001caa:	4090      	lsls	r0, r2
 8001cac:	40ce      	lsrs	r6, r1
 8001cae:	40cb      	lsrs	r3, r1
 8001cb0:	1e62      	subs	r2, r4, #1
 8001cb2:	4194      	sbcs	r4, r2
 8001cb4:	4330      	orrs	r0, r6
 8001cb6:	4698      	mov	r8, r3
 8001cb8:	2600      	movs	r6, #0
 8001cba:	4304      	orrs	r4, r0
 8001cbc:	0763      	lsls	r3, r4, #29
 8001cbe:	d009      	beq.n	8001cd4 <__aeabi_dsub+0x120>
 8001cc0:	230f      	movs	r3, #15
 8001cc2:	4023      	ands	r3, r4
 8001cc4:	2b04      	cmp	r3, #4
 8001cc6:	d005      	beq.n	8001cd4 <__aeabi_dsub+0x120>
 8001cc8:	1d23      	adds	r3, r4, #4
 8001cca:	42a3      	cmp	r3, r4
 8001ccc:	41a4      	sbcs	r4, r4
 8001cce:	4264      	negs	r4, r4
 8001cd0:	44a0      	add	r8, r4
 8001cd2:	001c      	movs	r4, r3
 8001cd4:	4643      	mov	r3, r8
 8001cd6:	021b      	lsls	r3, r3, #8
 8001cd8:	d400      	bmi.n	8001cdc <__aeabi_dsub+0x128>
 8001cda:	e0df      	b.n	8001e9c <__aeabi_dsub+0x2e8>
 8001cdc:	4b82      	ldr	r3, [pc, #520]	; (8001ee8 <__aeabi_dsub+0x334>)
 8001cde:	3601      	adds	r6, #1
 8001ce0:	429e      	cmp	r6, r3
 8001ce2:	d100      	bne.n	8001ce6 <__aeabi_dsub+0x132>
 8001ce4:	e0fb      	b.n	8001ede <__aeabi_dsub+0x32a>
 8001ce6:	4642      	mov	r2, r8
 8001ce8:	4b80      	ldr	r3, [pc, #512]	; (8001eec <__aeabi_dsub+0x338>)
 8001cea:	08e4      	lsrs	r4, r4, #3
 8001cec:	401a      	ands	r2, r3
 8001cee:	0013      	movs	r3, r2
 8001cf0:	0571      	lsls	r1, r6, #21
 8001cf2:	0752      	lsls	r2, r2, #29
 8001cf4:	025b      	lsls	r3, r3, #9
 8001cf6:	4322      	orrs	r2, r4
 8001cf8:	0b1b      	lsrs	r3, r3, #12
 8001cfa:	0d49      	lsrs	r1, r1, #21
 8001cfc:	0509      	lsls	r1, r1, #20
 8001cfe:	07ed      	lsls	r5, r5, #31
 8001d00:	4319      	orrs	r1, r3
 8001d02:	4329      	orrs	r1, r5
 8001d04:	0010      	movs	r0, r2
 8001d06:	bcf0      	pop	{r4, r5, r6, r7}
 8001d08:	46bb      	mov	fp, r7
 8001d0a:	46b2      	mov	sl, r6
 8001d0c:	46a9      	mov	r9, r5
 8001d0e:	46a0      	mov	r8, r4
 8001d10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001d12:	1ab4      	subs	r4, r6, r2
 8001d14:	46a4      	mov	ip, r4
 8001d16:	2c00      	cmp	r4, #0
 8001d18:	dd58      	ble.n	8001dcc <__aeabi_dsub+0x218>
 8001d1a:	2a00      	cmp	r2, #0
 8001d1c:	d100      	bne.n	8001d20 <__aeabi_dsub+0x16c>
 8001d1e:	e09e      	b.n	8001e5e <__aeabi_dsub+0x2aa>
 8001d20:	4a71      	ldr	r2, [pc, #452]	; (8001ee8 <__aeabi_dsub+0x334>)
 8001d22:	4296      	cmp	r6, r2
 8001d24:	d100      	bne.n	8001d28 <__aeabi_dsub+0x174>
 8001d26:	e13b      	b.n	8001fa0 <__aeabi_dsub+0x3ec>
 8001d28:	2280      	movs	r2, #128	; 0x80
 8001d2a:	0412      	lsls	r2, r2, #16
 8001d2c:	4311      	orrs	r1, r2
 8001d2e:	4662      	mov	r2, ip
 8001d30:	2a38      	cmp	r2, #56	; 0x38
 8001d32:	dd00      	ble.n	8001d36 <__aeabi_dsub+0x182>
 8001d34:	e0c1      	b.n	8001eba <__aeabi_dsub+0x306>
 8001d36:	2a1f      	cmp	r2, #31
 8001d38:	dc00      	bgt.n	8001d3c <__aeabi_dsub+0x188>
 8001d3a:	e1bb      	b.n	80020b4 <__aeabi_dsub+0x500>
 8001d3c:	000c      	movs	r4, r1
 8001d3e:	3a20      	subs	r2, #32
 8001d40:	40d4      	lsrs	r4, r2
 8001d42:	0022      	movs	r2, r4
 8001d44:	4664      	mov	r4, ip
 8001d46:	2c20      	cmp	r4, #32
 8001d48:	d004      	beq.n	8001d54 <__aeabi_dsub+0x1a0>
 8001d4a:	2740      	movs	r7, #64	; 0x40
 8001d4c:	1b3f      	subs	r7, r7, r4
 8001d4e:	40b9      	lsls	r1, r7
 8001d50:	4308      	orrs	r0, r1
 8001d52:	4680      	mov	r8, r0
 8001d54:	4644      	mov	r4, r8
 8001d56:	1e61      	subs	r1, r4, #1
 8001d58:	418c      	sbcs	r4, r1
 8001d5a:	4314      	orrs	r4, r2
 8001d5c:	e0b1      	b.n	8001ec2 <__aeabi_dsub+0x30e>
 8001d5e:	000c      	movs	r4, r1
 8001d60:	4304      	orrs	r4, r0
 8001d62:	d02a      	beq.n	8001dba <__aeabi_dsub+0x206>
 8001d64:	46bb      	mov	fp, r7
 8001d66:	42bd      	cmp	r5, r7
 8001d68:	d02d      	beq.n	8001dc6 <__aeabi_dsub+0x212>
 8001d6a:	4c61      	ldr	r4, [pc, #388]	; (8001ef0 <__aeabi_dsub+0x33c>)
 8001d6c:	46a4      	mov	ip, r4
 8001d6e:	44b4      	add	ip, r6
 8001d70:	4664      	mov	r4, ip
 8001d72:	2c00      	cmp	r4, #0
 8001d74:	d05c      	beq.n	8001e30 <__aeabi_dsub+0x27c>
 8001d76:	1b94      	subs	r4, r2, r6
 8001d78:	46a4      	mov	ip, r4
 8001d7a:	2e00      	cmp	r6, #0
 8001d7c:	d000      	beq.n	8001d80 <__aeabi_dsub+0x1cc>
 8001d7e:	e115      	b.n	8001fac <__aeabi_dsub+0x3f8>
 8001d80:	464d      	mov	r5, r9
 8001d82:	431d      	orrs	r5, r3
 8001d84:	d100      	bne.n	8001d88 <__aeabi_dsub+0x1d4>
 8001d86:	e1c3      	b.n	8002110 <__aeabi_dsub+0x55c>
 8001d88:	1e65      	subs	r5, r4, #1
 8001d8a:	2c01      	cmp	r4, #1
 8001d8c:	d100      	bne.n	8001d90 <__aeabi_dsub+0x1dc>
 8001d8e:	e20c      	b.n	80021aa <__aeabi_dsub+0x5f6>
 8001d90:	4e55      	ldr	r6, [pc, #340]	; (8001ee8 <__aeabi_dsub+0x334>)
 8001d92:	42b4      	cmp	r4, r6
 8001d94:	d100      	bne.n	8001d98 <__aeabi_dsub+0x1e4>
 8001d96:	e1f8      	b.n	800218a <__aeabi_dsub+0x5d6>
 8001d98:	46ac      	mov	ip, r5
 8001d9a:	e10e      	b.n	8001fba <__aeabi_dsub+0x406>
 8001d9c:	000a      	movs	r2, r1
 8001d9e:	4302      	orrs	r2, r0
 8001da0:	d100      	bne.n	8001da4 <__aeabi_dsub+0x1f0>
 8001da2:	e136      	b.n	8002012 <__aeabi_dsub+0x45e>
 8001da4:	0022      	movs	r2, r4
 8001da6:	3a01      	subs	r2, #1
 8001da8:	2c01      	cmp	r4, #1
 8001daa:	d100      	bne.n	8001dae <__aeabi_dsub+0x1fa>
 8001dac:	e1c6      	b.n	800213c <__aeabi_dsub+0x588>
 8001dae:	4c4e      	ldr	r4, [pc, #312]	; (8001ee8 <__aeabi_dsub+0x334>)
 8001db0:	45a4      	cmp	ip, r4
 8001db2:	d100      	bne.n	8001db6 <__aeabi_dsub+0x202>
 8001db4:	e0f4      	b.n	8001fa0 <__aeabi_dsub+0x3ec>
 8001db6:	4694      	mov	ip, r2
 8001db8:	e731      	b.n	8001c1e <__aeabi_dsub+0x6a>
 8001dba:	2401      	movs	r4, #1
 8001dbc:	4067      	eors	r7, r4
 8001dbe:	46bb      	mov	fp, r7
 8001dc0:	42bd      	cmp	r5, r7
 8001dc2:	d000      	beq.n	8001dc6 <__aeabi_dsub+0x212>
 8001dc4:	e71c      	b.n	8001c00 <__aeabi_dsub+0x4c>
 8001dc6:	4c4a      	ldr	r4, [pc, #296]	; (8001ef0 <__aeabi_dsub+0x33c>)
 8001dc8:	46a4      	mov	ip, r4
 8001dca:	44b4      	add	ip, r6
 8001dcc:	4664      	mov	r4, ip
 8001dce:	2c00      	cmp	r4, #0
 8001dd0:	d100      	bne.n	8001dd4 <__aeabi_dsub+0x220>
 8001dd2:	e0cf      	b.n	8001f74 <__aeabi_dsub+0x3c0>
 8001dd4:	1b94      	subs	r4, r2, r6
 8001dd6:	46a4      	mov	ip, r4
 8001dd8:	2e00      	cmp	r6, #0
 8001dda:	d100      	bne.n	8001dde <__aeabi_dsub+0x22a>
 8001ddc:	e15c      	b.n	8002098 <__aeabi_dsub+0x4e4>
 8001dde:	4e42      	ldr	r6, [pc, #264]	; (8001ee8 <__aeabi_dsub+0x334>)
 8001de0:	42b2      	cmp	r2, r6
 8001de2:	d100      	bne.n	8001de6 <__aeabi_dsub+0x232>
 8001de4:	e1ec      	b.n	80021c0 <__aeabi_dsub+0x60c>
 8001de6:	2680      	movs	r6, #128	; 0x80
 8001de8:	0436      	lsls	r6, r6, #16
 8001dea:	4333      	orrs	r3, r6
 8001dec:	4664      	mov	r4, ip
 8001dee:	2c38      	cmp	r4, #56	; 0x38
 8001df0:	dd00      	ble.n	8001df4 <__aeabi_dsub+0x240>
 8001df2:	e1b3      	b.n	800215c <__aeabi_dsub+0x5a8>
 8001df4:	2c1f      	cmp	r4, #31
 8001df6:	dd00      	ble.n	8001dfa <__aeabi_dsub+0x246>
 8001df8:	e238      	b.n	800226c <__aeabi_dsub+0x6b8>
 8001dfa:	2620      	movs	r6, #32
 8001dfc:	1b36      	subs	r6, r6, r4
 8001dfe:	001c      	movs	r4, r3
 8001e00:	40b4      	lsls	r4, r6
 8001e02:	464f      	mov	r7, r9
 8001e04:	46a0      	mov	r8, r4
 8001e06:	4664      	mov	r4, ip
 8001e08:	40e7      	lsrs	r7, r4
 8001e0a:	4644      	mov	r4, r8
 8001e0c:	433c      	orrs	r4, r7
 8001e0e:	464f      	mov	r7, r9
 8001e10:	40b7      	lsls	r7, r6
 8001e12:	003e      	movs	r6, r7
 8001e14:	1e77      	subs	r7, r6, #1
 8001e16:	41be      	sbcs	r6, r7
 8001e18:	4334      	orrs	r4, r6
 8001e1a:	4666      	mov	r6, ip
 8001e1c:	40f3      	lsrs	r3, r6
 8001e1e:	18c9      	adds	r1, r1, r3
 8001e20:	1824      	adds	r4, r4, r0
 8001e22:	4284      	cmp	r4, r0
 8001e24:	419b      	sbcs	r3, r3
 8001e26:	425b      	negs	r3, r3
 8001e28:	4698      	mov	r8, r3
 8001e2a:	0016      	movs	r6, r2
 8001e2c:	4488      	add	r8, r1
 8001e2e:	e04e      	b.n	8001ece <__aeabi_dsub+0x31a>
 8001e30:	4a30      	ldr	r2, [pc, #192]	; (8001ef4 <__aeabi_dsub+0x340>)
 8001e32:	1c74      	adds	r4, r6, #1
 8001e34:	4214      	tst	r4, r2
 8001e36:	d000      	beq.n	8001e3a <__aeabi_dsub+0x286>
 8001e38:	e0d6      	b.n	8001fe8 <__aeabi_dsub+0x434>
 8001e3a:	464a      	mov	r2, r9
 8001e3c:	431a      	orrs	r2, r3
 8001e3e:	2e00      	cmp	r6, #0
 8001e40:	d000      	beq.n	8001e44 <__aeabi_dsub+0x290>
 8001e42:	e15b      	b.n	80020fc <__aeabi_dsub+0x548>
 8001e44:	2a00      	cmp	r2, #0
 8001e46:	d100      	bne.n	8001e4a <__aeabi_dsub+0x296>
 8001e48:	e1a5      	b.n	8002196 <__aeabi_dsub+0x5e2>
 8001e4a:	000a      	movs	r2, r1
 8001e4c:	4302      	orrs	r2, r0
 8001e4e:	d000      	beq.n	8001e52 <__aeabi_dsub+0x29e>
 8001e50:	e1bb      	b.n	80021ca <__aeabi_dsub+0x616>
 8001e52:	464a      	mov	r2, r9
 8001e54:	0759      	lsls	r1, r3, #29
 8001e56:	08d2      	lsrs	r2, r2, #3
 8001e58:	430a      	orrs	r2, r1
 8001e5a:	08db      	lsrs	r3, r3, #3
 8001e5c:	e027      	b.n	8001eae <__aeabi_dsub+0x2fa>
 8001e5e:	000a      	movs	r2, r1
 8001e60:	4302      	orrs	r2, r0
 8001e62:	d100      	bne.n	8001e66 <__aeabi_dsub+0x2b2>
 8001e64:	e174      	b.n	8002150 <__aeabi_dsub+0x59c>
 8001e66:	0022      	movs	r2, r4
 8001e68:	3a01      	subs	r2, #1
 8001e6a:	2c01      	cmp	r4, #1
 8001e6c:	d005      	beq.n	8001e7a <__aeabi_dsub+0x2c6>
 8001e6e:	4c1e      	ldr	r4, [pc, #120]	; (8001ee8 <__aeabi_dsub+0x334>)
 8001e70:	45a4      	cmp	ip, r4
 8001e72:	d100      	bne.n	8001e76 <__aeabi_dsub+0x2c2>
 8001e74:	e094      	b.n	8001fa0 <__aeabi_dsub+0x3ec>
 8001e76:	4694      	mov	ip, r2
 8001e78:	e759      	b.n	8001d2e <__aeabi_dsub+0x17a>
 8001e7a:	4448      	add	r0, r9
 8001e7c:	4548      	cmp	r0, r9
 8001e7e:	4192      	sbcs	r2, r2
 8001e80:	185b      	adds	r3, r3, r1
 8001e82:	4698      	mov	r8, r3
 8001e84:	0004      	movs	r4, r0
 8001e86:	4252      	negs	r2, r2
 8001e88:	4490      	add	r8, r2
 8001e8a:	4643      	mov	r3, r8
 8001e8c:	2602      	movs	r6, #2
 8001e8e:	021b      	lsls	r3, r3, #8
 8001e90:	d500      	bpl.n	8001e94 <__aeabi_dsub+0x2e0>
 8001e92:	e0c4      	b.n	800201e <__aeabi_dsub+0x46a>
 8001e94:	3e01      	subs	r6, #1
 8001e96:	0763      	lsls	r3, r4, #29
 8001e98:	d000      	beq.n	8001e9c <__aeabi_dsub+0x2e8>
 8001e9a:	e711      	b.n	8001cc0 <__aeabi_dsub+0x10c>
 8001e9c:	4643      	mov	r3, r8
 8001e9e:	46b4      	mov	ip, r6
 8001ea0:	0759      	lsls	r1, r3, #29
 8001ea2:	08e2      	lsrs	r2, r4, #3
 8001ea4:	430a      	orrs	r2, r1
 8001ea6:	08db      	lsrs	r3, r3, #3
 8001ea8:	490f      	ldr	r1, [pc, #60]	; (8001ee8 <__aeabi_dsub+0x334>)
 8001eaa:	458c      	cmp	ip, r1
 8001eac:	d040      	beq.n	8001f30 <__aeabi_dsub+0x37c>
 8001eae:	4661      	mov	r1, ip
 8001eb0:	031b      	lsls	r3, r3, #12
 8001eb2:	0549      	lsls	r1, r1, #21
 8001eb4:	0b1b      	lsrs	r3, r3, #12
 8001eb6:	0d49      	lsrs	r1, r1, #21
 8001eb8:	e720      	b.n	8001cfc <__aeabi_dsub+0x148>
 8001eba:	4301      	orrs	r1, r0
 8001ebc:	000c      	movs	r4, r1
 8001ebe:	1e61      	subs	r1, r4, #1
 8001ec0:	418c      	sbcs	r4, r1
 8001ec2:	444c      	add	r4, r9
 8001ec4:	454c      	cmp	r4, r9
 8001ec6:	4192      	sbcs	r2, r2
 8001ec8:	4252      	negs	r2, r2
 8001eca:	4690      	mov	r8, r2
 8001ecc:	4498      	add	r8, r3
 8001ece:	4643      	mov	r3, r8
 8001ed0:	021b      	lsls	r3, r3, #8
 8001ed2:	d5e0      	bpl.n	8001e96 <__aeabi_dsub+0x2e2>
 8001ed4:	4b04      	ldr	r3, [pc, #16]	; (8001ee8 <__aeabi_dsub+0x334>)
 8001ed6:	3601      	adds	r6, #1
 8001ed8:	429e      	cmp	r6, r3
 8001eda:	d000      	beq.n	8001ede <__aeabi_dsub+0x32a>
 8001edc:	e09f      	b.n	800201e <__aeabi_dsub+0x46a>
 8001ede:	0031      	movs	r1, r6
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	e70a      	b.n	8001cfc <__aeabi_dsub+0x148>
 8001ee6:	46c0      	nop			; (mov r8, r8)
 8001ee8:	000007ff 	.word	0x000007ff
 8001eec:	ff7fffff 	.word	0xff7fffff
 8001ef0:	fffff801 	.word	0xfffff801
 8001ef4:	000007fe 	.word	0x000007fe
 8001ef8:	2a00      	cmp	r2, #0
 8001efa:	d100      	bne.n	8001efe <__aeabi_dsub+0x34a>
 8001efc:	e160      	b.n	80021c0 <__aeabi_dsub+0x60c>
 8001efe:	000a      	movs	r2, r1
 8001f00:	4302      	orrs	r2, r0
 8001f02:	d04d      	beq.n	8001fa0 <__aeabi_dsub+0x3ec>
 8001f04:	464a      	mov	r2, r9
 8001f06:	075c      	lsls	r4, r3, #29
 8001f08:	08d2      	lsrs	r2, r2, #3
 8001f0a:	4322      	orrs	r2, r4
 8001f0c:	2480      	movs	r4, #128	; 0x80
 8001f0e:	08db      	lsrs	r3, r3, #3
 8001f10:	0324      	lsls	r4, r4, #12
 8001f12:	4223      	tst	r3, r4
 8001f14:	d007      	beq.n	8001f26 <__aeabi_dsub+0x372>
 8001f16:	08ce      	lsrs	r6, r1, #3
 8001f18:	4226      	tst	r6, r4
 8001f1a:	d104      	bne.n	8001f26 <__aeabi_dsub+0x372>
 8001f1c:	465d      	mov	r5, fp
 8001f1e:	0033      	movs	r3, r6
 8001f20:	08c2      	lsrs	r2, r0, #3
 8001f22:	0749      	lsls	r1, r1, #29
 8001f24:	430a      	orrs	r2, r1
 8001f26:	0f51      	lsrs	r1, r2, #29
 8001f28:	00d2      	lsls	r2, r2, #3
 8001f2a:	08d2      	lsrs	r2, r2, #3
 8001f2c:	0749      	lsls	r1, r1, #29
 8001f2e:	430a      	orrs	r2, r1
 8001f30:	0011      	movs	r1, r2
 8001f32:	4319      	orrs	r1, r3
 8001f34:	d100      	bne.n	8001f38 <__aeabi_dsub+0x384>
 8001f36:	e1c8      	b.n	80022ca <__aeabi_dsub+0x716>
 8001f38:	2180      	movs	r1, #128	; 0x80
 8001f3a:	0309      	lsls	r1, r1, #12
 8001f3c:	430b      	orrs	r3, r1
 8001f3e:	031b      	lsls	r3, r3, #12
 8001f40:	49d5      	ldr	r1, [pc, #852]	; (8002298 <__aeabi_dsub+0x6e4>)
 8001f42:	0b1b      	lsrs	r3, r3, #12
 8001f44:	e6da      	b.n	8001cfc <__aeabi_dsub+0x148>
 8001f46:	49d5      	ldr	r1, [pc, #852]	; (800229c <__aeabi_dsub+0x6e8>)
 8001f48:	1ab6      	subs	r6, r6, r2
 8001f4a:	400b      	ands	r3, r1
 8001f4c:	4698      	mov	r8, r3
 8001f4e:	e6b5      	b.n	8001cbc <__aeabi_dsub+0x108>
 8001f50:	0020      	movs	r0, r4
 8001f52:	f000 faf3 	bl	800253c <__clzsi2>
 8001f56:	0002      	movs	r2, r0
 8001f58:	3218      	adds	r2, #24
 8001f5a:	2a1f      	cmp	r2, #31
 8001f5c:	dc00      	bgt.n	8001f60 <__aeabi_dsub+0x3ac>
 8001f5e:	e68f      	b.n	8001c80 <__aeabi_dsub+0xcc>
 8001f60:	0023      	movs	r3, r4
 8001f62:	3808      	subs	r0, #8
 8001f64:	4083      	lsls	r3, r0
 8001f66:	2400      	movs	r4, #0
 8001f68:	e692      	b.n	8001c90 <__aeabi_dsub+0xdc>
 8001f6a:	4308      	orrs	r0, r1
 8001f6c:	0002      	movs	r2, r0
 8001f6e:	1e50      	subs	r0, r2, #1
 8001f70:	4182      	sbcs	r2, r0
 8001f72:	e66d      	b.n	8001c50 <__aeabi_dsub+0x9c>
 8001f74:	4cca      	ldr	r4, [pc, #808]	; (80022a0 <__aeabi_dsub+0x6ec>)
 8001f76:	1c72      	adds	r2, r6, #1
 8001f78:	4222      	tst	r2, r4
 8001f7a:	d000      	beq.n	8001f7e <__aeabi_dsub+0x3ca>
 8001f7c:	e0ad      	b.n	80020da <__aeabi_dsub+0x526>
 8001f7e:	464a      	mov	r2, r9
 8001f80:	431a      	orrs	r2, r3
 8001f82:	2e00      	cmp	r6, #0
 8001f84:	d1b8      	bne.n	8001ef8 <__aeabi_dsub+0x344>
 8001f86:	2a00      	cmp	r2, #0
 8001f88:	d100      	bne.n	8001f8c <__aeabi_dsub+0x3d8>
 8001f8a:	e158      	b.n	800223e <__aeabi_dsub+0x68a>
 8001f8c:	000a      	movs	r2, r1
 8001f8e:	4302      	orrs	r2, r0
 8001f90:	d000      	beq.n	8001f94 <__aeabi_dsub+0x3e0>
 8001f92:	e159      	b.n	8002248 <__aeabi_dsub+0x694>
 8001f94:	464a      	mov	r2, r9
 8001f96:	0759      	lsls	r1, r3, #29
 8001f98:	08d2      	lsrs	r2, r2, #3
 8001f9a:	430a      	orrs	r2, r1
 8001f9c:	08db      	lsrs	r3, r3, #3
 8001f9e:	e786      	b.n	8001eae <__aeabi_dsub+0x2fa>
 8001fa0:	464a      	mov	r2, r9
 8001fa2:	0759      	lsls	r1, r3, #29
 8001fa4:	08d2      	lsrs	r2, r2, #3
 8001fa6:	430a      	orrs	r2, r1
 8001fa8:	08db      	lsrs	r3, r3, #3
 8001faa:	e7c1      	b.n	8001f30 <__aeabi_dsub+0x37c>
 8001fac:	4dba      	ldr	r5, [pc, #744]	; (8002298 <__aeabi_dsub+0x6e4>)
 8001fae:	42aa      	cmp	r2, r5
 8001fb0:	d100      	bne.n	8001fb4 <__aeabi_dsub+0x400>
 8001fb2:	e11e      	b.n	80021f2 <__aeabi_dsub+0x63e>
 8001fb4:	2580      	movs	r5, #128	; 0x80
 8001fb6:	042d      	lsls	r5, r5, #16
 8001fb8:	432b      	orrs	r3, r5
 8001fba:	4664      	mov	r4, ip
 8001fbc:	2c38      	cmp	r4, #56	; 0x38
 8001fbe:	dc5d      	bgt.n	800207c <__aeabi_dsub+0x4c8>
 8001fc0:	2c1f      	cmp	r4, #31
 8001fc2:	dd00      	ble.n	8001fc6 <__aeabi_dsub+0x412>
 8001fc4:	e0d0      	b.n	8002168 <__aeabi_dsub+0x5b4>
 8001fc6:	2520      	movs	r5, #32
 8001fc8:	4667      	mov	r7, ip
 8001fca:	1b2d      	subs	r5, r5, r4
 8001fcc:	464e      	mov	r6, r9
 8001fce:	001c      	movs	r4, r3
 8001fd0:	40fe      	lsrs	r6, r7
 8001fd2:	40ac      	lsls	r4, r5
 8001fd4:	4334      	orrs	r4, r6
 8001fd6:	464e      	mov	r6, r9
 8001fd8:	40ae      	lsls	r6, r5
 8001fda:	0035      	movs	r5, r6
 8001fdc:	40fb      	lsrs	r3, r7
 8001fde:	1e6e      	subs	r6, r5, #1
 8001fe0:	41b5      	sbcs	r5, r6
 8001fe2:	1ac9      	subs	r1, r1, r3
 8001fe4:	432c      	orrs	r4, r5
 8001fe6:	e04e      	b.n	8002086 <__aeabi_dsub+0x4d2>
 8001fe8:	464a      	mov	r2, r9
 8001fea:	1a14      	subs	r4, r2, r0
 8001fec:	45a1      	cmp	r9, r4
 8001fee:	4192      	sbcs	r2, r2
 8001ff0:	4252      	negs	r2, r2
 8001ff2:	4690      	mov	r8, r2
 8001ff4:	1a5f      	subs	r7, r3, r1
 8001ff6:	003a      	movs	r2, r7
 8001ff8:	4647      	mov	r7, r8
 8001ffa:	1bd2      	subs	r2, r2, r7
 8001ffc:	4690      	mov	r8, r2
 8001ffe:	0212      	lsls	r2, r2, #8
 8002000:	d500      	bpl.n	8002004 <__aeabi_dsub+0x450>
 8002002:	e08b      	b.n	800211c <__aeabi_dsub+0x568>
 8002004:	4642      	mov	r2, r8
 8002006:	4322      	orrs	r2, r4
 8002008:	d000      	beq.n	800200c <__aeabi_dsub+0x458>
 800200a:	e630      	b.n	8001c6e <__aeabi_dsub+0xba>
 800200c:	2300      	movs	r3, #0
 800200e:	2500      	movs	r5, #0
 8002010:	e74d      	b.n	8001eae <__aeabi_dsub+0x2fa>
 8002012:	464a      	mov	r2, r9
 8002014:	0759      	lsls	r1, r3, #29
 8002016:	08d2      	lsrs	r2, r2, #3
 8002018:	430a      	orrs	r2, r1
 800201a:	08db      	lsrs	r3, r3, #3
 800201c:	e744      	b.n	8001ea8 <__aeabi_dsub+0x2f4>
 800201e:	4642      	mov	r2, r8
 8002020:	4b9e      	ldr	r3, [pc, #632]	; (800229c <__aeabi_dsub+0x6e8>)
 8002022:	0861      	lsrs	r1, r4, #1
 8002024:	401a      	ands	r2, r3
 8002026:	0013      	movs	r3, r2
 8002028:	2201      	movs	r2, #1
 800202a:	4014      	ands	r4, r2
 800202c:	430c      	orrs	r4, r1
 800202e:	07da      	lsls	r2, r3, #31
 8002030:	085b      	lsrs	r3, r3, #1
 8002032:	4698      	mov	r8, r3
 8002034:	4314      	orrs	r4, r2
 8002036:	e641      	b.n	8001cbc <__aeabi_dsub+0x108>
 8002038:	001a      	movs	r2, r3
 800203a:	3e1f      	subs	r6, #31
 800203c:	40f2      	lsrs	r2, r6
 800203e:	0016      	movs	r6, r2
 8002040:	2920      	cmp	r1, #32
 8002042:	d003      	beq.n	800204c <__aeabi_dsub+0x498>
 8002044:	2240      	movs	r2, #64	; 0x40
 8002046:	1a51      	subs	r1, r2, r1
 8002048:	408b      	lsls	r3, r1
 800204a:	431c      	orrs	r4, r3
 800204c:	1e62      	subs	r2, r4, #1
 800204e:	4194      	sbcs	r4, r2
 8002050:	2300      	movs	r3, #0
 8002052:	4334      	orrs	r4, r6
 8002054:	4698      	mov	r8, r3
 8002056:	2600      	movs	r6, #0
 8002058:	e71d      	b.n	8001e96 <__aeabi_dsub+0x2e2>
 800205a:	000c      	movs	r4, r1
 800205c:	3a20      	subs	r2, #32
 800205e:	40d4      	lsrs	r4, r2
 8002060:	0022      	movs	r2, r4
 8002062:	4664      	mov	r4, ip
 8002064:	2c20      	cmp	r4, #32
 8002066:	d004      	beq.n	8002072 <__aeabi_dsub+0x4be>
 8002068:	2740      	movs	r7, #64	; 0x40
 800206a:	1b3f      	subs	r7, r7, r4
 800206c:	40b9      	lsls	r1, r7
 800206e:	4308      	orrs	r0, r1
 8002070:	4680      	mov	r8, r0
 8002072:	4644      	mov	r4, r8
 8002074:	1e61      	subs	r1, r4, #1
 8002076:	418c      	sbcs	r4, r1
 8002078:	4322      	orrs	r2, r4
 800207a:	e5e9      	b.n	8001c50 <__aeabi_dsub+0x9c>
 800207c:	464c      	mov	r4, r9
 800207e:	4323      	orrs	r3, r4
 8002080:	001c      	movs	r4, r3
 8002082:	1e63      	subs	r3, r4, #1
 8002084:	419c      	sbcs	r4, r3
 8002086:	1b04      	subs	r4, r0, r4
 8002088:	42a0      	cmp	r0, r4
 800208a:	419b      	sbcs	r3, r3
 800208c:	425b      	negs	r3, r3
 800208e:	1acb      	subs	r3, r1, r3
 8002090:	4698      	mov	r8, r3
 8002092:	465d      	mov	r5, fp
 8002094:	0016      	movs	r6, r2
 8002096:	e5e2      	b.n	8001c5e <__aeabi_dsub+0xaa>
 8002098:	464e      	mov	r6, r9
 800209a:	431e      	orrs	r6, r3
 800209c:	d100      	bne.n	80020a0 <__aeabi_dsub+0x4ec>
 800209e:	e0ae      	b.n	80021fe <__aeabi_dsub+0x64a>
 80020a0:	1e66      	subs	r6, r4, #1
 80020a2:	2c01      	cmp	r4, #1
 80020a4:	d100      	bne.n	80020a8 <__aeabi_dsub+0x4f4>
 80020a6:	e0fd      	b.n	80022a4 <__aeabi_dsub+0x6f0>
 80020a8:	4f7b      	ldr	r7, [pc, #492]	; (8002298 <__aeabi_dsub+0x6e4>)
 80020aa:	42bc      	cmp	r4, r7
 80020ac:	d100      	bne.n	80020b0 <__aeabi_dsub+0x4fc>
 80020ae:	e107      	b.n	80022c0 <__aeabi_dsub+0x70c>
 80020b0:	46b4      	mov	ip, r6
 80020b2:	e69b      	b.n	8001dec <__aeabi_dsub+0x238>
 80020b4:	4664      	mov	r4, ip
 80020b6:	2220      	movs	r2, #32
 80020b8:	1b12      	subs	r2, r2, r4
 80020ba:	000c      	movs	r4, r1
 80020bc:	4094      	lsls	r4, r2
 80020be:	0007      	movs	r7, r0
 80020c0:	4090      	lsls	r0, r2
 80020c2:	46a0      	mov	r8, r4
 80020c4:	4664      	mov	r4, ip
 80020c6:	1e42      	subs	r2, r0, #1
 80020c8:	4190      	sbcs	r0, r2
 80020ca:	4662      	mov	r2, ip
 80020cc:	40e7      	lsrs	r7, r4
 80020ce:	4644      	mov	r4, r8
 80020d0:	40d1      	lsrs	r1, r2
 80020d2:	433c      	orrs	r4, r7
 80020d4:	4304      	orrs	r4, r0
 80020d6:	185b      	adds	r3, r3, r1
 80020d8:	e6f3      	b.n	8001ec2 <__aeabi_dsub+0x30e>
 80020da:	4c6f      	ldr	r4, [pc, #444]	; (8002298 <__aeabi_dsub+0x6e4>)
 80020dc:	42a2      	cmp	r2, r4
 80020de:	d100      	bne.n	80020e2 <__aeabi_dsub+0x52e>
 80020e0:	e0d5      	b.n	800228e <__aeabi_dsub+0x6da>
 80020e2:	4448      	add	r0, r9
 80020e4:	185b      	adds	r3, r3, r1
 80020e6:	4548      	cmp	r0, r9
 80020e8:	4189      	sbcs	r1, r1
 80020ea:	4249      	negs	r1, r1
 80020ec:	185b      	adds	r3, r3, r1
 80020ee:	07dc      	lsls	r4, r3, #31
 80020f0:	0840      	lsrs	r0, r0, #1
 80020f2:	085b      	lsrs	r3, r3, #1
 80020f4:	4698      	mov	r8, r3
 80020f6:	0016      	movs	r6, r2
 80020f8:	4304      	orrs	r4, r0
 80020fa:	e6cc      	b.n	8001e96 <__aeabi_dsub+0x2e2>
 80020fc:	2a00      	cmp	r2, #0
 80020fe:	d000      	beq.n	8002102 <__aeabi_dsub+0x54e>
 8002100:	e082      	b.n	8002208 <__aeabi_dsub+0x654>
 8002102:	000a      	movs	r2, r1
 8002104:	4302      	orrs	r2, r0
 8002106:	d140      	bne.n	800218a <__aeabi_dsub+0x5d6>
 8002108:	2380      	movs	r3, #128	; 0x80
 800210a:	2500      	movs	r5, #0
 800210c:	031b      	lsls	r3, r3, #12
 800210e:	e713      	b.n	8001f38 <__aeabi_dsub+0x384>
 8002110:	074b      	lsls	r3, r1, #29
 8002112:	08c2      	lsrs	r2, r0, #3
 8002114:	431a      	orrs	r2, r3
 8002116:	465d      	mov	r5, fp
 8002118:	08cb      	lsrs	r3, r1, #3
 800211a:	e6c5      	b.n	8001ea8 <__aeabi_dsub+0x2f4>
 800211c:	464a      	mov	r2, r9
 800211e:	1a84      	subs	r4, r0, r2
 8002120:	42a0      	cmp	r0, r4
 8002122:	4192      	sbcs	r2, r2
 8002124:	1acb      	subs	r3, r1, r3
 8002126:	4252      	negs	r2, r2
 8002128:	1a9b      	subs	r3, r3, r2
 800212a:	4698      	mov	r8, r3
 800212c:	465d      	mov	r5, fp
 800212e:	e59e      	b.n	8001c6e <__aeabi_dsub+0xba>
 8002130:	464a      	mov	r2, r9
 8002132:	0759      	lsls	r1, r3, #29
 8002134:	08d2      	lsrs	r2, r2, #3
 8002136:	430a      	orrs	r2, r1
 8002138:	08db      	lsrs	r3, r3, #3
 800213a:	e6f9      	b.n	8001f30 <__aeabi_dsub+0x37c>
 800213c:	464a      	mov	r2, r9
 800213e:	1a14      	subs	r4, r2, r0
 8002140:	45a1      	cmp	r9, r4
 8002142:	4192      	sbcs	r2, r2
 8002144:	1a5b      	subs	r3, r3, r1
 8002146:	4252      	negs	r2, r2
 8002148:	1a9b      	subs	r3, r3, r2
 800214a:	4698      	mov	r8, r3
 800214c:	2601      	movs	r6, #1
 800214e:	e586      	b.n	8001c5e <__aeabi_dsub+0xaa>
 8002150:	464a      	mov	r2, r9
 8002152:	0759      	lsls	r1, r3, #29
 8002154:	08d2      	lsrs	r2, r2, #3
 8002156:	430a      	orrs	r2, r1
 8002158:	08db      	lsrs	r3, r3, #3
 800215a:	e6a5      	b.n	8001ea8 <__aeabi_dsub+0x2f4>
 800215c:	464c      	mov	r4, r9
 800215e:	4323      	orrs	r3, r4
 8002160:	001c      	movs	r4, r3
 8002162:	1e63      	subs	r3, r4, #1
 8002164:	419c      	sbcs	r4, r3
 8002166:	e65b      	b.n	8001e20 <__aeabi_dsub+0x26c>
 8002168:	4665      	mov	r5, ip
 800216a:	001e      	movs	r6, r3
 800216c:	3d20      	subs	r5, #32
 800216e:	40ee      	lsrs	r6, r5
 8002170:	2c20      	cmp	r4, #32
 8002172:	d005      	beq.n	8002180 <__aeabi_dsub+0x5cc>
 8002174:	2540      	movs	r5, #64	; 0x40
 8002176:	1b2d      	subs	r5, r5, r4
 8002178:	40ab      	lsls	r3, r5
 800217a:	464c      	mov	r4, r9
 800217c:	431c      	orrs	r4, r3
 800217e:	46a2      	mov	sl, r4
 8002180:	4654      	mov	r4, sl
 8002182:	1e63      	subs	r3, r4, #1
 8002184:	419c      	sbcs	r4, r3
 8002186:	4334      	orrs	r4, r6
 8002188:	e77d      	b.n	8002086 <__aeabi_dsub+0x4d2>
 800218a:	074b      	lsls	r3, r1, #29
 800218c:	08c2      	lsrs	r2, r0, #3
 800218e:	431a      	orrs	r2, r3
 8002190:	465d      	mov	r5, fp
 8002192:	08cb      	lsrs	r3, r1, #3
 8002194:	e6cc      	b.n	8001f30 <__aeabi_dsub+0x37c>
 8002196:	000a      	movs	r2, r1
 8002198:	4302      	orrs	r2, r0
 800219a:	d100      	bne.n	800219e <__aeabi_dsub+0x5ea>
 800219c:	e736      	b.n	800200c <__aeabi_dsub+0x458>
 800219e:	074b      	lsls	r3, r1, #29
 80021a0:	08c2      	lsrs	r2, r0, #3
 80021a2:	431a      	orrs	r2, r3
 80021a4:	465d      	mov	r5, fp
 80021a6:	08cb      	lsrs	r3, r1, #3
 80021a8:	e681      	b.n	8001eae <__aeabi_dsub+0x2fa>
 80021aa:	464a      	mov	r2, r9
 80021ac:	1a84      	subs	r4, r0, r2
 80021ae:	42a0      	cmp	r0, r4
 80021b0:	4192      	sbcs	r2, r2
 80021b2:	1acb      	subs	r3, r1, r3
 80021b4:	4252      	negs	r2, r2
 80021b6:	1a9b      	subs	r3, r3, r2
 80021b8:	4698      	mov	r8, r3
 80021ba:	465d      	mov	r5, fp
 80021bc:	2601      	movs	r6, #1
 80021be:	e54e      	b.n	8001c5e <__aeabi_dsub+0xaa>
 80021c0:	074b      	lsls	r3, r1, #29
 80021c2:	08c2      	lsrs	r2, r0, #3
 80021c4:	431a      	orrs	r2, r3
 80021c6:	08cb      	lsrs	r3, r1, #3
 80021c8:	e6b2      	b.n	8001f30 <__aeabi_dsub+0x37c>
 80021ca:	464a      	mov	r2, r9
 80021cc:	1a14      	subs	r4, r2, r0
 80021ce:	45a1      	cmp	r9, r4
 80021d0:	4192      	sbcs	r2, r2
 80021d2:	1a5f      	subs	r7, r3, r1
 80021d4:	4252      	negs	r2, r2
 80021d6:	1aba      	subs	r2, r7, r2
 80021d8:	4690      	mov	r8, r2
 80021da:	0212      	lsls	r2, r2, #8
 80021dc:	d56b      	bpl.n	80022b6 <__aeabi_dsub+0x702>
 80021de:	464a      	mov	r2, r9
 80021e0:	1a84      	subs	r4, r0, r2
 80021e2:	42a0      	cmp	r0, r4
 80021e4:	4192      	sbcs	r2, r2
 80021e6:	1acb      	subs	r3, r1, r3
 80021e8:	4252      	negs	r2, r2
 80021ea:	1a9b      	subs	r3, r3, r2
 80021ec:	4698      	mov	r8, r3
 80021ee:	465d      	mov	r5, fp
 80021f0:	e564      	b.n	8001cbc <__aeabi_dsub+0x108>
 80021f2:	074b      	lsls	r3, r1, #29
 80021f4:	08c2      	lsrs	r2, r0, #3
 80021f6:	431a      	orrs	r2, r3
 80021f8:	465d      	mov	r5, fp
 80021fa:	08cb      	lsrs	r3, r1, #3
 80021fc:	e698      	b.n	8001f30 <__aeabi_dsub+0x37c>
 80021fe:	074b      	lsls	r3, r1, #29
 8002200:	08c2      	lsrs	r2, r0, #3
 8002202:	431a      	orrs	r2, r3
 8002204:	08cb      	lsrs	r3, r1, #3
 8002206:	e64f      	b.n	8001ea8 <__aeabi_dsub+0x2f4>
 8002208:	000a      	movs	r2, r1
 800220a:	4302      	orrs	r2, r0
 800220c:	d090      	beq.n	8002130 <__aeabi_dsub+0x57c>
 800220e:	464a      	mov	r2, r9
 8002210:	075c      	lsls	r4, r3, #29
 8002212:	08d2      	lsrs	r2, r2, #3
 8002214:	4314      	orrs	r4, r2
 8002216:	2280      	movs	r2, #128	; 0x80
 8002218:	08db      	lsrs	r3, r3, #3
 800221a:	0312      	lsls	r2, r2, #12
 800221c:	4213      	tst	r3, r2
 800221e:	d008      	beq.n	8002232 <__aeabi_dsub+0x67e>
 8002220:	08ce      	lsrs	r6, r1, #3
 8002222:	4216      	tst	r6, r2
 8002224:	d105      	bne.n	8002232 <__aeabi_dsub+0x67e>
 8002226:	08c0      	lsrs	r0, r0, #3
 8002228:	0749      	lsls	r1, r1, #29
 800222a:	4308      	orrs	r0, r1
 800222c:	0004      	movs	r4, r0
 800222e:	465d      	mov	r5, fp
 8002230:	0033      	movs	r3, r6
 8002232:	0f61      	lsrs	r1, r4, #29
 8002234:	00e2      	lsls	r2, r4, #3
 8002236:	0749      	lsls	r1, r1, #29
 8002238:	08d2      	lsrs	r2, r2, #3
 800223a:	430a      	orrs	r2, r1
 800223c:	e678      	b.n	8001f30 <__aeabi_dsub+0x37c>
 800223e:	074b      	lsls	r3, r1, #29
 8002240:	08c2      	lsrs	r2, r0, #3
 8002242:	431a      	orrs	r2, r3
 8002244:	08cb      	lsrs	r3, r1, #3
 8002246:	e632      	b.n	8001eae <__aeabi_dsub+0x2fa>
 8002248:	4448      	add	r0, r9
 800224a:	185b      	adds	r3, r3, r1
 800224c:	4548      	cmp	r0, r9
 800224e:	4192      	sbcs	r2, r2
 8002250:	4698      	mov	r8, r3
 8002252:	4252      	negs	r2, r2
 8002254:	4490      	add	r8, r2
 8002256:	4643      	mov	r3, r8
 8002258:	0004      	movs	r4, r0
 800225a:	021b      	lsls	r3, r3, #8
 800225c:	d400      	bmi.n	8002260 <__aeabi_dsub+0x6ac>
 800225e:	e61a      	b.n	8001e96 <__aeabi_dsub+0x2e2>
 8002260:	4642      	mov	r2, r8
 8002262:	4b0e      	ldr	r3, [pc, #56]	; (800229c <__aeabi_dsub+0x6e8>)
 8002264:	2601      	movs	r6, #1
 8002266:	401a      	ands	r2, r3
 8002268:	4690      	mov	r8, r2
 800226a:	e614      	b.n	8001e96 <__aeabi_dsub+0x2e2>
 800226c:	4666      	mov	r6, ip
 800226e:	001f      	movs	r7, r3
 8002270:	3e20      	subs	r6, #32
 8002272:	40f7      	lsrs	r7, r6
 8002274:	2c20      	cmp	r4, #32
 8002276:	d005      	beq.n	8002284 <__aeabi_dsub+0x6d0>
 8002278:	2640      	movs	r6, #64	; 0x40
 800227a:	1b36      	subs	r6, r6, r4
 800227c:	40b3      	lsls	r3, r6
 800227e:	464c      	mov	r4, r9
 8002280:	431c      	orrs	r4, r3
 8002282:	46a2      	mov	sl, r4
 8002284:	4654      	mov	r4, sl
 8002286:	1e63      	subs	r3, r4, #1
 8002288:	419c      	sbcs	r4, r3
 800228a:	433c      	orrs	r4, r7
 800228c:	e5c8      	b.n	8001e20 <__aeabi_dsub+0x26c>
 800228e:	0011      	movs	r1, r2
 8002290:	2300      	movs	r3, #0
 8002292:	2200      	movs	r2, #0
 8002294:	e532      	b.n	8001cfc <__aeabi_dsub+0x148>
 8002296:	46c0      	nop			; (mov r8, r8)
 8002298:	000007ff 	.word	0x000007ff
 800229c:	ff7fffff 	.word	0xff7fffff
 80022a0:	000007fe 	.word	0x000007fe
 80022a4:	464a      	mov	r2, r9
 80022a6:	1814      	adds	r4, r2, r0
 80022a8:	4284      	cmp	r4, r0
 80022aa:	4192      	sbcs	r2, r2
 80022ac:	185b      	adds	r3, r3, r1
 80022ae:	4698      	mov	r8, r3
 80022b0:	4252      	negs	r2, r2
 80022b2:	4490      	add	r8, r2
 80022b4:	e5e9      	b.n	8001e8a <__aeabi_dsub+0x2d6>
 80022b6:	4642      	mov	r2, r8
 80022b8:	4322      	orrs	r2, r4
 80022ba:	d100      	bne.n	80022be <__aeabi_dsub+0x70a>
 80022bc:	e6a6      	b.n	800200c <__aeabi_dsub+0x458>
 80022be:	e5ea      	b.n	8001e96 <__aeabi_dsub+0x2e2>
 80022c0:	074b      	lsls	r3, r1, #29
 80022c2:	08c2      	lsrs	r2, r0, #3
 80022c4:	431a      	orrs	r2, r3
 80022c6:	08cb      	lsrs	r3, r1, #3
 80022c8:	e632      	b.n	8001f30 <__aeabi_dsub+0x37c>
 80022ca:	2200      	movs	r2, #0
 80022cc:	4901      	ldr	r1, [pc, #4]	; (80022d4 <__aeabi_dsub+0x720>)
 80022ce:	0013      	movs	r3, r2
 80022d0:	e514      	b.n	8001cfc <__aeabi_dsub+0x148>
 80022d2:	46c0      	nop			; (mov r8, r8)
 80022d4:	000007ff 	.word	0x000007ff

080022d8 <__aeabi_dcmpun>:
 80022d8:	b570      	push	{r4, r5, r6, lr}
 80022da:	0005      	movs	r5, r0
 80022dc:	480c      	ldr	r0, [pc, #48]	; (8002310 <__aeabi_dcmpun+0x38>)
 80022de:	030c      	lsls	r4, r1, #12
 80022e0:	0016      	movs	r6, r2
 80022e2:	0049      	lsls	r1, r1, #1
 80022e4:	031a      	lsls	r2, r3, #12
 80022e6:	005b      	lsls	r3, r3, #1
 80022e8:	0b24      	lsrs	r4, r4, #12
 80022ea:	0d49      	lsrs	r1, r1, #21
 80022ec:	0b12      	lsrs	r2, r2, #12
 80022ee:	0d5b      	lsrs	r3, r3, #21
 80022f0:	4281      	cmp	r1, r0
 80022f2:	d008      	beq.n	8002306 <__aeabi_dcmpun+0x2e>
 80022f4:	4906      	ldr	r1, [pc, #24]	; (8002310 <__aeabi_dcmpun+0x38>)
 80022f6:	2000      	movs	r0, #0
 80022f8:	428b      	cmp	r3, r1
 80022fa:	d103      	bne.n	8002304 <__aeabi_dcmpun+0x2c>
 80022fc:	4332      	orrs	r2, r6
 80022fe:	0010      	movs	r0, r2
 8002300:	1e42      	subs	r2, r0, #1
 8002302:	4190      	sbcs	r0, r2
 8002304:	bd70      	pop	{r4, r5, r6, pc}
 8002306:	2001      	movs	r0, #1
 8002308:	432c      	orrs	r4, r5
 800230a:	d1fb      	bne.n	8002304 <__aeabi_dcmpun+0x2c>
 800230c:	e7f2      	b.n	80022f4 <__aeabi_dcmpun+0x1c>
 800230e:	46c0      	nop			; (mov r8, r8)
 8002310:	000007ff 	.word	0x000007ff

08002314 <__aeabi_d2iz>:
 8002314:	000a      	movs	r2, r1
 8002316:	b530      	push	{r4, r5, lr}
 8002318:	4c13      	ldr	r4, [pc, #76]	; (8002368 <__aeabi_d2iz+0x54>)
 800231a:	0053      	lsls	r3, r2, #1
 800231c:	0309      	lsls	r1, r1, #12
 800231e:	0005      	movs	r5, r0
 8002320:	0b09      	lsrs	r1, r1, #12
 8002322:	2000      	movs	r0, #0
 8002324:	0d5b      	lsrs	r3, r3, #21
 8002326:	0fd2      	lsrs	r2, r2, #31
 8002328:	42a3      	cmp	r3, r4
 800232a:	dd04      	ble.n	8002336 <__aeabi_d2iz+0x22>
 800232c:	480f      	ldr	r0, [pc, #60]	; (800236c <__aeabi_d2iz+0x58>)
 800232e:	4283      	cmp	r3, r0
 8002330:	dd02      	ble.n	8002338 <__aeabi_d2iz+0x24>
 8002332:	4b0f      	ldr	r3, [pc, #60]	; (8002370 <__aeabi_d2iz+0x5c>)
 8002334:	18d0      	adds	r0, r2, r3
 8002336:	bd30      	pop	{r4, r5, pc}
 8002338:	2080      	movs	r0, #128	; 0x80
 800233a:	0340      	lsls	r0, r0, #13
 800233c:	4301      	orrs	r1, r0
 800233e:	480d      	ldr	r0, [pc, #52]	; (8002374 <__aeabi_d2iz+0x60>)
 8002340:	1ac0      	subs	r0, r0, r3
 8002342:	281f      	cmp	r0, #31
 8002344:	dd08      	ble.n	8002358 <__aeabi_d2iz+0x44>
 8002346:	480c      	ldr	r0, [pc, #48]	; (8002378 <__aeabi_d2iz+0x64>)
 8002348:	1ac3      	subs	r3, r0, r3
 800234a:	40d9      	lsrs	r1, r3
 800234c:	000b      	movs	r3, r1
 800234e:	4258      	negs	r0, r3
 8002350:	2a00      	cmp	r2, #0
 8002352:	d1f0      	bne.n	8002336 <__aeabi_d2iz+0x22>
 8002354:	0018      	movs	r0, r3
 8002356:	e7ee      	b.n	8002336 <__aeabi_d2iz+0x22>
 8002358:	4c08      	ldr	r4, [pc, #32]	; (800237c <__aeabi_d2iz+0x68>)
 800235a:	40c5      	lsrs	r5, r0
 800235c:	46a4      	mov	ip, r4
 800235e:	4463      	add	r3, ip
 8002360:	4099      	lsls	r1, r3
 8002362:	000b      	movs	r3, r1
 8002364:	432b      	orrs	r3, r5
 8002366:	e7f2      	b.n	800234e <__aeabi_d2iz+0x3a>
 8002368:	000003fe 	.word	0x000003fe
 800236c:	0000041d 	.word	0x0000041d
 8002370:	7fffffff 	.word	0x7fffffff
 8002374:	00000433 	.word	0x00000433
 8002378:	00000413 	.word	0x00000413
 800237c:	fffffbed 	.word	0xfffffbed

08002380 <__aeabi_i2d>:
 8002380:	b570      	push	{r4, r5, r6, lr}
 8002382:	2800      	cmp	r0, #0
 8002384:	d016      	beq.n	80023b4 <__aeabi_i2d+0x34>
 8002386:	17c3      	asrs	r3, r0, #31
 8002388:	18c5      	adds	r5, r0, r3
 800238a:	405d      	eors	r5, r3
 800238c:	0fc4      	lsrs	r4, r0, #31
 800238e:	0028      	movs	r0, r5
 8002390:	f000 f8d4 	bl	800253c <__clzsi2>
 8002394:	4a11      	ldr	r2, [pc, #68]	; (80023dc <__aeabi_i2d+0x5c>)
 8002396:	1a12      	subs	r2, r2, r0
 8002398:	280a      	cmp	r0, #10
 800239a:	dc16      	bgt.n	80023ca <__aeabi_i2d+0x4a>
 800239c:	0003      	movs	r3, r0
 800239e:	002e      	movs	r6, r5
 80023a0:	3315      	adds	r3, #21
 80023a2:	409e      	lsls	r6, r3
 80023a4:	230b      	movs	r3, #11
 80023a6:	1a18      	subs	r0, r3, r0
 80023a8:	40c5      	lsrs	r5, r0
 80023aa:	0553      	lsls	r3, r2, #21
 80023ac:	032d      	lsls	r5, r5, #12
 80023ae:	0b2d      	lsrs	r5, r5, #12
 80023b0:	0d5b      	lsrs	r3, r3, #21
 80023b2:	e003      	b.n	80023bc <__aeabi_i2d+0x3c>
 80023b4:	2400      	movs	r4, #0
 80023b6:	2300      	movs	r3, #0
 80023b8:	2500      	movs	r5, #0
 80023ba:	2600      	movs	r6, #0
 80023bc:	051b      	lsls	r3, r3, #20
 80023be:	432b      	orrs	r3, r5
 80023c0:	07e4      	lsls	r4, r4, #31
 80023c2:	4323      	orrs	r3, r4
 80023c4:	0030      	movs	r0, r6
 80023c6:	0019      	movs	r1, r3
 80023c8:	bd70      	pop	{r4, r5, r6, pc}
 80023ca:	380b      	subs	r0, #11
 80023cc:	4085      	lsls	r5, r0
 80023ce:	0553      	lsls	r3, r2, #21
 80023d0:	032d      	lsls	r5, r5, #12
 80023d2:	2600      	movs	r6, #0
 80023d4:	0b2d      	lsrs	r5, r5, #12
 80023d6:	0d5b      	lsrs	r3, r3, #21
 80023d8:	e7f0      	b.n	80023bc <__aeabi_i2d+0x3c>
 80023da:	46c0      	nop			; (mov r8, r8)
 80023dc:	0000041e 	.word	0x0000041e

080023e0 <__aeabi_ui2d>:
 80023e0:	b510      	push	{r4, lr}
 80023e2:	1e04      	subs	r4, r0, #0
 80023e4:	d010      	beq.n	8002408 <__aeabi_ui2d+0x28>
 80023e6:	f000 f8a9 	bl	800253c <__clzsi2>
 80023ea:	4b0f      	ldr	r3, [pc, #60]	; (8002428 <__aeabi_ui2d+0x48>)
 80023ec:	1a1b      	subs	r3, r3, r0
 80023ee:	280a      	cmp	r0, #10
 80023f0:	dc11      	bgt.n	8002416 <__aeabi_ui2d+0x36>
 80023f2:	220b      	movs	r2, #11
 80023f4:	0021      	movs	r1, r4
 80023f6:	1a12      	subs	r2, r2, r0
 80023f8:	40d1      	lsrs	r1, r2
 80023fa:	3015      	adds	r0, #21
 80023fc:	030a      	lsls	r2, r1, #12
 80023fe:	055b      	lsls	r3, r3, #21
 8002400:	4084      	lsls	r4, r0
 8002402:	0b12      	lsrs	r2, r2, #12
 8002404:	0d5b      	lsrs	r3, r3, #21
 8002406:	e001      	b.n	800240c <__aeabi_ui2d+0x2c>
 8002408:	2300      	movs	r3, #0
 800240a:	2200      	movs	r2, #0
 800240c:	051b      	lsls	r3, r3, #20
 800240e:	4313      	orrs	r3, r2
 8002410:	0020      	movs	r0, r4
 8002412:	0019      	movs	r1, r3
 8002414:	bd10      	pop	{r4, pc}
 8002416:	0022      	movs	r2, r4
 8002418:	380b      	subs	r0, #11
 800241a:	4082      	lsls	r2, r0
 800241c:	055b      	lsls	r3, r3, #21
 800241e:	0312      	lsls	r2, r2, #12
 8002420:	2400      	movs	r4, #0
 8002422:	0b12      	lsrs	r2, r2, #12
 8002424:	0d5b      	lsrs	r3, r3, #21
 8002426:	e7f1      	b.n	800240c <__aeabi_ui2d+0x2c>
 8002428:	0000041e 	.word	0x0000041e

0800242c <__aeabi_d2f>:
 800242c:	0002      	movs	r2, r0
 800242e:	004b      	lsls	r3, r1, #1
 8002430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002432:	0308      	lsls	r0, r1, #12
 8002434:	0d5b      	lsrs	r3, r3, #21
 8002436:	4e3d      	ldr	r6, [pc, #244]	; (800252c <__aeabi_d2f+0x100>)
 8002438:	0fcc      	lsrs	r4, r1, #31
 800243a:	0a40      	lsrs	r0, r0, #9
 800243c:	0f51      	lsrs	r1, r2, #29
 800243e:	1c5f      	adds	r7, r3, #1
 8002440:	4308      	orrs	r0, r1
 8002442:	00d5      	lsls	r5, r2, #3
 8002444:	4237      	tst	r7, r6
 8002446:	d00a      	beq.n	800245e <__aeabi_d2f+0x32>
 8002448:	4939      	ldr	r1, [pc, #228]	; (8002530 <__aeabi_d2f+0x104>)
 800244a:	185e      	adds	r6, r3, r1
 800244c:	2efe      	cmp	r6, #254	; 0xfe
 800244e:	dd16      	ble.n	800247e <__aeabi_d2f+0x52>
 8002450:	23ff      	movs	r3, #255	; 0xff
 8002452:	2100      	movs	r1, #0
 8002454:	05db      	lsls	r3, r3, #23
 8002456:	430b      	orrs	r3, r1
 8002458:	07e0      	lsls	r0, r4, #31
 800245a:	4318      	orrs	r0, r3
 800245c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800245e:	2b00      	cmp	r3, #0
 8002460:	d106      	bne.n	8002470 <__aeabi_d2f+0x44>
 8002462:	4328      	orrs	r0, r5
 8002464:	d027      	beq.n	80024b6 <__aeabi_d2f+0x8a>
 8002466:	2105      	movs	r1, #5
 8002468:	0189      	lsls	r1, r1, #6
 800246a:	0a49      	lsrs	r1, r1, #9
 800246c:	b2db      	uxtb	r3, r3
 800246e:	e7f1      	b.n	8002454 <__aeabi_d2f+0x28>
 8002470:	4305      	orrs	r5, r0
 8002472:	d0ed      	beq.n	8002450 <__aeabi_d2f+0x24>
 8002474:	2180      	movs	r1, #128	; 0x80
 8002476:	03c9      	lsls	r1, r1, #15
 8002478:	23ff      	movs	r3, #255	; 0xff
 800247a:	4301      	orrs	r1, r0
 800247c:	e7ea      	b.n	8002454 <__aeabi_d2f+0x28>
 800247e:	2e00      	cmp	r6, #0
 8002480:	dd1c      	ble.n	80024bc <__aeabi_d2f+0x90>
 8002482:	0192      	lsls	r2, r2, #6
 8002484:	0011      	movs	r1, r2
 8002486:	1e4a      	subs	r2, r1, #1
 8002488:	4191      	sbcs	r1, r2
 800248a:	00c0      	lsls	r0, r0, #3
 800248c:	0f6d      	lsrs	r5, r5, #29
 800248e:	4301      	orrs	r1, r0
 8002490:	4329      	orrs	r1, r5
 8002492:	074b      	lsls	r3, r1, #29
 8002494:	d048      	beq.n	8002528 <__aeabi_d2f+0xfc>
 8002496:	230f      	movs	r3, #15
 8002498:	400b      	ands	r3, r1
 800249a:	2b04      	cmp	r3, #4
 800249c:	d000      	beq.n	80024a0 <__aeabi_d2f+0x74>
 800249e:	3104      	adds	r1, #4
 80024a0:	2380      	movs	r3, #128	; 0x80
 80024a2:	04db      	lsls	r3, r3, #19
 80024a4:	400b      	ands	r3, r1
 80024a6:	d03f      	beq.n	8002528 <__aeabi_d2f+0xfc>
 80024a8:	1c72      	adds	r2, r6, #1
 80024aa:	2efe      	cmp	r6, #254	; 0xfe
 80024ac:	d0d0      	beq.n	8002450 <__aeabi_d2f+0x24>
 80024ae:	0189      	lsls	r1, r1, #6
 80024b0:	0a49      	lsrs	r1, r1, #9
 80024b2:	b2d3      	uxtb	r3, r2
 80024b4:	e7ce      	b.n	8002454 <__aeabi_d2f+0x28>
 80024b6:	2300      	movs	r3, #0
 80024b8:	2100      	movs	r1, #0
 80024ba:	e7cb      	b.n	8002454 <__aeabi_d2f+0x28>
 80024bc:	0032      	movs	r2, r6
 80024be:	3217      	adds	r2, #23
 80024c0:	db22      	blt.n	8002508 <__aeabi_d2f+0xdc>
 80024c2:	2180      	movs	r1, #128	; 0x80
 80024c4:	221e      	movs	r2, #30
 80024c6:	0409      	lsls	r1, r1, #16
 80024c8:	4308      	orrs	r0, r1
 80024ca:	1b92      	subs	r2, r2, r6
 80024cc:	2a1f      	cmp	r2, #31
 80024ce:	dd1d      	ble.n	800250c <__aeabi_d2f+0xe0>
 80024d0:	2102      	movs	r1, #2
 80024d2:	4249      	negs	r1, r1
 80024d4:	1b8e      	subs	r6, r1, r6
 80024d6:	0001      	movs	r1, r0
 80024d8:	40f1      	lsrs	r1, r6
 80024da:	000e      	movs	r6, r1
 80024dc:	2a20      	cmp	r2, #32
 80024de:	d004      	beq.n	80024ea <__aeabi_d2f+0xbe>
 80024e0:	4a14      	ldr	r2, [pc, #80]	; (8002534 <__aeabi_d2f+0x108>)
 80024e2:	4694      	mov	ip, r2
 80024e4:	4463      	add	r3, ip
 80024e6:	4098      	lsls	r0, r3
 80024e8:	4305      	orrs	r5, r0
 80024ea:	0029      	movs	r1, r5
 80024ec:	1e4d      	subs	r5, r1, #1
 80024ee:	41a9      	sbcs	r1, r5
 80024f0:	4331      	orrs	r1, r6
 80024f2:	2600      	movs	r6, #0
 80024f4:	074b      	lsls	r3, r1, #29
 80024f6:	d1ce      	bne.n	8002496 <__aeabi_d2f+0x6a>
 80024f8:	2080      	movs	r0, #128	; 0x80
 80024fa:	000b      	movs	r3, r1
 80024fc:	04c0      	lsls	r0, r0, #19
 80024fe:	2201      	movs	r2, #1
 8002500:	4003      	ands	r3, r0
 8002502:	4201      	tst	r1, r0
 8002504:	d1d3      	bne.n	80024ae <__aeabi_d2f+0x82>
 8002506:	e7af      	b.n	8002468 <__aeabi_d2f+0x3c>
 8002508:	2300      	movs	r3, #0
 800250a:	e7ac      	b.n	8002466 <__aeabi_d2f+0x3a>
 800250c:	490a      	ldr	r1, [pc, #40]	; (8002538 <__aeabi_d2f+0x10c>)
 800250e:	468c      	mov	ip, r1
 8002510:	0029      	movs	r1, r5
 8002512:	4463      	add	r3, ip
 8002514:	40d1      	lsrs	r1, r2
 8002516:	409d      	lsls	r5, r3
 8002518:	000a      	movs	r2, r1
 800251a:	0029      	movs	r1, r5
 800251c:	4098      	lsls	r0, r3
 800251e:	1e4d      	subs	r5, r1, #1
 8002520:	41a9      	sbcs	r1, r5
 8002522:	4301      	orrs	r1, r0
 8002524:	4311      	orrs	r1, r2
 8002526:	e7e4      	b.n	80024f2 <__aeabi_d2f+0xc6>
 8002528:	0033      	movs	r3, r6
 800252a:	e79d      	b.n	8002468 <__aeabi_d2f+0x3c>
 800252c:	000007fe 	.word	0x000007fe
 8002530:	fffffc80 	.word	0xfffffc80
 8002534:	fffffca2 	.word	0xfffffca2
 8002538:	fffffc82 	.word	0xfffffc82

0800253c <__clzsi2>:
 800253c:	211c      	movs	r1, #28
 800253e:	2301      	movs	r3, #1
 8002540:	041b      	lsls	r3, r3, #16
 8002542:	4298      	cmp	r0, r3
 8002544:	d301      	bcc.n	800254a <__clzsi2+0xe>
 8002546:	0c00      	lsrs	r0, r0, #16
 8002548:	3910      	subs	r1, #16
 800254a:	0a1b      	lsrs	r3, r3, #8
 800254c:	4298      	cmp	r0, r3
 800254e:	d301      	bcc.n	8002554 <__clzsi2+0x18>
 8002550:	0a00      	lsrs	r0, r0, #8
 8002552:	3908      	subs	r1, #8
 8002554:	091b      	lsrs	r3, r3, #4
 8002556:	4298      	cmp	r0, r3
 8002558:	d301      	bcc.n	800255e <__clzsi2+0x22>
 800255a:	0900      	lsrs	r0, r0, #4
 800255c:	3904      	subs	r1, #4
 800255e:	a202      	add	r2, pc, #8	; (adr r2, 8002568 <__clzsi2+0x2c>)
 8002560:	5c10      	ldrb	r0, [r2, r0]
 8002562:	1840      	adds	r0, r0, r1
 8002564:	4770      	bx	lr
 8002566:	46c0      	nop			; (mov r8, r8)
 8002568:	02020304 	.word	0x02020304
 800256c:	01010101 	.word	0x01010101
	...

08002578 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b084      	sub	sp, #16
 800257c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800257e:	1d3b      	adds	r3, r7, #4
 8002580:	0018      	movs	r0, r3
 8002582:	230c      	movs	r3, #12
 8002584:	001a      	movs	r2, r3
 8002586:	2100      	movs	r1, #0
 8002588:	f005 fcfc 	bl	8007f84 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 800258c:	4b2c      	ldr	r3, [pc, #176]	; (8002640 <MX_ADC_Init+0xc8>)
 800258e:	4a2d      	ldr	r2, [pc, #180]	; (8002644 <MX_ADC_Init+0xcc>)
 8002590:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002592:	4b2b      	ldr	r3, [pc, #172]	; (8002640 <MX_ADC_Init+0xc8>)
 8002594:	2200      	movs	r2, #0
 8002596:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8002598:	4b29      	ldr	r3, [pc, #164]	; (8002640 <MX_ADC_Init+0xc8>)
 800259a:	2200      	movs	r2, #0
 800259c:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800259e:	4b28      	ldr	r3, [pc, #160]	; (8002640 <MX_ADC_Init+0xc8>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80025a4:	4b26      	ldr	r3, [pc, #152]	; (8002640 <MX_ADC_Init+0xc8>)
 80025a6:	2201      	movs	r2, #1
 80025a8:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80025aa:	4b25      	ldr	r3, [pc, #148]	; (8002640 <MX_ADC_Init+0xc8>)
 80025ac:	2204      	movs	r2, #4
 80025ae:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80025b0:	4b23      	ldr	r3, [pc, #140]	; (8002640 <MX_ADC_Init+0xc8>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80025b6:	4b22      	ldr	r3, [pc, #136]	; (8002640 <MX_ADC_Init+0xc8>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 80025bc:	4b20      	ldr	r3, [pc, #128]	; (8002640 <MX_ADC_Init+0xc8>)
 80025be:	2200      	movs	r2, #0
 80025c0:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = ENABLE;
 80025c2:	4b1f      	ldr	r3, [pc, #124]	; (8002640 <MX_ADC_Init+0xc8>)
 80025c4:	2201      	movs	r2, #1
 80025c6:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80025c8:	4b1d      	ldr	r3, [pc, #116]	; (8002640 <MX_ADC_Init+0xc8>)
 80025ca:	22c2      	movs	r2, #194	; 0xc2
 80025cc:	32ff      	adds	r2, #255	; 0xff
 80025ce:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80025d0:	4b1b      	ldr	r3, [pc, #108]	; (8002640 <MX_ADC_Init+0xc8>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 80025d6:	4b1a      	ldr	r3, [pc, #104]	; (8002640 <MX_ADC_Init+0xc8>)
 80025d8:	2224      	movs	r2, #36	; 0x24
 80025da:	2100      	movs	r1, #0
 80025dc:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80025de:	4b18      	ldr	r3, [pc, #96]	; (8002640 <MX_ADC_Init+0xc8>)
 80025e0:	2201      	movs	r2, #1
 80025e2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80025e4:	4b16      	ldr	r3, [pc, #88]	; (8002640 <MX_ADC_Init+0xc8>)
 80025e6:	0018      	movs	r0, r3
 80025e8:	f000 fe80 	bl	80032ec <HAL_ADC_Init>
 80025ec:	1e03      	subs	r3, r0, #0
 80025ee:	d001      	beq.n	80025f4 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 80025f0:	f000 fab8 	bl	8002b64 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80025f4:	1d3b      	adds	r3, r7, #4
 80025f6:	2201      	movs	r2, #1
 80025f8:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80025fa:	1d3b      	adds	r3, r7, #4
 80025fc:	2280      	movs	r2, #128	; 0x80
 80025fe:	0152      	lsls	r2, r2, #5
 8002600:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002602:	1d3b      	adds	r3, r7, #4
 8002604:	2280      	movs	r2, #128	; 0x80
 8002606:	0552      	lsls	r2, r2, #21
 8002608:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800260a:	1d3a      	adds	r2, r7, #4
 800260c:	4b0c      	ldr	r3, [pc, #48]	; (8002640 <MX_ADC_Init+0xc8>)
 800260e:	0011      	movs	r1, r2
 8002610:	0018      	movs	r0, r3
 8002612:	f000 ffab 	bl	800356c <HAL_ADC_ConfigChannel>
 8002616:	1e03      	subs	r3, r0, #0
 8002618:	d001      	beq.n	800261e <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 800261a:	f000 faa3 	bl	8002b64 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800261e:	1d3b      	adds	r3, r7, #4
 8002620:	2204      	movs	r2, #4
 8002622:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002624:	1d3a      	adds	r2, r7, #4
 8002626:	4b06      	ldr	r3, [pc, #24]	; (8002640 <MX_ADC_Init+0xc8>)
 8002628:	0011      	movs	r1, r2
 800262a:	0018      	movs	r0, r3
 800262c:	f000 ff9e 	bl	800356c <HAL_ADC_ConfigChannel>
 8002630:	1e03      	subs	r3, r0, #0
 8002632:	d001      	beq.n	8002638 <MX_ADC_Init+0xc0>
  {
    Error_Handler();
 8002634:	f000 fa96 	bl	8002b64 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8002638:	46c0      	nop			; (mov r8, r8)
 800263a:	46bd      	mov	sp, r7
 800263c:	b004      	add	sp, #16
 800263e:	bd80      	pop	{r7, pc}
 8002640:	20000230 	.word	0x20000230
 8002644:	40012400 	.word	0x40012400

08002648 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002648:	b590      	push	{r4, r7, lr}
 800264a:	b08b      	sub	sp, #44	; 0x2c
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002650:	2414      	movs	r4, #20
 8002652:	193b      	adds	r3, r7, r4
 8002654:	0018      	movs	r0, r3
 8002656:	2314      	movs	r3, #20
 8002658:	001a      	movs	r2, r3
 800265a:	2100      	movs	r1, #0
 800265c:	f005 fc92 	bl	8007f84 <memset>
  if(adcHandle->Instance==ADC1)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a19      	ldr	r2, [pc, #100]	; (80026cc <HAL_ADC_MspInit+0x84>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d12b      	bne.n	80026c2 <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800266a:	4b19      	ldr	r3, [pc, #100]	; (80026d0 <HAL_ADC_MspInit+0x88>)
 800266c:	699a      	ldr	r2, [r3, #24]
 800266e:	4b18      	ldr	r3, [pc, #96]	; (80026d0 <HAL_ADC_MspInit+0x88>)
 8002670:	2180      	movs	r1, #128	; 0x80
 8002672:	0089      	lsls	r1, r1, #2
 8002674:	430a      	orrs	r2, r1
 8002676:	619a      	str	r2, [r3, #24]
 8002678:	4b15      	ldr	r3, [pc, #84]	; (80026d0 <HAL_ADC_MspInit+0x88>)
 800267a:	699a      	ldr	r2, [r3, #24]
 800267c:	2380      	movs	r3, #128	; 0x80
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	4013      	ands	r3, r2
 8002682:	613b      	str	r3, [r7, #16]
 8002684:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002686:	4b12      	ldr	r3, [pc, #72]	; (80026d0 <HAL_ADC_MspInit+0x88>)
 8002688:	695a      	ldr	r2, [r3, #20]
 800268a:	4b11      	ldr	r3, [pc, #68]	; (80026d0 <HAL_ADC_MspInit+0x88>)
 800268c:	2180      	movs	r1, #128	; 0x80
 800268e:	0289      	lsls	r1, r1, #10
 8002690:	430a      	orrs	r2, r1
 8002692:	615a      	str	r2, [r3, #20]
 8002694:	4b0e      	ldr	r3, [pc, #56]	; (80026d0 <HAL_ADC_MspInit+0x88>)
 8002696:	695a      	ldr	r2, [r3, #20]
 8002698:	2380      	movs	r3, #128	; 0x80
 800269a:	029b      	lsls	r3, r3, #10
 800269c:	4013      	ands	r3, r2
 800269e:	60fb      	str	r3, [r7, #12]
 80026a0:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA1     ------> ADC_IN1
    PA4     ------> ADC_IN4
    */
    GPIO_InitStruct.Pin = POWER_EN_ADC_Pin|BAT_ADC_Pin;
 80026a2:	193b      	adds	r3, r7, r4
 80026a4:	2212      	movs	r2, #18
 80026a6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80026a8:	193b      	adds	r3, r7, r4
 80026aa:	2203      	movs	r2, #3
 80026ac:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ae:	193b      	adds	r3, r7, r4
 80026b0:	2200      	movs	r2, #0
 80026b2:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026b4:	193a      	adds	r2, r7, r4
 80026b6:	2390      	movs	r3, #144	; 0x90
 80026b8:	05db      	lsls	r3, r3, #23
 80026ba:	0011      	movs	r1, r2
 80026bc:	0018      	movs	r0, r3
 80026be:	f001 f975 	bl	80039ac <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80026c2:	46c0      	nop			; (mov r8, r8)
 80026c4:	46bd      	mov	sp, r7
 80026c6:	b00b      	add	sp, #44	; 0x2c
 80026c8:	bd90      	pop	{r4, r7, pc}
 80026ca:	46c0      	nop			; (mov r8, r8)
 80026cc:	40012400 	.word	0x40012400
 80026d0:	40021000 	.word	0x40021000

080026d4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80026d4:	b590      	push	{r4, r7, lr}
 80026d6:	b089      	sub	sp, #36	; 0x24
 80026d8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026da:	240c      	movs	r4, #12
 80026dc:	193b      	adds	r3, r7, r4
 80026de:	0018      	movs	r0, r3
 80026e0:	2314      	movs	r3, #20
 80026e2:	001a      	movs	r2, r3
 80026e4:	2100      	movs	r1, #0
 80026e6:	f005 fc4d 	bl	8007f84 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80026ea:	4b62      	ldr	r3, [pc, #392]	; (8002874 <MX_GPIO_Init+0x1a0>)
 80026ec:	695a      	ldr	r2, [r3, #20]
 80026ee:	4b61      	ldr	r3, [pc, #388]	; (8002874 <MX_GPIO_Init+0x1a0>)
 80026f0:	2180      	movs	r1, #128	; 0x80
 80026f2:	0309      	lsls	r1, r1, #12
 80026f4:	430a      	orrs	r2, r1
 80026f6:	615a      	str	r2, [r3, #20]
 80026f8:	4b5e      	ldr	r3, [pc, #376]	; (8002874 <MX_GPIO_Init+0x1a0>)
 80026fa:	695a      	ldr	r2, [r3, #20]
 80026fc:	2380      	movs	r3, #128	; 0x80
 80026fe:	031b      	lsls	r3, r3, #12
 8002700:	4013      	ands	r3, r2
 8002702:	60bb      	str	r3, [r7, #8]
 8002704:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002706:	4b5b      	ldr	r3, [pc, #364]	; (8002874 <MX_GPIO_Init+0x1a0>)
 8002708:	695a      	ldr	r2, [r3, #20]
 800270a:	4b5a      	ldr	r3, [pc, #360]	; (8002874 <MX_GPIO_Init+0x1a0>)
 800270c:	2180      	movs	r1, #128	; 0x80
 800270e:	0289      	lsls	r1, r1, #10
 8002710:	430a      	orrs	r2, r1
 8002712:	615a      	str	r2, [r3, #20]
 8002714:	4b57      	ldr	r3, [pc, #348]	; (8002874 <MX_GPIO_Init+0x1a0>)
 8002716:	695a      	ldr	r2, [r3, #20]
 8002718:	2380      	movs	r3, #128	; 0x80
 800271a:	029b      	lsls	r3, r3, #10
 800271c:	4013      	ands	r3, r2
 800271e:	607b      	str	r3, [r7, #4]
 8002720:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002722:	4b54      	ldr	r3, [pc, #336]	; (8002874 <MX_GPIO_Init+0x1a0>)
 8002724:	695a      	ldr	r2, [r3, #20]
 8002726:	4b53      	ldr	r3, [pc, #332]	; (8002874 <MX_GPIO_Init+0x1a0>)
 8002728:	2180      	movs	r1, #128	; 0x80
 800272a:	02c9      	lsls	r1, r1, #11
 800272c:	430a      	orrs	r2, r1
 800272e:	615a      	str	r2, [r3, #20]
 8002730:	4b50      	ldr	r3, [pc, #320]	; (8002874 <MX_GPIO_Init+0x1a0>)
 8002732:	695a      	ldr	r2, [r3, #20]
 8002734:	2380      	movs	r3, #128	; 0x80
 8002736:	02db      	lsls	r3, r3, #11
 8002738:	4013      	ands	r3, r2
 800273a:	603b      	str	r3, [r7, #0]
 800273c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PWR_EN_Pin|WB3S_KEY_Pin|WB3S_CEN_Pin, GPIO_PIN_SET);
 800273e:	494e      	ldr	r1, [pc, #312]	; (8002878 <MX_GPIO_Init+0x1a4>)
 8002740:	2390      	movs	r3, #144	; 0x90
 8002742:	05db      	lsls	r3, r3, #23
 8002744:	2201      	movs	r2, #1
 8002746:	0018      	movs	r0, r3
 8002748:	f001 fabd 	bl	8003cc6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED0_Pin|CCS_ADD_Pin, GPIO_PIN_RESET);
 800274c:	494b      	ldr	r1, [pc, #300]	; (800287c <MX_GPIO_Init+0x1a8>)
 800274e:	4b4c      	ldr	r3, [pc, #304]	; (8002880 <MX_GPIO_Init+0x1ac>)
 8002750:	2200      	movs	r2, #0
 8002752:	0018      	movs	r0, r3
 8002754:	f001 fab7 	bl	8003cc6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CCS_WAKE_Pin|CCS_RST_Pin, GPIO_PIN_SET);
 8002758:	23a0      	movs	r3, #160	; 0xa0
 800275a:	01db      	lsls	r3, r3, #7
 800275c:	4848      	ldr	r0, [pc, #288]	; (8002880 <MX_GPIO_Init+0x1ac>)
 800275e:	2201      	movs	r2, #1
 8002760:	0019      	movs	r1, r3
 8002762:	f001 fab0 	bl	8003cc6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WB3S_EN_GPIO_Port, WB3S_EN_Pin, GPIO_PIN_RESET);
 8002766:	2380      	movs	r3, #128	; 0x80
 8002768:	0119      	lsls	r1, r3, #4
 800276a:	2390      	movs	r3, #144	; 0x90
 800276c:	05db      	lsls	r3, r3, #23
 800276e:	2200      	movs	r2, #0
 8002770:	0018      	movs	r0, r3
 8002772:	f001 faa8 	bl	8003cc6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = PWR_EN_Pin|WB3S_KEY_Pin|WB3S_EN_Pin|WB3S_CEN_Pin;
 8002776:	193b      	adds	r3, r7, r4
 8002778:	4a42      	ldr	r2, [pc, #264]	; (8002884 <MX_GPIO_Init+0x1b0>)
 800277a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800277c:	193b      	adds	r3, r7, r4
 800277e:	2201      	movs	r2, #1
 8002780:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002782:	193b      	adds	r3, r7, r4
 8002784:	2200      	movs	r2, #0
 8002786:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002788:	193b      	adds	r3, r7, r4
 800278a:	2200      	movs	r2, #0
 800278c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800278e:	193a      	adds	r2, r7, r4
 8002790:	2390      	movs	r3, #144	; 0x90
 8002792:	05db      	lsls	r3, r3, #23
 8002794:	0011      	movs	r1, r2
 8002796:	0018      	movs	r0, r3
 8002798:	f001 f908 	bl	80039ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Key1_Pin;
 800279c:	193b      	adds	r3, r7, r4
 800279e:	2280      	movs	r2, #128	; 0x80
 80027a0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80027a2:	193b      	adds	r3, r7, r4
 80027a4:	4a38      	ldr	r2, [pc, #224]	; (8002888 <MX_GPIO_Init+0x1b4>)
 80027a6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027a8:	193b      	adds	r3, r7, r4
 80027aa:	2201      	movs	r2, #1
 80027ac:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Key1_GPIO_Port, &GPIO_InitStruct);
 80027ae:	193a      	adds	r2, r7, r4
 80027b0:	2390      	movs	r3, #144	; 0x90
 80027b2:	05db      	lsls	r3, r3, #23
 80027b4:	0011      	movs	r1, r2
 80027b6:	0018      	movs	r0, r3
 80027b8:	f001 f8f8 	bl	80039ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = Key2_Pin|Key3_Pin;
 80027bc:	193b      	adds	r3, r7, r4
 80027be:	2203      	movs	r2, #3
 80027c0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80027c2:	193b      	adds	r3, r7, r4
 80027c4:	4a30      	ldr	r2, [pc, #192]	; (8002888 <MX_GPIO_Init+0x1b4>)
 80027c6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027c8:	193b      	adds	r3, r7, r4
 80027ca:	2201      	movs	r2, #1
 80027cc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027ce:	193b      	adds	r3, r7, r4
 80027d0:	4a2b      	ldr	r2, [pc, #172]	; (8002880 <MX_GPIO_Init+0x1ac>)
 80027d2:	0019      	movs	r1, r3
 80027d4:	0010      	movs	r0, r2
 80027d6:	f001 f8e9 	bl	80039ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED0_Pin;
 80027da:	193b      	adds	r3, r7, r4
 80027dc:	2204      	movs	r2, #4
 80027de:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027e0:	193b      	adds	r3, r7, r4
 80027e2:	2201      	movs	r2, #1
 80027e4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027e6:	193b      	adds	r3, r7, r4
 80027e8:	2201      	movs	r2, #1
 80027ea:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027ec:	193b      	adds	r3, r7, r4
 80027ee:	2200      	movs	r2, #0
 80027f0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 80027f2:	193b      	adds	r3, r7, r4
 80027f4:	4a22      	ldr	r2, [pc, #136]	; (8002880 <MX_GPIO_Init+0x1ac>)
 80027f6:	0019      	movs	r1, r3
 80027f8:	0010      	movs	r0, r2
 80027fa:	f001 f8d7 	bl	80039ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = CCS_WAKE_Pin|CCS_RST_Pin|CCS_ADD_Pin;
 80027fe:	0021      	movs	r1, r4
 8002800:	187b      	adds	r3, r7, r1
 8002802:	22d0      	movs	r2, #208	; 0xd0
 8002804:	0212      	lsls	r2, r2, #8
 8002806:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002808:	000c      	movs	r4, r1
 800280a:	193b      	adds	r3, r7, r4
 800280c:	2201      	movs	r2, #1
 800280e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002810:	193b      	adds	r3, r7, r4
 8002812:	2200      	movs	r2, #0
 8002814:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002816:	193b      	adds	r3, r7, r4
 8002818:	2200      	movs	r2, #0
 800281a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800281c:	193b      	adds	r3, r7, r4
 800281e:	4a18      	ldr	r2, [pc, #96]	; (8002880 <MX_GPIO_Init+0x1ac>)
 8002820:	0019      	movs	r1, r3
 8002822:	0010      	movs	r0, r2
 8002824:	f001 f8c2 	bl	80039ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CCS_INT_Pin;
 8002828:	0021      	movs	r1, r4
 800282a:	187b      	adds	r3, r7, r1
 800282c:	2280      	movs	r2, #128	; 0x80
 800282e:	0192      	lsls	r2, r2, #6
 8002830:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002832:	187b      	adds	r3, r7, r1
 8002834:	4a15      	ldr	r2, [pc, #84]	; (800288c <MX_GPIO_Init+0x1b8>)
 8002836:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002838:	187b      	adds	r3, r7, r1
 800283a:	2200      	movs	r2, #0
 800283c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(CCS_INT_GPIO_Port, &GPIO_InitStruct);
 800283e:	187b      	adds	r3, r7, r1
 8002840:	4a0f      	ldr	r2, [pc, #60]	; (8002880 <MX_GPIO_Init+0x1ac>)
 8002842:	0019      	movs	r1, r3
 8002844:	0010      	movs	r0, r2
 8002846:	f001 f8b1 	bl	80039ac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 1, 0);
 800284a:	2200      	movs	r2, #0
 800284c:	2101      	movs	r1, #1
 800284e:	2005      	movs	r0, #5
 8002850:	f001 f80a 	bl	8003868 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8002854:	2005      	movs	r0, #5
 8002856:	f001 f81c 	bl	8003892 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 1, 0);
 800285a:	2200      	movs	r2, #0
 800285c:	2101      	movs	r1, #1
 800285e:	2007      	movs	r0, #7
 8002860:	f001 f802 	bl	8003868 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8002864:	2007      	movs	r0, #7
 8002866:	f001 f814 	bl	8003892 <HAL_NVIC_EnableIRQ>

}
 800286a:	46c0      	nop			; (mov r8, r8)
 800286c:	46bd      	mov	sp, r7
 800286e:	b009      	add	sp, #36	; 0x24
 8002870:	bd90      	pop	{r4, r7, pc}
 8002872:	46c0      	nop			; (mov r8, r8)
 8002874:	40021000 	.word	0x40021000
 8002878:	00001101 	.word	0x00001101
 800287c:	00008004 	.word	0x00008004
 8002880:	48000400 	.word	0x48000400
 8002884:	00001901 	.word	0x00001901
 8002888:	10310000 	.word	0x10310000
 800288c:	10210000 	.word	0x10210000

08002890 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002894:	4b1b      	ldr	r3, [pc, #108]	; (8002904 <MX_I2C2_Init+0x74>)
 8002896:	4a1c      	ldr	r2, [pc, #112]	; (8002908 <MX_I2C2_Init+0x78>)
 8002898:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x2000090E;
 800289a:	4b1a      	ldr	r3, [pc, #104]	; (8002904 <MX_I2C2_Init+0x74>)
 800289c:	4a1b      	ldr	r2, [pc, #108]	; (800290c <MX_I2C2_Init+0x7c>)
 800289e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 20;
 80028a0:	4b18      	ldr	r3, [pc, #96]	; (8002904 <MX_I2C2_Init+0x74>)
 80028a2:	2214      	movs	r2, #20
 80028a4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80028a6:	4b17      	ldr	r3, [pc, #92]	; (8002904 <MX_I2C2_Init+0x74>)
 80028a8:	2201      	movs	r2, #1
 80028aa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80028ac:	4b15      	ldr	r3, [pc, #84]	; (8002904 <MX_I2C2_Init+0x74>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80028b2:	4b14      	ldr	r3, [pc, #80]	; (8002904 <MX_I2C2_Init+0x74>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80028b8:	4b12      	ldr	r3, [pc, #72]	; (8002904 <MX_I2C2_Init+0x74>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80028be:	4b11      	ldr	r3, [pc, #68]	; (8002904 <MX_I2C2_Init+0x74>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80028c4:	4b0f      	ldr	r3, [pc, #60]	; (8002904 <MX_I2C2_Init+0x74>)
 80028c6:	2200      	movs	r2, #0
 80028c8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80028ca:	4b0e      	ldr	r3, [pc, #56]	; (8002904 <MX_I2C2_Init+0x74>)
 80028cc:	0018      	movs	r0, r3
 80028ce:	f001 fa4f 	bl	8003d70 <HAL_I2C_Init>
 80028d2:	1e03      	subs	r3, r0, #0
 80028d4:	d001      	beq.n	80028da <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80028d6:	f000 f945 	bl	8002b64 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80028da:	4b0a      	ldr	r3, [pc, #40]	; (8002904 <MX_I2C2_Init+0x74>)
 80028dc:	2100      	movs	r1, #0
 80028de:	0018      	movs	r0, r3
 80028e0:	f002 fb1e 	bl	8004f20 <HAL_I2CEx_ConfigAnalogFilter>
 80028e4:	1e03      	subs	r3, r0, #0
 80028e6:	d001      	beq.n	80028ec <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80028e8:	f000 f93c 	bl	8002b64 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80028ec:	4b05      	ldr	r3, [pc, #20]	; (8002904 <MX_I2C2_Init+0x74>)
 80028ee:	2100      	movs	r1, #0
 80028f0:	0018      	movs	r0, r3
 80028f2:	f002 fb61 	bl	8004fb8 <HAL_I2CEx_ConfigDigitalFilter>
 80028f6:	1e03      	subs	r3, r0, #0
 80028f8:	d001      	beq.n	80028fe <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80028fa:	f000 f933 	bl	8002b64 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80028fe:	46c0      	nop			; (mov r8, r8)
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}
 8002904:	20000270 	.word	0x20000270
 8002908:	40005800 	.word	0x40005800
 800290c:	2000090e 	.word	0x2000090e

08002910 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002910:	b590      	push	{r4, r7, lr}
 8002912:	b08b      	sub	sp, #44	; 0x2c
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002918:	2414      	movs	r4, #20
 800291a:	193b      	adds	r3, r7, r4
 800291c:	0018      	movs	r0, r3
 800291e:	2314      	movs	r3, #20
 8002920:	001a      	movs	r2, r3
 8002922:	2100      	movs	r1, #0
 8002924:	f005 fb2e 	bl	8007f84 <memset>
  if(i2cHandle->Instance==I2C2)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a1c      	ldr	r2, [pc, #112]	; (80029a0 <HAL_I2C_MspInit+0x90>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d132      	bne.n	8002998 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002932:	4b1c      	ldr	r3, [pc, #112]	; (80029a4 <HAL_I2C_MspInit+0x94>)
 8002934:	695a      	ldr	r2, [r3, #20]
 8002936:	4b1b      	ldr	r3, [pc, #108]	; (80029a4 <HAL_I2C_MspInit+0x94>)
 8002938:	2180      	movs	r1, #128	; 0x80
 800293a:	02c9      	lsls	r1, r1, #11
 800293c:	430a      	orrs	r2, r1
 800293e:	615a      	str	r2, [r3, #20]
 8002940:	4b18      	ldr	r3, [pc, #96]	; (80029a4 <HAL_I2C_MspInit+0x94>)
 8002942:	695a      	ldr	r2, [r3, #20]
 8002944:	2380      	movs	r3, #128	; 0x80
 8002946:	02db      	lsls	r3, r3, #11
 8002948:	4013      	ands	r3, r2
 800294a:	613b      	str	r3, [r7, #16]
 800294c:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800294e:	193b      	adds	r3, r7, r4
 8002950:	22c0      	movs	r2, #192	; 0xc0
 8002952:	0112      	lsls	r2, r2, #4
 8002954:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002956:	0021      	movs	r1, r4
 8002958:	187b      	adds	r3, r7, r1
 800295a:	2212      	movs	r2, #18
 800295c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800295e:	187b      	adds	r3, r7, r1
 8002960:	2201      	movs	r2, #1
 8002962:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002964:	187b      	adds	r3, r7, r1
 8002966:	2203      	movs	r2, #3
 8002968:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C2;
 800296a:	187b      	adds	r3, r7, r1
 800296c:	2201      	movs	r2, #1
 800296e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002970:	187b      	adds	r3, r7, r1
 8002972:	4a0d      	ldr	r2, [pc, #52]	; (80029a8 <HAL_I2C_MspInit+0x98>)
 8002974:	0019      	movs	r1, r3
 8002976:	0010      	movs	r0, r2
 8002978:	f001 f818 	bl	80039ac <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800297c:	4b09      	ldr	r3, [pc, #36]	; (80029a4 <HAL_I2C_MspInit+0x94>)
 800297e:	69da      	ldr	r2, [r3, #28]
 8002980:	4b08      	ldr	r3, [pc, #32]	; (80029a4 <HAL_I2C_MspInit+0x94>)
 8002982:	2180      	movs	r1, #128	; 0x80
 8002984:	03c9      	lsls	r1, r1, #15
 8002986:	430a      	orrs	r2, r1
 8002988:	61da      	str	r2, [r3, #28]
 800298a:	4b06      	ldr	r3, [pc, #24]	; (80029a4 <HAL_I2C_MspInit+0x94>)
 800298c:	69da      	ldr	r2, [r3, #28]
 800298e:	2380      	movs	r3, #128	; 0x80
 8002990:	03db      	lsls	r3, r3, #15
 8002992:	4013      	ands	r3, r2
 8002994:	60fb      	str	r3, [r7, #12]
 8002996:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8002998:	46c0      	nop			; (mov r8, r8)
 800299a:	46bd      	mov	sp, r7
 800299c:	b00b      	add	sp, #44	; 0x2c
 800299e:	bd90      	pop	{r4, r7, pc}
 80029a0:	40005800 	.word	0x40005800
 80029a4:	40021000 	.word	0x40021000
 80029a8:	48000400 	.word	0x48000400

080029ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80029b0:	f000 fc48 	bl	8003244 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80029b4:	f000 f84a 	bl	8002a4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80029b8:	f7ff fe8c 	bl	80026d4 <MX_GPIO_Init>
  MX_RTC_Init();
 80029bc:	f000 f8d8 	bl	8002b70 <MX_RTC_Init>
  MX_ADC_Init();
 80029c0:	f7ff fdda 	bl	8002578 <MX_ADC_Init>
  MX_USART1_UART_Init();
 80029c4:	f000 fb8e 	bl	80030e4 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 80029c8:	f7ff ff62 	bl	8002890 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
	OLED_Init();
 80029cc:	f005 fa50 	bl	8007e70 <OLED_Init>
	OLED_Clear();
 80029d0:	f004 ff79 	bl	80078c6 <OLED_Clear>

	OLED_ShowString(10, 0, "TVOC Sensor V2", 16);
 80029d4:	4a17      	ldr	r2, [pc, #92]	; (8002a34 <main+0x88>)
 80029d6:	2310      	movs	r3, #16
 80029d8:	2100      	movs	r1, #0
 80029da:	200a      	movs	r0, #10
 80029dc:	f005 f8fa 	bl	8007bd4 <OLED_ShowString>
	OLED_ShowString(40, 4, "Gaficat", 16);
 80029e0:	4a15      	ldr	r2, [pc, #84]	; (8002a38 <main+0x8c>)
 80029e2:	2310      	movs	r3, #16
 80029e4:	2104      	movs	r1, #4
 80029e6:	2028      	movs	r0, #40	; 0x28
 80029e8:	f005 f8f4 	bl	8007bd4 <OLED_ShowString>
	hdc1080_init();
 80029ec:	f004 fe2e 	bl	800764c <hdc1080_init>

	if(configureCCS811()){
 80029f0:	f004 fb90 	bl	8007114 <configureCCS811>
	}




	OLED_Clear();
 80029f4:	f004 ff67 	bl	80078c6 <OLED_Clear>
//	OLED_ShowCHinese(0,2,1);
//	OLED_ShowCHinese(0,4,2);
//	OLED_ShowCHinese(0,6,3);
	OLED_ShowString(0, 0, "TVOC:", 16);
 80029f8:	4a10      	ldr	r2, [pc, #64]	; (8002a3c <main+0x90>)
 80029fa:	2310      	movs	r3, #16
 80029fc:	2100      	movs	r1, #0
 80029fe:	2000      	movs	r0, #0
 8002a00:	f005 f8e8 	bl	8007bd4 <OLED_ShowString>
	OLED_ShowString(0, 2, "eCO2:", 16);
 8002a04:	4a0e      	ldr	r2, [pc, #56]	; (8002a40 <main+0x94>)
 8002a06:	2310      	movs	r3, #16
 8002a08:	2102      	movs	r1, #2
 8002a0a:	2000      	movs	r0, #0
 8002a0c:	f005 f8e2 	bl	8007bd4 <OLED_ShowString>
	OLED_ShowString(0, 4, "Temp:", 16);
 8002a10:	4a0c      	ldr	r2, [pc, #48]	; (8002a44 <main+0x98>)
 8002a12:	2310      	movs	r3, #16
 8002a14:	2104      	movs	r1, #4
 8002a16:	2000      	movs	r0, #0
 8002a18:	f005 f8dc 	bl	8007bd4 <OLED_ShowString>
	OLED_ShowString(0, 6, "humidity:", 16);
 8002a1c:	4a0a      	ldr	r2, [pc, #40]	; (8002a48 <main+0x9c>)
 8002a1e:	2310      	movs	r3, #16
 8002a20:	2106      	movs	r1, #6
 8002a22:	2000      	movs	r0, #0
 8002a24:	f005 f8d6 	bl	8007bd4 <OLED_ShowString>

  while (1)
  {
//	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_2);

	  HAL_Delay(1000);
 8002a28:	23fa      	movs	r3, #250	; 0xfa
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	0018      	movs	r0, r3
 8002a2e:	f000 fc39 	bl	80032a4 <HAL_Delay>
 8002a32:	e7f9      	b.n	8002a28 <main+0x7c>
 8002a34:	0800c9a8 	.word	0x0800c9a8
 8002a38:	0800c9b8 	.word	0x0800c9b8
 8002a3c:	0800c9c0 	.word	0x0800c9c0
 8002a40:	0800c9c8 	.word	0x0800c9c8
 8002a44:	0800c9d0 	.word	0x0800c9d0
 8002a48:	0800c9d8 	.word	0x0800c9d8

08002a4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002a4c:	b590      	push	{r4, r7, lr}
 8002a4e:	b095      	sub	sp, #84	; 0x54
 8002a50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a52:	2420      	movs	r4, #32
 8002a54:	193b      	adds	r3, r7, r4
 8002a56:	0018      	movs	r0, r3
 8002a58:	2330      	movs	r3, #48	; 0x30
 8002a5a:	001a      	movs	r2, r3
 8002a5c:	2100      	movs	r1, #0
 8002a5e:	f005 fa91 	bl	8007f84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a62:	2310      	movs	r3, #16
 8002a64:	18fb      	adds	r3, r7, r3
 8002a66:	0018      	movs	r0, r3
 8002a68:	2310      	movs	r3, #16
 8002a6a:	001a      	movs	r2, r3
 8002a6c:	2100      	movs	r1, #0
 8002a6e:	f005 fa89 	bl	8007f84 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002a72:	003b      	movs	r3, r7
 8002a74:	0018      	movs	r0, r3
 8002a76:	2310      	movs	r3, #16
 8002a78:	001a      	movs	r2, r3
 8002a7a:	2100      	movs	r1, #0
 8002a7c:	f005 fa82 	bl	8007f84 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002a80:	f002 fae6 	bl	8005050 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_HIGH);
 8002a84:	4b2c      	ldr	r3, [pc, #176]	; (8002b38 <SystemClock_Config+0xec>)
 8002a86:	6a1a      	ldr	r2, [r3, #32]
 8002a88:	4b2b      	ldr	r3, [pc, #172]	; (8002b38 <SystemClock_Config+0xec>)
 8002a8a:	2118      	movs	r1, #24
 8002a8c:	430a      	orrs	r2, r1
 8002a8e:	621a      	str	r2, [r3, #32]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
 8002a90:	0021      	movs	r1, r4
 8002a92:	187b      	adds	r3, r7, r1
 8002a94:	2216      	movs	r2, #22
 8002a96:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002a98:	187b      	adds	r3, r7, r1
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002a9e:	187b      	adds	r3, r7, r1
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8002aa4:	187b      	adds	r3, r7, r1
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002aaa:	187b      	adds	r3, r7, r1
 8002aac:	2210      	movs	r2, #16
 8002aae:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8002ab0:	187b      	adds	r3, r7, r1
 8002ab2:	2210      	movs	r2, #16
 8002ab4:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002ab6:	187b      	adds	r3, r7, r1
 8002ab8:	2202      	movs	r2, #2
 8002aba:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002abc:	187b      	adds	r3, r7, r1
 8002abe:	2200      	movs	r2, #0
 8002ac0:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8002ac2:	187b      	adds	r3, r7, r1
 8002ac4:	2280      	movs	r2, #128	; 0x80
 8002ac6:	0312      	lsls	r2, r2, #12
 8002ac8:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8002aca:	187b      	adds	r3, r7, r1
 8002acc:	2200      	movs	r2, #0
 8002ace:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ad0:	187b      	adds	r3, r7, r1
 8002ad2:	0018      	movs	r0, r3
 8002ad4:	f002 faca 	bl	800506c <HAL_RCC_OscConfig>
 8002ad8:	1e03      	subs	r3, r0, #0
 8002ada:	d001      	beq.n	8002ae0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002adc:	f000 f842 	bl	8002b64 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002ae0:	2110      	movs	r1, #16
 8002ae2:	187b      	adds	r3, r7, r1
 8002ae4:	2207      	movs	r2, #7
 8002ae6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002ae8:	187b      	adds	r3, r7, r1
 8002aea:	2202      	movs	r2, #2
 8002aec:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8002aee:	187b      	adds	r3, r7, r1
 8002af0:	2280      	movs	r2, #128	; 0x80
 8002af2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002af4:	187b      	adds	r3, r7, r1
 8002af6:	2200      	movs	r2, #0
 8002af8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002afa:	187b      	adds	r3, r7, r1
 8002afc:	2100      	movs	r1, #0
 8002afe:	0018      	movs	r0, r3
 8002b00:	f002 fdce 	bl	80056a0 <HAL_RCC_ClockConfig>
 8002b04:	1e03      	subs	r3, r0, #0
 8002b06:	d001      	beq.n	8002b0c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002b08:	f000 f82c 	bl	8002b64 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_RTC;
 8002b0c:	003b      	movs	r3, r7
 8002b0e:	4a0b      	ldr	r2, [pc, #44]	; (8002b3c <SystemClock_Config+0xf0>)
 8002b10:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002b12:	003b      	movs	r3, r7
 8002b14:	2200      	movs	r2, #0
 8002b16:	609a      	str	r2, [r3, #8]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002b18:	003b      	movs	r3, r7
 8002b1a:	2280      	movs	r2, #128	; 0x80
 8002b1c:	0052      	lsls	r2, r2, #1
 8002b1e:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b20:	003b      	movs	r3, r7
 8002b22:	0018      	movs	r0, r3
 8002b24:	f002 ff38 	bl	8005998 <HAL_RCCEx_PeriphCLKConfig>
 8002b28:	1e03      	subs	r3, r0, #0
 8002b2a:	d001      	beq.n	8002b30 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8002b2c:	f000 f81a 	bl	8002b64 <Error_Handler>
  }
}
 8002b30:	46c0      	nop			; (mov r8, r8)
 8002b32:	46bd      	mov	sp, r7
 8002b34:	b015      	add	sp, #84	; 0x54
 8002b36:	bd90      	pop	{r4, r7, pc}
 8002b38:	40021000 	.word	0x40021000
 8002b3c:	00010001 	.word	0x00010001

08002b40 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b082      	sub	sp, #8
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a04      	ldr	r2, [pc, #16]	; (8002b60 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d101      	bne.n	8002b56 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002b52:	f000 fb8b 	bl	800326c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002b56:	46c0      	nop			; (mov r8, r8)
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	b002      	add	sp, #8
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	46c0      	nop			; (mov r8, r8)
 8002b60:	40012c00 	.word	0x40012c00

08002b64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b68:	b672      	cpsid	i
}
 8002b6a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002b6c:	e7fe      	b.n	8002b6c <Error_Handler+0x8>
	...

08002b70 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b086      	sub	sp, #24
 8002b74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002b76:	1d3b      	adds	r3, r7, #4
 8002b78:	0018      	movs	r0, r3
 8002b7a:	2314      	movs	r3, #20
 8002b7c:	001a      	movs	r2, r3
 8002b7e:	2100      	movs	r1, #0
 8002b80:	f005 fa00 	bl	8007f84 <memset>
  RTC_DateTypeDef sDate = {0};
 8002b84:	003b      	movs	r3, r7
 8002b86:	2200      	movs	r2, #0
 8002b88:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002b8a:	4b28      	ldr	r3, [pc, #160]	; (8002c2c <MX_RTC_Init+0xbc>)
 8002b8c:	4a28      	ldr	r2, [pc, #160]	; (8002c30 <MX_RTC_Init+0xc0>)
 8002b8e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002b90:	4b26      	ldr	r3, [pc, #152]	; (8002c2c <MX_RTC_Init+0xbc>)
 8002b92:	2200      	movs	r2, #0
 8002b94:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002b96:	4b25      	ldr	r3, [pc, #148]	; (8002c2c <MX_RTC_Init+0xbc>)
 8002b98:	227f      	movs	r2, #127	; 0x7f
 8002b9a:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002b9c:	4b23      	ldr	r3, [pc, #140]	; (8002c2c <MX_RTC_Init+0xbc>)
 8002b9e:	22ff      	movs	r2, #255	; 0xff
 8002ba0:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002ba2:	4b22      	ldr	r3, [pc, #136]	; (8002c2c <MX_RTC_Init+0xbc>)
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002ba8:	4b20      	ldr	r3, [pc, #128]	; (8002c2c <MX_RTC_Init+0xbc>)
 8002baa:	2200      	movs	r2, #0
 8002bac:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002bae:	4b1f      	ldr	r3, [pc, #124]	; (8002c2c <MX_RTC_Init+0xbc>)
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002bb4:	4b1d      	ldr	r3, [pc, #116]	; (8002c2c <MX_RTC_Init+0xbc>)
 8002bb6:	0018      	movs	r0, r3
 8002bb8:	f002 ffbc 	bl	8005b34 <HAL_RTC_Init>
 8002bbc:	1e03      	subs	r3, r0, #0
 8002bbe:	d001      	beq.n	8002bc4 <MX_RTC_Init+0x54>
  {
    Error_Handler();
 8002bc0:	f7ff ffd0 	bl	8002b64 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8002bc4:	1d3b      	adds	r3, r7, #4
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 8002bca:	1d3b      	adds	r3, r7, #4
 8002bcc:	2200      	movs	r2, #0
 8002bce:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 8002bd0:	1d3b      	adds	r3, r7, #4
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002bd6:	1d3b      	adds	r3, r7, #4
 8002bd8:	2200      	movs	r2, #0
 8002bda:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002bdc:	1d3b      	adds	r3, r7, #4
 8002bde:	2200      	movs	r2, #0
 8002be0:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002be2:	1d39      	adds	r1, r7, #4
 8002be4:	4b11      	ldr	r3, [pc, #68]	; (8002c2c <MX_RTC_Init+0xbc>)
 8002be6:	2201      	movs	r2, #1
 8002be8:	0018      	movs	r0, r3
 8002bea:	f003 f837 	bl	8005c5c <HAL_RTC_SetTime>
 8002bee:	1e03      	subs	r3, r0, #0
 8002bf0:	d001      	beq.n	8002bf6 <MX_RTC_Init+0x86>
  {
    Error_Handler();
 8002bf2:	f7ff ffb7 	bl	8002b64 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002bf6:	003b      	movs	r3, r7
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8002bfc:	003b      	movs	r3, r7
 8002bfe:	2201      	movs	r2, #1
 8002c00:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 8002c02:	003b      	movs	r3, r7
 8002c04:	2201      	movs	r2, #1
 8002c06:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 8002c08:	003b      	movs	r3, r7
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002c0e:	0039      	movs	r1, r7
 8002c10:	4b06      	ldr	r3, [pc, #24]	; (8002c2c <MX_RTC_Init+0xbc>)
 8002c12:	2201      	movs	r2, #1
 8002c14:	0018      	movs	r0, r3
 8002c16:	f003 f8dd 	bl	8005dd4 <HAL_RTC_SetDate>
 8002c1a:	1e03      	subs	r3, r0, #0
 8002c1c:	d001      	beq.n	8002c22 <MX_RTC_Init+0xb2>
  {
    Error_Handler();
 8002c1e:	f7ff ffa1 	bl	8002b64 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002c22:	46c0      	nop			; (mov r8, r8)
 8002c24:	46bd      	mov	sp, r7
 8002c26:	b006      	add	sp, #24
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	46c0      	nop			; (mov r8, r8)
 8002c2c:	200002bc 	.word	0x200002bc
 8002c30:	40002800 	.word	0x40002800

08002c34 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b082      	sub	sp, #8
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a06      	ldr	r2, [pc, #24]	; (8002c5c <HAL_RTC_MspInit+0x28>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d106      	bne.n	8002c54 <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002c46:	4b06      	ldr	r3, [pc, #24]	; (8002c60 <HAL_RTC_MspInit+0x2c>)
 8002c48:	6a1a      	ldr	r2, [r3, #32]
 8002c4a:	4b05      	ldr	r3, [pc, #20]	; (8002c60 <HAL_RTC_MspInit+0x2c>)
 8002c4c:	2180      	movs	r1, #128	; 0x80
 8002c4e:	0209      	lsls	r1, r1, #8
 8002c50:	430a      	orrs	r2, r1
 8002c52:	621a      	str	r2, [r3, #32]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002c54:	46c0      	nop			; (mov r8, r8)
 8002c56:	46bd      	mov	sp, r7
 8002c58:	b002      	add	sp, #8
 8002c5a:	bd80      	pop	{r7, pc}
 8002c5c:	40002800 	.word	0x40002800
 8002c60:	40021000 	.word	0x40021000

08002c64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b082      	sub	sp, #8
 8002c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c6a:	4b0f      	ldr	r3, [pc, #60]	; (8002ca8 <HAL_MspInit+0x44>)
 8002c6c:	699a      	ldr	r2, [r3, #24]
 8002c6e:	4b0e      	ldr	r3, [pc, #56]	; (8002ca8 <HAL_MspInit+0x44>)
 8002c70:	2101      	movs	r1, #1
 8002c72:	430a      	orrs	r2, r1
 8002c74:	619a      	str	r2, [r3, #24]
 8002c76:	4b0c      	ldr	r3, [pc, #48]	; (8002ca8 <HAL_MspInit+0x44>)
 8002c78:	699b      	ldr	r3, [r3, #24]
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	607b      	str	r3, [r7, #4]
 8002c80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c82:	4b09      	ldr	r3, [pc, #36]	; (8002ca8 <HAL_MspInit+0x44>)
 8002c84:	69da      	ldr	r2, [r3, #28]
 8002c86:	4b08      	ldr	r3, [pc, #32]	; (8002ca8 <HAL_MspInit+0x44>)
 8002c88:	2180      	movs	r1, #128	; 0x80
 8002c8a:	0549      	lsls	r1, r1, #21
 8002c8c:	430a      	orrs	r2, r1
 8002c8e:	61da      	str	r2, [r3, #28]
 8002c90:	4b05      	ldr	r3, [pc, #20]	; (8002ca8 <HAL_MspInit+0x44>)
 8002c92:	69da      	ldr	r2, [r3, #28]
 8002c94:	2380      	movs	r3, #128	; 0x80
 8002c96:	055b      	lsls	r3, r3, #21
 8002c98:	4013      	ands	r3, r2
 8002c9a:	603b      	str	r3, [r7, #0]
 8002c9c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c9e:	46c0      	nop			; (mov r8, r8)
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	b002      	add	sp, #8
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	46c0      	nop			; (mov r8, r8)
 8002ca8:	40021000 	.word	0x40021000

08002cac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b08a      	sub	sp, #40	; 0x28
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              uwPrescalerValue = 0;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, TickPriority ,0);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	0019      	movs	r1, r3
 8002cc2:	200d      	movs	r0, #13
 8002cc4:	f000 fdd0 	bl	8003868 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8002cc8:	200d      	movs	r0, #13
 8002cca:	f000 fde2 	bl	8003892 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002cce:	4b21      	ldr	r3, [pc, #132]	; (8002d54 <HAL_InitTick+0xa8>)
 8002cd0:	699a      	ldr	r2, [r3, #24]
 8002cd2:	4b20      	ldr	r3, [pc, #128]	; (8002d54 <HAL_InitTick+0xa8>)
 8002cd4:	2180      	movs	r1, #128	; 0x80
 8002cd6:	0109      	lsls	r1, r1, #4
 8002cd8:	430a      	orrs	r2, r1
 8002cda:	619a      	str	r2, [r3, #24]
 8002cdc:	4b1d      	ldr	r3, [pc, #116]	; (8002d54 <HAL_InitTick+0xa8>)
 8002cde:	699a      	ldr	r2, [r3, #24]
 8002ce0:	2380      	movs	r3, #128	; 0x80
 8002ce2:	011b      	lsls	r3, r3, #4
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	60bb      	str	r3, [r7, #8]
 8002ce8:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002cea:	230c      	movs	r3, #12
 8002cec:	18fa      	adds	r2, r7, r3
 8002cee:	2310      	movs	r3, #16
 8002cf0:	18fb      	adds	r3, r7, r3
 8002cf2:	0011      	movs	r1, r2
 8002cf4:	0018      	movs	r0, r3
 8002cf6:	f002 fe25 	bl	8005944 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002cfa:	f002 fe0d 	bl	8005918 <HAL_RCC_GetPCLK1Freq>
 8002cfe:	0003      	movs	r3, r0
 8002d00:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d04:	4914      	ldr	r1, [pc, #80]	; (8002d58 <HAL_InitTick+0xac>)
 8002d06:	0018      	movs	r0, r3
 8002d08:	f7fd fa1a 	bl	8000140 <__udivsi3>
 8002d0c:	0003      	movs	r3, r0
 8002d0e:	3b01      	subs	r3, #1
 8002d10:	623b      	str	r3, [r7, #32]

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002d12:	4b12      	ldr	r3, [pc, #72]	; (8002d5c <HAL_InitTick+0xb0>)
 8002d14:	4a12      	ldr	r2, [pc, #72]	; (8002d60 <HAL_InitTick+0xb4>)
 8002d16:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002d18:	4b10      	ldr	r3, [pc, #64]	; (8002d5c <HAL_InitTick+0xb0>)
 8002d1a:	4a12      	ldr	r2, [pc, #72]	; (8002d64 <HAL_InitTick+0xb8>)
 8002d1c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002d1e:	4b0f      	ldr	r3, [pc, #60]	; (8002d5c <HAL_InitTick+0xb0>)
 8002d20:	6a3a      	ldr	r2, [r7, #32]
 8002d22:	605a      	str	r2, [r3, #4]
  htim1.Init.ClockDivision = 0;
 8002d24:	4b0d      	ldr	r3, [pc, #52]	; (8002d5c <HAL_InitTick+0xb0>)
 8002d26:	2200      	movs	r2, #0
 8002d28:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d2a:	4b0c      	ldr	r3, [pc, #48]	; (8002d5c <HAL_InitTick+0xb0>)
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8002d30:	4b0a      	ldr	r3, [pc, #40]	; (8002d5c <HAL_InitTick+0xb0>)
 8002d32:	0018      	movs	r0, r3
 8002d34:	f003 f96a 	bl	800600c <HAL_TIM_Base_Init>
 8002d38:	1e03      	subs	r3, r0, #0
 8002d3a:	d105      	bne.n	8002d48 <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8002d3c:	4b07      	ldr	r3, [pc, #28]	; (8002d5c <HAL_InitTick+0xb0>)
 8002d3e:	0018      	movs	r0, r3
 8002d40:	f003 f9bc 	bl	80060bc <HAL_TIM_Base_Start_IT>
 8002d44:	0003      	movs	r3, r0
 8002d46:	e000      	b.n	8002d4a <HAL_InitTick+0x9e>
  }

  /* Return function status */
  return HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
}
 8002d4a:	0018      	movs	r0, r3
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	b00a      	add	sp, #40	; 0x28
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	46c0      	nop			; (mov r8, r8)
 8002d54:	40021000 	.word	0x40021000
 8002d58:	000f4240 	.word	0x000f4240
 8002d5c:	200002dc 	.word	0x200002dc
 8002d60:	40012c00 	.word	0x40012c00
 8002d64:	000003e7 	.word	0x000003e7

08002d68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002d6c:	e7fe      	b.n	8002d6c <NMI_Handler+0x4>

08002d6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d6e:	b580      	push	{r7, lr}
 8002d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d72:	e7fe      	b.n	8002d72 <HardFault_Handler+0x4>

08002d74 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002d78:	46c0      	nop			; (mov r8, r8)
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}

08002d7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d7e:	b580      	push	{r7, lr}
 8002d80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d82:	46c0      	nop			; (mov r8, r8)
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}

08002d88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d8c:	46c0      	nop			; (mov r8, r8)
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}

08002d92 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8002d92:	b580      	push	{r7, lr}
 8002d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002d96:	2001      	movs	r0, #1
 8002d98:	f000 ffce 	bl	8003d38 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8002d9c:	2002      	movs	r0, #2
 8002d9e:	f000 ffcb 	bl	8003d38 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8002da2:	46c0      	nop			; (mov r8, r8)
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}

08002da8 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8002dac:	2080      	movs	r0, #128	; 0x80
 8002dae:	f000 ffc3 	bl	8003d38 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002db2:	2380      	movs	r3, #128	; 0x80
 8002db4:	019b      	lsls	r3, r3, #6
 8002db6:	0018      	movs	r0, r3
 8002db8:	f000 ffbe 	bl	8003d38 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8002dbc:	46c0      	nop			; (mov r8, r8)
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
	...

08002dc4 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002dc8:	4b03      	ldr	r3, [pc, #12]	; (8002dd8 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8002dca:	0018      	movs	r0, r3
 8002dcc:	f003 f9c2 	bl	8006154 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8002dd0:	46c0      	nop			; (mov r8, r8)
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	46c0      	nop			; (mov r8, r8)
 8002dd8:	200002dc 	.word	0x200002dc

08002ddc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002de0:	4b03      	ldr	r3, [pc, #12]	; (8002df0 <USART1_IRQHandler+0x14>)
 8002de2:	0018      	movs	r0, r3
 8002de4:	f003 fc70 	bl	80066c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002de8:	46c0      	nop			; (mov r8, r8)
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	46c0      	nop			; (mov r8, r8)
 8002df0:	20000324 	.word	0x20000324

08002df4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b086      	sub	sp, #24
 8002df8:	af02      	add	r7, sp, #8
 8002dfa:	0002      	movs	r2, r0
 8002dfc:	1dbb      	adds	r3, r7, #6
 8002dfe:	801a      	strh	r2, [r3, #0]
    /* 判断哪个引脚触发了中断 */
    switch(GPIO_Pin)
 8002e00:	1dbb      	adds	r3, r7, #6
 8002e02:	881b      	ldrh	r3, [r3, #0]
 8002e04:	2b02      	cmp	r3, #2
 8002e06:	d004      	beq.n	8002e12 <HAL_GPIO_EXTI_Callback+0x1e>
 8002e08:	2280      	movs	r2, #128	; 0x80
 8002e0a:	0192      	lsls	r2, r2, #6
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d01c      	beq.n	8002e4a <HAL_GPIO_EXTI_Callback+0x56>
//            HAL_GPIO_WritePin(LED_GPIO_Port,LED_Pin,GPIO_PIN_RESET);
//            break;
//        default:
//            break;
    }
}
 8002e10:	e086      	b.n	8002f20 <HAL_GPIO_EXTI_Callback+0x12c>
			HAL_Delay(20);
 8002e12:	2014      	movs	r0, #20
 8002e14:	f000 fa46 	bl	80032a4 <HAL_Delay>
			if(HAL_GPIO_ReadPin(Key3_GPIO_Port, Key3_Pin)) HAL_GPIO_WritePin(WB3S_EN_GPIO_Port, WB3S_EN_Pin, GPIO_PIN_SET);
 8002e18:	4b43      	ldr	r3, [pc, #268]	; (8002f28 <HAL_GPIO_EXTI_Callback+0x134>)
 8002e1a:	2102      	movs	r1, #2
 8002e1c:	0018      	movs	r0, r3
 8002e1e:	f000 ff35 	bl	8003c8c <HAL_GPIO_ReadPin>
 8002e22:	1e03      	subs	r3, r0, #0
 8002e24:	d008      	beq.n	8002e38 <HAL_GPIO_EXTI_Callback+0x44>
 8002e26:	2380      	movs	r3, #128	; 0x80
 8002e28:	0119      	lsls	r1, r3, #4
 8002e2a:	2390      	movs	r3, #144	; 0x90
 8002e2c:	05db      	lsls	r3, r3, #23
 8002e2e:	2201      	movs	r2, #1
 8002e30:	0018      	movs	r0, r3
 8002e32:	f000 ff48 	bl	8003cc6 <HAL_GPIO_WritePin>
			break;
 8002e36:	e073      	b.n	8002f20 <HAL_GPIO_EXTI_Callback+0x12c>
			else HAL_GPIO_WritePin(WB3S_EN_GPIO_Port, WB3S_EN_Pin, GPIO_PIN_RESET);
 8002e38:	2380      	movs	r3, #128	; 0x80
 8002e3a:	0119      	lsls	r1, r3, #4
 8002e3c:	2390      	movs	r3, #144	; 0x90
 8002e3e:	05db      	lsls	r3, r3, #23
 8002e40:	2200      	movs	r2, #0
 8002e42:	0018      	movs	r0, r3
 8002e44:	f000 ff3f 	bl	8003cc6 <HAL_GPIO_WritePin>
			break;
 8002e48:	e06a      	b.n	8002f20 <HAL_GPIO_EXTI_Callback+0x12c>
        	HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 8002e4a:	4b37      	ldr	r3, [pc, #220]	; (8002f28 <HAL_GPIO_EXTI_Callback+0x134>)
 8002e4c:	2104      	movs	r1, #4
 8002e4e:	0018      	movs	r0, r3
 8002e50:	f000 ff56 	bl	8003d00 <HAL_GPIO_TogglePin>
        	hdc1080_start_measurement();
 8002e54:	f004 fc30 	bl	80076b8 <hdc1080_start_measurement>
      	  if(checkDataAndUpdate()){
 8002e58:	f004 fa1c 	bl	8007294 <checkDataAndUpdate>
 8002e5c:	1e03      	subs	r3, r0, #0
 8002e5e:	d05e      	beq.n	8002f1e <HAL_GPIO_EXTI_Callback+0x12a>
      			double temp = gettemperature();
 8002e60:	f004 fcb2 	bl	80077c8 <gettemperature>
 8002e64:	0002      	movs	r2, r0
 8002e66:	000b      	movs	r3, r1
 8002e68:	60ba      	str	r2, [r7, #8]
 8002e6a:	60fb      	str	r3, [r7, #12]
      		  if(temp >=0){
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	2300      	movs	r3, #0
 8002e70:	68b8      	ldr	r0, [r7, #8]
 8002e72:	68f9      	ldr	r1, [r7, #12]
 8002e74:	f7fd fb0e 	bl	8000494 <__aeabi_dcmpge>
 8002e78:	1e03      	subs	r3, r0, #0
 8002e7a:	d00d      	beq.n	8002e98 <HAL_GPIO_EXTI_Callback+0xa4>
      			  OLED_Show_Float_Num(42, 4, temp, 16);
 8002e7c:	68ba      	ldr	r2, [r7, #8]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2110      	movs	r1, #16
 8002e82:	9100      	str	r1, [sp, #0]
 8002e84:	2104      	movs	r1, #4
 8002e86:	202a      	movs	r0, #42	; 0x2a
 8002e88:	f004 feec 	bl	8007c64 <OLED_Show_Float_Num>
      			  OLED_ShowCHinese(88, 4, 0); //字库中的摄氏度
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	2104      	movs	r1, #4
 8002e90:	2058      	movs	r0, #88	; 0x58
 8002e92:	f004 ff7d 	bl	8007d90 <OLED_ShowCHinese>
 8002e96:	e012      	b.n	8002ebe <HAL_GPIO_EXTI_Callback+0xca>
      			OLED_ShowChar(42, 4, '-', 16);
 8002e98:	2310      	movs	r3, #16
 8002e9a:	222d      	movs	r2, #45	; 0x2d
 8002e9c:	2104      	movs	r1, #4
 8002e9e:	202a      	movs	r0, #42	; 0x2a
 8002ea0:	f004 fd44 	bl	800792c <OLED_ShowChar>
      			OLED_Show_Float_Num(54, 4, temp, 16);
 8002ea4:	68ba      	ldr	r2, [r7, #8]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2110      	movs	r1, #16
 8002eaa:	9100      	str	r1, [sp, #0]
 8002eac:	2104      	movs	r1, #4
 8002eae:	2036      	movs	r0, #54	; 0x36
 8002eb0:	f004 fed8 	bl	8007c64 <OLED_Show_Float_Num>
      			OLED_ShowCHinese(100, 4, 0); //字库中的摄氏度
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	2104      	movs	r1, #4
 8002eb8:	2064      	movs	r0, #100	; 0x64
 8002eba:	f004 ff69 	bl	8007d90 <OLED_ShowCHinese>
			  OLED_Show_Float_Num(74, 6, gethumidity(), 16);
 8002ebe:	f004 fc8f 	bl	80077e0 <gethumidity>
 8002ec2:	0002      	movs	r2, r0
 8002ec4:	000b      	movs	r3, r1
 8002ec6:	2110      	movs	r1, #16
 8002ec8:	9100      	str	r1, [sp, #0]
 8002eca:	2106      	movs	r1, #6
 8002ecc:	204a      	movs	r0, #74	; 0x4a
 8002ece:	f004 fec9 	bl	8007c64 <OLED_Show_Float_Num>
			  OLED_ShowChar(120, 6, '%', 16);
 8002ed2:	2310      	movs	r3, #16
 8002ed4:	2225      	movs	r2, #37	; 0x25
 8002ed6:	2106      	movs	r1, #6
 8002ed8:	2078      	movs	r0, #120	; 0x78
 8002eda:	f004 fd27 	bl	800792c <OLED_ShowChar>
    		  OLED_ShowNum(40, 0, gettVOC(), 4,16);
 8002ede:	f004 fbab 	bl	8007638 <gettVOC>
 8002ee2:	0002      	movs	r2, r0
 8002ee4:	2310      	movs	r3, #16
 8002ee6:	9300      	str	r3, [sp, #0]
 8002ee8:	2304      	movs	r3, #4
 8002eea:	2100      	movs	r1, #0
 8002eec:	2028      	movs	r0, #40	; 0x28
 8002eee:	f004 fde6 	bl	8007abe <OLED_ShowNum>
    		  OLED_ShowString(80, 0, "(ppb)", 16);
 8002ef2:	4a0e      	ldr	r2, [pc, #56]	; (8002f2c <HAL_GPIO_EXTI_Callback+0x138>)
 8002ef4:	2310      	movs	r3, #16
 8002ef6:	2100      	movs	r1, #0
 8002ef8:	2050      	movs	r0, #80	; 0x50
 8002efa:	f004 fe6b 	bl	8007bd4 <OLED_ShowString>
    		  OLED_ShowNum(40, 2, getCo2(), 4,16);
 8002efe:	f004 fb91 	bl	8007624 <getCo2>
 8002f02:	0002      	movs	r2, r0
 8002f04:	2310      	movs	r3, #16
 8002f06:	9300      	str	r3, [sp, #0]
 8002f08:	2304      	movs	r3, #4
 8002f0a:	2102      	movs	r1, #2
 8002f0c:	2028      	movs	r0, #40	; 0x28
 8002f0e:	f004 fdd6 	bl	8007abe <OLED_ShowNum>
    		  OLED_ShowString(80, 2, "(ppm)", 16);
 8002f12:	4a07      	ldr	r2, [pc, #28]	; (8002f30 <HAL_GPIO_EXTI_Callback+0x13c>)
 8002f14:	2310      	movs	r3, #16
 8002f16:	2102      	movs	r1, #2
 8002f18:	2050      	movs	r0, #80	; 0x50
 8002f1a:	f004 fe5b 	bl	8007bd4 <OLED_ShowString>
            break;
 8002f1e:	46c0      	nop			; (mov r8, r8)
}
 8002f20:	46c0      	nop			; (mov r8, r8)
 8002f22:	46bd      	mov	sp, r7
 8002f24:	b004      	add	sp, #16
 8002f26:	bd80      	pop	{r7, pc}
 8002f28:	48000400 	.word	0x48000400
 8002f2c:	0800c9e4 	.word	0x0800c9e4
 8002f30:	0800c9ec 	.word	0x0800c9ec

08002f34 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	af00      	add	r7, sp, #0
	return 1;
 8002f38:	2301      	movs	r3, #1
}
 8002f3a:	0018      	movs	r0, r3
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}

08002f40 <_kill>:

int _kill(int pid, int sig)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b082      	sub	sp, #8
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002f4a:	f004 fff1 	bl	8007f30 <__errno>
 8002f4e:	0003      	movs	r3, r0
 8002f50:	2216      	movs	r2, #22
 8002f52:	601a      	str	r2, [r3, #0]
	return -1;
 8002f54:	2301      	movs	r3, #1
 8002f56:	425b      	negs	r3, r3
}
 8002f58:	0018      	movs	r0, r3
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	b002      	add	sp, #8
 8002f5e:	bd80      	pop	{r7, pc}

08002f60 <_exit>:

void _exit (int status)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b082      	sub	sp, #8
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002f68:	2301      	movs	r3, #1
 8002f6a:	425a      	negs	r2, r3
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	0011      	movs	r1, r2
 8002f70:	0018      	movs	r0, r3
 8002f72:	f7ff ffe5 	bl	8002f40 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002f76:	e7fe      	b.n	8002f76 <_exit+0x16>

08002f78 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b086      	sub	sp, #24
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	60f8      	str	r0, [r7, #12]
 8002f80:	60b9      	str	r1, [r7, #8]
 8002f82:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f84:	2300      	movs	r3, #0
 8002f86:	617b      	str	r3, [r7, #20]
 8002f88:	e00a      	b.n	8002fa0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002f8a:	e000      	b.n	8002f8e <_read+0x16>
 8002f8c:	bf00      	nop
 8002f8e:	0001      	movs	r1, r0
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	1c5a      	adds	r2, r3, #1
 8002f94:	60ba      	str	r2, [r7, #8]
 8002f96:	b2ca      	uxtb	r2, r1
 8002f98:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	3301      	adds	r3, #1
 8002f9e:	617b      	str	r3, [r7, #20]
 8002fa0:	697a      	ldr	r2, [r7, #20]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	dbf0      	blt.n	8002f8a <_read+0x12>
	}

return len;
 8002fa8:	687b      	ldr	r3, [r7, #4]
}
 8002faa:	0018      	movs	r0, r3
 8002fac:	46bd      	mov	sp, r7
 8002fae:	b006      	add	sp, #24
 8002fb0:	bd80      	pop	{r7, pc}

08002fb2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002fb2:	b580      	push	{r7, lr}
 8002fb4:	b086      	sub	sp, #24
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	60f8      	str	r0, [r7, #12]
 8002fba:	60b9      	str	r1, [r7, #8]
 8002fbc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	617b      	str	r3, [r7, #20]
 8002fc2:	e009      	b.n	8002fd8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	1c5a      	adds	r2, r3, #1
 8002fc8:	60ba      	str	r2, [r7, #8]
 8002fca:	781b      	ldrb	r3, [r3, #0]
 8002fcc:	0018      	movs	r0, r3
 8002fce:	f000 f875 	bl	80030bc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	3301      	adds	r3, #1
 8002fd6:	617b      	str	r3, [r7, #20]
 8002fd8:	697a      	ldr	r2, [r7, #20]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	dbf1      	blt.n	8002fc4 <_write+0x12>
	}
	return len;
 8002fe0:	687b      	ldr	r3, [r7, #4]
}
 8002fe2:	0018      	movs	r0, r3
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	b006      	add	sp, #24
 8002fe8:	bd80      	pop	{r7, pc}

08002fea <_close>:

int _close(int file)
{
 8002fea:	b580      	push	{r7, lr}
 8002fec:	b082      	sub	sp, #8
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	6078      	str	r0, [r7, #4]
	return -1;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	425b      	negs	r3, r3
}
 8002ff6:	0018      	movs	r0, r3
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	b002      	add	sp, #8
 8002ffc:	bd80      	pop	{r7, pc}

08002ffe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002ffe:	b580      	push	{r7, lr}
 8003000:	b082      	sub	sp, #8
 8003002:	af00      	add	r7, sp, #0
 8003004:	6078      	str	r0, [r7, #4]
 8003006:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	2280      	movs	r2, #128	; 0x80
 800300c:	0192      	lsls	r2, r2, #6
 800300e:	605a      	str	r2, [r3, #4]
	return 0;
 8003010:	2300      	movs	r3, #0
}
 8003012:	0018      	movs	r0, r3
 8003014:	46bd      	mov	sp, r7
 8003016:	b002      	add	sp, #8
 8003018:	bd80      	pop	{r7, pc}

0800301a <_isatty>:

int _isatty(int file)
{
 800301a:	b580      	push	{r7, lr}
 800301c:	b082      	sub	sp, #8
 800301e:	af00      	add	r7, sp, #0
 8003020:	6078      	str	r0, [r7, #4]
	return 1;
 8003022:	2301      	movs	r3, #1
}
 8003024:	0018      	movs	r0, r3
 8003026:	46bd      	mov	sp, r7
 8003028:	b002      	add	sp, #8
 800302a:	bd80      	pop	{r7, pc}

0800302c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b084      	sub	sp, #16
 8003030:	af00      	add	r7, sp, #0
 8003032:	60f8      	str	r0, [r7, #12]
 8003034:	60b9      	str	r1, [r7, #8]
 8003036:	607a      	str	r2, [r7, #4]
	return 0;
 8003038:	2300      	movs	r3, #0
}
 800303a:	0018      	movs	r0, r3
 800303c:	46bd      	mov	sp, r7
 800303e:	b004      	add	sp, #16
 8003040:	bd80      	pop	{r7, pc}
	...

08003044 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b086      	sub	sp, #24
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800304c:	4a14      	ldr	r2, [pc, #80]	; (80030a0 <_sbrk+0x5c>)
 800304e:	4b15      	ldr	r3, [pc, #84]	; (80030a4 <_sbrk+0x60>)
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003058:	4b13      	ldr	r3, [pc, #76]	; (80030a8 <_sbrk+0x64>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d102      	bne.n	8003066 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003060:	4b11      	ldr	r3, [pc, #68]	; (80030a8 <_sbrk+0x64>)
 8003062:	4a12      	ldr	r2, [pc, #72]	; (80030ac <_sbrk+0x68>)
 8003064:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003066:	4b10      	ldr	r3, [pc, #64]	; (80030a8 <_sbrk+0x64>)
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	18d3      	adds	r3, r2, r3
 800306e:	693a      	ldr	r2, [r7, #16]
 8003070:	429a      	cmp	r2, r3
 8003072:	d207      	bcs.n	8003084 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003074:	f004 ff5c 	bl	8007f30 <__errno>
 8003078:	0003      	movs	r3, r0
 800307a:	220c      	movs	r2, #12
 800307c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800307e:	2301      	movs	r3, #1
 8003080:	425b      	negs	r3, r3
 8003082:	e009      	b.n	8003098 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003084:	4b08      	ldr	r3, [pc, #32]	; (80030a8 <_sbrk+0x64>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800308a:	4b07      	ldr	r3, [pc, #28]	; (80030a8 <_sbrk+0x64>)
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	18d2      	adds	r2, r2, r3
 8003092:	4b05      	ldr	r3, [pc, #20]	; (80030a8 <_sbrk+0x64>)
 8003094:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003096:	68fb      	ldr	r3, [r7, #12]
}
 8003098:	0018      	movs	r0, r3
 800309a:	46bd      	mov	sp, r7
 800309c:	b006      	add	sp, #24
 800309e:	bd80      	pop	{r7, pc}
 80030a0:	20002000 	.word	0x20002000
 80030a4:	00000400 	.word	0x00000400
 80030a8:	20000204 	.word	0x20000204
 80030ac:	200003c0 	.word	0x200003c0

080030b0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80030b4:	46c0      	nop			; (mov r8, r8)
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}
	...

080030bc <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif
PUTCHAR_PROTOTYPE
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b082      	sub	sp, #8
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
		HAL_UART_Transmit(&huart1 , (uint8_t *)&ch, 1, 0xFFFF);
 80030c4:	4b05      	ldr	r3, [pc, #20]	; (80030dc <__io_putchar+0x20>)
 80030c6:	1d39      	adds	r1, r7, #4
 80030c8:	4805      	ldr	r0, [pc, #20]	; (80030e0 <__io_putchar+0x24>)
 80030ca:	2201      	movs	r2, #1
 80030cc:	f003 fa52 	bl	8006574 <HAL_UART_Transmit>
		return ch;
 80030d0:	687b      	ldr	r3, [r7, #4]
}
 80030d2:	0018      	movs	r0, r3
 80030d4:	46bd      	mov	sp, r7
 80030d6:	b002      	add	sp, #8
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	46c0      	nop			; (mov r8, r8)
 80030dc:	0000ffff 	.word	0x0000ffff
 80030e0:	20000324 	.word	0x20000324

080030e4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80030e8:	4b14      	ldr	r3, [pc, #80]	; (800313c <MX_USART1_UART_Init+0x58>)
 80030ea:	4a15      	ldr	r2, [pc, #84]	; (8003140 <MX_USART1_UART_Init+0x5c>)
 80030ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 19200;
 80030ee:	4b13      	ldr	r3, [pc, #76]	; (800313c <MX_USART1_UART_Init+0x58>)
 80030f0:	2296      	movs	r2, #150	; 0x96
 80030f2:	01d2      	lsls	r2, r2, #7
 80030f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80030f6:	4b11      	ldr	r3, [pc, #68]	; (800313c <MX_USART1_UART_Init+0x58>)
 80030f8:	2200      	movs	r2, #0
 80030fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80030fc:	4b0f      	ldr	r3, [pc, #60]	; (800313c <MX_USART1_UART_Init+0x58>)
 80030fe:	2200      	movs	r2, #0
 8003100:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003102:	4b0e      	ldr	r3, [pc, #56]	; (800313c <MX_USART1_UART_Init+0x58>)
 8003104:	2200      	movs	r2, #0
 8003106:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003108:	4b0c      	ldr	r3, [pc, #48]	; (800313c <MX_USART1_UART_Init+0x58>)
 800310a:	220c      	movs	r2, #12
 800310c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800310e:	4b0b      	ldr	r3, [pc, #44]	; (800313c <MX_USART1_UART_Init+0x58>)
 8003110:	2200      	movs	r2, #0
 8003112:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003114:	4b09      	ldr	r3, [pc, #36]	; (800313c <MX_USART1_UART_Init+0x58>)
 8003116:	2200      	movs	r2, #0
 8003118:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800311a:	4b08      	ldr	r3, [pc, #32]	; (800313c <MX_USART1_UART_Init+0x58>)
 800311c:	2200      	movs	r2, #0
 800311e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003120:	4b06      	ldr	r3, [pc, #24]	; (800313c <MX_USART1_UART_Init+0x58>)
 8003122:	2200      	movs	r2, #0
 8003124:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003126:	4b05      	ldr	r3, [pc, #20]	; (800313c <MX_USART1_UART_Init+0x58>)
 8003128:	0018      	movs	r0, r3
 800312a:	f003 f9cf 	bl	80064cc <HAL_UART_Init>
 800312e:	1e03      	subs	r3, r0, #0
 8003130:	d001      	beq.n	8003136 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8003132:	f7ff fd17 	bl	8002b64 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003136:	46c0      	nop			; (mov r8, r8)
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}
 800313c:	20000324 	.word	0x20000324
 8003140:	40013800 	.word	0x40013800

08003144 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003144:	b590      	push	{r4, r7, lr}
 8003146:	b08b      	sub	sp, #44	; 0x2c
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800314c:	2414      	movs	r4, #20
 800314e:	193b      	adds	r3, r7, r4
 8003150:	0018      	movs	r0, r3
 8003152:	2314      	movs	r3, #20
 8003154:	001a      	movs	r2, r3
 8003156:	2100      	movs	r1, #0
 8003158:	f004 ff14 	bl	8007f84 <memset>
  if(uartHandle->Instance==USART1)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a21      	ldr	r2, [pc, #132]	; (80031e8 <HAL_UART_MspInit+0xa4>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d13b      	bne.n	80031de <HAL_UART_MspInit+0x9a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003166:	4b21      	ldr	r3, [pc, #132]	; (80031ec <HAL_UART_MspInit+0xa8>)
 8003168:	699a      	ldr	r2, [r3, #24]
 800316a:	4b20      	ldr	r3, [pc, #128]	; (80031ec <HAL_UART_MspInit+0xa8>)
 800316c:	2180      	movs	r1, #128	; 0x80
 800316e:	01c9      	lsls	r1, r1, #7
 8003170:	430a      	orrs	r2, r1
 8003172:	619a      	str	r2, [r3, #24]
 8003174:	4b1d      	ldr	r3, [pc, #116]	; (80031ec <HAL_UART_MspInit+0xa8>)
 8003176:	699a      	ldr	r2, [r3, #24]
 8003178:	2380      	movs	r3, #128	; 0x80
 800317a:	01db      	lsls	r3, r3, #7
 800317c:	4013      	ands	r3, r2
 800317e:	613b      	str	r3, [r7, #16]
 8003180:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003182:	4b1a      	ldr	r3, [pc, #104]	; (80031ec <HAL_UART_MspInit+0xa8>)
 8003184:	695a      	ldr	r2, [r3, #20]
 8003186:	4b19      	ldr	r3, [pc, #100]	; (80031ec <HAL_UART_MspInit+0xa8>)
 8003188:	2180      	movs	r1, #128	; 0x80
 800318a:	0289      	lsls	r1, r1, #10
 800318c:	430a      	orrs	r2, r1
 800318e:	615a      	str	r2, [r3, #20]
 8003190:	4b16      	ldr	r3, [pc, #88]	; (80031ec <HAL_UART_MspInit+0xa8>)
 8003192:	695a      	ldr	r2, [r3, #20]
 8003194:	2380      	movs	r3, #128	; 0x80
 8003196:	029b      	lsls	r3, r3, #10
 8003198:	4013      	ands	r3, r2
 800319a:	60fb      	str	r3, [r7, #12]
 800319c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800319e:	193b      	adds	r3, r7, r4
 80031a0:	22c0      	movs	r2, #192	; 0xc0
 80031a2:	00d2      	lsls	r2, r2, #3
 80031a4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031a6:	0021      	movs	r1, r4
 80031a8:	187b      	adds	r3, r7, r1
 80031aa:	2202      	movs	r2, #2
 80031ac:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ae:	187b      	adds	r3, r7, r1
 80031b0:	2200      	movs	r2, #0
 80031b2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80031b4:	187b      	adds	r3, r7, r1
 80031b6:	2203      	movs	r2, #3
 80031b8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80031ba:	187b      	adds	r3, r7, r1
 80031bc:	2201      	movs	r2, #1
 80031be:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031c0:	187a      	adds	r2, r7, r1
 80031c2:	2390      	movs	r3, #144	; 0x90
 80031c4:	05db      	lsls	r3, r3, #23
 80031c6:	0011      	movs	r1, r2
 80031c8:	0018      	movs	r0, r3
 80031ca:	f000 fbef 	bl	80039ac <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 80031ce:	2200      	movs	r2, #0
 80031d0:	2102      	movs	r1, #2
 80031d2:	201b      	movs	r0, #27
 80031d4:	f000 fb48 	bl	8003868 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80031d8:	201b      	movs	r0, #27
 80031da:	f000 fb5a 	bl	8003892 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80031de:	46c0      	nop			; (mov r8, r8)
 80031e0:	46bd      	mov	sp, r7
 80031e2:	b00b      	add	sp, #44	; 0x2c
 80031e4:	bd90      	pop	{r4, r7, pc}
 80031e6:	46c0      	nop			; (mov r8, r8)
 80031e8:	40013800 	.word	0x40013800
 80031ec:	40021000 	.word	0x40021000

080031f0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80031f0:	480d      	ldr	r0, [pc, #52]	; (8003228 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80031f2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80031f4:	480d      	ldr	r0, [pc, #52]	; (800322c <LoopForever+0x6>)
  ldr r1, =_edata
 80031f6:	490e      	ldr	r1, [pc, #56]	; (8003230 <LoopForever+0xa>)
  ldr r2, =_sidata
 80031f8:	4a0e      	ldr	r2, [pc, #56]	; (8003234 <LoopForever+0xe>)
  movs r3, #0
 80031fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80031fc:	e002      	b.n	8003204 <LoopCopyDataInit>

080031fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80031fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003200:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003202:	3304      	adds	r3, #4

08003204 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003204:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003206:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003208:	d3f9      	bcc.n	80031fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800320a:	4a0b      	ldr	r2, [pc, #44]	; (8003238 <LoopForever+0x12>)
  ldr r4, =_ebss
 800320c:	4c0b      	ldr	r4, [pc, #44]	; (800323c <LoopForever+0x16>)
  movs r3, #0
 800320e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003210:	e001      	b.n	8003216 <LoopFillZerobss>

08003212 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003212:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003214:	3204      	adds	r2, #4

08003216 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003216:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003218:	d3fb      	bcc.n	8003212 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800321a:	f7ff ff49 	bl	80030b0 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800321e:	f004 fe8d 	bl	8007f3c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003222:	f7ff fbc3 	bl	80029ac <main>

08003226 <LoopForever>:

LoopForever:
    b LoopForever
 8003226:	e7fe      	b.n	8003226 <LoopForever>
  ldr   r0, =_estack
 8003228:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 800322c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003230:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8003234:	0800d844 	.word	0x0800d844
  ldr r2, =_sbss
 8003238:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 800323c:	200003bc 	.word	0x200003bc

08003240 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003240:	e7fe      	b.n	8003240 <ADC1_IRQHandler>
	...

08003244 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003248:	4b07      	ldr	r3, [pc, #28]	; (8003268 <HAL_Init+0x24>)
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	4b06      	ldr	r3, [pc, #24]	; (8003268 <HAL_Init+0x24>)
 800324e:	2110      	movs	r1, #16
 8003250:	430a      	orrs	r2, r1
 8003252:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8003254:	2000      	movs	r0, #0
 8003256:	f7ff fd29 	bl	8002cac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800325a:	f7ff fd03 	bl	8002c64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800325e:	2300      	movs	r3, #0
}
 8003260:	0018      	movs	r0, r3
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}
 8003266:	46c0      	nop			; (mov r8, r8)
 8003268:	40022000 	.word	0x40022000

0800326c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003270:	4b05      	ldr	r3, [pc, #20]	; (8003288 <HAL_IncTick+0x1c>)
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	001a      	movs	r2, r3
 8003276:	4b05      	ldr	r3, [pc, #20]	; (800328c <HAL_IncTick+0x20>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	18d2      	adds	r2, r2, r3
 800327c:	4b03      	ldr	r3, [pc, #12]	; (800328c <HAL_IncTick+0x20>)
 800327e:	601a      	str	r2, [r3, #0]
}
 8003280:	46c0      	nop			; (mov r8, r8)
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
 8003286:	46c0      	nop			; (mov r8, r8)
 8003288:	20000004 	.word	0x20000004
 800328c:	200003a8 	.word	0x200003a8

08003290 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	af00      	add	r7, sp, #0
  return uwTick;
 8003294:	4b02      	ldr	r3, [pc, #8]	; (80032a0 <HAL_GetTick+0x10>)
 8003296:	681b      	ldr	r3, [r3, #0]
}
 8003298:	0018      	movs	r0, r3
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
 800329e:	46c0      	nop			; (mov r8, r8)
 80032a0:	200003a8 	.word	0x200003a8

080032a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b084      	sub	sp, #16
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80032ac:	f7ff fff0 	bl	8003290 <HAL_GetTick>
 80032b0:	0003      	movs	r3, r0
 80032b2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	3301      	adds	r3, #1
 80032bc:	d005      	beq.n	80032ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80032be:	4b0a      	ldr	r3, [pc, #40]	; (80032e8 <HAL_Delay+0x44>)
 80032c0:	781b      	ldrb	r3, [r3, #0]
 80032c2:	001a      	movs	r2, r3
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	189b      	adds	r3, r3, r2
 80032c8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80032ca:	46c0      	nop			; (mov r8, r8)
 80032cc:	f7ff ffe0 	bl	8003290 <HAL_GetTick>
 80032d0:	0002      	movs	r2, r0
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	68fa      	ldr	r2, [r7, #12]
 80032d8:	429a      	cmp	r2, r3
 80032da:	d8f7      	bhi.n	80032cc <HAL_Delay+0x28>
  {
  }
}
 80032dc:	46c0      	nop			; (mov r8, r8)
 80032de:	46c0      	nop			; (mov r8, r8)
 80032e0:	46bd      	mov	sp, r7
 80032e2:	b004      	add	sp, #16
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	46c0      	nop			; (mov r8, r8)
 80032e8:	20000004 	.word	0x20000004

080032ec <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b084      	sub	sp, #16
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032f4:	230f      	movs	r3, #15
 80032f6:	18fb      	adds	r3, r7, r3
 80032f8:	2200      	movs	r2, #0
 80032fa:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 80032fc:	2300      	movs	r3, #0
 80032fe:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d101      	bne.n	800330a <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e125      	b.n	8003556 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800330e:	2b00      	cmp	r3, #0
 8003310:	d10a      	bne.n	8003328 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2200      	movs	r2, #0
 8003316:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2234      	movs	r2, #52	; 0x34
 800331c:	2100      	movs	r1, #0
 800331e:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	0018      	movs	r0, r3
 8003324:	f7ff f990 	bl	8002648 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800332c:	2210      	movs	r2, #16
 800332e:	4013      	ands	r3, r2
 8003330:	d000      	beq.n	8003334 <HAL_ADC_Init+0x48>
 8003332:	e103      	b.n	800353c <HAL_ADC_Init+0x250>
 8003334:	230f      	movs	r3, #15
 8003336:	18fb      	adds	r3, r7, r3
 8003338:	781b      	ldrb	r3, [r3, #0]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d000      	beq.n	8003340 <HAL_ADC_Init+0x54>
 800333e:	e0fd      	b.n	800353c <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	2204      	movs	r2, #4
 8003348:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 800334a:	d000      	beq.n	800334e <HAL_ADC_Init+0x62>
 800334c:	e0f6      	b.n	800353c <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003352:	4a83      	ldr	r2, [pc, #524]	; (8003560 <HAL_ADC_Init+0x274>)
 8003354:	4013      	ands	r3, r2
 8003356:	2202      	movs	r2, #2
 8003358:	431a      	orrs	r2, r3
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	2203      	movs	r2, #3
 8003366:	4013      	ands	r3, r2
 8003368:	2b01      	cmp	r3, #1
 800336a:	d112      	bne.n	8003392 <HAL_ADC_Init+0xa6>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	2201      	movs	r2, #1
 8003374:	4013      	ands	r3, r2
 8003376:	2b01      	cmp	r3, #1
 8003378:	d009      	beq.n	800338e <HAL_ADC_Init+0xa2>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	68da      	ldr	r2, [r3, #12]
 8003380:	2380      	movs	r3, #128	; 0x80
 8003382:	021b      	lsls	r3, r3, #8
 8003384:	401a      	ands	r2, r3
 8003386:	2380      	movs	r3, #128	; 0x80
 8003388:	021b      	lsls	r3, r3, #8
 800338a:	429a      	cmp	r2, r3
 800338c:	d101      	bne.n	8003392 <HAL_ADC_Init+0xa6>
 800338e:	2301      	movs	r3, #1
 8003390:	e000      	b.n	8003394 <HAL_ADC_Init+0xa8>
 8003392:	2300      	movs	r3, #0
 8003394:	2b00      	cmp	r3, #0
 8003396:	d116      	bne.n	80033c6 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	68db      	ldr	r3, [r3, #12]
 800339e:	2218      	movs	r2, #24
 80033a0:	4393      	bics	r3, r2
 80033a2:	0019      	movs	r1, r3
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	689a      	ldr	r2, [r3, #8]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	430a      	orrs	r2, r1
 80033ae:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	691b      	ldr	r3, [r3, #16]
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	0899      	lsrs	r1, r3, #2
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	685a      	ldr	r2, [r3, #4]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	430a      	orrs	r2, r1
 80033c4:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	68da      	ldr	r2, [r3, #12]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4964      	ldr	r1, [pc, #400]	; (8003564 <HAL_ADC_Init+0x278>)
 80033d2:	400a      	ands	r2, r1
 80033d4:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	7e1b      	ldrb	r3, [r3, #24]
 80033da:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	7e5b      	ldrb	r3, [r3, #25]
 80033e0:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80033e2:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	7e9b      	ldrb	r3, [r3, #26]
 80033e8:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80033ea:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	d002      	beq.n	80033fa <HAL_ADC_Init+0x10e>
 80033f4:	2380      	movs	r3, #128	; 0x80
 80033f6:	015b      	lsls	r3, r3, #5
 80033f8:	e000      	b.n	80033fc <HAL_ADC_Init+0x110>
 80033fa:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80033fc:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8003402:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	691b      	ldr	r3, [r3, #16]
 8003408:	2b02      	cmp	r3, #2
 800340a:	d101      	bne.n	8003410 <HAL_ADC_Init+0x124>
 800340c:	2304      	movs	r3, #4
 800340e:	e000      	b.n	8003412 <HAL_ADC_Init+0x126>
 8003410:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8003412:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2124      	movs	r1, #36	; 0x24
 8003418:	5c5b      	ldrb	r3, [r3, r1]
 800341a:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 800341c:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800341e:	68ba      	ldr	r2, [r7, #8]
 8003420:	4313      	orrs	r3, r2
 8003422:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	7edb      	ldrb	r3, [r3, #27]
 8003428:	2b01      	cmp	r3, #1
 800342a:	d115      	bne.n	8003458 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	7e9b      	ldrb	r3, [r3, #26]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d105      	bne.n	8003440 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	2280      	movs	r2, #128	; 0x80
 8003438:	0252      	lsls	r2, r2, #9
 800343a:	4313      	orrs	r3, r2
 800343c:	60bb      	str	r3, [r7, #8]
 800343e:	e00b      	b.n	8003458 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003444:	2220      	movs	r2, #32
 8003446:	431a      	orrs	r2, r3
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003450:	2201      	movs	r2, #1
 8003452:	431a      	orrs	r2, r3
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	69da      	ldr	r2, [r3, #28]
 800345c:	23c2      	movs	r3, #194	; 0xc2
 800345e:	33ff      	adds	r3, #255	; 0xff
 8003460:	429a      	cmp	r2, r3
 8003462:	d007      	beq.n	8003474 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 800346c:	4313      	orrs	r3, r2
 800346e:	68ba      	ldr	r2, [r7, #8]
 8003470:	4313      	orrs	r3, r2
 8003472:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	68d9      	ldr	r1, [r3, #12]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	68ba      	ldr	r2, [r7, #8]
 8003480:	430a      	orrs	r2, r1
 8003482:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003488:	2380      	movs	r3, #128	; 0x80
 800348a:	055b      	lsls	r3, r3, #21
 800348c:	429a      	cmp	r2, r3
 800348e:	d01b      	beq.n	80034c8 <HAL_ADC_Init+0x1dc>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003494:	2b01      	cmp	r3, #1
 8003496:	d017      	beq.n	80034c8 <HAL_ADC_Init+0x1dc>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800349c:	2b02      	cmp	r3, #2
 800349e:	d013      	beq.n	80034c8 <HAL_ADC_Init+0x1dc>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034a4:	2b03      	cmp	r3, #3
 80034a6:	d00f      	beq.n	80034c8 <HAL_ADC_Init+0x1dc>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ac:	2b04      	cmp	r3, #4
 80034ae:	d00b      	beq.n	80034c8 <HAL_ADC_Init+0x1dc>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b4:	2b05      	cmp	r3, #5
 80034b6:	d007      	beq.n	80034c8 <HAL_ADC_Init+0x1dc>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034bc:	2b06      	cmp	r3, #6
 80034be:	d003      	beq.n	80034c8 <HAL_ADC_Init+0x1dc>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034c4:	2b07      	cmp	r3, #7
 80034c6:	d112      	bne.n	80034ee <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	695a      	ldr	r2, [r3, #20]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	2107      	movs	r1, #7
 80034d4:	438a      	bics	r2, r1
 80034d6:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	6959      	ldr	r1, [r3, #20]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e2:	2207      	movs	r2, #7
 80034e4:	401a      	ands	r2, r3
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	430a      	orrs	r2, r1
 80034ec:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	4a1c      	ldr	r2, [pc, #112]	; (8003568 <HAL_ADC_Init+0x27c>)
 80034f6:	4013      	ands	r3, r2
 80034f8:	68ba      	ldr	r2, [r7, #8]
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d10b      	bne.n	8003516 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2200      	movs	r2, #0
 8003502:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003508:	2203      	movs	r2, #3
 800350a:	4393      	bics	r3, r2
 800350c:	2201      	movs	r2, #1
 800350e:	431a      	orrs	r2, r3
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8003514:	e01c      	b.n	8003550 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800351a:	2212      	movs	r2, #18
 800351c:	4393      	bics	r3, r2
 800351e:	2210      	movs	r2, #16
 8003520:	431a      	orrs	r2, r3
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800352a:	2201      	movs	r2, #1
 800352c:	431a      	orrs	r2, r3
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8003532:	230f      	movs	r3, #15
 8003534:	18fb      	adds	r3, r7, r3
 8003536:	2201      	movs	r2, #1
 8003538:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800353a:	e009      	b.n	8003550 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003540:	2210      	movs	r2, #16
 8003542:	431a      	orrs	r2, r3
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8003548:	230f      	movs	r3, #15
 800354a:	18fb      	adds	r3, r7, r3
 800354c:	2201      	movs	r2, #1
 800354e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003550:	230f      	movs	r3, #15
 8003552:	18fb      	adds	r3, r7, r3
 8003554:	781b      	ldrb	r3, [r3, #0]
}
 8003556:	0018      	movs	r0, r3
 8003558:	46bd      	mov	sp, r7
 800355a:	b004      	add	sp, #16
 800355c:	bd80      	pop	{r7, pc}
 800355e:	46c0      	nop			; (mov r8, r8)
 8003560:	fffffefd 	.word	0xfffffefd
 8003564:	fffe0219 	.word	0xfffe0219
 8003568:	833fffe7 	.word	0x833fffe7

0800356c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b084      	sub	sp, #16
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
 8003574:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003576:	230f      	movs	r3, #15
 8003578:	18fb      	adds	r3, r7, r3
 800357a:	2200      	movs	r2, #0
 800357c:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 800357e:	2300      	movs	r3, #0
 8003580:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003586:	2380      	movs	r3, #128	; 0x80
 8003588:	055b      	lsls	r3, r3, #21
 800358a:	429a      	cmp	r2, r3
 800358c:	d011      	beq.n	80035b2 <HAL_ADC_ConfigChannel+0x46>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003592:	2b01      	cmp	r3, #1
 8003594:	d00d      	beq.n	80035b2 <HAL_ADC_ConfigChannel+0x46>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800359a:	2b02      	cmp	r3, #2
 800359c:	d009      	beq.n	80035b2 <HAL_ADC_ConfigChannel+0x46>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a2:	2b03      	cmp	r3, #3
 80035a4:	d005      	beq.n	80035b2 <HAL_ADC_ConfigChannel+0x46>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035aa:	2b04      	cmp	r3, #4
 80035ac:	d001      	beq.n	80035b2 <HAL_ADC_ConfigChannel+0x46>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2234      	movs	r2, #52	; 0x34
 80035b6:	5c9b      	ldrb	r3, [r3, r2]
 80035b8:	2b01      	cmp	r3, #1
 80035ba:	d101      	bne.n	80035c0 <HAL_ADC_ConfigChannel+0x54>
 80035bc:	2302      	movs	r3, #2
 80035be:	e0bb      	b.n	8003738 <HAL_ADC_ConfigChannel+0x1cc>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2234      	movs	r2, #52	; 0x34
 80035c4:	2101      	movs	r1, #1
 80035c6:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	2204      	movs	r2, #4
 80035d0:	4013      	ands	r3, r2
 80035d2:	d000      	beq.n	80035d6 <HAL_ADC_ConfigChannel+0x6a>
 80035d4:	e09f      	b.n	8003716 <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	4a59      	ldr	r2, [pc, #356]	; (8003740 <HAL_ADC_ConfigChannel+0x1d4>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d100      	bne.n	80035e2 <HAL_ADC_ConfigChannel+0x76>
 80035e0:	e077      	b.n	80036d2 <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	2201      	movs	r2, #1
 80035ee:	409a      	lsls	r2, r3
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	430a      	orrs	r2, r1
 80035f6:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035fc:	2380      	movs	r3, #128	; 0x80
 80035fe:	055b      	lsls	r3, r3, #21
 8003600:	429a      	cmp	r2, r3
 8003602:	d037      	beq.n	8003674 <HAL_ADC_ConfigChannel+0x108>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003608:	2b01      	cmp	r3, #1
 800360a:	d033      	beq.n	8003674 <HAL_ADC_ConfigChannel+0x108>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003610:	2b02      	cmp	r3, #2
 8003612:	d02f      	beq.n	8003674 <HAL_ADC_ConfigChannel+0x108>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003618:	2b03      	cmp	r3, #3
 800361a:	d02b      	beq.n	8003674 <HAL_ADC_ConfigChannel+0x108>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003620:	2b04      	cmp	r3, #4
 8003622:	d027      	beq.n	8003674 <HAL_ADC_ConfigChannel+0x108>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003628:	2b05      	cmp	r3, #5
 800362a:	d023      	beq.n	8003674 <HAL_ADC_ConfigChannel+0x108>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003630:	2b06      	cmp	r3, #6
 8003632:	d01f      	beq.n	8003674 <HAL_ADC_ConfigChannel+0x108>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003638:	2b07      	cmp	r3, #7
 800363a:	d01b      	beq.n	8003674 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	689a      	ldr	r2, [r3, #8]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	695b      	ldr	r3, [r3, #20]
 8003646:	2107      	movs	r1, #7
 8003648:	400b      	ands	r3, r1
 800364a:	429a      	cmp	r2, r3
 800364c:	d012      	beq.n	8003674 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	695a      	ldr	r2, [r3, #20]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	2107      	movs	r1, #7
 800365a:	438a      	bics	r2, r1
 800365c:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	6959      	ldr	r1, [r3, #20]
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	2207      	movs	r2, #7
 800366a:	401a      	ands	r2, r3
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	430a      	orrs	r2, r1
 8003672:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	2b10      	cmp	r3, #16
 800367a:	d003      	beq.n	8003684 <HAL_ADC_ConfigChannel+0x118>
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	2b11      	cmp	r3, #17
 8003682:	d152      	bne.n	800372a <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003684:	4b2f      	ldr	r3, [pc, #188]	; (8003744 <HAL_ADC_ConfigChannel+0x1d8>)
 8003686:	6819      	ldr	r1, [r3, #0]
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	2b10      	cmp	r3, #16
 800368e:	d102      	bne.n	8003696 <HAL_ADC_ConfigChannel+0x12a>
 8003690:	2380      	movs	r3, #128	; 0x80
 8003692:	041b      	lsls	r3, r3, #16
 8003694:	e001      	b.n	800369a <HAL_ADC_ConfigChannel+0x12e>
 8003696:	2380      	movs	r3, #128	; 0x80
 8003698:	03db      	lsls	r3, r3, #15
 800369a:	4a2a      	ldr	r2, [pc, #168]	; (8003744 <HAL_ADC_ConfigChannel+0x1d8>)
 800369c:	430b      	orrs	r3, r1
 800369e:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	2b10      	cmp	r3, #16
 80036a6:	d140      	bne.n	800372a <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80036a8:	4b27      	ldr	r3, [pc, #156]	; (8003748 <HAL_ADC_ConfigChannel+0x1dc>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4927      	ldr	r1, [pc, #156]	; (800374c <HAL_ADC_ConfigChannel+0x1e0>)
 80036ae:	0018      	movs	r0, r3
 80036b0:	f7fc fd46 	bl	8000140 <__udivsi3>
 80036b4:	0003      	movs	r3, r0
 80036b6:	001a      	movs	r2, r3
 80036b8:	0013      	movs	r3, r2
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	189b      	adds	r3, r3, r2
 80036be:	005b      	lsls	r3, r3, #1
 80036c0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80036c2:	e002      	b.n	80036ca <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	3b01      	subs	r3, #1
 80036c8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d1f9      	bne.n	80036c4 <HAL_ADC_ConfigChannel+0x158>
 80036d0:	e02b      	b.n	800372a <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	2101      	movs	r1, #1
 80036de:	4099      	lsls	r1, r3
 80036e0:	000b      	movs	r3, r1
 80036e2:	43d9      	mvns	r1, r3
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	400a      	ands	r2, r1
 80036ea:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	2b10      	cmp	r3, #16
 80036f2:	d003      	beq.n	80036fc <HAL_ADC_ConfigChannel+0x190>
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	2b11      	cmp	r3, #17
 80036fa:	d116      	bne.n	800372a <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80036fc:	4b11      	ldr	r3, [pc, #68]	; (8003744 <HAL_ADC_ConfigChannel+0x1d8>)
 80036fe:	6819      	ldr	r1, [r3, #0]
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	2b10      	cmp	r3, #16
 8003706:	d101      	bne.n	800370c <HAL_ADC_ConfigChannel+0x1a0>
 8003708:	4a11      	ldr	r2, [pc, #68]	; (8003750 <HAL_ADC_ConfigChannel+0x1e4>)
 800370a:	e000      	b.n	800370e <HAL_ADC_ConfigChannel+0x1a2>
 800370c:	4a11      	ldr	r2, [pc, #68]	; (8003754 <HAL_ADC_ConfigChannel+0x1e8>)
 800370e:	4b0d      	ldr	r3, [pc, #52]	; (8003744 <HAL_ADC_ConfigChannel+0x1d8>)
 8003710:	400a      	ands	r2, r1
 8003712:	601a      	str	r2, [r3, #0]
 8003714:	e009      	b.n	800372a <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800371a:	2220      	movs	r2, #32
 800371c:	431a      	orrs	r2, r3
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8003722:	230f      	movs	r3, #15
 8003724:	18fb      	adds	r3, r7, r3
 8003726:	2201      	movs	r2, #1
 8003728:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2234      	movs	r2, #52	; 0x34
 800372e:	2100      	movs	r1, #0
 8003730:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8003732:	230f      	movs	r3, #15
 8003734:	18fb      	adds	r3, r7, r3
 8003736:	781b      	ldrb	r3, [r3, #0]
}
 8003738:	0018      	movs	r0, r3
 800373a:	46bd      	mov	sp, r7
 800373c:	b004      	add	sp, #16
 800373e:	bd80      	pop	{r7, pc}
 8003740:	00001001 	.word	0x00001001
 8003744:	40012708 	.word	0x40012708
 8003748:	20000000 	.word	0x20000000
 800374c:	000f4240 	.word	0x000f4240
 8003750:	ff7fffff 	.word	0xff7fffff
 8003754:	ffbfffff 	.word	0xffbfffff

08003758 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b082      	sub	sp, #8
 800375c:	af00      	add	r7, sp, #0
 800375e:	0002      	movs	r2, r0
 8003760:	1dfb      	adds	r3, r7, #7
 8003762:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003764:	1dfb      	adds	r3, r7, #7
 8003766:	781b      	ldrb	r3, [r3, #0]
 8003768:	2b7f      	cmp	r3, #127	; 0x7f
 800376a:	d809      	bhi.n	8003780 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800376c:	1dfb      	adds	r3, r7, #7
 800376e:	781b      	ldrb	r3, [r3, #0]
 8003770:	001a      	movs	r2, r3
 8003772:	231f      	movs	r3, #31
 8003774:	401a      	ands	r2, r3
 8003776:	4b04      	ldr	r3, [pc, #16]	; (8003788 <__NVIC_EnableIRQ+0x30>)
 8003778:	2101      	movs	r1, #1
 800377a:	4091      	lsls	r1, r2
 800377c:	000a      	movs	r2, r1
 800377e:	601a      	str	r2, [r3, #0]
  }
}
 8003780:	46c0      	nop			; (mov r8, r8)
 8003782:	46bd      	mov	sp, r7
 8003784:	b002      	add	sp, #8
 8003786:	bd80      	pop	{r7, pc}
 8003788:	e000e100 	.word	0xe000e100

0800378c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800378c:	b590      	push	{r4, r7, lr}
 800378e:	b083      	sub	sp, #12
 8003790:	af00      	add	r7, sp, #0
 8003792:	0002      	movs	r2, r0
 8003794:	6039      	str	r1, [r7, #0]
 8003796:	1dfb      	adds	r3, r7, #7
 8003798:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800379a:	1dfb      	adds	r3, r7, #7
 800379c:	781b      	ldrb	r3, [r3, #0]
 800379e:	2b7f      	cmp	r3, #127	; 0x7f
 80037a0:	d828      	bhi.n	80037f4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80037a2:	4a2f      	ldr	r2, [pc, #188]	; (8003860 <__NVIC_SetPriority+0xd4>)
 80037a4:	1dfb      	adds	r3, r7, #7
 80037a6:	781b      	ldrb	r3, [r3, #0]
 80037a8:	b25b      	sxtb	r3, r3
 80037aa:	089b      	lsrs	r3, r3, #2
 80037ac:	33c0      	adds	r3, #192	; 0xc0
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	589b      	ldr	r3, [r3, r2]
 80037b2:	1dfa      	adds	r2, r7, #7
 80037b4:	7812      	ldrb	r2, [r2, #0]
 80037b6:	0011      	movs	r1, r2
 80037b8:	2203      	movs	r2, #3
 80037ba:	400a      	ands	r2, r1
 80037bc:	00d2      	lsls	r2, r2, #3
 80037be:	21ff      	movs	r1, #255	; 0xff
 80037c0:	4091      	lsls	r1, r2
 80037c2:	000a      	movs	r2, r1
 80037c4:	43d2      	mvns	r2, r2
 80037c6:	401a      	ands	r2, r3
 80037c8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	019b      	lsls	r3, r3, #6
 80037ce:	22ff      	movs	r2, #255	; 0xff
 80037d0:	401a      	ands	r2, r3
 80037d2:	1dfb      	adds	r3, r7, #7
 80037d4:	781b      	ldrb	r3, [r3, #0]
 80037d6:	0018      	movs	r0, r3
 80037d8:	2303      	movs	r3, #3
 80037da:	4003      	ands	r3, r0
 80037dc:	00db      	lsls	r3, r3, #3
 80037de:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80037e0:	481f      	ldr	r0, [pc, #124]	; (8003860 <__NVIC_SetPriority+0xd4>)
 80037e2:	1dfb      	adds	r3, r7, #7
 80037e4:	781b      	ldrb	r3, [r3, #0]
 80037e6:	b25b      	sxtb	r3, r3
 80037e8:	089b      	lsrs	r3, r3, #2
 80037ea:	430a      	orrs	r2, r1
 80037ec:	33c0      	adds	r3, #192	; 0xc0
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80037f2:	e031      	b.n	8003858 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80037f4:	4a1b      	ldr	r2, [pc, #108]	; (8003864 <__NVIC_SetPriority+0xd8>)
 80037f6:	1dfb      	adds	r3, r7, #7
 80037f8:	781b      	ldrb	r3, [r3, #0]
 80037fa:	0019      	movs	r1, r3
 80037fc:	230f      	movs	r3, #15
 80037fe:	400b      	ands	r3, r1
 8003800:	3b08      	subs	r3, #8
 8003802:	089b      	lsrs	r3, r3, #2
 8003804:	3306      	adds	r3, #6
 8003806:	009b      	lsls	r3, r3, #2
 8003808:	18d3      	adds	r3, r2, r3
 800380a:	3304      	adds	r3, #4
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	1dfa      	adds	r2, r7, #7
 8003810:	7812      	ldrb	r2, [r2, #0]
 8003812:	0011      	movs	r1, r2
 8003814:	2203      	movs	r2, #3
 8003816:	400a      	ands	r2, r1
 8003818:	00d2      	lsls	r2, r2, #3
 800381a:	21ff      	movs	r1, #255	; 0xff
 800381c:	4091      	lsls	r1, r2
 800381e:	000a      	movs	r2, r1
 8003820:	43d2      	mvns	r2, r2
 8003822:	401a      	ands	r2, r3
 8003824:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	019b      	lsls	r3, r3, #6
 800382a:	22ff      	movs	r2, #255	; 0xff
 800382c:	401a      	ands	r2, r3
 800382e:	1dfb      	adds	r3, r7, #7
 8003830:	781b      	ldrb	r3, [r3, #0]
 8003832:	0018      	movs	r0, r3
 8003834:	2303      	movs	r3, #3
 8003836:	4003      	ands	r3, r0
 8003838:	00db      	lsls	r3, r3, #3
 800383a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800383c:	4809      	ldr	r0, [pc, #36]	; (8003864 <__NVIC_SetPriority+0xd8>)
 800383e:	1dfb      	adds	r3, r7, #7
 8003840:	781b      	ldrb	r3, [r3, #0]
 8003842:	001c      	movs	r4, r3
 8003844:	230f      	movs	r3, #15
 8003846:	4023      	ands	r3, r4
 8003848:	3b08      	subs	r3, #8
 800384a:	089b      	lsrs	r3, r3, #2
 800384c:	430a      	orrs	r2, r1
 800384e:	3306      	adds	r3, #6
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	18c3      	adds	r3, r0, r3
 8003854:	3304      	adds	r3, #4
 8003856:	601a      	str	r2, [r3, #0]
}
 8003858:	46c0      	nop			; (mov r8, r8)
 800385a:	46bd      	mov	sp, r7
 800385c:	b003      	add	sp, #12
 800385e:	bd90      	pop	{r4, r7, pc}
 8003860:	e000e100 	.word	0xe000e100
 8003864:	e000ed00 	.word	0xe000ed00

08003868 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003868:	b580      	push	{r7, lr}
 800386a:	b084      	sub	sp, #16
 800386c:	af00      	add	r7, sp, #0
 800386e:	60b9      	str	r1, [r7, #8]
 8003870:	607a      	str	r2, [r7, #4]
 8003872:	210f      	movs	r1, #15
 8003874:	187b      	adds	r3, r7, r1
 8003876:	1c02      	adds	r2, r0, #0
 8003878:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800387a:	68ba      	ldr	r2, [r7, #8]
 800387c:	187b      	adds	r3, r7, r1
 800387e:	781b      	ldrb	r3, [r3, #0]
 8003880:	b25b      	sxtb	r3, r3
 8003882:	0011      	movs	r1, r2
 8003884:	0018      	movs	r0, r3
 8003886:	f7ff ff81 	bl	800378c <__NVIC_SetPriority>
}
 800388a:	46c0      	nop			; (mov r8, r8)
 800388c:	46bd      	mov	sp, r7
 800388e:	b004      	add	sp, #16
 8003890:	bd80      	pop	{r7, pc}

08003892 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003892:	b580      	push	{r7, lr}
 8003894:	b082      	sub	sp, #8
 8003896:	af00      	add	r7, sp, #0
 8003898:	0002      	movs	r2, r0
 800389a:	1dfb      	adds	r3, r7, #7
 800389c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800389e:	1dfb      	adds	r3, r7, #7
 80038a0:	781b      	ldrb	r3, [r3, #0]
 80038a2:	b25b      	sxtb	r3, r3
 80038a4:	0018      	movs	r0, r3
 80038a6:	f7ff ff57 	bl	8003758 <__NVIC_EnableIRQ>
}
 80038aa:	46c0      	nop			; (mov r8, r8)
 80038ac:	46bd      	mov	sp, r7
 80038ae:	b002      	add	sp, #8
 80038b0:	bd80      	pop	{r7, pc}

080038b2 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80038b2:	b580      	push	{r7, lr}
 80038b4:	b082      	sub	sp, #8
 80038b6:	af00      	add	r7, sp, #0
 80038b8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2221      	movs	r2, #33	; 0x21
 80038be:	5c9b      	ldrb	r3, [r3, r2]
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	2b02      	cmp	r3, #2
 80038c4:	d008      	beq.n	80038d8 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2204      	movs	r2, #4
 80038ca:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2220      	movs	r2, #32
 80038d0:	2100      	movs	r1, #0
 80038d2:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	e020      	b.n	800391a <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	210e      	movs	r1, #14
 80038e4:	438a      	bics	r2, r1
 80038e6:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	2101      	movs	r1, #1
 80038f4:	438a      	bics	r2, r1
 80038f6:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003900:	2101      	movs	r1, #1
 8003902:	4091      	lsls	r1, r2
 8003904:	000a      	movs	r2, r1
 8003906:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2221      	movs	r2, #33	; 0x21
 800390c:	2101      	movs	r1, #1
 800390e:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2220      	movs	r2, #32
 8003914:	2100      	movs	r1, #0
 8003916:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8003918:	2300      	movs	r3, #0
}
 800391a:	0018      	movs	r0, r3
 800391c:	46bd      	mov	sp, r7
 800391e:	b002      	add	sp, #8
 8003920:	bd80      	pop	{r7, pc}

08003922 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003922:	b580      	push	{r7, lr}
 8003924:	b084      	sub	sp, #16
 8003926:	af00      	add	r7, sp, #0
 8003928:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800392a:	210f      	movs	r1, #15
 800392c:	187b      	adds	r3, r7, r1
 800392e:	2200      	movs	r2, #0
 8003930:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2221      	movs	r2, #33	; 0x21
 8003936:	5c9b      	ldrb	r3, [r3, r2]
 8003938:	b2db      	uxtb	r3, r3
 800393a:	2b02      	cmp	r3, #2
 800393c:	d006      	beq.n	800394c <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2204      	movs	r2, #4
 8003942:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003944:	187b      	adds	r3, r7, r1
 8003946:	2201      	movs	r2, #1
 8003948:	701a      	strb	r2, [r3, #0]
 800394a:	e028      	b.n	800399e <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	210e      	movs	r1, #14
 8003958:	438a      	bics	r2, r1
 800395a:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	2101      	movs	r1, #1
 8003968:	438a      	bics	r2, r1
 800396a:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003974:	2101      	movs	r1, #1
 8003976:	4091      	lsls	r1, r2
 8003978:	000a      	movs	r2, r1
 800397a:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2221      	movs	r2, #33	; 0x21
 8003980:	2101      	movs	r1, #1
 8003982:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2220      	movs	r2, #32
 8003988:	2100      	movs	r1, #0
 800398a:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003990:	2b00      	cmp	r3, #0
 8003992:	d004      	beq.n	800399e <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003998:	687a      	ldr	r2, [r7, #4]
 800399a:	0010      	movs	r0, r2
 800399c:	4798      	blx	r3
    } 
  }
  return status;
 800399e:	230f      	movs	r3, #15
 80039a0:	18fb      	adds	r3, r7, r3
 80039a2:	781b      	ldrb	r3, [r3, #0]
}
 80039a4:	0018      	movs	r0, r3
 80039a6:	46bd      	mov	sp, r7
 80039a8:	b004      	add	sp, #16
 80039aa:	bd80      	pop	{r7, pc}

080039ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b086      	sub	sp, #24
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
 80039b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80039b6:	2300      	movs	r3, #0
 80039b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80039ba:	e14f      	b.n	8003c5c <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	2101      	movs	r1, #1
 80039c2:	697a      	ldr	r2, [r7, #20]
 80039c4:	4091      	lsls	r1, r2
 80039c6:	000a      	movs	r2, r1
 80039c8:	4013      	ands	r3, r2
 80039ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d100      	bne.n	80039d4 <HAL_GPIO_Init+0x28>
 80039d2:	e140      	b.n	8003c56 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d00b      	beq.n	80039f4 <HAL_GPIO_Init+0x48>
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	2b02      	cmp	r3, #2
 80039e2:	d007      	beq.n	80039f4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80039e8:	2b11      	cmp	r3, #17
 80039ea:	d003      	beq.n	80039f4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	2b12      	cmp	r3, #18
 80039f2:	d130      	bne.n	8003a56 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	005b      	lsls	r3, r3, #1
 80039fe:	2203      	movs	r2, #3
 8003a00:	409a      	lsls	r2, r3
 8003a02:	0013      	movs	r3, r2
 8003a04:	43da      	mvns	r2, r3
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	4013      	ands	r3, r2
 8003a0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	68da      	ldr	r2, [r3, #12]
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	005b      	lsls	r3, r3, #1
 8003a14:	409a      	lsls	r2, r3
 8003a16:	0013      	movs	r3, r2
 8003a18:	693a      	ldr	r2, [r7, #16]
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	693a      	ldr	r2, [r7, #16]
 8003a22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	409a      	lsls	r2, r3
 8003a30:	0013      	movs	r3, r2
 8003a32:	43da      	mvns	r2, r3
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	4013      	ands	r3, r2
 8003a38:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	091b      	lsrs	r3, r3, #4
 8003a40:	2201      	movs	r2, #1
 8003a42:	401a      	ands	r2, r3
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	409a      	lsls	r2, r3
 8003a48:	0013      	movs	r3, r2
 8003a4a:	693a      	ldr	r2, [r7, #16]
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	693a      	ldr	r2, [r7, #16]
 8003a54:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	68db      	ldr	r3, [r3, #12]
 8003a5a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	005b      	lsls	r3, r3, #1
 8003a60:	2203      	movs	r2, #3
 8003a62:	409a      	lsls	r2, r3
 8003a64:	0013      	movs	r3, r2
 8003a66:	43da      	mvns	r2, r3
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	689a      	ldr	r2, [r3, #8]
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	005b      	lsls	r3, r3, #1
 8003a76:	409a      	lsls	r2, r3
 8003a78:	0013      	movs	r3, r2
 8003a7a:	693a      	ldr	r2, [r7, #16]
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	693a      	ldr	r2, [r7, #16]
 8003a84:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	2b02      	cmp	r3, #2
 8003a8c:	d003      	beq.n	8003a96 <HAL_GPIO_Init+0xea>
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	2b12      	cmp	r3, #18
 8003a94:	d123      	bne.n	8003ade <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	08da      	lsrs	r2, r3, #3
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	3208      	adds	r2, #8
 8003a9e:	0092      	lsls	r2, r2, #2
 8003aa0:	58d3      	ldr	r3, [r2, r3]
 8003aa2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	2207      	movs	r2, #7
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	009b      	lsls	r3, r3, #2
 8003aac:	220f      	movs	r2, #15
 8003aae:	409a      	lsls	r2, r3
 8003ab0:	0013      	movs	r3, r2
 8003ab2:	43da      	mvns	r2, r3
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	4013      	ands	r3, r2
 8003ab8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	691a      	ldr	r2, [r3, #16]
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	2107      	movs	r1, #7
 8003ac2:	400b      	ands	r3, r1
 8003ac4:	009b      	lsls	r3, r3, #2
 8003ac6:	409a      	lsls	r2, r3
 8003ac8:	0013      	movs	r3, r2
 8003aca:	693a      	ldr	r2, [r7, #16]
 8003acc:	4313      	orrs	r3, r2
 8003ace:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	08da      	lsrs	r2, r3, #3
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	3208      	adds	r2, #8
 8003ad8:	0092      	lsls	r2, r2, #2
 8003ada:	6939      	ldr	r1, [r7, #16]
 8003adc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	005b      	lsls	r3, r3, #1
 8003ae8:	2203      	movs	r2, #3
 8003aea:	409a      	lsls	r2, r3
 8003aec:	0013      	movs	r3, r2
 8003aee:	43da      	mvns	r2, r3
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	4013      	ands	r3, r2
 8003af4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	2203      	movs	r2, #3
 8003afc:	401a      	ands	r2, r3
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	005b      	lsls	r3, r3, #1
 8003b02:	409a      	lsls	r2, r3
 8003b04:	0013      	movs	r3, r2
 8003b06:	693a      	ldr	r2, [r7, #16]
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	693a      	ldr	r2, [r7, #16]
 8003b10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	685a      	ldr	r2, [r3, #4]
 8003b16:	2380      	movs	r3, #128	; 0x80
 8003b18:	055b      	lsls	r3, r3, #21
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	d100      	bne.n	8003b20 <HAL_GPIO_Init+0x174>
 8003b1e:	e09a      	b.n	8003c56 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b20:	4b54      	ldr	r3, [pc, #336]	; (8003c74 <HAL_GPIO_Init+0x2c8>)
 8003b22:	699a      	ldr	r2, [r3, #24]
 8003b24:	4b53      	ldr	r3, [pc, #332]	; (8003c74 <HAL_GPIO_Init+0x2c8>)
 8003b26:	2101      	movs	r1, #1
 8003b28:	430a      	orrs	r2, r1
 8003b2a:	619a      	str	r2, [r3, #24]
 8003b2c:	4b51      	ldr	r3, [pc, #324]	; (8003c74 <HAL_GPIO_Init+0x2c8>)
 8003b2e:	699b      	ldr	r3, [r3, #24]
 8003b30:	2201      	movs	r2, #1
 8003b32:	4013      	ands	r3, r2
 8003b34:	60bb      	str	r3, [r7, #8]
 8003b36:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003b38:	4a4f      	ldr	r2, [pc, #316]	; (8003c78 <HAL_GPIO_Init+0x2cc>)
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	089b      	lsrs	r3, r3, #2
 8003b3e:	3302      	adds	r3, #2
 8003b40:	009b      	lsls	r3, r3, #2
 8003b42:	589b      	ldr	r3, [r3, r2]
 8003b44:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	2203      	movs	r2, #3
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	009b      	lsls	r3, r3, #2
 8003b4e:	220f      	movs	r2, #15
 8003b50:	409a      	lsls	r2, r3
 8003b52:	0013      	movs	r3, r2
 8003b54:	43da      	mvns	r2, r3
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	4013      	ands	r3, r2
 8003b5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003b5c:	687a      	ldr	r2, [r7, #4]
 8003b5e:	2390      	movs	r3, #144	; 0x90
 8003b60:	05db      	lsls	r3, r3, #23
 8003b62:	429a      	cmp	r2, r3
 8003b64:	d013      	beq.n	8003b8e <HAL_GPIO_Init+0x1e2>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	4a44      	ldr	r2, [pc, #272]	; (8003c7c <HAL_GPIO_Init+0x2d0>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d00d      	beq.n	8003b8a <HAL_GPIO_Init+0x1de>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	4a43      	ldr	r2, [pc, #268]	; (8003c80 <HAL_GPIO_Init+0x2d4>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d007      	beq.n	8003b86 <HAL_GPIO_Init+0x1da>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	4a42      	ldr	r2, [pc, #264]	; (8003c84 <HAL_GPIO_Init+0x2d8>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d101      	bne.n	8003b82 <HAL_GPIO_Init+0x1d6>
 8003b7e:	2303      	movs	r3, #3
 8003b80:	e006      	b.n	8003b90 <HAL_GPIO_Init+0x1e4>
 8003b82:	2305      	movs	r3, #5
 8003b84:	e004      	b.n	8003b90 <HAL_GPIO_Init+0x1e4>
 8003b86:	2302      	movs	r3, #2
 8003b88:	e002      	b.n	8003b90 <HAL_GPIO_Init+0x1e4>
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e000      	b.n	8003b90 <HAL_GPIO_Init+0x1e4>
 8003b8e:	2300      	movs	r3, #0
 8003b90:	697a      	ldr	r2, [r7, #20]
 8003b92:	2103      	movs	r1, #3
 8003b94:	400a      	ands	r2, r1
 8003b96:	0092      	lsls	r2, r2, #2
 8003b98:	4093      	lsls	r3, r2
 8003b9a:	693a      	ldr	r2, [r7, #16]
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003ba0:	4935      	ldr	r1, [pc, #212]	; (8003c78 <HAL_GPIO_Init+0x2cc>)
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	089b      	lsrs	r3, r3, #2
 8003ba6:	3302      	adds	r3, #2
 8003ba8:	009b      	lsls	r3, r3, #2
 8003baa:	693a      	ldr	r2, [r7, #16]
 8003bac:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003bae:	4b36      	ldr	r3, [pc, #216]	; (8003c88 <HAL_GPIO_Init+0x2dc>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	43da      	mvns	r2, r3
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	4013      	ands	r3, r2
 8003bbc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	685a      	ldr	r2, [r3, #4]
 8003bc2:	2380      	movs	r3, #128	; 0x80
 8003bc4:	025b      	lsls	r3, r3, #9
 8003bc6:	4013      	ands	r3, r2
 8003bc8:	d003      	beq.n	8003bd2 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8003bca:	693a      	ldr	r2, [r7, #16]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003bd2:	4b2d      	ldr	r3, [pc, #180]	; (8003c88 <HAL_GPIO_Init+0x2dc>)
 8003bd4:	693a      	ldr	r2, [r7, #16]
 8003bd6:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8003bd8:	4b2b      	ldr	r3, [pc, #172]	; (8003c88 <HAL_GPIO_Init+0x2dc>)
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	43da      	mvns	r2, r3
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	4013      	ands	r3, r2
 8003be6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	685a      	ldr	r2, [r3, #4]
 8003bec:	2380      	movs	r3, #128	; 0x80
 8003bee:	029b      	lsls	r3, r3, #10
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	d003      	beq.n	8003bfc <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8003bf4:	693a      	ldr	r2, [r7, #16]
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003bfc:	4b22      	ldr	r3, [pc, #136]	; (8003c88 <HAL_GPIO_Init+0x2dc>)
 8003bfe:	693a      	ldr	r2, [r7, #16]
 8003c00:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003c02:	4b21      	ldr	r3, [pc, #132]	; (8003c88 <HAL_GPIO_Init+0x2dc>)
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	43da      	mvns	r2, r3
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	4013      	ands	r3, r2
 8003c10:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	685a      	ldr	r2, [r3, #4]
 8003c16:	2380      	movs	r3, #128	; 0x80
 8003c18:	035b      	lsls	r3, r3, #13
 8003c1a:	4013      	ands	r3, r2
 8003c1c:	d003      	beq.n	8003c26 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8003c1e:	693a      	ldr	r2, [r7, #16]
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	4313      	orrs	r3, r2
 8003c24:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003c26:	4b18      	ldr	r3, [pc, #96]	; (8003c88 <HAL_GPIO_Init+0x2dc>)
 8003c28:	693a      	ldr	r2, [r7, #16]
 8003c2a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003c2c:	4b16      	ldr	r3, [pc, #88]	; (8003c88 <HAL_GPIO_Init+0x2dc>)
 8003c2e:	68db      	ldr	r3, [r3, #12]
 8003c30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	43da      	mvns	r2, r3
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	4013      	ands	r3, r2
 8003c3a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	685a      	ldr	r2, [r3, #4]
 8003c40:	2380      	movs	r3, #128	; 0x80
 8003c42:	039b      	lsls	r3, r3, #14
 8003c44:	4013      	ands	r3, r2
 8003c46:	d003      	beq.n	8003c50 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8003c48:	693a      	ldr	r2, [r7, #16]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003c50:	4b0d      	ldr	r3, [pc, #52]	; (8003c88 <HAL_GPIO_Init+0x2dc>)
 8003c52:	693a      	ldr	r2, [r7, #16]
 8003c54:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	3301      	adds	r3, #1
 8003c5a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	40da      	lsrs	r2, r3
 8003c64:	1e13      	subs	r3, r2, #0
 8003c66:	d000      	beq.n	8003c6a <HAL_GPIO_Init+0x2be>
 8003c68:	e6a8      	b.n	80039bc <HAL_GPIO_Init+0x10>
  } 
}
 8003c6a:	46c0      	nop			; (mov r8, r8)
 8003c6c:	46c0      	nop			; (mov r8, r8)
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	b006      	add	sp, #24
 8003c72:	bd80      	pop	{r7, pc}
 8003c74:	40021000 	.word	0x40021000
 8003c78:	40010000 	.word	0x40010000
 8003c7c:	48000400 	.word	0x48000400
 8003c80:	48000800 	.word	0x48000800
 8003c84:	48000c00 	.word	0x48000c00
 8003c88:	40010400 	.word	0x40010400

08003c8c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b084      	sub	sp, #16
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
 8003c94:	000a      	movs	r2, r1
 8003c96:	1cbb      	adds	r3, r7, #2
 8003c98:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	691b      	ldr	r3, [r3, #16]
 8003c9e:	1cba      	adds	r2, r7, #2
 8003ca0:	8812      	ldrh	r2, [r2, #0]
 8003ca2:	4013      	ands	r3, r2
 8003ca4:	d004      	beq.n	8003cb0 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8003ca6:	230f      	movs	r3, #15
 8003ca8:	18fb      	adds	r3, r7, r3
 8003caa:	2201      	movs	r2, #1
 8003cac:	701a      	strb	r2, [r3, #0]
 8003cae:	e003      	b.n	8003cb8 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003cb0:	230f      	movs	r3, #15
 8003cb2:	18fb      	adds	r3, r7, r3
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8003cb8:	230f      	movs	r3, #15
 8003cba:	18fb      	adds	r3, r7, r3
 8003cbc:	781b      	ldrb	r3, [r3, #0]
  }
 8003cbe:	0018      	movs	r0, r3
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	b004      	add	sp, #16
 8003cc4:	bd80      	pop	{r7, pc}

08003cc6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003cc6:	b580      	push	{r7, lr}
 8003cc8:	b082      	sub	sp, #8
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	6078      	str	r0, [r7, #4]
 8003cce:	0008      	movs	r0, r1
 8003cd0:	0011      	movs	r1, r2
 8003cd2:	1cbb      	adds	r3, r7, #2
 8003cd4:	1c02      	adds	r2, r0, #0
 8003cd6:	801a      	strh	r2, [r3, #0]
 8003cd8:	1c7b      	adds	r3, r7, #1
 8003cda:	1c0a      	adds	r2, r1, #0
 8003cdc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003cde:	1c7b      	adds	r3, r7, #1
 8003ce0:	781b      	ldrb	r3, [r3, #0]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d004      	beq.n	8003cf0 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003ce6:	1cbb      	adds	r3, r7, #2
 8003ce8:	881a      	ldrh	r2, [r3, #0]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003cee:	e003      	b.n	8003cf8 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003cf0:	1cbb      	adds	r3, r7, #2
 8003cf2:	881a      	ldrh	r2, [r3, #0]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003cf8:	46c0      	nop			; (mov r8, r8)
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	b002      	add	sp, #8
 8003cfe:	bd80      	pop	{r7, pc}

08003d00 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b084      	sub	sp, #16
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
 8003d08:	000a      	movs	r2, r1
 8003d0a:	1cbb      	adds	r3, r7, #2
 8003d0c:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	695b      	ldr	r3, [r3, #20]
 8003d12:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003d14:	1cbb      	adds	r3, r7, #2
 8003d16:	881b      	ldrh	r3, [r3, #0]
 8003d18:	68fa      	ldr	r2, [r7, #12]
 8003d1a:	4013      	ands	r3, r2
 8003d1c:	041a      	lsls	r2, r3, #16
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	43db      	mvns	r3, r3
 8003d22:	1cb9      	adds	r1, r7, #2
 8003d24:	8809      	ldrh	r1, [r1, #0]
 8003d26:	400b      	ands	r3, r1
 8003d28:	431a      	orrs	r2, r3
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	619a      	str	r2, [r3, #24]
}
 8003d2e:	46c0      	nop			; (mov r8, r8)
 8003d30:	46bd      	mov	sp, r7
 8003d32:	b004      	add	sp, #16
 8003d34:	bd80      	pop	{r7, pc}
	...

08003d38 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b082      	sub	sp, #8
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	0002      	movs	r2, r0
 8003d40:	1dbb      	adds	r3, r7, #6
 8003d42:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003d44:	4b09      	ldr	r3, [pc, #36]	; (8003d6c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8003d46:	695b      	ldr	r3, [r3, #20]
 8003d48:	1dba      	adds	r2, r7, #6
 8003d4a:	8812      	ldrh	r2, [r2, #0]
 8003d4c:	4013      	ands	r3, r2
 8003d4e:	d008      	beq.n	8003d62 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003d50:	4b06      	ldr	r3, [pc, #24]	; (8003d6c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8003d52:	1dba      	adds	r2, r7, #6
 8003d54:	8812      	ldrh	r2, [r2, #0]
 8003d56:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003d58:	1dbb      	adds	r3, r7, #6
 8003d5a:	881b      	ldrh	r3, [r3, #0]
 8003d5c:	0018      	movs	r0, r3
 8003d5e:	f7ff f849 	bl	8002df4 <HAL_GPIO_EXTI_Callback>
  }
}
 8003d62:	46c0      	nop			; (mov r8, r8)
 8003d64:	46bd      	mov	sp, r7
 8003d66:	b002      	add	sp, #8
 8003d68:	bd80      	pop	{r7, pc}
 8003d6a:	46c0      	nop			; (mov r8, r8)
 8003d6c:	40010400 	.word	0x40010400

08003d70 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b082      	sub	sp, #8
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d101      	bne.n	8003d82 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e082      	b.n	8003e88 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2241      	movs	r2, #65	; 0x41
 8003d86:	5c9b      	ldrb	r3, [r3, r2]
 8003d88:	b2db      	uxtb	r3, r3
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d107      	bne.n	8003d9e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2240      	movs	r2, #64	; 0x40
 8003d92:	2100      	movs	r1, #0
 8003d94:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	0018      	movs	r0, r3
 8003d9a:	f7fe fdb9 	bl	8002910 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2241      	movs	r2, #65	; 0x41
 8003da2:	2124      	movs	r1, #36	; 0x24
 8003da4:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	2101      	movs	r1, #1
 8003db2:	438a      	bics	r2, r1
 8003db4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	685a      	ldr	r2, [r3, #4]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4934      	ldr	r1, [pc, #208]	; (8003e90 <HAL_I2C_Init+0x120>)
 8003dc0:	400a      	ands	r2, r1
 8003dc2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	689a      	ldr	r2, [r3, #8]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4931      	ldr	r1, [pc, #196]	; (8003e94 <HAL_I2C_Init+0x124>)
 8003dd0:	400a      	ands	r2, r1
 8003dd2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	68db      	ldr	r3, [r3, #12]
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d108      	bne.n	8003dee <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	689a      	ldr	r2, [r3, #8]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	2180      	movs	r1, #128	; 0x80
 8003de6:	0209      	lsls	r1, r1, #8
 8003de8:	430a      	orrs	r2, r1
 8003dea:	609a      	str	r2, [r3, #8]
 8003dec:	e007      	b.n	8003dfe <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	689a      	ldr	r2, [r3, #8]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	2184      	movs	r1, #132	; 0x84
 8003df8:	0209      	lsls	r1, r1, #8
 8003dfa:	430a      	orrs	r2, r1
 8003dfc:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	68db      	ldr	r3, [r3, #12]
 8003e02:	2b02      	cmp	r3, #2
 8003e04:	d104      	bne.n	8003e10 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	2280      	movs	r2, #128	; 0x80
 8003e0c:	0112      	lsls	r2, r2, #4
 8003e0e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	685a      	ldr	r2, [r3, #4]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	491f      	ldr	r1, [pc, #124]	; (8003e98 <HAL_I2C_Init+0x128>)
 8003e1c:	430a      	orrs	r2, r1
 8003e1e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	68da      	ldr	r2, [r3, #12]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	491a      	ldr	r1, [pc, #104]	; (8003e94 <HAL_I2C_Init+0x124>)
 8003e2c:	400a      	ands	r2, r1
 8003e2e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	691a      	ldr	r2, [r3, #16]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	695b      	ldr	r3, [r3, #20]
 8003e38:	431a      	orrs	r2, r3
 8003e3a:	0011      	movs	r1, r2
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	699b      	ldr	r3, [r3, #24]
 8003e40:	021a      	lsls	r2, r3, #8
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	430a      	orrs	r2, r1
 8003e48:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	69d9      	ldr	r1, [r3, #28]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6a1a      	ldr	r2, [r3, #32]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	430a      	orrs	r2, r1
 8003e58:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	2101      	movs	r1, #1
 8003e66:	430a      	orrs	r2, r1
 8003e68:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2241      	movs	r2, #65	; 0x41
 8003e74:	2120      	movs	r1, #32
 8003e76:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2242      	movs	r2, #66	; 0x42
 8003e82:	2100      	movs	r1, #0
 8003e84:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003e86:	2300      	movs	r3, #0
}
 8003e88:	0018      	movs	r0, r3
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	b002      	add	sp, #8
 8003e8e:	bd80      	pop	{r7, pc}
 8003e90:	f0ffffff 	.word	0xf0ffffff
 8003e94:	ffff7fff 	.word	0xffff7fff
 8003e98:	02008000 	.word	0x02008000

08003e9c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003e9c:	b590      	push	{r4, r7, lr}
 8003e9e:	b089      	sub	sp, #36	; 0x24
 8003ea0:	af02      	add	r7, sp, #8
 8003ea2:	60f8      	str	r0, [r7, #12]
 8003ea4:	0008      	movs	r0, r1
 8003ea6:	607a      	str	r2, [r7, #4]
 8003ea8:	0019      	movs	r1, r3
 8003eaa:	230a      	movs	r3, #10
 8003eac:	18fb      	adds	r3, r7, r3
 8003eae:	1c02      	adds	r2, r0, #0
 8003eb0:	801a      	strh	r2, [r3, #0]
 8003eb2:	2308      	movs	r3, #8
 8003eb4:	18fb      	adds	r3, r7, r3
 8003eb6:	1c0a      	adds	r2, r1, #0
 8003eb8:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2241      	movs	r2, #65	; 0x41
 8003ebe:	5c9b      	ldrb	r3, [r3, r2]
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	2b20      	cmp	r3, #32
 8003ec4:	d000      	beq.n	8003ec8 <HAL_I2C_Master_Transmit+0x2c>
 8003ec6:	e0e7      	b.n	8004098 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2240      	movs	r2, #64	; 0x40
 8003ecc:	5c9b      	ldrb	r3, [r3, r2]
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d101      	bne.n	8003ed6 <HAL_I2C_Master_Transmit+0x3a>
 8003ed2:	2302      	movs	r3, #2
 8003ed4:	e0e1      	b.n	800409a <HAL_I2C_Master_Transmit+0x1fe>
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2240      	movs	r2, #64	; 0x40
 8003eda:	2101      	movs	r1, #1
 8003edc:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003ede:	f7ff f9d7 	bl	8003290 <HAL_GetTick>
 8003ee2:	0003      	movs	r3, r0
 8003ee4:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003ee6:	2380      	movs	r3, #128	; 0x80
 8003ee8:	0219      	lsls	r1, r3, #8
 8003eea:	68f8      	ldr	r0, [r7, #12]
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	9300      	str	r3, [sp, #0]
 8003ef0:	2319      	movs	r3, #25
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	f000 fe52 	bl	8004b9c <I2C_WaitOnFlagUntilTimeout>
 8003ef8:	1e03      	subs	r3, r0, #0
 8003efa:	d001      	beq.n	8003f00 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	e0cc      	b.n	800409a <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2241      	movs	r2, #65	; 0x41
 8003f04:	2121      	movs	r1, #33	; 0x21
 8003f06:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2242      	movs	r2, #66	; 0x42
 8003f0c:	2110      	movs	r1, #16
 8003f0e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2200      	movs	r2, #0
 8003f14:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	687a      	ldr	r2, [r7, #4]
 8003f1a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2208      	movs	r2, #8
 8003f20:	18ba      	adds	r2, r7, r2
 8003f22:	8812      	ldrh	r2, [r2, #0]
 8003f24:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f30:	b29b      	uxth	r3, r3
 8003f32:	2bff      	cmp	r3, #255	; 0xff
 8003f34:	d911      	bls.n	8003f5a <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	22ff      	movs	r2, #255	; 0xff
 8003f3a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f40:	b2da      	uxtb	r2, r3
 8003f42:	2380      	movs	r3, #128	; 0x80
 8003f44:	045c      	lsls	r4, r3, #17
 8003f46:	230a      	movs	r3, #10
 8003f48:	18fb      	adds	r3, r7, r3
 8003f4a:	8819      	ldrh	r1, [r3, #0]
 8003f4c:	68f8      	ldr	r0, [r7, #12]
 8003f4e:	4b55      	ldr	r3, [pc, #340]	; (80040a4 <HAL_I2C_Master_Transmit+0x208>)
 8003f50:	9300      	str	r3, [sp, #0]
 8003f52:	0023      	movs	r3, r4
 8003f54:	f000 ffae 	bl	8004eb4 <I2C_TransferConfig>
 8003f58:	e075      	b.n	8004046 <HAL_I2C_Master_Transmit+0x1aa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f5e:	b29a      	uxth	r2, r3
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f68:	b2da      	uxtb	r2, r3
 8003f6a:	2380      	movs	r3, #128	; 0x80
 8003f6c:	049c      	lsls	r4, r3, #18
 8003f6e:	230a      	movs	r3, #10
 8003f70:	18fb      	adds	r3, r7, r3
 8003f72:	8819      	ldrh	r1, [r3, #0]
 8003f74:	68f8      	ldr	r0, [r7, #12]
 8003f76:	4b4b      	ldr	r3, [pc, #300]	; (80040a4 <HAL_I2C_Master_Transmit+0x208>)
 8003f78:	9300      	str	r3, [sp, #0]
 8003f7a:	0023      	movs	r3, r4
 8003f7c:	f000 ff9a 	bl	8004eb4 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8003f80:	e061      	b.n	8004046 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f82:	697a      	ldr	r2, [r7, #20]
 8003f84:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	0018      	movs	r0, r3
 8003f8a:	f000 fe46 	bl	8004c1a <I2C_WaitOnTXISFlagUntilTimeout>
 8003f8e:	1e03      	subs	r3, r0, #0
 8003f90:	d001      	beq.n	8003f96 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e081      	b.n	800409a <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f9a:	781a      	ldrb	r2, [r3, #0]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa6:	1c5a      	adds	r2, r3, #1
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fb0:	b29b      	uxth	r3, r3
 8003fb2:	3b01      	subs	r3, #1
 8003fb4:	b29a      	uxth	r2, r3
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fbe:	3b01      	subs	r3, #1
 8003fc0:	b29a      	uxth	r2, r3
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fca:	b29b      	uxth	r3, r3
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d03a      	beq.n	8004046 <HAL_I2C_Master_Transmit+0x1aa>
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d136      	bne.n	8004046 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003fd8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003fda:	68f8      	ldr	r0, [r7, #12]
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	9300      	str	r3, [sp, #0]
 8003fe0:	0013      	movs	r3, r2
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	2180      	movs	r1, #128	; 0x80
 8003fe6:	f000 fdd9 	bl	8004b9c <I2C_WaitOnFlagUntilTimeout>
 8003fea:	1e03      	subs	r3, r0, #0
 8003fec:	d001      	beq.n	8003ff2 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e053      	b.n	800409a <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ff6:	b29b      	uxth	r3, r3
 8003ff8:	2bff      	cmp	r3, #255	; 0xff
 8003ffa:	d911      	bls.n	8004020 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	22ff      	movs	r2, #255	; 0xff
 8004000:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004006:	b2da      	uxtb	r2, r3
 8004008:	2380      	movs	r3, #128	; 0x80
 800400a:	045c      	lsls	r4, r3, #17
 800400c:	230a      	movs	r3, #10
 800400e:	18fb      	adds	r3, r7, r3
 8004010:	8819      	ldrh	r1, [r3, #0]
 8004012:	68f8      	ldr	r0, [r7, #12]
 8004014:	2300      	movs	r3, #0
 8004016:	9300      	str	r3, [sp, #0]
 8004018:	0023      	movs	r3, r4
 800401a:	f000 ff4b 	bl	8004eb4 <I2C_TransferConfig>
 800401e:	e012      	b.n	8004046 <HAL_I2C_Master_Transmit+0x1aa>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004024:	b29a      	uxth	r2, r3
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800402e:	b2da      	uxtb	r2, r3
 8004030:	2380      	movs	r3, #128	; 0x80
 8004032:	049c      	lsls	r4, r3, #18
 8004034:	230a      	movs	r3, #10
 8004036:	18fb      	adds	r3, r7, r3
 8004038:	8819      	ldrh	r1, [r3, #0]
 800403a:	68f8      	ldr	r0, [r7, #12]
 800403c:	2300      	movs	r3, #0
 800403e:	9300      	str	r3, [sp, #0]
 8004040:	0023      	movs	r3, r4
 8004042:	f000 ff37 	bl	8004eb4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800404a:	b29b      	uxth	r3, r3
 800404c:	2b00      	cmp	r3, #0
 800404e:	d198      	bne.n	8003f82 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004050:	697a      	ldr	r2, [r7, #20]
 8004052:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	0018      	movs	r0, r3
 8004058:	f000 fe1e 	bl	8004c98 <I2C_WaitOnSTOPFlagUntilTimeout>
 800405c:	1e03      	subs	r3, r0, #0
 800405e:	d001      	beq.n	8004064 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	e01a      	b.n	800409a <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	2220      	movs	r2, #32
 800406a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	685a      	ldr	r2, [r3, #4]
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	490c      	ldr	r1, [pc, #48]	; (80040a8 <HAL_I2C_Master_Transmit+0x20c>)
 8004078:	400a      	ands	r2, r1
 800407a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2241      	movs	r2, #65	; 0x41
 8004080:	2120      	movs	r1, #32
 8004082:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2242      	movs	r2, #66	; 0x42
 8004088:	2100      	movs	r1, #0
 800408a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2240      	movs	r2, #64	; 0x40
 8004090:	2100      	movs	r1, #0
 8004092:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004094:	2300      	movs	r3, #0
 8004096:	e000      	b.n	800409a <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8004098:	2302      	movs	r3, #2
  }
}
 800409a:	0018      	movs	r0, r3
 800409c:	46bd      	mov	sp, r7
 800409e:	b007      	add	sp, #28
 80040a0:	bd90      	pop	{r4, r7, pc}
 80040a2:	46c0      	nop			; (mov r8, r8)
 80040a4:	80002000 	.word	0x80002000
 80040a8:	fe00e800 	.word	0xfe00e800

080040ac <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 80040ac:	b590      	push	{r4, r7, lr}
 80040ae:	b089      	sub	sp, #36	; 0x24
 80040b0:	af02      	add	r7, sp, #8
 80040b2:	60f8      	str	r0, [r7, #12]
 80040b4:	0008      	movs	r0, r1
 80040b6:	607a      	str	r2, [r7, #4]
 80040b8:	0019      	movs	r1, r3
 80040ba:	230a      	movs	r3, #10
 80040bc:	18fb      	adds	r3, r7, r3
 80040be:	1c02      	adds	r2, r0, #0
 80040c0:	801a      	strh	r2, [r3, #0]
 80040c2:	2308      	movs	r3, #8
 80040c4:	18fb      	adds	r3, r7, r3
 80040c6:	1c0a      	adds	r2, r1, #0
 80040c8:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2241      	movs	r2, #65	; 0x41
 80040ce:	5c9b      	ldrb	r3, [r3, r2]
 80040d0:	b2db      	uxtb	r3, r3
 80040d2:	2b20      	cmp	r3, #32
 80040d4:	d000      	beq.n	80040d8 <HAL_I2C_Master_Receive+0x2c>
 80040d6:	e0e8      	b.n	80042aa <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	2240      	movs	r2, #64	; 0x40
 80040dc:	5c9b      	ldrb	r3, [r3, r2]
 80040de:	2b01      	cmp	r3, #1
 80040e0:	d101      	bne.n	80040e6 <HAL_I2C_Master_Receive+0x3a>
 80040e2:	2302      	movs	r3, #2
 80040e4:	e0e2      	b.n	80042ac <HAL_I2C_Master_Receive+0x200>
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	2240      	movs	r2, #64	; 0x40
 80040ea:	2101      	movs	r1, #1
 80040ec:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80040ee:	f7ff f8cf 	bl	8003290 <HAL_GetTick>
 80040f2:	0003      	movs	r3, r0
 80040f4:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80040f6:	2380      	movs	r3, #128	; 0x80
 80040f8:	0219      	lsls	r1, r3, #8
 80040fa:	68f8      	ldr	r0, [r7, #12]
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	9300      	str	r3, [sp, #0]
 8004100:	2319      	movs	r3, #25
 8004102:	2201      	movs	r2, #1
 8004104:	f000 fd4a 	bl	8004b9c <I2C_WaitOnFlagUntilTimeout>
 8004108:	1e03      	subs	r3, r0, #0
 800410a:	d001      	beq.n	8004110 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	e0cd      	b.n	80042ac <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2241      	movs	r2, #65	; 0x41
 8004114:	2122      	movs	r1, #34	; 0x22
 8004116:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2242      	movs	r2, #66	; 0x42
 800411c:	2110      	movs	r1, #16
 800411e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2200      	movs	r2, #0
 8004124:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	687a      	ldr	r2, [r7, #4]
 800412a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2208      	movs	r2, #8
 8004130:	18ba      	adds	r2, r7, r2
 8004132:	8812      	ldrh	r2, [r2, #0]
 8004134:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2200      	movs	r2, #0
 800413a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004140:	b29b      	uxth	r3, r3
 8004142:	2bff      	cmp	r3, #255	; 0xff
 8004144:	d911      	bls.n	800416a <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	22ff      	movs	r2, #255	; 0xff
 800414a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004150:	b2da      	uxtb	r2, r3
 8004152:	2380      	movs	r3, #128	; 0x80
 8004154:	045c      	lsls	r4, r3, #17
 8004156:	230a      	movs	r3, #10
 8004158:	18fb      	adds	r3, r7, r3
 800415a:	8819      	ldrh	r1, [r3, #0]
 800415c:	68f8      	ldr	r0, [r7, #12]
 800415e:	4b55      	ldr	r3, [pc, #340]	; (80042b4 <HAL_I2C_Master_Receive+0x208>)
 8004160:	9300      	str	r3, [sp, #0]
 8004162:	0023      	movs	r3, r4
 8004164:	f000 fea6 	bl	8004eb4 <I2C_TransferConfig>
 8004168:	e076      	b.n	8004258 <HAL_I2C_Master_Receive+0x1ac>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800416e:	b29a      	uxth	r2, r3
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004178:	b2da      	uxtb	r2, r3
 800417a:	2380      	movs	r3, #128	; 0x80
 800417c:	049c      	lsls	r4, r3, #18
 800417e:	230a      	movs	r3, #10
 8004180:	18fb      	adds	r3, r7, r3
 8004182:	8819      	ldrh	r1, [r3, #0]
 8004184:	68f8      	ldr	r0, [r7, #12]
 8004186:	4b4b      	ldr	r3, [pc, #300]	; (80042b4 <HAL_I2C_Master_Receive+0x208>)
 8004188:	9300      	str	r3, [sp, #0]
 800418a:	0023      	movs	r3, r4
 800418c:	f000 fe92 	bl	8004eb4 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8004190:	e062      	b.n	8004258 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004192:	697a      	ldr	r2, [r7, #20]
 8004194:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	0018      	movs	r0, r3
 800419a:	f000 fdb9 	bl	8004d10 <I2C_WaitOnRXNEFlagUntilTimeout>
 800419e:	1e03      	subs	r3, r0, #0
 80041a0:	d001      	beq.n	80041a6 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	e082      	b.n	80042ac <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b0:	b2d2      	uxtb	r2, r2
 80041b2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b8:	1c5a      	adds	r2, r3, #1
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041c2:	3b01      	subs	r3, #1
 80041c4:	b29a      	uxth	r2, r3
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041ce:	b29b      	uxth	r3, r3
 80041d0:	3b01      	subs	r3, #1
 80041d2:	b29a      	uxth	r2, r3
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041dc:	b29b      	uxth	r3, r3
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d03a      	beq.n	8004258 <HAL_I2C_Master_Receive+0x1ac>
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d136      	bne.n	8004258 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80041ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80041ec:	68f8      	ldr	r0, [r7, #12]
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	9300      	str	r3, [sp, #0]
 80041f2:	0013      	movs	r3, r2
 80041f4:	2200      	movs	r2, #0
 80041f6:	2180      	movs	r1, #128	; 0x80
 80041f8:	f000 fcd0 	bl	8004b9c <I2C_WaitOnFlagUntilTimeout>
 80041fc:	1e03      	subs	r3, r0, #0
 80041fe:	d001      	beq.n	8004204 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	e053      	b.n	80042ac <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004208:	b29b      	uxth	r3, r3
 800420a:	2bff      	cmp	r3, #255	; 0xff
 800420c:	d911      	bls.n	8004232 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	22ff      	movs	r2, #255	; 0xff
 8004212:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004218:	b2da      	uxtb	r2, r3
 800421a:	2380      	movs	r3, #128	; 0x80
 800421c:	045c      	lsls	r4, r3, #17
 800421e:	230a      	movs	r3, #10
 8004220:	18fb      	adds	r3, r7, r3
 8004222:	8819      	ldrh	r1, [r3, #0]
 8004224:	68f8      	ldr	r0, [r7, #12]
 8004226:	2300      	movs	r3, #0
 8004228:	9300      	str	r3, [sp, #0]
 800422a:	0023      	movs	r3, r4
 800422c:	f000 fe42 	bl	8004eb4 <I2C_TransferConfig>
 8004230:	e012      	b.n	8004258 <HAL_I2C_Master_Receive+0x1ac>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004236:	b29a      	uxth	r2, r3
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004240:	b2da      	uxtb	r2, r3
 8004242:	2380      	movs	r3, #128	; 0x80
 8004244:	049c      	lsls	r4, r3, #18
 8004246:	230a      	movs	r3, #10
 8004248:	18fb      	adds	r3, r7, r3
 800424a:	8819      	ldrh	r1, [r3, #0]
 800424c:	68f8      	ldr	r0, [r7, #12]
 800424e:	2300      	movs	r3, #0
 8004250:	9300      	str	r3, [sp, #0]
 8004252:	0023      	movs	r3, r4
 8004254:	f000 fe2e 	bl	8004eb4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800425c:	b29b      	uxth	r3, r3
 800425e:	2b00      	cmp	r3, #0
 8004260:	d197      	bne.n	8004192 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004262:	697a      	ldr	r2, [r7, #20]
 8004264:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	0018      	movs	r0, r3
 800426a:	f000 fd15 	bl	8004c98 <I2C_WaitOnSTOPFlagUntilTimeout>
 800426e:	1e03      	subs	r3, r0, #0
 8004270:	d001      	beq.n	8004276 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	e01a      	b.n	80042ac <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	2220      	movs	r2, #32
 800427c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	685a      	ldr	r2, [r3, #4]
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	490b      	ldr	r1, [pc, #44]	; (80042b8 <HAL_I2C_Master_Receive+0x20c>)
 800428a:	400a      	ands	r2, r1
 800428c:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2241      	movs	r2, #65	; 0x41
 8004292:	2120      	movs	r1, #32
 8004294:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	2242      	movs	r2, #66	; 0x42
 800429a:	2100      	movs	r1, #0
 800429c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2240      	movs	r2, #64	; 0x40
 80042a2:	2100      	movs	r1, #0
 80042a4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80042a6:	2300      	movs	r3, #0
 80042a8:	e000      	b.n	80042ac <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 80042aa:	2302      	movs	r3, #2
  }
}
 80042ac:	0018      	movs	r0, r3
 80042ae:	46bd      	mov	sp, r7
 80042b0:	b007      	add	sp, #28
 80042b2:	bd90      	pop	{r4, r7, pc}
 80042b4:	80002400 	.word	0x80002400
 80042b8:	fe00e800 	.word	0xfe00e800

080042bc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042bc:	b590      	push	{r4, r7, lr}
 80042be:	b089      	sub	sp, #36	; 0x24
 80042c0:	af02      	add	r7, sp, #8
 80042c2:	60f8      	str	r0, [r7, #12]
 80042c4:	000c      	movs	r4, r1
 80042c6:	0010      	movs	r0, r2
 80042c8:	0019      	movs	r1, r3
 80042ca:	230a      	movs	r3, #10
 80042cc:	18fb      	adds	r3, r7, r3
 80042ce:	1c22      	adds	r2, r4, #0
 80042d0:	801a      	strh	r2, [r3, #0]
 80042d2:	2308      	movs	r3, #8
 80042d4:	18fb      	adds	r3, r7, r3
 80042d6:	1c02      	adds	r2, r0, #0
 80042d8:	801a      	strh	r2, [r3, #0]
 80042da:	1dbb      	adds	r3, r7, #6
 80042dc:	1c0a      	adds	r2, r1, #0
 80042de:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2241      	movs	r2, #65	; 0x41
 80042e4:	5c9b      	ldrb	r3, [r3, r2]
 80042e6:	b2db      	uxtb	r3, r3
 80042e8:	2b20      	cmp	r3, #32
 80042ea:	d000      	beq.n	80042ee <HAL_I2C_Mem_Write+0x32>
 80042ec:	e10c      	b.n	8004508 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 80042ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d004      	beq.n	80042fe <HAL_I2C_Mem_Write+0x42>
 80042f4:	232c      	movs	r3, #44	; 0x2c
 80042f6:	18fb      	adds	r3, r7, r3
 80042f8:	881b      	ldrh	r3, [r3, #0]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d105      	bne.n	800430a <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2280      	movs	r2, #128	; 0x80
 8004302:	0092      	lsls	r2, r2, #2
 8004304:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	e0ff      	b.n	800450a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2240      	movs	r2, #64	; 0x40
 800430e:	5c9b      	ldrb	r3, [r3, r2]
 8004310:	2b01      	cmp	r3, #1
 8004312:	d101      	bne.n	8004318 <HAL_I2C_Mem_Write+0x5c>
 8004314:	2302      	movs	r3, #2
 8004316:	e0f8      	b.n	800450a <HAL_I2C_Mem_Write+0x24e>
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2240      	movs	r2, #64	; 0x40
 800431c:	2101      	movs	r1, #1
 800431e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004320:	f7fe ffb6 	bl	8003290 <HAL_GetTick>
 8004324:	0003      	movs	r3, r0
 8004326:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004328:	2380      	movs	r3, #128	; 0x80
 800432a:	0219      	lsls	r1, r3, #8
 800432c:	68f8      	ldr	r0, [r7, #12]
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	9300      	str	r3, [sp, #0]
 8004332:	2319      	movs	r3, #25
 8004334:	2201      	movs	r2, #1
 8004336:	f000 fc31 	bl	8004b9c <I2C_WaitOnFlagUntilTimeout>
 800433a:	1e03      	subs	r3, r0, #0
 800433c:	d001      	beq.n	8004342 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	e0e3      	b.n	800450a <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2241      	movs	r2, #65	; 0x41
 8004346:	2121      	movs	r1, #33	; 0x21
 8004348:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2242      	movs	r2, #66	; 0x42
 800434e:	2140      	movs	r1, #64	; 0x40
 8004350:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2200      	movs	r2, #0
 8004356:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800435c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	222c      	movs	r2, #44	; 0x2c
 8004362:	18ba      	adds	r2, r7, r2
 8004364:	8812      	ldrh	r2, [r2, #0]
 8004366:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2200      	movs	r2, #0
 800436c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800436e:	1dbb      	adds	r3, r7, #6
 8004370:	881c      	ldrh	r4, [r3, #0]
 8004372:	2308      	movs	r3, #8
 8004374:	18fb      	adds	r3, r7, r3
 8004376:	881a      	ldrh	r2, [r3, #0]
 8004378:	230a      	movs	r3, #10
 800437a:	18fb      	adds	r3, r7, r3
 800437c:	8819      	ldrh	r1, [r3, #0]
 800437e:	68f8      	ldr	r0, [r7, #12]
 8004380:	697b      	ldr	r3, [r7, #20]
 8004382:	9301      	str	r3, [sp, #4]
 8004384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004386:	9300      	str	r3, [sp, #0]
 8004388:	0023      	movs	r3, r4
 800438a:	f000 fb1f 	bl	80049cc <I2C_RequestMemoryWrite>
 800438e:	1e03      	subs	r3, r0, #0
 8004390:	d005      	beq.n	800439e <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2240      	movs	r2, #64	; 0x40
 8004396:	2100      	movs	r1, #0
 8004398:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	e0b5      	b.n	800450a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043a2:	b29b      	uxth	r3, r3
 80043a4:	2bff      	cmp	r3, #255	; 0xff
 80043a6:	d911      	bls.n	80043cc <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	22ff      	movs	r2, #255	; 0xff
 80043ac:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043b2:	b2da      	uxtb	r2, r3
 80043b4:	2380      	movs	r3, #128	; 0x80
 80043b6:	045c      	lsls	r4, r3, #17
 80043b8:	230a      	movs	r3, #10
 80043ba:	18fb      	adds	r3, r7, r3
 80043bc:	8819      	ldrh	r1, [r3, #0]
 80043be:	68f8      	ldr	r0, [r7, #12]
 80043c0:	2300      	movs	r3, #0
 80043c2:	9300      	str	r3, [sp, #0]
 80043c4:	0023      	movs	r3, r4
 80043c6:	f000 fd75 	bl	8004eb4 <I2C_TransferConfig>
 80043ca:	e012      	b.n	80043f2 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043d0:	b29a      	uxth	r2, r3
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043da:	b2da      	uxtb	r2, r3
 80043dc:	2380      	movs	r3, #128	; 0x80
 80043de:	049c      	lsls	r4, r3, #18
 80043e0:	230a      	movs	r3, #10
 80043e2:	18fb      	adds	r3, r7, r3
 80043e4:	8819      	ldrh	r1, [r3, #0]
 80043e6:	68f8      	ldr	r0, [r7, #12]
 80043e8:	2300      	movs	r3, #0
 80043ea:	9300      	str	r3, [sp, #0]
 80043ec:	0023      	movs	r3, r4
 80043ee:	f000 fd61 	bl	8004eb4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043f2:	697a      	ldr	r2, [r7, #20]
 80043f4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	0018      	movs	r0, r3
 80043fa:	f000 fc0e 	bl	8004c1a <I2C_WaitOnTXISFlagUntilTimeout>
 80043fe:	1e03      	subs	r3, r0, #0
 8004400:	d001      	beq.n	8004406 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8004402:	2301      	movs	r3, #1
 8004404:	e081      	b.n	800450a <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800440a:	781a      	ldrb	r2, [r3, #0]
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004416:	1c5a      	adds	r2, r3, #1
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004420:	b29b      	uxth	r3, r3
 8004422:	3b01      	subs	r3, #1
 8004424:	b29a      	uxth	r2, r3
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800442e:	3b01      	subs	r3, #1
 8004430:	b29a      	uxth	r2, r3
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800443a:	b29b      	uxth	r3, r3
 800443c:	2b00      	cmp	r3, #0
 800443e:	d03a      	beq.n	80044b6 <HAL_I2C_Mem_Write+0x1fa>
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004444:	2b00      	cmp	r3, #0
 8004446:	d136      	bne.n	80044b6 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004448:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800444a:	68f8      	ldr	r0, [r7, #12]
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	9300      	str	r3, [sp, #0]
 8004450:	0013      	movs	r3, r2
 8004452:	2200      	movs	r2, #0
 8004454:	2180      	movs	r1, #128	; 0x80
 8004456:	f000 fba1 	bl	8004b9c <I2C_WaitOnFlagUntilTimeout>
 800445a:	1e03      	subs	r3, r0, #0
 800445c:	d001      	beq.n	8004462 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	e053      	b.n	800450a <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004466:	b29b      	uxth	r3, r3
 8004468:	2bff      	cmp	r3, #255	; 0xff
 800446a:	d911      	bls.n	8004490 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	22ff      	movs	r2, #255	; 0xff
 8004470:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004476:	b2da      	uxtb	r2, r3
 8004478:	2380      	movs	r3, #128	; 0x80
 800447a:	045c      	lsls	r4, r3, #17
 800447c:	230a      	movs	r3, #10
 800447e:	18fb      	adds	r3, r7, r3
 8004480:	8819      	ldrh	r1, [r3, #0]
 8004482:	68f8      	ldr	r0, [r7, #12]
 8004484:	2300      	movs	r3, #0
 8004486:	9300      	str	r3, [sp, #0]
 8004488:	0023      	movs	r3, r4
 800448a:	f000 fd13 	bl	8004eb4 <I2C_TransferConfig>
 800448e:	e012      	b.n	80044b6 <HAL_I2C_Mem_Write+0x1fa>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004494:	b29a      	uxth	r2, r3
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800449e:	b2da      	uxtb	r2, r3
 80044a0:	2380      	movs	r3, #128	; 0x80
 80044a2:	049c      	lsls	r4, r3, #18
 80044a4:	230a      	movs	r3, #10
 80044a6:	18fb      	adds	r3, r7, r3
 80044a8:	8819      	ldrh	r1, [r3, #0]
 80044aa:	68f8      	ldr	r0, [r7, #12]
 80044ac:	2300      	movs	r3, #0
 80044ae:	9300      	str	r3, [sp, #0]
 80044b0:	0023      	movs	r3, r4
 80044b2:	f000 fcff 	bl	8004eb4 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044ba:	b29b      	uxth	r3, r3
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d198      	bne.n	80043f2 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044c0:	697a      	ldr	r2, [r7, #20]
 80044c2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	0018      	movs	r0, r3
 80044c8:	f000 fbe6 	bl	8004c98 <I2C_WaitOnSTOPFlagUntilTimeout>
 80044cc:	1e03      	subs	r3, r0, #0
 80044ce:	d001      	beq.n	80044d4 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 80044d0:	2301      	movs	r3, #1
 80044d2:	e01a      	b.n	800450a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	2220      	movs	r2, #32
 80044da:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	685a      	ldr	r2, [r3, #4]
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	490b      	ldr	r1, [pc, #44]	; (8004514 <HAL_I2C_Mem_Write+0x258>)
 80044e8:	400a      	ands	r2, r1
 80044ea:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2241      	movs	r2, #65	; 0x41
 80044f0:	2120      	movs	r1, #32
 80044f2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2242      	movs	r2, #66	; 0x42
 80044f8:	2100      	movs	r1, #0
 80044fa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2240      	movs	r2, #64	; 0x40
 8004500:	2100      	movs	r1, #0
 8004502:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004504:	2300      	movs	r3, #0
 8004506:	e000      	b.n	800450a <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8004508:	2302      	movs	r3, #2
  }
}
 800450a:	0018      	movs	r0, r3
 800450c:	46bd      	mov	sp, r7
 800450e:	b007      	add	sp, #28
 8004510:	bd90      	pop	{r4, r7, pc}
 8004512:	46c0      	nop			; (mov r8, r8)
 8004514:	fe00e800 	.word	0xfe00e800

08004518 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004518:	b590      	push	{r4, r7, lr}
 800451a:	b089      	sub	sp, #36	; 0x24
 800451c:	af02      	add	r7, sp, #8
 800451e:	60f8      	str	r0, [r7, #12]
 8004520:	000c      	movs	r4, r1
 8004522:	0010      	movs	r0, r2
 8004524:	0019      	movs	r1, r3
 8004526:	230a      	movs	r3, #10
 8004528:	18fb      	adds	r3, r7, r3
 800452a:	1c22      	adds	r2, r4, #0
 800452c:	801a      	strh	r2, [r3, #0]
 800452e:	2308      	movs	r3, #8
 8004530:	18fb      	adds	r3, r7, r3
 8004532:	1c02      	adds	r2, r0, #0
 8004534:	801a      	strh	r2, [r3, #0]
 8004536:	1dbb      	adds	r3, r7, #6
 8004538:	1c0a      	adds	r2, r1, #0
 800453a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2241      	movs	r2, #65	; 0x41
 8004540:	5c9b      	ldrb	r3, [r3, r2]
 8004542:	b2db      	uxtb	r3, r3
 8004544:	2b20      	cmp	r3, #32
 8004546:	d000      	beq.n	800454a <HAL_I2C_Mem_Read+0x32>
 8004548:	e110      	b.n	800476c <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 800454a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800454c:	2b00      	cmp	r3, #0
 800454e:	d004      	beq.n	800455a <HAL_I2C_Mem_Read+0x42>
 8004550:	232c      	movs	r3, #44	; 0x2c
 8004552:	18fb      	adds	r3, r7, r3
 8004554:	881b      	ldrh	r3, [r3, #0]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d105      	bne.n	8004566 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2280      	movs	r2, #128	; 0x80
 800455e:	0092      	lsls	r2, r2, #2
 8004560:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	e103      	b.n	800476e <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	2240      	movs	r2, #64	; 0x40
 800456a:	5c9b      	ldrb	r3, [r3, r2]
 800456c:	2b01      	cmp	r3, #1
 800456e:	d101      	bne.n	8004574 <HAL_I2C_Mem_Read+0x5c>
 8004570:	2302      	movs	r3, #2
 8004572:	e0fc      	b.n	800476e <HAL_I2C_Mem_Read+0x256>
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2240      	movs	r2, #64	; 0x40
 8004578:	2101      	movs	r1, #1
 800457a:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800457c:	f7fe fe88 	bl	8003290 <HAL_GetTick>
 8004580:	0003      	movs	r3, r0
 8004582:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004584:	2380      	movs	r3, #128	; 0x80
 8004586:	0219      	lsls	r1, r3, #8
 8004588:	68f8      	ldr	r0, [r7, #12]
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	9300      	str	r3, [sp, #0]
 800458e:	2319      	movs	r3, #25
 8004590:	2201      	movs	r2, #1
 8004592:	f000 fb03 	bl	8004b9c <I2C_WaitOnFlagUntilTimeout>
 8004596:	1e03      	subs	r3, r0, #0
 8004598:	d001      	beq.n	800459e <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	e0e7      	b.n	800476e <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2241      	movs	r2, #65	; 0x41
 80045a2:	2122      	movs	r1, #34	; 0x22
 80045a4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2242      	movs	r2, #66	; 0x42
 80045aa:	2140      	movs	r1, #64	; 0x40
 80045ac:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2200      	movs	r2, #0
 80045b2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80045b8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	222c      	movs	r2, #44	; 0x2c
 80045be:	18ba      	adds	r2, r7, r2
 80045c0:	8812      	ldrh	r2, [r2, #0]
 80045c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2200      	movs	r2, #0
 80045c8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80045ca:	1dbb      	adds	r3, r7, #6
 80045cc:	881c      	ldrh	r4, [r3, #0]
 80045ce:	2308      	movs	r3, #8
 80045d0:	18fb      	adds	r3, r7, r3
 80045d2:	881a      	ldrh	r2, [r3, #0]
 80045d4:	230a      	movs	r3, #10
 80045d6:	18fb      	adds	r3, r7, r3
 80045d8:	8819      	ldrh	r1, [r3, #0]
 80045da:	68f8      	ldr	r0, [r7, #12]
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	9301      	str	r3, [sp, #4]
 80045e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045e2:	9300      	str	r3, [sp, #0]
 80045e4:	0023      	movs	r3, r4
 80045e6:	f000 fa55 	bl	8004a94 <I2C_RequestMemoryRead>
 80045ea:	1e03      	subs	r3, r0, #0
 80045ec:	d005      	beq.n	80045fa <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2240      	movs	r2, #64	; 0x40
 80045f2:	2100      	movs	r1, #0
 80045f4:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	e0b9      	b.n	800476e <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045fe:	b29b      	uxth	r3, r3
 8004600:	2bff      	cmp	r3, #255	; 0xff
 8004602:	d911      	bls.n	8004628 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	22ff      	movs	r2, #255	; 0xff
 8004608:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800460e:	b2da      	uxtb	r2, r3
 8004610:	2380      	movs	r3, #128	; 0x80
 8004612:	045c      	lsls	r4, r3, #17
 8004614:	230a      	movs	r3, #10
 8004616:	18fb      	adds	r3, r7, r3
 8004618:	8819      	ldrh	r1, [r3, #0]
 800461a:	68f8      	ldr	r0, [r7, #12]
 800461c:	4b56      	ldr	r3, [pc, #344]	; (8004778 <HAL_I2C_Mem_Read+0x260>)
 800461e:	9300      	str	r3, [sp, #0]
 8004620:	0023      	movs	r3, r4
 8004622:	f000 fc47 	bl	8004eb4 <I2C_TransferConfig>
 8004626:	e012      	b.n	800464e <HAL_I2C_Mem_Read+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800462c:	b29a      	uxth	r2, r3
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004636:	b2da      	uxtb	r2, r3
 8004638:	2380      	movs	r3, #128	; 0x80
 800463a:	049c      	lsls	r4, r3, #18
 800463c:	230a      	movs	r3, #10
 800463e:	18fb      	adds	r3, r7, r3
 8004640:	8819      	ldrh	r1, [r3, #0]
 8004642:	68f8      	ldr	r0, [r7, #12]
 8004644:	4b4c      	ldr	r3, [pc, #304]	; (8004778 <HAL_I2C_Mem_Read+0x260>)
 8004646:	9300      	str	r3, [sp, #0]
 8004648:	0023      	movs	r3, r4
 800464a:	f000 fc33 	bl	8004eb4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800464e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004650:	68f8      	ldr	r0, [r7, #12]
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	9300      	str	r3, [sp, #0]
 8004656:	0013      	movs	r3, r2
 8004658:	2200      	movs	r2, #0
 800465a:	2104      	movs	r1, #4
 800465c:	f000 fa9e 	bl	8004b9c <I2C_WaitOnFlagUntilTimeout>
 8004660:	1e03      	subs	r3, r0, #0
 8004662:	d001      	beq.n	8004668 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8004664:	2301      	movs	r3, #1
 8004666:	e082      	b.n	800476e <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004672:	b2d2      	uxtb	r2, r2
 8004674:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800467a:	1c5a      	adds	r2, r3, #1
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004684:	3b01      	subs	r3, #1
 8004686:	b29a      	uxth	r2, r3
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004690:	b29b      	uxth	r3, r3
 8004692:	3b01      	subs	r3, #1
 8004694:	b29a      	uxth	r2, r3
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800469e:	b29b      	uxth	r3, r3
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d03a      	beq.n	800471a <HAL_I2C_Mem_Read+0x202>
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d136      	bne.n	800471a <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80046ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046ae:	68f8      	ldr	r0, [r7, #12]
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	9300      	str	r3, [sp, #0]
 80046b4:	0013      	movs	r3, r2
 80046b6:	2200      	movs	r2, #0
 80046b8:	2180      	movs	r1, #128	; 0x80
 80046ba:	f000 fa6f 	bl	8004b9c <I2C_WaitOnFlagUntilTimeout>
 80046be:	1e03      	subs	r3, r0, #0
 80046c0:	d001      	beq.n	80046c6 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e053      	b.n	800476e <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046ca:	b29b      	uxth	r3, r3
 80046cc:	2bff      	cmp	r3, #255	; 0xff
 80046ce:	d911      	bls.n	80046f4 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	22ff      	movs	r2, #255	; 0xff
 80046d4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046da:	b2da      	uxtb	r2, r3
 80046dc:	2380      	movs	r3, #128	; 0x80
 80046de:	045c      	lsls	r4, r3, #17
 80046e0:	230a      	movs	r3, #10
 80046e2:	18fb      	adds	r3, r7, r3
 80046e4:	8819      	ldrh	r1, [r3, #0]
 80046e6:	68f8      	ldr	r0, [r7, #12]
 80046e8:	2300      	movs	r3, #0
 80046ea:	9300      	str	r3, [sp, #0]
 80046ec:	0023      	movs	r3, r4
 80046ee:	f000 fbe1 	bl	8004eb4 <I2C_TransferConfig>
 80046f2:	e012      	b.n	800471a <HAL_I2C_Mem_Read+0x202>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046f8:	b29a      	uxth	r2, r3
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004702:	b2da      	uxtb	r2, r3
 8004704:	2380      	movs	r3, #128	; 0x80
 8004706:	049c      	lsls	r4, r3, #18
 8004708:	230a      	movs	r3, #10
 800470a:	18fb      	adds	r3, r7, r3
 800470c:	8819      	ldrh	r1, [r3, #0]
 800470e:	68f8      	ldr	r0, [r7, #12]
 8004710:	2300      	movs	r3, #0
 8004712:	9300      	str	r3, [sp, #0]
 8004714:	0023      	movs	r3, r4
 8004716:	f000 fbcd 	bl	8004eb4 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800471e:	b29b      	uxth	r3, r3
 8004720:	2b00      	cmp	r3, #0
 8004722:	d194      	bne.n	800464e <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004724:	697a      	ldr	r2, [r7, #20]
 8004726:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	0018      	movs	r0, r3
 800472c:	f000 fab4 	bl	8004c98 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004730:	1e03      	subs	r3, r0, #0
 8004732:	d001      	beq.n	8004738 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	e01a      	b.n	800476e <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	2220      	movs	r2, #32
 800473e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	685a      	ldr	r2, [r3, #4]
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	490c      	ldr	r1, [pc, #48]	; (800477c <HAL_I2C_Mem_Read+0x264>)
 800474c:	400a      	ands	r2, r1
 800474e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	2241      	movs	r2, #65	; 0x41
 8004754:	2120      	movs	r1, #32
 8004756:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2242      	movs	r2, #66	; 0x42
 800475c:	2100      	movs	r1, #0
 800475e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	2240      	movs	r2, #64	; 0x40
 8004764:	2100      	movs	r1, #0
 8004766:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004768:	2300      	movs	r3, #0
 800476a:	e000      	b.n	800476e <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 800476c:	2302      	movs	r3, #2
  }
}
 800476e:	0018      	movs	r0, r3
 8004770:	46bd      	mov	sp, r7
 8004772:	b007      	add	sp, #28
 8004774:	bd90      	pop	{r4, r7, pc}
 8004776:	46c0      	nop			; (mov r8, r8)
 8004778:	80002400 	.word	0x80002400
 800477c:	fe00e800 	.word	0xfe00e800

08004780 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b08a      	sub	sp, #40	; 0x28
 8004784:	af02      	add	r7, sp, #8
 8004786:	60f8      	str	r0, [r7, #12]
 8004788:	607a      	str	r2, [r7, #4]
 800478a:	603b      	str	r3, [r7, #0]
 800478c:	230a      	movs	r3, #10
 800478e:	18fb      	adds	r3, r7, r3
 8004790:	1c0a      	adds	r2, r1, #0
 8004792:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8004794:	2300      	movs	r3, #0
 8004796:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2241      	movs	r2, #65	; 0x41
 800479c:	5c9b      	ldrb	r3, [r3, r2]
 800479e:	b2db      	uxtb	r3, r3
 80047a0:	2b20      	cmp	r3, #32
 80047a2:	d000      	beq.n	80047a6 <HAL_I2C_IsDeviceReady+0x26>
 80047a4:	e0fe      	b.n	80049a4 <HAL_I2C_IsDeviceReady+0x224>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	699a      	ldr	r2, [r3, #24]
 80047ac:	2380      	movs	r3, #128	; 0x80
 80047ae:	021b      	lsls	r3, r3, #8
 80047b0:	401a      	ands	r2, r3
 80047b2:	2380      	movs	r3, #128	; 0x80
 80047b4:	021b      	lsls	r3, r3, #8
 80047b6:	429a      	cmp	r2, r3
 80047b8:	d101      	bne.n	80047be <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 80047ba:	2302      	movs	r3, #2
 80047bc:	e0f3      	b.n	80049a6 <HAL_I2C_IsDeviceReady+0x226>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2240      	movs	r2, #64	; 0x40
 80047c2:	5c9b      	ldrb	r3, [r3, r2]
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	d101      	bne.n	80047cc <HAL_I2C_IsDeviceReady+0x4c>
 80047c8:	2302      	movs	r3, #2
 80047ca:	e0ec      	b.n	80049a6 <HAL_I2C_IsDeviceReady+0x226>
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2240      	movs	r2, #64	; 0x40
 80047d0:	2101      	movs	r1, #1
 80047d2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2241      	movs	r2, #65	; 0x41
 80047d8:	2124      	movs	r1, #36	; 0x24
 80047da:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2200      	movs	r2, #0
 80047e0:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	68db      	ldr	r3, [r3, #12]
 80047e6:	2b01      	cmp	r3, #1
 80047e8:	d107      	bne.n	80047fa <HAL_I2C_IsDeviceReady+0x7a>
 80047ea:	230a      	movs	r3, #10
 80047ec:	18fb      	adds	r3, r7, r3
 80047ee:	881b      	ldrh	r3, [r3, #0]
 80047f0:	059b      	lsls	r3, r3, #22
 80047f2:	0d9b      	lsrs	r3, r3, #22
 80047f4:	4a6e      	ldr	r2, [pc, #440]	; (80049b0 <HAL_I2C_IsDeviceReady+0x230>)
 80047f6:	431a      	orrs	r2, r3
 80047f8:	e007      	b.n	800480a <HAL_I2C_IsDeviceReady+0x8a>
 80047fa:	230a      	movs	r3, #10
 80047fc:	18fb      	adds	r3, r7, r3
 80047fe:	881b      	ldrh	r3, [r3, #0]
 8004800:	059b      	lsls	r3, r3, #22
 8004802:	0d9b      	lsrs	r3, r3, #22
 8004804:	22a0      	movs	r2, #160	; 0xa0
 8004806:	0192      	lsls	r2, r2, #6
 8004808:	431a      	orrs	r2, r3
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8004810:	f7fe fd3e 	bl	8003290 <HAL_GetTick>
 8004814:	0003      	movs	r3, r0
 8004816:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	699b      	ldr	r3, [r3, #24]
 800481e:	2220      	movs	r2, #32
 8004820:	4013      	ands	r3, r2
 8004822:	3b20      	subs	r3, #32
 8004824:	425a      	negs	r2, r3
 8004826:	4153      	adcs	r3, r2
 8004828:	b2da      	uxtb	r2, r3
 800482a:	231f      	movs	r3, #31
 800482c:	18fb      	adds	r3, r7, r3
 800482e:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	699b      	ldr	r3, [r3, #24]
 8004836:	2210      	movs	r2, #16
 8004838:	4013      	ands	r3, r2
 800483a:	3b10      	subs	r3, #16
 800483c:	425a      	negs	r2, r3
 800483e:	4153      	adcs	r3, r2
 8004840:	b2da      	uxtb	r2, r3
 8004842:	231e      	movs	r3, #30
 8004844:	18fb      	adds	r3, r7, r3
 8004846:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8004848:	e035      	b.n	80048b6 <HAL_I2C_IsDeviceReady+0x136>
      {
        if (Timeout != HAL_MAX_DELAY)
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	3301      	adds	r3, #1
 800484e:	d01a      	beq.n	8004886 <HAL_I2C_IsDeviceReady+0x106>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004850:	f7fe fd1e 	bl	8003290 <HAL_GetTick>
 8004854:	0002      	movs	r2, r0
 8004856:	69bb      	ldr	r3, [r7, #24]
 8004858:	1ad3      	subs	r3, r2, r3
 800485a:	683a      	ldr	r2, [r7, #0]
 800485c:	429a      	cmp	r2, r3
 800485e:	d302      	bcc.n	8004866 <HAL_I2C_IsDeviceReady+0xe6>
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d10f      	bne.n	8004886 <HAL_I2C_IsDeviceReady+0x106>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2241      	movs	r2, #65	; 0x41
 800486a:	2120      	movs	r1, #32
 800486c:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004872:	2220      	movs	r2, #32
 8004874:	431a      	orrs	r2, r3
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	2240      	movs	r2, #64	; 0x40
 800487e:	2100      	movs	r1, #0
 8004880:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 8004882:	2301      	movs	r3, #1
 8004884:	e08f      	b.n	80049a6 <HAL_I2C_IsDeviceReady+0x226>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	699b      	ldr	r3, [r3, #24]
 800488c:	2220      	movs	r2, #32
 800488e:	4013      	ands	r3, r2
 8004890:	3b20      	subs	r3, #32
 8004892:	425a      	negs	r2, r3
 8004894:	4153      	adcs	r3, r2
 8004896:	b2da      	uxtb	r2, r3
 8004898:	231f      	movs	r3, #31
 800489a:	18fb      	adds	r3, r7, r3
 800489c:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	699b      	ldr	r3, [r3, #24]
 80048a4:	2210      	movs	r2, #16
 80048a6:	4013      	ands	r3, r2
 80048a8:	3b10      	subs	r3, #16
 80048aa:	425a      	negs	r2, r3
 80048ac:	4153      	adcs	r3, r2
 80048ae:	b2da      	uxtb	r2, r3
 80048b0:	231e      	movs	r3, #30
 80048b2:	18fb      	adds	r3, r7, r3
 80048b4:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80048b6:	231f      	movs	r3, #31
 80048b8:	18fb      	adds	r3, r7, r3
 80048ba:	781b      	ldrb	r3, [r3, #0]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d104      	bne.n	80048ca <HAL_I2C_IsDeviceReady+0x14a>
 80048c0:	231e      	movs	r3, #30
 80048c2:	18fb      	adds	r3, r7, r3
 80048c4:	781b      	ldrb	r3, [r3, #0]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d0bf      	beq.n	800484a <HAL_I2C_IsDeviceReady+0xca>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	699b      	ldr	r3, [r3, #24]
 80048d0:	2210      	movs	r2, #16
 80048d2:	4013      	ands	r3, r2
 80048d4:	2b10      	cmp	r3, #16
 80048d6:	d01a      	beq.n	800490e <HAL_I2C_IsDeviceReady+0x18e>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80048d8:	683a      	ldr	r2, [r7, #0]
 80048da:	68f8      	ldr	r0, [r7, #12]
 80048dc:	69bb      	ldr	r3, [r7, #24]
 80048de:	9300      	str	r3, [sp, #0]
 80048e0:	0013      	movs	r3, r2
 80048e2:	2200      	movs	r2, #0
 80048e4:	2120      	movs	r1, #32
 80048e6:	f000 f959 	bl	8004b9c <I2C_WaitOnFlagUntilTimeout>
 80048ea:	1e03      	subs	r3, r0, #0
 80048ec:	d001      	beq.n	80048f2 <HAL_I2C_IsDeviceReady+0x172>
        {
          return HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	e059      	b.n	80049a6 <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	2220      	movs	r2, #32
 80048f8:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2241      	movs	r2, #65	; 0x41
 80048fe:	2120      	movs	r1, #32
 8004900:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2240      	movs	r2, #64	; 0x40
 8004906:	2100      	movs	r1, #0
 8004908:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 800490a:	2300      	movs	r3, #0
 800490c:	e04b      	b.n	80049a6 <HAL_I2C_IsDeviceReady+0x226>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800490e:	683a      	ldr	r2, [r7, #0]
 8004910:	68f8      	ldr	r0, [r7, #12]
 8004912:	69bb      	ldr	r3, [r7, #24]
 8004914:	9300      	str	r3, [sp, #0]
 8004916:	0013      	movs	r3, r2
 8004918:	2200      	movs	r2, #0
 800491a:	2120      	movs	r1, #32
 800491c:	f000 f93e 	bl	8004b9c <I2C_WaitOnFlagUntilTimeout>
 8004920:	1e03      	subs	r3, r0, #0
 8004922:	d001      	beq.n	8004928 <HAL_I2C_IsDeviceReady+0x1a8>
        {
          return HAL_ERROR;
 8004924:	2301      	movs	r3, #1
 8004926:	e03e      	b.n	80049a6 <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	2210      	movs	r2, #16
 800492e:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	2220      	movs	r2, #32
 8004936:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	687a      	ldr	r2, [r7, #4]
 800493c:	429a      	cmp	r2, r3
 800493e:	d119      	bne.n	8004974 <HAL_I2C_IsDeviceReady+0x1f4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	685a      	ldr	r2, [r3, #4]
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	2180      	movs	r1, #128	; 0x80
 800494c:	01c9      	lsls	r1, r1, #7
 800494e:	430a      	orrs	r2, r1
 8004950:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004952:	683a      	ldr	r2, [r7, #0]
 8004954:	68f8      	ldr	r0, [r7, #12]
 8004956:	69bb      	ldr	r3, [r7, #24]
 8004958:	9300      	str	r3, [sp, #0]
 800495a:	0013      	movs	r3, r2
 800495c:	2200      	movs	r2, #0
 800495e:	2120      	movs	r1, #32
 8004960:	f000 f91c 	bl	8004b9c <I2C_WaitOnFlagUntilTimeout>
 8004964:	1e03      	subs	r3, r0, #0
 8004966:	d001      	beq.n	800496c <HAL_I2C_IsDeviceReady+0x1ec>
        {
          return HAL_ERROR;
 8004968:	2301      	movs	r3, #1
 800496a:	e01c      	b.n	80049a6 <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	2220      	movs	r2, #32
 8004972:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	3301      	adds	r3, #1
 8004978:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	687a      	ldr	r2, [r7, #4]
 800497e:	429a      	cmp	r2, r3
 8004980:	d900      	bls.n	8004984 <HAL_I2C_IsDeviceReady+0x204>
 8004982:	e72e      	b.n	80047e2 <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2241      	movs	r2, #65	; 0x41
 8004988:	2120      	movs	r1, #32
 800498a:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004990:	2220      	movs	r2, #32
 8004992:	431a      	orrs	r2, r3
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2240      	movs	r2, #64	; 0x40
 800499c:	2100      	movs	r1, #0
 800499e:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80049a0:	2301      	movs	r3, #1
 80049a2:	e000      	b.n	80049a6 <HAL_I2C_IsDeviceReady+0x226>
  }
  else
  {
    return HAL_BUSY;
 80049a4:	2302      	movs	r3, #2
  }
}
 80049a6:	0018      	movs	r0, r3
 80049a8:	46bd      	mov	sp, r7
 80049aa:	b008      	add	sp, #32
 80049ac:	bd80      	pop	{r7, pc}
 80049ae:	46c0      	nop			; (mov r8, r8)
 80049b0:	02002000 	.word	0x02002000

080049b4 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b082      	sub	sp, #8
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2241      	movs	r2, #65	; 0x41
 80049c0:	5c9b      	ldrb	r3, [r3, r2]
 80049c2:	b2db      	uxtb	r3, r3
}
 80049c4:	0018      	movs	r0, r3
 80049c6:	46bd      	mov	sp, r7
 80049c8:	b002      	add	sp, #8
 80049ca:	bd80      	pop	{r7, pc}

080049cc <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80049cc:	b5b0      	push	{r4, r5, r7, lr}
 80049ce:	b086      	sub	sp, #24
 80049d0:	af02      	add	r7, sp, #8
 80049d2:	60f8      	str	r0, [r7, #12]
 80049d4:	000c      	movs	r4, r1
 80049d6:	0010      	movs	r0, r2
 80049d8:	0019      	movs	r1, r3
 80049da:	250a      	movs	r5, #10
 80049dc:	197b      	adds	r3, r7, r5
 80049de:	1c22      	adds	r2, r4, #0
 80049e0:	801a      	strh	r2, [r3, #0]
 80049e2:	2308      	movs	r3, #8
 80049e4:	18fb      	adds	r3, r7, r3
 80049e6:	1c02      	adds	r2, r0, #0
 80049e8:	801a      	strh	r2, [r3, #0]
 80049ea:	1dbb      	adds	r3, r7, #6
 80049ec:	1c0a      	adds	r2, r1, #0
 80049ee:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80049f0:	1dbb      	adds	r3, r7, #6
 80049f2:	881b      	ldrh	r3, [r3, #0]
 80049f4:	b2da      	uxtb	r2, r3
 80049f6:	2380      	movs	r3, #128	; 0x80
 80049f8:	045c      	lsls	r4, r3, #17
 80049fa:	197b      	adds	r3, r7, r5
 80049fc:	8819      	ldrh	r1, [r3, #0]
 80049fe:	68f8      	ldr	r0, [r7, #12]
 8004a00:	4b23      	ldr	r3, [pc, #140]	; (8004a90 <I2C_RequestMemoryWrite+0xc4>)
 8004a02:	9300      	str	r3, [sp, #0]
 8004a04:	0023      	movs	r3, r4
 8004a06:	f000 fa55 	bl	8004eb4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a0c:	6a39      	ldr	r1, [r7, #32]
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	0018      	movs	r0, r3
 8004a12:	f000 f902 	bl	8004c1a <I2C_WaitOnTXISFlagUntilTimeout>
 8004a16:	1e03      	subs	r3, r0, #0
 8004a18:	d001      	beq.n	8004a1e <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e033      	b.n	8004a86 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004a1e:	1dbb      	adds	r3, r7, #6
 8004a20:	881b      	ldrh	r3, [r3, #0]
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	d107      	bne.n	8004a36 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004a26:	2308      	movs	r3, #8
 8004a28:	18fb      	adds	r3, r7, r3
 8004a2a:	881b      	ldrh	r3, [r3, #0]
 8004a2c:	b2da      	uxtb	r2, r3
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	629a      	str	r2, [r3, #40]	; 0x28
 8004a34:	e019      	b.n	8004a6a <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004a36:	2308      	movs	r3, #8
 8004a38:	18fb      	adds	r3, r7, r3
 8004a3a:	881b      	ldrh	r3, [r3, #0]
 8004a3c:	0a1b      	lsrs	r3, r3, #8
 8004a3e:	b29b      	uxth	r3, r3
 8004a40:	b2da      	uxtb	r2, r3
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a4a:	6a39      	ldr	r1, [r7, #32]
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	0018      	movs	r0, r3
 8004a50:	f000 f8e3 	bl	8004c1a <I2C_WaitOnTXISFlagUntilTimeout>
 8004a54:	1e03      	subs	r3, r0, #0
 8004a56:	d001      	beq.n	8004a5c <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	e014      	b.n	8004a86 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004a5c:	2308      	movs	r3, #8
 8004a5e:	18fb      	adds	r3, r7, r3
 8004a60:	881b      	ldrh	r3, [r3, #0]
 8004a62:	b2da      	uxtb	r2, r3
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004a6a:	6a3a      	ldr	r2, [r7, #32]
 8004a6c:	68f8      	ldr	r0, [r7, #12]
 8004a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a70:	9300      	str	r3, [sp, #0]
 8004a72:	0013      	movs	r3, r2
 8004a74:	2200      	movs	r2, #0
 8004a76:	2180      	movs	r1, #128	; 0x80
 8004a78:	f000 f890 	bl	8004b9c <I2C_WaitOnFlagUntilTimeout>
 8004a7c:	1e03      	subs	r3, r0, #0
 8004a7e:	d001      	beq.n	8004a84 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8004a80:	2301      	movs	r3, #1
 8004a82:	e000      	b.n	8004a86 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8004a84:	2300      	movs	r3, #0
}
 8004a86:	0018      	movs	r0, r3
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	b004      	add	sp, #16
 8004a8c:	bdb0      	pop	{r4, r5, r7, pc}
 8004a8e:	46c0      	nop			; (mov r8, r8)
 8004a90:	80002000 	.word	0x80002000

08004a94 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004a94:	b5b0      	push	{r4, r5, r7, lr}
 8004a96:	b086      	sub	sp, #24
 8004a98:	af02      	add	r7, sp, #8
 8004a9a:	60f8      	str	r0, [r7, #12]
 8004a9c:	000c      	movs	r4, r1
 8004a9e:	0010      	movs	r0, r2
 8004aa0:	0019      	movs	r1, r3
 8004aa2:	250a      	movs	r5, #10
 8004aa4:	197b      	adds	r3, r7, r5
 8004aa6:	1c22      	adds	r2, r4, #0
 8004aa8:	801a      	strh	r2, [r3, #0]
 8004aaa:	2308      	movs	r3, #8
 8004aac:	18fb      	adds	r3, r7, r3
 8004aae:	1c02      	adds	r2, r0, #0
 8004ab0:	801a      	strh	r2, [r3, #0]
 8004ab2:	1dbb      	adds	r3, r7, #6
 8004ab4:	1c0a      	adds	r2, r1, #0
 8004ab6:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004ab8:	1dbb      	adds	r3, r7, #6
 8004aba:	881b      	ldrh	r3, [r3, #0]
 8004abc:	b2da      	uxtb	r2, r3
 8004abe:	197b      	adds	r3, r7, r5
 8004ac0:	8819      	ldrh	r1, [r3, #0]
 8004ac2:	68f8      	ldr	r0, [r7, #12]
 8004ac4:	4b23      	ldr	r3, [pc, #140]	; (8004b54 <I2C_RequestMemoryRead+0xc0>)
 8004ac6:	9300      	str	r3, [sp, #0]
 8004ac8:	2300      	movs	r3, #0
 8004aca:	f000 f9f3 	bl	8004eb4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ace:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ad0:	6a39      	ldr	r1, [r7, #32]
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	0018      	movs	r0, r3
 8004ad6:	f000 f8a0 	bl	8004c1a <I2C_WaitOnTXISFlagUntilTimeout>
 8004ada:	1e03      	subs	r3, r0, #0
 8004adc:	d001      	beq.n	8004ae2 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e033      	b.n	8004b4a <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004ae2:	1dbb      	adds	r3, r7, #6
 8004ae4:	881b      	ldrh	r3, [r3, #0]
 8004ae6:	2b01      	cmp	r3, #1
 8004ae8:	d107      	bne.n	8004afa <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004aea:	2308      	movs	r3, #8
 8004aec:	18fb      	adds	r3, r7, r3
 8004aee:	881b      	ldrh	r3, [r3, #0]
 8004af0:	b2da      	uxtb	r2, r3
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	629a      	str	r2, [r3, #40]	; 0x28
 8004af8:	e019      	b.n	8004b2e <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004afa:	2308      	movs	r3, #8
 8004afc:	18fb      	adds	r3, r7, r3
 8004afe:	881b      	ldrh	r3, [r3, #0]
 8004b00:	0a1b      	lsrs	r3, r3, #8
 8004b02:	b29b      	uxth	r3, r3
 8004b04:	b2da      	uxtb	r2, r3
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b0e:	6a39      	ldr	r1, [r7, #32]
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	0018      	movs	r0, r3
 8004b14:	f000 f881 	bl	8004c1a <I2C_WaitOnTXISFlagUntilTimeout>
 8004b18:	1e03      	subs	r3, r0, #0
 8004b1a:	d001      	beq.n	8004b20 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	e014      	b.n	8004b4a <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004b20:	2308      	movs	r3, #8
 8004b22:	18fb      	adds	r3, r7, r3
 8004b24:	881b      	ldrh	r3, [r3, #0]
 8004b26:	b2da      	uxtb	r2, r3
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004b2e:	6a3a      	ldr	r2, [r7, #32]
 8004b30:	68f8      	ldr	r0, [r7, #12]
 8004b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b34:	9300      	str	r3, [sp, #0]
 8004b36:	0013      	movs	r3, r2
 8004b38:	2200      	movs	r2, #0
 8004b3a:	2140      	movs	r1, #64	; 0x40
 8004b3c:	f000 f82e 	bl	8004b9c <I2C_WaitOnFlagUntilTimeout>
 8004b40:	1e03      	subs	r3, r0, #0
 8004b42:	d001      	beq.n	8004b48 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8004b44:	2301      	movs	r3, #1
 8004b46:	e000      	b.n	8004b4a <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8004b48:	2300      	movs	r3, #0
}
 8004b4a:	0018      	movs	r0, r3
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	b004      	add	sp, #16
 8004b50:	bdb0      	pop	{r4, r5, r7, pc}
 8004b52:	46c0      	nop			; (mov r8, r8)
 8004b54:	80002000 	.word	0x80002000

08004b58 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b082      	sub	sp, #8
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	699b      	ldr	r3, [r3, #24]
 8004b66:	2202      	movs	r2, #2
 8004b68:	4013      	ands	r3, r2
 8004b6a:	2b02      	cmp	r3, #2
 8004b6c:	d103      	bne.n	8004b76 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	2200      	movs	r2, #0
 8004b74:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	699b      	ldr	r3, [r3, #24]
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	4013      	ands	r3, r2
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	d007      	beq.n	8004b94 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	699a      	ldr	r2, [r3, #24]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	2101      	movs	r1, #1
 8004b90:	430a      	orrs	r2, r1
 8004b92:	619a      	str	r2, [r3, #24]
  }
}
 8004b94:	46c0      	nop			; (mov r8, r8)
 8004b96:	46bd      	mov	sp, r7
 8004b98:	b002      	add	sp, #8
 8004b9a:	bd80      	pop	{r7, pc}

08004b9c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b084      	sub	sp, #16
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	60f8      	str	r0, [r7, #12]
 8004ba4:	60b9      	str	r1, [r7, #8]
 8004ba6:	603b      	str	r3, [r7, #0]
 8004ba8:	1dfb      	adds	r3, r7, #7
 8004baa:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004bac:	e021      	b.n	8004bf2 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	3301      	adds	r3, #1
 8004bb2:	d01e      	beq.n	8004bf2 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bb4:	f7fe fb6c 	bl	8003290 <HAL_GetTick>
 8004bb8:	0002      	movs	r2, r0
 8004bba:	69bb      	ldr	r3, [r7, #24]
 8004bbc:	1ad3      	subs	r3, r2, r3
 8004bbe:	683a      	ldr	r2, [r7, #0]
 8004bc0:	429a      	cmp	r2, r3
 8004bc2:	d302      	bcc.n	8004bca <I2C_WaitOnFlagUntilTimeout+0x2e>
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d113      	bne.n	8004bf2 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bce:	2220      	movs	r2, #32
 8004bd0:	431a      	orrs	r2, r3
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	2241      	movs	r2, #65	; 0x41
 8004bda:	2120      	movs	r1, #32
 8004bdc:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	2242      	movs	r2, #66	; 0x42
 8004be2:	2100      	movs	r1, #0
 8004be4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2240      	movs	r2, #64	; 0x40
 8004bea:	2100      	movs	r1, #0
 8004bec:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	e00f      	b.n	8004c12 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	699b      	ldr	r3, [r3, #24]
 8004bf8:	68ba      	ldr	r2, [r7, #8]
 8004bfa:	4013      	ands	r3, r2
 8004bfc:	68ba      	ldr	r2, [r7, #8]
 8004bfe:	1ad3      	subs	r3, r2, r3
 8004c00:	425a      	negs	r2, r3
 8004c02:	4153      	adcs	r3, r2
 8004c04:	b2db      	uxtb	r3, r3
 8004c06:	001a      	movs	r2, r3
 8004c08:	1dfb      	adds	r3, r7, #7
 8004c0a:	781b      	ldrb	r3, [r3, #0]
 8004c0c:	429a      	cmp	r2, r3
 8004c0e:	d0ce      	beq.n	8004bae <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004c10:	2300      	movs	r3, #0
}
 8004c12:	0018      	movs	r0, r3
 8004c14:	46bd      	mov	sp, r7
 8004c16:	b004      	add	sp, #16
 8004c18:	bd80      	pop	{r7, pc}

08004c1a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c1a:	b580      	push	{r7, lr}
 8004c1c:	b084      	sub	sp, #16
 8004c1e:	af00      	add	r7, sp, #0
 8004c20:	60f8      	str	r0, [r7, #12]
 8004c22:	60b9      	str	r1, [r7, #8]
 8004c24:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004c26:	e02b      	b.n	8004c80 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c28:	687a      	ldr	r2, [r7, #4]
 8004c2a:	68b9      	ldr	r1, [r7, #8]
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	0018      	movs	r0, r3
 8004c30:	f000 f8da 	bl	8004de8 <I2C_IsAcknowledgeFailed>
 8004c34:	1e03      	subs	r3, r0, #0
 8004c36:	d001      	beq.n	8004c3c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	e029      	b.n	8004c90 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	3301      	adds	r3, #1
 8004c40:	d01e      	beq.n	8004c80 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c42:	f7fe fb25 	bl	8003290 <HAL_GetTick>
 8004c46:	0002      	movs	r2, r0
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	1ad3      	subs	r3, r2, r3
 8004c4c:	68ba      	ldr	r2, [r7, #8]
 8004c4e:	429a      	cmp	r2, r3
 8004c50:	d302      	bcc.n	8004c58 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d113      	bne.n	8004c80 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c5c:	2220      	movs	r2, #32
 8004c5e:	431a      	orrs	r2, r3
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2241      	movs	r2, #65	; 0x41
 8004c68:	2120      	movs	r1, #32
 8004c6a:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2242      	movs	r2, #66	; 0x42
 8004c70:	2100      	movs	r1, #0
 8004c72:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2240      	movs	r2, #64	; 0x40
 8004c78:	2100      	movs	r1, #0
 8004c7a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	e007      	b.n	8004c90 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	699b      	ldr	r3, [r3, #24]
 8004c86:	2202      	movs	r2, #2
 8004c88:	4013      	ands	r3, r2
 8004c8a:	2b02      	cmp	r3, #2
 8004c8c:	d1cc      	bne.n	8004c28 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004c8e:	2300      	movs	r3, #0
}
 8004c90:	0018      	movs	r0, r3
 8004c92:	46bd      	mov	sp, r7
 8004c94:	b004      	add	sp, #16
 8004c96:	bd80      	pop	{r7, pc}

08004c98 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b084      	sub	sp, #16
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	60f8      	str	r0, [r7, #12]
 8004ca0:	60b9      	str	r1, [r7, #8]
 8004ca2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004ca4:	e028      	b.n	8004cf8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ca6:	687a      	ldr	r2, [r7, #4]
 8004ca8:	68b9      	ldr	r1, [r7, #8]
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	0018      	movs	r0, r3
 8004cae:	f000 f89b 	bl	8004de8 <I2C_IsAcknowledgeFailed>
 8004cb2:	1e03      	subs	r3, r0, #0
 8004cb4:	d001      	beq.n	8004cba <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e026      	b.n	8004d08 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cba:	f7fe fae9 	bl	8003290 <HAL_GetTick>
 8004cbe:	0002      	movs	r2, r0
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	1ad3      	subs	r3, r2, r3
 8004cc4:	68ba      	ldr	r2, [r7, #8]
 8004cc6:	429a      	cmp	r2, r3
 8004cc8:	d302      	bcc.n	8004cd0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d113      	bne.n	8004cf8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cd4:	2220      	movs	r2, #32
 8004cd6:	431a      	orrs	r2, r3
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2241      	movs	r2, #65	; 0x41
 8004ce0:	2120      	movs	r1, #32
 8004ce2:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2242      	movs	r2, #66	; 0x42
 8004ce8:	2100      	movs	r1, #0
 8004cea:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	2240      	movs	r2, #64	; 0x40
 8004cf0:	2100      	movs	r1, #0
 8004cf2:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	e007      	b.n	8004d08 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	699b      	ldr	r3, [r3, #24]
 8004cfe:	2220      	movs	r2, #32
 8004d00:	4013      	ands	r3, r2
 8004d02:	2b20      	cmp	r3, #32
 8004d04:	d1cf      	bne.n	8004ca6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004d06:	2300      	movs	r3, #0
}
 8004d08:	0018      	movs	r0, r3
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	b004      	add	sp, #16
 8004d0e:	bd80      	pop	{r7, pc}

08004d10 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b084      	sub	sp, #16
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	60f8      	str	r0, [r7, #12]
 8004d18:	60b9      	str	r1, [r7, #8]
 8004d1a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004d1c:	e055      	b.n	8004dca <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d1e:	687a      	ldr	r2, [r7, #4]
 8004d20:	68b9      	ldr	r1, [r7, #8]
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	0018      	movs	r0, r3
 8004d26:	f000 f85f 	bl	8004de8 <I2C_IsAcknowledgeFailed>
 8004d2a:	1e03      	subs	r3, r0, #0
 8004d2c:	d001      	beq.n	8004d32 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	e053      	b.n	8004dda <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	699b      	ldr	r3, [r3, #24]
 8004d38:	2220      	movs	r2, #32
 8004d3a:	4013      	ands	r3, r2
 8004d3c:	2b20      	cmp	r3, #32
 8004d3e:	d129      	bne.n	8004d94 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	699b      	ldr	r3, [r3, #24]
 8004d46:	2204      	movs	r2, #4
 8004d48:	4013      	ands	r3, r2
 8004d4a:	2b04      	cmp	r3, #4
 8004d4c:	d105      	bne.n	8004d5a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d001      	beq.n	8004d5a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8004d56:	2300      	movs	r3, #0
 8004d58:	e03f      	b.n	8004dda <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	2220      	movs	r2, #32
 8004d60:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	685a      	ldr	r2, [r3, #4]
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	491d      	ldr	r1, [pc, #116]	; (8004de4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8004d6e:	400a      	ands	r2, r1
 8004d70:	605a      	str	r2, [r3, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2200      	movs	r2, #0
 8004d76:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2241      	movs	r2, #65	; 0x41
 8004d7c:	2120      	movs	r1, #32
 8004d7e:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2242      	movs	r2, #66	; 0x42
 8004d84:	2100      	movs	r1, #0
 8004d86:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	2240      	movs	r2, #64	; 0x40
 8004d8c:	2100      	movs	r1, #0
 8004d8e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004d90:	2301      	movs	r3, #1
 8004d92:	e022      	b.n	8004dda <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d94:	f7fe fa7c 	bl	8003290 <HAL_GetTick>
 8004d98:	0002      	movs	r2, r0
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	1ad3      	subs	r3, r2, r3
 8004d9e:	68ba      	ldr	r2, [r7, #8]
 8004da0:	429a      	cmp	r2, r3
 8004da2:	d302      	bcc.n	8004daa <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d10f      	bne.n	8004dca <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dae:	2220      	movs	r2, #32
 8004db0:	431a      	orrs	r2, r3
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2241      	movs	r2, #65	; 0x41
 8004dba:	2120      	movs	r1, #32
 8004dbc:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2240      	movs	r2, #64	; 0x40
 8004dc2:	2100      	movs	r1, #0
 8004dc4:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	e007      	b.n	8004dda <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	699b      	ldr	r3, [r3, #24]
 8004dd0:	2204      	movs	r2, #4
 8004dd2:	4013      	ands	r3, r2
 8004dd4:	2b04      	cmp	r3, #4
 8004dd6:	d1a2      	bne.n	8004d1e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004dd8:	2300      	movs	r3, #0
}
 8004dda:	0018      	movs	r0, r3
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	b004      	add	sp, #16
 8004de0:	bd80      	pop	{r7, pc}
 8004de2:	46c0      	nop			; (mov r8, r8)
 8004de4:	fe00e800 	.word	0xfe00e800

08004de8 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b084      	sub	sp, #16
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	60f8      	str	r0, [r7, #12]
 8004df0:	60b9      	str	r1, [r7, #8]
 8004df2:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	699b      	ldr	r3, [r3, #24]
 8004dfa:	2210      	movs	r2, #16
 8004dfc:	4013      	ands	r3, r2
 8004dfe:	2b10      	cmp	r3, #16
 8004e00:	d151      	bne.n	8004ea6 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004e02:	e021      	b.n	8004e48 <I2C_IsAcknowledgeFailed+0x60>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	3301      	adds	r3, #1
 8004e08:	d01e      	beq.n	8004e48 <I2C_IsAcknowledgeFailed+0x60>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e0a:	f7fe fa41 	bl	8003290 <HAL_GetTick>
 8004e0e:	0002      	movs	r2, r0
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	1ad3      	subs	r3, r2, r3
 8004e14:	68ba      	ldr	r2, [r7, #8]
 8004e16:	429a      	cmp	r2, r3
 8004e18:	d302      	bcc.n	8004e20 <I2C_IsAcknowledgeFailed+0x38>
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d113      	bne.n	8004e48 <I2C_IsAcknowledgeFailed+0x60>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e24:	2220      	movs	r2, #32
 8004e26:	431a      	orrs	r2, r3
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2241      	movs	r2, #65	; 0x41
 8004e30:	2120      	movs	r1, #32
 8004e32:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2242      	movs	r2, #66	; 0x42
 8004e38:	2100      	movs	r1, #0
 8004e3a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2240      	movs	r2, #64	; 0x40
 8004e40:	2100      	movs	r1, #0
 8004e42:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004e44:	2301      	movs	r3, #1
 8004e46:	e02f      	b.n	8004ea8 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	699b      	ldr	r3, [r3, #24]
 8004e4e:	2220      	movs	r2, #32
 8004e50:	4013      	ands	r3, r2
 8004e52:	2b20      	cmp	r3, #32
 8004e54:	d1d6      	bne.n	8004e04 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	2210      	movs	r2, #16
 8004e5c:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	2220      	movs	r2, #32
 8004e64:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	0018      	movs	r0, r3
 8004e6a:	f7ff fe75 	bl	8004b58 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	685a      	ldr	r2, [r3, #4]
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	490d      	ldr	r1, [pc, #52]	; (8004eb0 <I2C_IsAcknowledgeFailed+0xc8>)
 8004e7a:	400a      	ands	r2, r1
 8004e7c:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e82:	2204      	movs	r2, #4
 8004e84:	431a      	orrs	r2, r3
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2241      	movs	r2, #65	; 0x41
 8004e8e:	2120      	movs	r1, #32
 8004e90:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2242      	movs	r2, #66	; 0x42
 8004e96:	2100      	movs	r1, #0
 8004e98:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2240      	movs	r2, #64	; 0x40
 8004e9e:	2100      	movs	r1, #0
 8004ea0:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	e000      	b.n	8004ea8 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8004ea6:	2300      	movs	r3, #0
}
 8004ea8:	0018      	movs	r0, r3
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	b004      	add	sp, #16
 8004eae:	bd80      	pop	{r7, pc}
 8004eb0:	fe00e800 	.word	0xfe00e800

08004eb4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004eb4:	b590      	push	{r4, r7, lr}
 8004eb6:	b085      	sub	sp, #20
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	60f8      	str	r0, [r7, #12]
 8004ebc:	0008      	movs	r0, r1
 8004ebe:	0011      	movs	r1, r2
 8004ec0:	607b      	str	r3, [r7, #4]
 8004ec2:	240a      	movs	r4, #10
 8004ec4:	193b      	adds	r3, r7, r4
 8004ec6:	1c02      	adds	r2, r0, #0
 8004ec8:	801a      	strh	r2, [r3, #0]
 8004eca:	2009      	movs	r0, #9
 8004ecc:	183b      	adds	r3, r7, r0
 8004ece:	1c0a      	adds	r2, r1, #0
 8004ed0:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	6a3a      	ldr	r2, [r7, #32]
 8004eda:	0d51      	lsrs	r1, r2, #21
 8004edc:	2280      	movs	r2, #128	; 0x80
 8004ede:	00d2      	lsls	r2, r2, #3
 8004ee0:	400a      	ands	r2, r1
 8004ee2:	490e      	ldr	r1, [pc, #56]	; (8004f1c <I2C_TransferConfig+0x68>)
 8004ee4:	430a      	orrs	r2, r1
 8004ee6:	43d2      	mvns	r2, r2
 8004ee8:	401a      	ands	r2, r3
 8004eea:	0011      	movs	r1, r2
 8004eec:	193b      	adds	r3, r7, r4
 8004eee:	881b      	ldrh	r3, [r3, #0]
 8004ef0:	059b      	lsls	r3, r3, #22
 8004ef2:	0d9a      	lsrs	r2, r3, #22
 8004ef4:	183b      	adds	r3, r7, r0
 8004ef6:	781b      	ldrb	r3, [r3, #0]
 8004ef8:	0418      	lsls	r0, r3, #16
 8004efa:	23ff      	movs	r3, #255	; 0xff
 8004efc:	041b      	lsls	r3, r3, #16
 8004efe:	4003      	ands	r3, r0
 8004f00:	431a      	orrs	r2, r3
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	431a      	orrs	r2, r3
 8004f06:	6a3b      	ldr	r3, [r7, #32]
 8004f08:	431a      	orrs	r2, r3
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	430a      	orrs	r2, r1
 8004f10:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8004f12:	46c0      	nop			; (mov r8, r8)
 8004f14:	46bd      	mov	sp, r7
 8004f16:	b005      	add	sp, #20
 8004f18:	bd90      	pop	{r4, r7, pc}
 8004f1a:	46c0      	nop			; (mov r8, r8)
 8004f1c:	03ff63ff 	.word	0x03ff63ff

08004f20 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b082      	sub	sp, #8
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
 8004f28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2241      	movs	r2, #65	; 0x41
 8004f2e:	5c9b      	ldrb	r3, [r3, r2]
 8004f30:	b2db      	uxtb	r3, r3
 8004f32:	2b20      	cmp	r3, #32
 8004f34:	d138      	bne.n	8004fa8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2240      	movs	r2, #64	; 0x40
 8004f3a:	5c9b      	ldrb	r3, [r3, r2]
 8004f3c:	2b01      	cmp	r3, #1
 8004f3e:	d101      	bne.n	8004f44 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004f40:	2302      	movs	r3, #2
 8004f42:	e032      	b.n	8004faa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2240      	movs	r2, #64	; 0x40
 8004f48:	2101      	movs	r1, #1
 8004f4a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2241      	movs	r2, #65	; 0x41
 8004f50:	2124      	movs	r1, #36	; 0x24
 8004f52:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	2101      	movs	r1, #1
 8004f60:	438a      	bics	r2, r1
 8004f62:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	681a      	ldr	r2, [r3, #0]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4911      	ldr	r1, [pc, #68]	; (8004fb4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8004f70:	400a      	ands	r2, r1
 8004f72:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	6819      	ldr	r1, [r3, #0]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	683a      	ldr	r2, [r7, #0]
 8004f80:	430a      	orrs	r2, r1
 8004f82:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	681a      	ldr	r2, [r3, #0]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	2101      	movs	r1, #1
 8004f90:	430a      	orrs	r2, r1
 8004f92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2241      	movs	r2, #65	; 0x41
 8004f98:	2120      	movs	r1, #32
 8004f9a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2240      	movs	r2, #64	; 0x40
 8004fa0:	2100      	movs	r1, #0
 8004fa2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	e000      	b.n	8004faa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004fa8:	2302      	movs	r3, #2
  }
}
 8004faa:	0018      	movs	r0, r3
 8004fac:	46bd      	mov	sp, r7
 8004fae:	b002      	add	sp, #8
 8004fb0:	bd80      	pop	{r7, pc}
 8004fb2:	46c0      	nop			; (mov r8, r8)
 8004fb4:	ffffefff 	.word	0xffffefff

08004fb8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b084      	sub	sp, #16
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
 8004fc0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2241      	movs	r2, #65	; 0x41
 8004fc6:	5c9b      	ldrb	r3, [r3, r2]
 8004fc8:	b2db      	uxtb	r3, r3
 8004fca:	2b20      	cmp	r3, #32
 8004fcc:	d139      	bne.n	8005042 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2240      	movs	r2, #64	; 0x40
 8004fd2:	5c9b      	ldrb	r3, [r3, r2]
 8004fd4:	2b01      	cmp	r3, #1
 8004fd6:	d101      	bne.n	8004fdc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004fd8:	2302      	movs	r3, #2
 8004fda:	e033      	b.n	8005044 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2240      	movs	r2, #64	; 0x40
 8004fe0:	2101      	movs	r1, #1
 8004fe2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2241      	movs	r2, #65	; 0x41
 8004fe8:	2124      	movs	r1, #36	; 0x24
 8004fea:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	681a      	ldr	r2, [r3, #0]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	2101      	movs	r1, #1
 8004ff8:	438a      	bics	r2, r1
 8004ffa:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	4a11      	ldr	r2, [pc, #68]	; (800504c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8005008:	4013      	ands	r3, r2
 800500a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	021b      	lsls	r3, r3, #8
 8005010:	68fa      	ldr	r2, [r7, #12]
 8005012:	4313      	orrs	r3, r2
 8005014:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	68fa      	ldr	r2, [r7, #12]
 800501c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	681a      	ldr	r2, [r3, #0]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	2101      	movs	r1, #1
 800502a:	430a      	orrs	r2, r1
 800502c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2241      	movs	r2, #65	; 0x41
 8005032:	2120      	movs	r1, #32
 8005034:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2240      	movs	r2, #64	; 0x40
 800503a:	2100      	movs	r1, #0
 800503c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800503e:	2300      	movs	r3, #0
 8005040:	e000      	b.n	8005044 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005042:	2302      	movs	r3, #2
  }
}
 8005044:	0018      	movs	r0, r3
 8005046:	46bd      	mov	sp, r7
 8005048:	b004      	add	sp, #16
 800504a:	bd80      	pop	{r7, pc}
 800504c:	fffff0ff 	.word	0xfffff0ff

08005050 <HAL_PWR_EnableBkUpAccess>:
  * @note  If the HSE divided by 32 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	af00      	add	r7, sp, #0
  PWR->CR |= (uint32_t)PWR_CR_DBP;
 8005054:	4b04      	ldr	r3, [pc, #16]	; (8005068 <HAL_PWR_EnableBkUpAccess+0x18>)
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	4b03      	ldr	r3, [pc, #12]	; (8005068 <HAL_PWR_EnableBkUpAccess+0x18>)
 800505a:	2180      	movs	r1, #128	; 0x80
 800505c:	0049      	lsls	r1, r1, #1
 800505e:	430a      	orrs	r2, r1
 8005060:	601a      	str	r2, [r3, #0]
}
 8005062:	46c0      	nop			; (mov r8, r8)
 8005064:	46bd      	mov	sp, r7
 8005066:	bd80      	pop	{r7, pc}
 8005068:	40007000 	.word	0x40007000

0800506c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b088      	sub	sp, #32
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d101      	bne.n	800507e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	e301      	b.n	8005682 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	2201      	movs	r2, #1
 8005084:	4013      	ands	r3, r2
 8005086:	d100      	bne.n	800508a <HAL_RCC_OscConfig+0x1e>
 8005088:	e08d      	b.n	80051a6 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800508a:	4bc3      	ldr	r3, [pc, #780]	; (8005398 <HAL_RCC_OscConfig+0x32c>)
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	220c      	movs	r2, #12
 8005090:	4013      	ands	r3, r2
 8005092:	2b04      	cmp	r3, #4
 8005094:	d00e      	beq.n	80050b4 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005096:	4bc0      	ldr	r3, [pc, #768]	; (8005398 <HAL_RCC_OscConfig+0x32c>)
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	220c      	movs	r2, #12
 800509c:	4013      	ands	r3, r2
 800509e:	2b08      	cmp	r3, #8
 80050a0:	d116      	bne.n	80050d0 <HAL_RCC_OscConfig+0x64>
 80050a2:	4bbd      	ldr	r3, [pc, #756]	; (8005398 <HAL_RCC_OscConfig+0x32c>)
 80050a4:	685a      	ldr	r2, [r3, #4]
 80050a6:	2380      	movs	r3, #128	; 0x80
 80050a8:	025b      	lsls	r3, r3, #9
 80050aa:	401a      	ands	r2, r3
 80050ac:	2380      	movs	r3, #128	; 0x80
 80050ae:	025b      	lsls	r3, r3, #9
 80050b0:	429a      	cmp	r2, r3
 80050b2:	d10d      	bne.n	80050d0 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050b4:	4bb8      	ldr	r3, [pc, #736]	; (8005398 <HAL_RCC_OscConfig+0x32c>)
 80050b6:	681a      	ldr	r2, [r3, #0]
 80050b8:	2380      	movs	r3, #128	; 0x80
 80050ba:	029b      	lsls	r3, r3, #10
 80050bc:	4013      	ands	r3, r2
 80050be:	d100      	bne.n	80050c2 <HAL_RCC_OscConfig+0x56>
 80050c0:	e070      	b.n	80051a4 <HAL_RCC_OscConfig+0x138>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d000      	beq.n	80050cc <HAL_RCC_OscConfig+0x60>
 80050ca:	e06b      	b.n	80051a4 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80050cc:	2301      	movs	r3, #1
 80050ce:	e2d8      	b.n	8005682 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	2b01      	cmp	r3, #1
 80050d6:	d107      	bne.n	80050e8 <HAL_RCC_OscConfig+0x7c>
 80050d8:	4baf      	ldr	r3, [pc, #700]	; (8005398 <HAL_RCC_OscConfig+0x32c>)
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	4bae      	ldr	r3, [pc, #696]	; (8005398 <HAL_RCC_OscConfig+0x32c>)
 80050de:	2180      	movs	r1, #128	; 0x80
 80050e0:	0249      	lsls	r1, r1, #9
 80050e2:	430a      	orrs	r2, r1
 80050e4:	601a      	str	r2, [r3, #0]
 80050e6:	e02f      	b.n	8005148 <HAL_RCC_OscConfig+0xdc>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d10c      	bne.n	800510a <HAL_RCC_OscConfig+0x9e>
 80050f0:	4ba9      	ldr	r3, [pc, #676]	; (8005398 <HAL_RCC_OscConfig+0x32c>)
 80050f2:	681a      	ldr	r2, [r3, #0]
 80050f4:	4ba8      	ldr	r3, [pc, #672]	; (8005398 <HAL_RCC_OscConfig+0x32c>)
 80050f6:	49a9      	ldr	r1, [pc, #676]	; (800539c <HAL_RCC_OscConfig+0x330>)
 80050f8:	400a      	ands	r2, r1
 80050fa:	601a      	str	r2, [r3, #0]
 80050fc:	4ba6      	ldr	r3, [pc, #664]	; (8005398 <HAL_RCC_OscConfig+0x32c>)
 80050fe:	681a      	ldr	r2, [r3, #0]
 8005100:	4ba5      	ldr	r3, [pc, #660]	; (8005398 <HAL_RCC_OscConfig+0x32c>)
 8005102:	49a7      	ldr	r1, [pc, #668]	; (80053a0 <HAL_RCC_OscConfig+0x334>)
 8005104:	400a      	ands	r2, r1
 8005106:	601a      	str	r2, [r3, #0]
 8005108:	e01e      	b.n	8005148 <HAL_RCC_OscConfig+0xdc>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	2b05      	cmp	r3, #5
 8005110:	d10e      	bne.n	8005130 <HAL_RCC_OscConfig+0xc4>
 8005112:	4ba1      	ldr	r3, [pc, #644]	; (8005398 <HAL_RCC_OscConfig+0x32c>)
 8005114:	681a      	ldr	r2, [r3, #0]
 8005116:	4ba0      	ldr	r3, [pc, #640]	; (8005398 <HAL_RCC_OscConfig+0x32c>)
 8005118:	2180      	movs	r1, #128	; 0x80
 800511a:	02c9      	lsls	r1, r1, #11
 800511c:	430a      	orrs	r2, r1
 800511e:	601a      	str	r2, [r3, #0]
 8005120:	4b9d      	ldr	r3, [pc, #628]	; (8005398 <HAL_RCC_OscConfig+0x32c>)
 8005122:	681a      	ldr	r2, [r3, #0]
 8005124:	4b9c      	ldr	r3, [pc, #624]	; (8005398 <HAL_RCC_OscConfig+0x32c>)
 8005126:	2180      	movs	r1, #128	; 0x80
 8005128:	0249      	lsls	r1, r1, #9
 800512a:	430a      	orrs	r2, r1
 800512c:	601a      	str	r2, [r3, #0]
 800512e:	e00b      	b.n	8005148 <HAL_RCC_OscConfig+0xdc>
 8005130:	4b99      	ldr	r3, [pc, #612]	; (8005398 <HAL_RCC_OscConfig+0x32c>)
 8005132:	681a      	ldr	r2, [r3, #0]
 8005134:	4b98      	ldr	r3, [pc, #608]	; (8005398 <HAL_RCC_OscConfig+0x32c>)
 8005136:	4999      	ldr	r1, [pc, #612]	; (800539c <HAL_RCC_OscConfig+0x330>)
 8005138:	400a      	ands	r2, r1
 800513a:	601a      	str	r2, [r3, #0]
 800513c:	4b96      	ldr	r3, [pc, #600]	; (8005398 <HAL_RCC_OscConfig+0x32c>)
 800513e:	681a      	ldr	r2, [r3, #0]
 8005140:	4b95      	ldr	r3, [pc, #596]	; (8005398 <HAL_RCC_OscConfig+0x32c>)
 8005142:	4997      	ldr	r1, [pc, #604]	; (80053a0 <HAL_RCC_OscConfig+0x334>)
 8005144:	400a      	ands	r2, r1
 8005146:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d014      	beq.n	800517a <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005150:	f7fe f89e 	bl	8003290 <HAL_GetTick>
 8005154:	0003      	movs	r3, r0
 8005156:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005158:	e008      	b.n	800516c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800515a:	f7fe f899 	bl	8003290 <HAL_GetTick>
 800515e:	0002      	movs	r2, r0
 8005160:	69bb      	ldr	r3, [r7, #24]
 8005162:	1ad3      	subs	r3, r2, r3
 8005164:	2b64      	cmp	r3, #100	; 0x64
 8005166:	d901      	bls.n	800516c <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8005168:	2303      	movs	r3, #3
 800516a:	e28a      	b.n	8005682 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800516c:	4b8a      	ldr	r3, [pc, #552]	; (8005398 <HAL_RCC_OscConfig+0x32c>)
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	2380      	movs	r3, #128	; 0x80
 8005172:	029b      	lsls	r3, r3, #10
 8005174:	4013      	ands	r3, r2
 8005176:	d0f0      	beq.n	800515a <HAL_RCC_OscConfig+0xee>
 8005178:	e015      	b.n	80051a6 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800517a:	f7fe f889 	bl	8003290 <HAL_GetTick>
 800517e:	0003      	movs	r3, r0
 8005180:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005182:	e008      	b.n	8005196 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005184:	f7fe f884 	bl	8003290 <HAL_GetTick>
 8005188:	0002      	movs	r2, r0
 800518a:	69bb      	ldr	r3, [r7, #24]
 800518c:	1ad3      	subs	r3, r2, r3
 800518e:	2b64      	cmp	r3, #100	; 0x64
 8005190:	d901      	bls.n	8005196 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8005192:	2303      	movs	r3, #3
 8005194:	e275      	b.n	8005682 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005196:	4b80      	ldr	r3, [pc, #512]	; (8005398 <HAL_RCC_OscConfig+0x32c>)
 8005198:	681a      	ldr	r2, [r3, #0]
 800519a:	2380      	movs	r3, #128	; 0x80
 800519c:	029b      	lsls	r3, r3, #10
 800519e:	4013      	ands	r3, r2
 80051a0:	d1f0      	bne.n	8005184 <HAL_RCC_OscConfig+0x118>
 80051a2:	e000      	b.n	80051a6 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051a4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	2202      	movs	r2, #2
 80051ac:	4013      	ands	r3, r2
 80051ae:	d100      	bne.n	80051b2 <HAL_RCC_OscConfig+0x146>
 80051b0:	e069      	b.n	8005286 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80051b2:	4b79      	ldr	r3, [pc, #484]	; (8005398 <HAL_RCC_OscConfig+0x32c>)
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	220c      	movs	r2, #12
 80051b8:	4013      	ands	r3, r2
 80051ba:	d00b      	beq.n	80051d4 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80051bc:	4b76      	ldr	r3, [pc, #472]	; (8005398 <HAL_RCC_OscConfig+0x32c>)
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	220c      	movs	r2, #12
 80051c2:	4013      	ands	r3, r2
 80051c4:	2b08      	cmp	r3, #8
 80051c6:	d11c      	bne.n	8005202 <HAL_RCC_OscConfig+0x196>
 80051c8:	4b73      	ldr	r3, [pc, #460]	; (8005398 <HAL_RCC_OscConfig+0x32c>)
 80051ca:	685a      	ldr	r2, [r3, #4]
 80051cc:	2380      	movs	r3, #128	; 0x80
 80051ce:	025b      	lsls	r3, r3, #9
 80051d0:	4013      	ands	r3, r2
 80051d2:	d116      	bne.n	8005202 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051d4:	4b70      	ldr	r3, [pc, #448]	; (8005398 <HAL_RCC_OscConfig+0x32c>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	2202      	movs	r2, #2
 80051da:	4013      	ands	r3, r2
 80051dc:	d005      	beq.n	80051ea <HAL_RCC_OscConfig+0x17e>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	68db      	ldr	r3, [r3, #12]
 80051e2:	2b01      	cmp	r3, #1
 80051e4:	d001      	beq.n	80051ea <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80051e6:	2301      	movs	r3, #1
 80051e8:	e24b      	b.n	8005682 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051ea:	4b6b      	ldr	r3, [pc, #428]	; (8005398 <HAL_RCC_OscConfig+0x32c>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	22f8      	movs	r2, #248	; 0xf8
 80051f0:	4393      	bics	r3, r2
 80051f2:	0019      	movs	r1, r3
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	691b      	ldr	r3, [r3, #16]
 80051f8:	00da      	lsls	r2, r3, #3
 80051fa:	4b67      	ldr	r3, [pc, #412]	; (8005398 <HAL_RCC_OscConfig+0x32c>)
 80051fc:	430a      	orrs	r2, r1
 80051fe:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005200:	e041      	b.n	8005286 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	68db      	ldr	r3, [r3, #12]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d024      	beq.n	8005254 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800520a:	4b63      	ldr	r3, [pc, #396]	; (8005398 <HAL_RCC_OscConfig+0x32c>)
 800520c:	681a      	ldr	r2, [r3, #0]
 800520e:	4b62      	ldr	r3, [pc, #392]	; (8005398 <HAL_RCC_OscConfig+0x32c>)
 8005210:	2101      	movs	r1, #1
 8005212:	430a      	orrs	r2, r1
 8005214:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005216:	f7fe f83b 	bl	8003290 <HAL_GetTick>
 800521a:	0003      	movs	r3, r0
 800521c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800521e:	e008      	b.n	8005232 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005220:	f7fe f836 	bl	8003290 <HAL_GetTick>
 8005224:	0002      	movs	r2, r0
 8005226:	69bb      	ldr	r3, [r7, #24]
 8005228:	1ad3      	subs	r3, r2, r3
 800522a:	2b02      	cmp	r3, #2
 800522c:	d901      	bls.n	8005232 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 800522e:	2303      	movs	r3, #3
 8005230:	e227      	b.n	8005682 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005232:	4b59      	ldr	r3, [pc, #356]	; (8005398 <HAL_RCC_OscConfig+0x32c>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	2202      	movs	r2, #2
 8005238:	4013      	ands	r3, r2
 800523a:	d0f1      	beq.n	8005220 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800523c:	4b56      	ldr	r3, [pc, #344]	; (8005398 <HAL_RCC_OscConfig+0x32c>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	22f8      	movs	r2, #248	; 0xf8
 8005242:	4393      	bics	r3, r2
 8005244:	0019      	movs	r1, r3
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	691b      	ldr	r3, [r3, #16]
 800524a:	00da      	lsls	r2, r3, #3
 800524c:	4b52      	ldr	r3, [pc, #328]	; (8005398 <HAL_RCC_OscConfig+0x32c>)
 800524e:	430a      	orrs	r2, r1
 8005250:	601a      	str	r2, [r3, #0]
 8005252:	e018      	b.n	8005286 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005254:	4b50      	ldr	r3, [pc, #320]	; (8005398 <HAL_RCC_OscConfig+0x32c>)
 8005256:	681a      	ldr	r2, [r3, #0]
 8005258:	4b4f      	ldr	r3, [pc, #316]	; (8005398 <HAL_RCC_OscConfig+0x32c>)
 800525a:	2101      	movs	r1, #1
 800525c:	438a      	bics	r2, r1
 800525e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005260:	f7fe f816 	bl	8003290 <HAL_GetTick>
 8005264:	0003      	movs	r3, r0
 8005266:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005268:	e008      	b.n	800527c <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800526a:	f7fe f811 	bl	8003290 <HAL_GetTick>
 800526e:	0002      	movs	r2, r0
 8005270:	69bb      	ldr	r3, [r7, #24]
 8005272:	1ad3      	subs	r3, r2, r3
 8005274:	2b02      	cmp	r3, #2
 8005276:	d901      	bls.n	800527c <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8005278:	2303      	movs	r3, #3
 800527a:	e202      	b.n	8005682 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800527c:	4b46      	ldr	r3, [pc, #280]	; (8005398 <HAL_RCC_OscConfig+0x32c>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	2202      	movs	r2, #2
 8005282:	4013      	ands	r3, r2
 8005284:	d1f1      	bne.n	800526a <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	2208      	movs	r2, #8
 800528c:	4013      	ands	r3, r2
 800528e:	d036      	beq.n	80052fe <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	69db      	ldr	r3, [r3, #28]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d019      	beq.n	80052cc <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005298:	4b3f      	ldr	r3, [pc, #252]	; (8005398 <HAL_RCC_OscConfig+0x32c>)
 800529a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800529c:	4b3e      	ldr	r3, [pc, #248]	; (8005398 <HAL_RCC_OscConfig+0x32c>)
 800529e:	2101      	movs	r1, #1
 80052a0:	430a      	orrs	r2, r1
 80052a2:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052a4:	f7fd fff4 	bl	8003290 <HAL_GetTick>
 80052a8:	0003      	movs	r3, r0
 80052aa:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052ac:	e008      	b.n	80052c0 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80052ae:	f7fd ffef 	bl	8003290 <HAL_GetTick>
 80052b2:	0002      	movs	r2, r0
 80052b4:	69bb      	ldr	r3, [r7, #24]
 80052b6:	1ad3      	subs	r3, r2, r3
 80052b8:	2b02      	cmp	r3, #2
 80052ba:	d901      	bls.n	80052c0 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80052bc:	2303      	movs	r3, #3
 80052be:	e1e0      	b.n	8005682 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052c0:	4b35      	ldr	r3, [pc, #212]	; (8005398 <HAL_RCC_OscConfig+0x32c>)
 80052c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c4:	2202      	movs	r2, #2
 80052c6:	4013      	ands	r3, r2
 80052c8:	d0f1      	beq.n	80052ae <HAL_RCC_OscConfig+0x242>
 80052ca:	e018      	b.n	80052fe <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80052cc:	4b32      	ldr	r3, [pc, #200]	; (8005398 <HAL_RCC_OscConfig+0x32c>)
 80052ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80052d0:	4b31      	ldr	r3, [pc, #196]	; (8005398 <HAL_RCC_OscConfig+0x32c>)
 80052d2:	2101      	movs	r1, #1
 80052d4:	438a      	bics	r2, r1
 80052d6:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052d8:	f7fd ffda 	bl	8003290 <HAL_GetTick>
 80052dc:	0003      	movs	r3, r0
 80052de:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052e0:	e008      	b.n	80052f4 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80052e2:	f7fd ffd5 	bl	8003290 <HAL_GetTick>
 80052e6:	0002      	movs	r2, r0
 80052e8:	69bb      	ldr	r3, [r7, #24]
 80052ea:	1ad3      	subs	r3, r2, r3
 80052ec:	2b02      	cmp	r3, #2
 80052ee:	d901      	bls.n	80052f4 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80052f0:	2303      	movs	r3, #3
 80052f2:	e1c6      	b.n	8005682 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052f4:	4b28      	ldr	r3, [pc, #160]	; (8005398 <HAL_RCC_OscConfig+0x32c>)
 80052f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f8:	2202      	movs	r2, #2
 80052fa:	4013      	ands	r3, r2
 80052fc:	d1f1      	bne.n	80052e2 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	2204      	movs	r2, #4
 8005304:	4013      	ands	r3, r2
 8005306:	d100      	bne.n	800530a <HAL_RCC_OscConfig+0x29e>
 8005308:	e0b4      	b.n	8005474 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 800530a:	201f      	movs	r0, #31
 800530c:	183b      	adds	r3, r7, r0
 800530e:	2200      	movs	r2, #0
 8005310:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005312:	4b21      	ldr	r3, [pc, #132]	; (8005398 <HAL_RCC_OscConfig+0x32c>)
 8005314:	69da      	ldr	r2, [r3, #28]
 8005316:	2380      	movs	r3, #128	; 0x80
 8005318:	055b      	lsls	r3, r3, #21
 800531a:	4013      	ands	r3, r2
 800531c:	d110      	bne.n	8005340 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800531e:	4b1e      	ldr	r3, [pc, #120]	; (8005398 <HAL_RCC_OscConfig+0x32c>)
 8005320:	69da      	ldr	r2, [r3, #28]
 8005322:	4b1d      	ldr	r3, [pc, #116]	; (8005398 <HAL_RCC_OscConfig+0x32c>)
 8005324:	2180      	movs	r1, #128	; 0x80
 8005326:	0549      	lsls	r1, r1, #21
 8005328:	430a      	orrs	r2, r1
 800532a:	61da      	str	r2, [r3, #28]
 800532c:	4b1a      	ldr	r3, [pc, #104]	; (8005398 <HAL_RCC_OscConfig+0x32c>)
 800532e:	69da      	ldr	r2, [r3, #28]
 8005330:	2380      	movs	r3, #128	; 0x80
 8005332:	055b      	lsls	r3, r3, #21
 8005334:	4013      	ands	r3, r2
 8005336:	60fb      	str	r3, [r7, #12]
 8005338:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800533a:	183b      	adds	r3, r7, r0
 800533c:	2201      	movs	r2, #1
 800533e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005340:	4b18      	ldr	r3, [pc, #96]	; (80053a4 <HAL_RCC_OscConfig+0x338>)
 8005342:	681a      	ldr	r2, [r3, #0]
 8005344:	2380      	movs	r3, #128	; 0x80
 8005346:	005b      	lsls	r3, r3, #1
 8005348:	4013      	ands	r3, r2
 800534a:	d11a      	bne.n	8005382 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800534c:	4b15      	ldr	r3, [pc, #84]	; (80053a4 <HAL_RCC_OscConfig+0x338>)
 800534e:	681a      	ldr	r2, [r3, #0]
 8005350:	4b14      	ldr	r3, [pc, #80]	; (80053a4 <HAL_RCC_OscConfig+0x338>)
 8005352:	2180      	movs	r1, #128	; 0x80
 8005354:	0049      	lsls	r1, r1, #1
 8005356:	430a      	orrs	r2, r1
 8005358:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800535a:	f7fd ff99 	bl	8003290 <HAL_GetTick>
 800535e:	0003      	movs	r3, r0
 8005360:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005362:	e008      	b.n	8005376 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005364:	f7fd ff94 	bl	8003290 <HAL_GetTick>
 8005368:	0002      	movs	r2, r0
 800536a:	69bb      	ldr	r3, [r7, #24]
 800536c:	1ad3      	subs	r3, r2, r3
 800536e:	2b64      	cmp	r3, #100	; 0x64
 8005370:	d901      	bls.n	8005376 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8005372:	2303      	movs	r3, #3
 8005374:	e185      	b.n	8005682 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005376:	4b0b      	ldr	r3, [pc, #44]	; (80053a4 <HAL_RCC_OscConfig+0x338>)
 8005378:	681a      	ldr	r2, [r3, #0]
 800537a:	2380      	movs	r3, #128	; 0x80
 800537c:	005b      	lsls	r3, r3, #1
 800537e:	4013      	ands	r3, r2
 8005380:	d0f0      	beq.n	8005364 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	689b      	ldr	r3, [r3, #8]
 8005386:	2b01      	cmp	r3, #1
 8005388:	d10e      	bne.n	80053a8 <HAL_RCC_OscConfig+0x33c>
 800538a:	4b03      	ldr	r3, [pc, #12]	; (8005398 <HAL_RCC_OscConfig+0x32c>)
 800538c:	6a1a      	ldr	r2, [r3, #32]
 800538e:	4b02      	ldr	r3, [pc, #8]	; (8005398 <HAL_RCC_OscConfig+0x32c>)
 8005390:	2101      	movs	r1, #1
 8005392:	430a      	orrs	r2, r1
 8005394:	621a      	str	r2, [r3, #32]
 8005396:	e035      	b.n	8005404 <HAL_RCC_OscConfig+0x398>
 8005398:	40021000 	.word	0x40021000
 800539c:	fffeffff 	.word	0xfffeffff
 80053a0:	fffbffff 	.word	0xfffbffff
 80053a4:	40007000 	.word	0x40007000
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	689b      	ldr	r3, [r3, #8]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d10c      	bne.n	80053ca <HAL_RCC_OscConfig+0x35e>
 80053b0:	4bb6      	ldr	r3, [pc, #728]	; (800568c <HAL_RCC_OscConfig+0x620>)
 80053b2:	6a1a      	ldr	r2, [r3, #32]
 80053b4:	4bb5      	ldr	r3, [pc, #724]	; (800568c <HAL_RCC_OscConfig+0x620>)
 80053b6:	2101      	movs	r1, #1
 80053b8:	438a      	bics	r2, r1
 80053ba:	621a      	str	r2, [r3, #32]
 80053bc:	4bb3      	ldr	r3, [pc, #716]	; (800568c <HAL_RCC_OscConfig+0x620>)
 80053be:	6a1a      	ldr	r2, [r3, #32]
 80053c0:	4bb2      	ldr	r3, [pc, #712]	; (800568c <HAL_RCC_OscConfig+0x620>)
 80053c2:	2104      	movs	r1, #4
 80053c4:	438a      	bics	r2, r1
 80053c6:	621a      	str	r2, [r3, #32]
 80053c8:	e01c      	b.n	8005404 <HAL_RCC_OscConfig+0x398>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	689b      	ldr	r3, [r3, #8]
 80053ce:	2b05      	cmp	r3, #5
 80053d0:	d10c      	bne.n	80053ec <HAL_RCC_OscConfig+0x380>
 80053d2:	4bae      	ldr	r3, [pc, #696]	; (800568c <HAL_RCC_OscConfig+0x620>)
 80053d4:	6a1a      	ldr	r2, [r3, #32]
 80053d6:	4bad      	ldr	r3, [pc, #692]	; (800568c <HAL_RCC_OscConfig+0x620>)
 80053d8:	2104      	movs	r1, #4
 80053da:	430a      	orrs	r2, r1
 80053dc:	621a      	str	r2, [r3, #32]
 80053de:	4bab      	ldr	r3, [pc, #684]	; (800568c <HAL_RCC_OscConfig+0x620>)
 80053e0:	6a1a      	ldr	r2, [r3, #32]
 80053e2:	4baa      	ldr	r3, [pc, #680]	; (800568c <HAL_RCC_OscConfig+0x620>)
 80053e4:	2101      	movs	r1, #1
 80053e6:	430a      	orrs	r2, r1
 80053e8:	621a      	str	r2, [r3, #32]
 80053ea:	e00b      	b.n	8005404 <HAL_RCC_OscConfig+0x398>
 80053ec:	4ba7      	ldr	r3, [pc, #668]	; (800568c <HAL_RCC_OscConfig+0x620>)
 80053ee:	6a1a      	ldr	r2, [r3, #32]
 80053f0:	4ba6      	ldr	r3, [pc, #664]	; (800568c <HAL_RCC_OscConfig+0x620>)
 80053f2:	2101      	movs	r1, #1
 80053f4:	438a      	bics	r2, r1
 80053f6:	621a      	str	r2, [r3, #32]
 80053f8:	4ba4      	ldr	r3, [pc, #656]	; (800568c <HAL_RCC_OscConfig+0x620>)
 80053fa:	6a1a      	ldr	r2, [r3, #32]
 80053fc:	4ba3      	ldr	r3, [pc, #652]	; (800568c <HAL_RCC_OscConfig+0x620>)
 80053fe:	2104      	movs	r1, #4
 8005400:	438a      	bics	r2, r1
 8005402:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	689b      	ldr	r3, [r3, #8]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d014      	beq.n	8005436 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800540c:	f7fd ff40 	bl	8003290 <HAL_GetTick>
 8005410:	0003      	movs	r3, r0
 8005412:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005414:	e009      	b.n	800542a <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005416:	f7fd ff3b 	bl	8003290 <HAL_GetTick>
 800541a:	0002      	movs	r2, r0
 800541c:	69bb      	ldr	r3, [r7, #24]
 800541e:	1ad3      	subs	r3, r2, r3
 8005420:	4a9b      	ldr	r2, [pc, #620]	; (8005690 <HAL_RCC_OscConfig+0x624>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d901      	bls.n	800542a <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8005426:	2303      	movs	r3, #3
 8005428:	e12b      	b.n	8005682 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800542a:	4b98      	ldr	r3, [pc, #608]	; (800568c <HAL_RCC_OscConfig+0x620>)
 800542c:	6a1b      	ldr	r3, [r3, #32]
 800542e:	2202      	movs	r2, #2
 8005430:	4013      	ands	r3, r2
 8005432:	d0f0      	beq.n	8005416 <HAL_RCC_OscConfig+0x3aa>
 8005434:	e013      	b.n	800545e <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005436:	f7fd ff2b 	bl	8003290 <HAL_GetTick>
 800543a:	0003      	movs	r3, r0
 800543c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800543e:	e009      	b.n	8005454 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005440:	f7fd ff26 	bl	8003290 <HAL_GetTick>
 8005444:	0002      	movs	r2, r0
 8005446:	69bb      	ldr	r3, [r7, #24]
 8005448:	1ad3      	subs	r3, r2, r3
 800544a:	4a91      	ldr	r2, [pc, #580]	; (8005690 <HAL_RCC_OscConfig+0x624>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d901      	bls.n	8005454 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8005450:	2303      	movs	r3, #3
 8005452:	e116      	b.n	8005682 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005454:	4b8d      	ldr	r3, [pc, #564]	; (800568c <HAL_RCC_OscConfig+0x620>)
 8005456:	6a1b      	ldr	r3, [r3, #32]
 8005458:	2202      	movs	r2, #2
 800545a:	4013      	ands	r3, r2
 800545c:	d1f0      	bne.n	8005440 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800545e:	231f      	movs	r3, #31
 8005460:	18fb      	adds	r3, r7, r3
 8005462:	781b      	ldrb	r3, [r3, #0]
 8005464:	2b01      	cmp	r3, #1
 8005466:	d105      	bne.n	8005474 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005468:	4b88      	ldr	r3, [pc, #544]	; (800568c <HAL_RCC_OscConfig+0x620>)
 800546a:	69da      	ldr	r2, [r3, #28]
 800546c:	4b87      	ldr	r3, [pc, #540]	; (800568c <HAL_RCC_OscConfig+0x620>)
 800546e:	4989      	ldr	r1, [pc, #548]	; (8005694 <HAL_RCC_OscConfig+0x628>)
 8005470:	400a      	ands	r2, r1
 8005472:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	2210      	movs	r2, #16
 800547a:	4013      	ands	r3, r2
 800547c:	d063      	beq.n	8005546 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	695b      	ldr	r3, [r3, #20]
 8005482:	2b01      	cmp	r3, #1
 8005484:	d12a      	bne.n	80054dc <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8005486:	4b81      	ldr	r3, [pc, #516]	; (800568c <HAL_RCC_OscConfig+0x620>)
 8005488:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800548a:	4b80      	ldr	r3, [pc, #512]	; (800568c <HAL_RCC_OscConfig+0x620>)
 800548c:	2104      	movs	r1, #4
 800548e:	430a      	orrs	r2, r1
 8005490:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8005492:	4b7e      	ldr	r3, [pc, #504]	; (800568c <HAL_RCC_OscConfig+0x620>)
 8005494:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005496:	4b7d      	ldr	r3, [pc, #500]	; (800568c <HAL_RCC_OscConfig+0x620>)
 8005498:	2101      	movs	r1, #1
 800549a:	430a      	orrs	r2, r1
 800549c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800549e:	f7fd fef7 	bl	8003290 <HAL_GetTick>
 80054a2:	0003      	movs	r3, r0
 80054a4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80054a6:	e008      	b.n	80054ba <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80054a8:	f7fd fef2 	bl	8003290 <HAL_GetTick>
 80054ac:	0002      	movs	r2, r0
 80054ae:	69bb      	ldr	r3, [r7, #24]
 80054b0:	1ad3      	subs	r3, r2, r3
 80054b2:	2b02      	cmp	r3, #2
 80054b4:	d901      	bls.n	80054ba <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80054b6:	2303      	movs	r3, #3
 80054b8:	e0e3      	b.n	8005682 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80054ba:	4b74      	ldr	r3, [pc, #464]	; (800568c <HAL_RCC_OscConfig+0x620>)
 80054bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054be:	2202      	movs	r2, #2
 80054c0:	4013      	ands	r3, r2
 80054c2:	d0f1      	beq.n	80054a8 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80054c4:	4b71      	ldr	r3, [pc, #452]	; (800568c <HAL_RCC_OscConfig+0x620>)
 80054c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054c8:	22f8      	movs	r2, #248	; 0xf8
 80054ca:	4393      	bics	r3, r2
 80054cc:	0019      	movs	r1, r3
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	699b      	ldr	r3, [r3, #24]
 80054d2:	00da      	lsls	r2, r3, #3
 80054d4:	4b6d      	ldr	r3, [pc, #436]	; (800568c <HAL_RCC_OscConfig+0x620>)
 80054d6:	430a      	orrs	r2, r1
 80054d8:	635a      	str	r2, [r3, #52]	; 0x34
 80054da:	e034      	b.n	8005546 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	695b      	ldr	r3, [r3, #20]
 80054e0:	3305      	adds	r3, #5
 80054e2:	d111      	bne.n	8005508 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80054e4:	4b69      	ldr	r3, [pc, #420]	; (800568c <HAL_RCC_OscConfig+0x620>)
 80054e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054e8:	4b68      	ldr	r3, [pc, #416]	; (800568c <HAL_RCC_OscConfig+0x620>)
 80054ea:	2104      	movs	r1, #4
 80054ec:	438a      	bics	r2, r1
 80054ee:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80054f0:	4b66      	ldr	r3, [pc, #408]	; (800568c <HAL_RCC_OscConfig+0x620>)
 80054f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054f4:	22f8      	movs	r2, #248	; 0xf8
 80054f6:	4393      	bics	r3, r2
 80054f8:	0019      	movs	r1, r3
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	699b      	ldr	r3, [r3, #24]
 80054fe:	00da      	lsls	r2, r3, #3
 8005500:	4b62      	ldr	r3, [pc, #392]	; (800568c <HAL_RCC_OscConfig+0x620>)
 8005502:	430a      	orrs	r2, r1
 8005504:	635a      	str	r2, [r3, #52]	; 0x34
 8005506:	e01e      	b.n	8005546 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8005508:	4b60      	ldr	r3, [pc, #384]	; (800568c <HAL_RCC_OscConfig+0x620>)
 800550a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800550c:	4b5f      	ldr	r3, [pc, #380]	; (800568c <HAL_RCC_OscConfig+0x620>)
 800550e:	2104      	movs	r1, #4
 8005510:	430a      	orrs	r2, r1
 8005512:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8005514:	4b5d      	ldr	r3, [pc, #372]	; (800568c <HAL_RCC_OscConfig+0x620>)
 8005516:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005518:	4b5c      	ldr	r3, [pc, #368]	; (800568c <HAL_RCC_OscConfig+0x620>)
 800551a:	2101      	movs	r1, #1
 800551c:	438a      	bics	r2, r1
 800551e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005520:	f7fd feb6 	bl	8003290 <HAL_GetTick>
 8005524:	0003      	movs	r3, r0
 8005526:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8005528:	e008      	b.n	800553c <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800552a:	f7fd feb1 	bl	8003290 <HAL_GetTick>
 800552e:	0002      	movs	r2, r0
 8005530:	69bb      	ldr	r3, [r7, #24]
 8005532:	1ad3      	subs	r3, r2, r3
 8005534:	2b02      	cmp	r3, #2
 8005536:	d901      	bls.n	800553c <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8005538:	2303      	movs	r3, #3
 800553a:	e0a2      	b.n	8005682 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800553c:	4b53      	ldr	r3, [pc, #332]	; (800568c <HAL_RCC_OscConfig+0x620>)
 800553e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005540:	2202      	movs	r2, #2
 8005542:	4013      	ands	r3, r2
 8005544:	d1f1      	bne.n	800552a <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6a1b      	ldr	r3, [r3, #32]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d100      	bne.n	8005550 <HAL_RCC_OscConfig+0x4e4>
 800554e:	e097      	b.n	8005680 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005550:	4b4e      	ldr	r3, [pc, #312]	; (800568c <HAL_RCC_OscConfig+0x620>)
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	220c      	movs	r2, #12
 8005556:	4013      	ands	r3, r2
 8005558:	2b08      	cmp	r3, #8
 800555a:	d100      	bne.n	800555e <HAL_RCC_OscConfig+0x4f2>
 800555c:	e06b      	b.n	8005636 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6a1b      	ldr	r3, [r3, #32]
 8005562:	2b02      	cmp	r3, #2
 8005564:	d14c      	bne.n	8005600 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005566:	4b49      	ldr	r3, [pc, #292]	; (800568c <HAL_RCC_OscConfig+0x620>)
 8005568:	681a      	ldr	r2, [r3, #0]
 800556a:	4b48      	ldr	r3, [pc, #288]	; (800568c <HAL_RCC_OscConfig+0x620>)
 800556c:	494a      	ldr	r1, [pc, #296]	; (8005698 <HAL_RCC_OscConfig+0x62c>)
 800556e:	400a      	ands	r2, r1
 8005570:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005572:	f7fd fe8d 	bl	8003290 <HAL_GetTick>
 8005576:	0003      	movs	r3, r0
 8005578:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800557a:	e008      	b.n	800558e <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800557c:	f7fd fe88 	bl	8003290 <HAL_GetTick>
 8005580:	0002      	movs	r2, r0
 8005582:	69bb      	ldr	r3, [r7, #24]
 8005584:	1ad3      	subs	r3, r2, r3
 8005586:	2b02      	cmp	r3, #2
 8005588:	d901      	bls.n	800558e <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 800558a:	2303      	movs	r3, #3
 800558c:	e079      	b.n	8005682 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800558e:	4b3f      	ldr	r3, [pc, #252]	; (800568c <HAL_RCC_OscConfig+0x620>)
 8005590:	681a      	ldr	r2, [r3, #0]
 8005592:	2380      	movs	r3, #128	; 0x80
 8005594:	049b      	lsls	r3, r3, #18
 8005596:	4013      	ands	r3, r2
 8005598:	d1f0      	bne.n	800557c <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800559a:	4b3c      	ldr	r3, [pc, #240]	; (800568c <HAL_RCC_OscConfig+0x620>)
 800559c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800559e:	220f      	movs	r2, #15
 80055a0:	4393      	bics	r3, r2
 80055a2:	0019      	movs	r1, r3
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055a8:	4b38      	ldr	r3, [pc, #224]	; (800568c <HAL_RCC_OscConfig+0x620>)
 80055aa:	430a      	orrs	r2, r1
 80055ac:	62da      	str	r2, [r3, #44]	; 0x2c
 80055ae:	4b37      	ldr	r3, [pc, #220]	; (800568c <HAL_RCC_OscConfig+0x620>)
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	4a3a      	ldr	r2, [pc, #232]	; (800569c <HAL_RCC_OscConfig+0x630>)
 80055b4:	4013      	ands	r3, r2
 80055b6:	0019      	movs	r1, r3
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c0:	431a      	orrs	r2, r3
 80055c2:	4b32      	ldr	r3, [pc, #200]	; (800568c <HAL_RCC_OscConfig+0x620>)
 80055c4:	430a      	orrs	r2, r1
 80055c6:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80055c8:	4b30      	ldr	r3, [pc, #192]	; (800568c <HAL_RCC_OscConfig+0x620>)
 80055ca:	681a      	ldr	r2, [r3, #0]
 80055cc:	4b2f      	ldr	r3, [pc, #188]	; (800568c <HAL_RCC_OscConfig+0x620>)
 80055ce:	2180      	movs	r1, #128	; 0x80
 80055d0:	0449      	lsls	r1, r1, #17
 80055d2:	430a      	orrs	r2, r1
 80055d4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055d6:	f7fd fe5b 	bl	8003290 <HAL_GetTick>
 80055da:	0003      	movs	r3, r0
 80055dc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80055de:	e008      	b.n	80055f2 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80055e0:	f7fd fe56 	bl	8003290 <HAL_GetTick>
 80055e4:	0002      	movs	r2, r0
 80055e6:	69bb      	ldr	r3, [r7, #24]
 80055e8:	1ad3      	subs	r3, r2, r3
 80055ea:	2b02      	cmp	r3, #2
 80055ec:	d901      	bls.n	80055f2 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80055ee:	2303      	movs	r3, #3
 80055f0:	e047      	b.n	8005682 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80055f2:	4b26      	ldr	r3, [pc, #152]	; (800568c <HAL_RCC_OscConfig+0x620>)
 80055f4:	681a      	ldr	r2, [r3, #0]
 80055f6:	2380      	movs	r3, #128	; 0x80
 80055f8:	049b      	lsls	r3, r3, #18
 80055fa:	4013      	ands	r3, r2
 80055fc:	d0f0      	beq.n	80055e0 <HAL_RCC_OscConfig+0x574>
 80055fe:	e03f      	b.n	8005680 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005600:	4b22      	ldr	r3, [pc, #136]	; (800568c <HAL_RCC_OscConfig+0x620>)
 8005602:	681a      	ldr	r2, [r3, #0]
 8005604:	4b21      	ldr	r3, [pc, #132]	; (800568c <HAL_RCC_OscConfig+0x620>)
 8005606:	4924      	ldr	r1, [pc, #144]	; (8005698 <HAL_RCC_OscConfig+0x62c>)
 8005608:	400a      	ands	r2, r1
 800560a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800560c:	f7fd fe40 	bl	8003290 <HAL_GetTick>
 8005610:	0003      	movs	r3, r0
 8005612:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005614:	e008      	b.n	8005628 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005616:	f7fd fe3b 	bl	8003290 <HAL_GetTick>
 800561a:	0002      	movs	r2, r0
 800561c:	69bb      	ldr	r3, [r7, #24]
 800561e:	1ad3      	subs	r3, r2, r3
 8005620:	2b02      	cmp	r3, #2
 8005622:	d901      	bls.n	8005628 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8005624:	2303      	movs	r3, #3
 8005626:	e02c      	b.n	8005682 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005628:	4b18      	ldr	r3, [pc, #96]	; (800568c <HAL_RCC_OscConfig+0x620>)
 800562a:	681a      	ldr	r2, [r3, #0]
 800562c:	2380      	movs	r3, #128	; 0x80
 800562e:	049b      	lsls	r3, r3, #18
 8005630:	4013      	ands	r3, r2
 8005632:	d1f0      	bne.n	8005616 <HAL_RCC_OscConfig+0x5aa>
 8005634:	e024      	b.n	8005680 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6a1b      	ldr	r3, [r3, #32]
 800563a:	2b01      	cmp	r3, #1
 800563c:	d101      	bne.n	8005642 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 800563e:	2301      	movs	r3, #1
 8005640:	e01f      	b.n	8005682 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8005642:	4b12      	ldr	r3, [pc, #72]	; (800568c <HAL_RCC_OscConfig+0x620>)
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8005648:	4b10      	ldr	r3, [pc, #64]	; (800568c <HAL_RCC_OscConfig+0x620>)
 800564a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800564c:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800564e:	697a      	ldr	r2, [r7, #20]
 8005650:	2380      	movs	r3, #128	; 0x80
 8005652:	025b      	lsls	r3, r3, #9
 8005654:	401a      	ands	r2, r3
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800565a:	429a      	cmp	r2, r3
 800565c:	d10e      	bne.n	800567c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	220f      	movs	r2, #15
 8005662:	401a      	ands	r2, r3
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005668:	429a      	cmp	r2, r3
 800566a:	d107      	bne.n	800567c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800566c:	697a      	ldr	r2, [r7, #20]
 800566e:	23f0      	movs	r3, #240	; 0xf0
 8005670:	039b      	lsls	r3, r3, #14
 8005672:	401a      	ands	r2, r3
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8005678:	429a      	cmp	r2, r3
 800567a:	d001      	beq.n	8005680 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 800567c:	2301      	movs	r3, #1
 800567e:	e000      	b.n	8005682 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8005680:	2300      	movs	r3, #0
}
 8005682:	0018      	movs	r0, r3
 8005684:	46bd      	mov	sp, r7
 8005686:	b008      	add	sp, #32
 8005688:	bd80      	pop	{r7, pc}
 800568a:	46c0      	nop			; (mov r8, r8)
 800568c:	40021000 	.word	0x40021000
 8005690:	00001388 	.word	0x00001388
 8005694:	efffffff 	.word	0xefffffff
 8005698:	feffffff 	.word	0xfeffffff
 800569c:	ffc2ffff 	.word	0xffc2ffff

080056a0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b084      	sub	sp, #16
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
 80056a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d101      	bne.n	80056b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80056b0:	2301      	movs	r3, #1
 80056b2:	e0b3      	b.n	800581c <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80056b4:	4b5b      	ldr	r3, [pc, #364]	; (8005824 <HAL_RCC_ClockConfig+0x184>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	2201      	movs	r2, #1
 80056ba:	4013      	ands	r3, r2
 80056bc:	683a      	ldr	r2, [r7, #0]
 80056be:	429a      	cmp	r2, r3
 80056c0:	d911      	bls.n	80056e6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056c2:	4b58      	ldr	r3, [pc, #352]	; (8005824 <HAL_RCC_ClockConfig+0x184>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	2201      	movs	r2, #1
 80056c8:	4393      	bics	r3, r2
 80056ca:	0019      	movs	r1, r3
 80056cc:	4b55      	ldr	r3, [pc, #340]	; (8005824 <HAL_RCC_ClockConfig+0x184>)
 80056ce:	683a      	ldr	r2, [r7, #0]
 80056d0:	430a      	orrs	r2, r1
 80056d2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80056d4:	4b53      	ldr	r3, [pc, #332]	; (8005824 <HAL_RCC_ClockConfig+0x184>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	2201      	movs	r2, #1
 80056da:	4013      	ands	r3, r2
 80056dc:	683a      	ldr	r2, [r7, #0]
 80056de:	429a      	cmp	r2, r3
 80056e0:	d001      	beq.n	80056e6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80056e2:	2301      	movs	r3, #1
 80056e4:	e09a      	b.n	800581c <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	2202      	movs	r2, #2
 80056ec:	4013      	ands	r3, r2
 80056ee:	d015      	beq.n	800571c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	2204      	movs	r2, #4
 80056f6:	4013      	ands	r3, r2
 80056f8:	d006      	beq.n	8005708 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80056fa:	4b4b      	ldr	r3, [pc, #300]	; (8005828 <HAL_RCC_ClockConfig+0x188>)
 80056fc:	685a      	ldr	r2, [r3, #4]
 80056fe:	4b4a      	ldr	r3, [pc, #296]	; (8005828 <HAL_RCC_ClockConfig+0x188>)
 8005700:	21e0      	movs	r1, #224	; 0xe0
 8005702:	00c9      	lsls	r1, r1, #3
 8005704:	430a      	orrs	r2, r1
 8005706:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005708:	4b47      	ldr	r3, [pc, #284]	; (8005828 <HAL_RCC_ClockConfig+0x188>)
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	22f0      	movs	r2, #240	; 0xf0
 800570e:	4393      	bics	r3, r2
 8005710:	0019      	movs	r1, r3
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	689a      	ldr	r2, [r3, #8]
 8005716:	4b44      	ldr	r3, [pc, #272]	; (8005828 <HAL_RCC_ClockConfig+0x188>)
 8005718:	430a      	orrs	r2, r1
 800571a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	2201      	movs	r2, #1
 8005722:	4013      	ands	r3, r2
 8005724:	d040      	beq.n	80057a8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	2b01      	cmp	r3, #1
 800572c:	d107      	bne.n	800573e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800572e:	4b3e      	ldr	r3, [pc, #248]	; (8005828 <HAL_RCC_ClockConfig+0x188>)
 8005730:	681a      	ldr	r2, [r3, #0]
 8005732:	2380      	movs	r3, #128	; 0x80
 8005734:	029b      	lsls	r3, r3, #10
 8005736:	4013      	ands	r3, r2
 8005738:	d114      	bne.n	8005764 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800573a:	2301      	movs	r3, #1
 800573c:	e06e      	b.n	800581c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	2b02      	cmp	r3, #2
 8005744:	d107      	bne.n	8005756 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005746:	4b38      	ldr	r3, [pc, #224]	; (8005828 <HAL_RCC_ClockConfig+0x188>)
 8005748:	681a      	ldr	r2, [r3, #0]
 800574a:	2380      	movs	r3, #128	; 0x80
 800574c:	049b      	lsls	r3, r3, #18
 800574e:	4013      	ands	r3, r2
 8005750:	d108      	bne.n	8005764 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8005752:	2301      	movs	r3, #1
 8005754:	e062      	b.n	800581c <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005756:	4b34      	ldr	r3, [pc, #208]	; (8005828 <HAL_RCC_ClockConfig+0x188>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	2202      	movs	r2, #2
 800575c:	4013      	ands	r3, r2
 800575e:	d101      	bne.n	8005764 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8005760:	2301      	movs	r3, #1
 8005762:	e05b      	b.n	800581c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005764:	4b30      	ldr	r3, [pc, #192]	; (8005828 <HAL_RCC_ClockConfig+0x188>)
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	2203      	movs	r2, #3
 800576a:	4393      	bics	r3, r2
 800576c:	0019      	movs	r1, r3
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	685a      	ldr	r2, [r3, #4]
 8005772:	4b2d      	ldr	r3, [pc, #180]	; (8005828 <HAL_RCC_ClockConfig+0x188>)
 8005774:	430a      	orrs	r2, r1
 8005776:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005778:	f7fd fd8a 	bl	8003290 <HAL_GetTick>
 800577c:	0003      	movs	r3, r0
 800577e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005780:	e009      	b.n	8005796 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005782:	f7fd fd85 	bl	8003290 <HAL_GetTick>
 8005786:	0002      	movs	r2, r0
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	1ad3      	subs	r3, r2, r3
 800578c:	4a27      	ldr	r2, [pc, #156]	; (800582c <HAL_RCC_ClockConfig+0x18c>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d901      	bls.n	8005796 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8005792:	2303      	movs	r3, #3
 8005794:	e042      	b.n	800581c <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005796:	4b24      	ldr	r3, [pc, #144]	; (8005828 <HAL_RCC_ClockConfig+0x188>)
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	220c      	movs	r2, #12
 800579c:	401a      	ands	r2, r3
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	009b      	lsls	r3, r3, #2
 80057a4:	429a      	cmp	r2, r3
 80057a6:	d1ec      	bne.n	8005782 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80057a8:	4b1e      	ldr	r3, [pc, #120]	; (8005824 <HAL_RCC_ClockConfig+0x184>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	2201      	movs	r2, #1
 80057ae:	4013      	ands	r3, r2
 80057b0:	683a      	ldr	r2, [r7, #0]
 80057b2:	429a      	cmp	r2, r3
 80057b4:	d211      	bcs.n	80057da <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057b6:	4b1b      	ldr	r3, [pc, #108]	; (8005824 <HAL_RCC_ClockConfig+0x184>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	2201      	movs	r2, #1
 80057bc:	4393      	bics	r3, r2
 80057be:	0019      	movs	r1, r3
 80057c0:	4b18      	ldr	r3, [pc, #96]	; (8005824 <HAL_RCC_ClockConfig+0x184>)
 80057c2:	683a      	ldr	r2, [r7, #0]
 80057c4:	430a      	orrs	r2, r1
 80057c6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80057c8:	4b16      	ldr	r3, [pc, #88]	; (8005824 <HAL_RCC_ClockConfig+0x184>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	2201      	movs	r2, #1
 80057ce:	4013      	ands	r3, r2
 80057d0:	683a      	ldr	r2, [r7, #0]
 80057d2:	429a      	cmp	r2, r3
 80057d4:	d001      	beq.n	80057da <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80057d6:	2301      	movs	r3, #1
 80057d8:	e020      	b.n	800581c <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	2204      	movs	r2, #4
 80057e0:	4013      	ands	r3, r2
 80057e2:	d009      	beq.n	80057f8 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80057e4:	4b10      	ldr	r3, [pc, #64]	; (8005828 <HAL_RCC_ClockConfig+0x188>)
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	4a11      	ldr	r2, [pc, #68]	; (8005830 <HAL_RCC_ClockConfig+0x190>)
 80057ea:	4013      	ands	r3, r2
 80057ec:	0019      	movs	r1, r3
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	68da      	ldr	r2, [r3, #12]
 80057f2:	4b0d      	ldr	r3, [pc, #52]	; (8005828 <HAL_RCC_ClockConfig+0x188>)
 80057f4:	430a      	orrs	r2, r1
 80057f6:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80057f8:	f000 f820 	bl	800583c <HAL_RCC_GetSysClockFreq>
 80057fc:	0001      	movs	r1, r0
 80057fe:	4b0a      	ldr	r3, [pc, #40]	; (8005828 <HAL_RCC_ClockConfig+0x188>)
 8005800:	685b      	ldr	r3, [r3, #4]
 8005802:	091b      	lsrs	r3, r3, #4
 8005804:	220f      	movs	r2, #15
 8005806:	4013      	ands	r3, r2
 8005808:	4a0a      	ldr	r2, [pc, #40]	; (8005834 <HAL_RCC_ClockConfig+0x194>)
 800580a:	5cd3      	ldrb	r3, [r2, r3]
 800580c:	000a      	movs	r2, r1
 800580e:	40da      	lsrs	r2, r3
 8005810:	4b09      	ldr	r3, [pc, #36]	; (8005838 <HAL_RCC_ClockConfig+0x198>)
 8005812:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8005814:	2000      	movs	r0, #0
 8005816:	f7fd fa49 	bl	8002cac <HAL_InitTick>
  
  return HAL_OK;
 800581a:	2300      	movs	r3, #0
}
 800581c:	0018      	movs	r0, r3
 800581e:	46bd      	mov	sp, r7
 8005820:	b004      	add	sp, #16
 8005822:	bd80      	pop	{r7, pc}
 8005824:	40022000 	.word	0x40022000
 8005828:	40021000 	.word	0x40021000
 800582c:	00001388 	.word	0x00001388
 8005830:	fffff8ff 	.word	0xfffff8ff
 8005834:	0800cb18 	.word	0x0800cb18
 8005838:	20000000 	.word	0x20000000

0800583c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800583c:	b590      	push	{r4, r7, lr}
 800583e:	b08f      	sub	sp, #60	; 0x3c
 8005840:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8005842:	2314      	movs	r3, #20
 8005844:	18fb      	adds	r3, r7, r3
 8005846:	4a2b      	ldr	r2, [pc, #172]	; (80058f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005848:	ca13      	ldmia	r2!, {r0, r1, r4}
 800584a:	c313      	stmia	r3!, {r0, r1, r4}
 800584c:	6812      	ldr	r2, [r2, #0]
 800584e:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8005850:	1d3b      	adds	r3, r7, #4
 8005852:	4a29      	ldr	r2, [pc, #164]	; (80058f8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005854:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005856:	c313      	stmia	r3!, {r0, r1, r4}
 8005858:	6812      	ldr	r2, [r2, #0]
 800585a:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800585c:	2300      	movs	r3, #0
 800585e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005860:	2300      	movs	r3, #0
 8005862:	62bb      	str	r3, [r7, #40]	; 0x28
 8005864:	2300      	movs	r3, #0
 8005866:	637b      	str	r3, [r7, #52]	; 0x34
 8005868:	2300      	movs	r3, #0
 800586a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 800586c:	2300      	movs	r3, #0
 800586e:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8005870:	4b22      	ldr	r3, [pc, #136]	; (80058fc <HAL_RCC_GetSysClockFreq+0xc0>)
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005878:	220c      	movs	r2, #12
 800587a:	4013      	ands	r3, r2
 800587c:	2b04      	cmp	r3, #4
 800587e:	d002      	beq.n	8005886 <HAL_RCC_GetSysClockFreq+0x4a>
 8005880:	2b08      	cmp	r3, #8
 8005882:	d003      	beq.n	800588c <HAL_RCC_GetSysClockFreq+0x50>
 8005884:	e02d      	b.n	80058e2 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005886:	4b1e      	ldr	r3, [pc, #120]	; (8005900 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005888:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800588a:	e02d      	b.n	80058e8 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800588c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800588e:	0c9b      	lsrs	r3, r3, #18
 8005890:	220f      	movs	r2, #15
 8005892:	4013      	ands	r3, r2
 8005894:	2214      	movs	r2, #20
 8005896:	18ba      	adds	r2, r7, r2
 8005898:	5cd3      	ldrb	r3, [r2, r3]
 800589a:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800589c:	4b17      	ldr	r3, [pc, #92]	; (80058fc <HAL_RCC_GetSysClockFreq+0xc0>)
 800589e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058a0:	220f      	movs	r2, #15
 80058a2:	4013      	ands	r3, r2
 80058a4:	1d3a      	adds	r2, r7, #4
 80058a6:	5cd3      	ldrb	r3, [r2, r3]
 80058a8:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80058aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80058ac:	2380      	movs	r3, #128	; 0x80
 80058ae:	025b      	lsls	r3, r3, #9
 80058b0:	4013      	ands	r3, r2
 80058b2:	d009      	beq.n	80058c8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80058b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80058b6:	4812      	ldr	r0, [pc, #72]	; (8005900 <HAL_RCC_GetSysClockFreq+0xc4>)
 80058b8:	f7fa fc42 	bl	8000140 <__udivsi3>
 80058bc:	0003      	movs	r3, r0
 80058be:	001a      	movs	r2, r3
 80058c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c2:	4353      	muls	r3, r2
 80058c4:	637b      	str	r3, [r7, #52]	; 0x34
 80058c6:	e009      	b.n	80058dc <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80058c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80058ca:	000a      	movs	r2, r1
 80058cc:	0152      	lsls	r2, r2, #5
 80058ce:	1a52      	subs	r2, r2, r1
 80058d0:	0193      	lsls	r3, r2, #6
 80058d2:	1a9b      	subs	r3, r3, r2
 80058d4:	00db      	lsls	r3, r3, #3
 80058d6:	185b      	adds	r3, r3, r1
 80058d8:	021b      	lsls	r3, r3, #8
 80058da:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 80058dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058de:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80058e0:	e002      	b.n	80058e8 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80058e2:	4b07      	ldr	r3, [pc, #28]	; (8005900 <HAL_RCC_GetSysClockFreq+0xc4>)
 80058e4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80058e6:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80058e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80058ea:	0018      	movs	r0, r3
 80058ec:	46bd      	mov	sp, r7
 80058ee:	b00f      	add	sp, #60	; 0x3c
 80058f0:	bd90      	pop	{r4, r7, pc}
 80058f2:	46c0      	nop			; (mov r8, r8)
 80058f4:	0800c9f4 	.word	0x0800c9f4
 80058f8:	0800ca04 	.word	0x0800ca04
 80058fc:	40021000 	.word	0x40021000
 8005900:	007a1200 	.word	0x007a1200

08005904 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005908:	4b02      	ldr	r3, [pc, #8]	; (8005914 <HAL_RCC_GetHCLKFreq+0x10>)
 800590a:	681b      	ldr	r3, [r3, #0]
}
 800590c:	0018      	movs	r0, r3
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}
 8005912:	46c0      	nop			; (mov r8, r8)
 8005914:	20000000 	.word	0x20000000

08005918 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 800591c:	f7ff fff2 	bl	8005904 <HAL_RCC_GetHCLKFreq>
 8005920:	0001      	movs	r1, r0
 8005922:	4b06      	ldr	r3, [pc, #24]	; (800593c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	0a1b      	lsrs	r3, r3, #8
 8005928:	2207      	movs	r2, #7
 800592a:	4013      	ands	r3, r2
 800592c:	4a04      	ldr	r2, [pc, #16]	; (8005940 <HAL_RCC_GetPCLK1Freq+0x28>)
 800592e:	5cd3      	ldrb	r3, [r2, r3]
 8005930:	40d9      	lsrs	r1, r3
 8005932:	000b      	movs	r3, r1
}    
 8005934:	0018      	movs	r0, r3
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}
 800593a:	46c0      	nop			; (mov r8, r8)
 800593c:	40021000 	.word	0x40021000
 8005940:	0800cb28 	.word	0x0800cb28

08005944 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b082      	sub	sp, #8
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
 800594c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2207      	movs	r2, #7
 8005952:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005954:	4b0e      	ldr	r3, [pc, #56]	; (8005990 <HAL_RCC_GetClockConfig+0x4c>)
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	2203      	movs	r2, #3
 800595a:	401a      	ands	r2, r3
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8005960:	4b0b      	ldr	r3, [pc, #44]	; (8005990 <HAL_RCC_GetClockConfig+0x4c>)
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	22f0      	movs	r2, #240	; 0xf0
 8005966:	401a      	ands	r2, r3
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 800596c:	4b08      	ldr	r3, [pc, #32]	; (8005990 <HAL_RCC_GetClockConfig+0x4c>)
 800596e:	685a      	ldr	r2, [r3, #4]
 8005970:	23e0      	movs	r3, #224	; 0xe0
 8005972:	00db      	lsls	r3, r3, #3
 8005974:	401a      	ands	r2, r3
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	60da      	str	r2, [r3, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = __HAL_FLASH_GET_LATENCY(); 
 800597a:	4b06      	ldr	r3, [pc, #24]	; (8005994 <HAL_RCC_GetClockConfig+0x50>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	2201      	movs	r2, #1
 8005980:	401a      	ands	r2, r3
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	601a      	str	r2, [r3, #0]
}
 8005986:	46c0      	nop			; (mov r8, r8)
 8005988:	46bd      	mov	sp, r7
 800598a:	b002      	add	sp, #8
 800598c:	bd80      	pop	{r7, pc}
 800598e:	46c0      	nop			; (mov r8, r8)
 8005990:	40021000 	.word	0x40021000
 8005994:	40022000 	.word	0x40022000

08005998 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b086      	sub	sp, #24
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80059a0:	2300      	movs	r3, #0
 80059a2:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80059a4:	2300      	movs	r3, #0
 80059a6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681a      	ldr	r2, [r3, #0]
 80059ac:	2380      	movs	r3, #128	; 0x80
 80059ae:	025b      	lsls	r3, r3, #9
 80059b0:	4013      	ands	r3, r2
 80059b2:	d100      	bne.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80059b4:	e08e      	b.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80059b6:	2017      	movs	r0, #23
 80059b8:	183b      	adds	r3, r7, r0
 80059ba:	2200      	movs	r2, #0
 80059bc:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80059be:	4b57      	ldr	r3, [pc, #348]	; (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80059c0:	69da      	ldr	r2, [r3, #28]
 80059c2:	2380      	movs	r3, #128	; 0x80
 80059c4:	055b      	lsls	r3, r3, #21
 80059c6:	4013      	ands	r3, r2
 80059c8:	d110      	bne.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80059ca:	4b54      	ldr	r3, [pc, #336]	; (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80059cc:	69da      	ldr	r2, [r3, #28]
 80059ce:	4b53      	ldr	r3, [pc, #332]	; (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80059d0:	2180      	movs	r1, #128	; 0x80
 80059d2:	0549      	lsls	r1, r1, #21
 80059d4:	430a      	orrs	r2, r1
 80059d6:	61da      	str	r2, [r3, #28]
 80059d8:	4b50      	ldr	r3, [pc, #320]	; (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80059da:	69da      	ldr	r2, [r3, #28]
 80059dc:	2380      	movs	r3, #128	; 0x80
 80059de:	055b      	lsls	r3, r3, #21
 80059e0:	4013      	ands	r3, r2
 80059e2:	60bb      	str	r3, [r7, #8]
 80059e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80059e6:	183b      	adds	r3, r7, r0
 80059e8:	2201      	movs	r2, #1
 80059ea:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059ec:	4b4c      	ldr	r3, [pc, #304]	; (8005b20 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80059ee:	681a      	ldr	r2, [r3, #0]
 80059f0:	2380      	movs	r3, #128	; 0x80
 80059f2:	005b      	lsls	r3, r3, #1
 80059f4:	4013      	ands	r3, r2
 80059f6:	d11a      	bne.n	8005a2e <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80059f8:	4b49      	ldr	r3, [pc, #292]	; (8005b20 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80059fa:	681a      	ldr	r2, [r3, #0]
 80059fc:	4b48      	ldr	r3, [pc, #288]	; (8005b20 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80059fe:	2180      	movs	r1, #128	; 0x80
 8005a00:	0049      	lsls	r1, r1, #1
 8005a02:	430a      	orrs	r2, r1
 8005a04:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a06:	f7fd fc43 	bl	8003290 <HAL_GetTick>
 8005a0a:	0003      	movs	r3, r0
 8005a0c:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a0e:	e008      	b.n	8005a22 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a10:	f7fd fc3e 	bl	8003290 <HAL_GetTick>
 8005a14:	0002      	movs	r2, r0
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	1ad3      	subs	r3, r2, r3
 8005a1a:	2b64      	cmp	r3, #100	; 0x64
 8005a1c:	d901      	bls.n	8005a22 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8005a1e:	2303      	movs	r3, #3
 8005a20:	e077      	b.n	8005b12 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a22:	4b3f      	ldr	r3, [pc, #252]	; (8005b20 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8005a24:	681a      	ldr	r2, [r3, #0]
 8005a26:	2380      	movs	r3, #128	; 0x80
 8005a28:	005b      	lsls	r3, r3, #1
 8005a2a:	4013      	ands	r3, r2
 8005a2c:	d0f0      	beq.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005a2e:	4b3b      	ldr	r3, [pc, #236]	; (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005a30:	6a1a      	ldr	r2, [r3, #32]
 8005a32:	23c0      	movs	r3, #192	; 0xc0
 8005a34:	009b      	lsls	r3, r3, #2
 8005a36:	4013      	ands	r3, r2
 8005a38:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d034      	beq.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0x112>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	685a      	ldr	r2, [r3, #4]
 8005a44:	23c0      	movs	r3, #192	; 0xc0
 8005a46:	009b      	lsls	r3, r3, #2
 8005a48:	4013      	ands	r3, r2
 8005a4a:	68fa      	ldr	r2, [r7, #12]
 8005a4c:	429a      	cmp	r2, r3
 8005a4e:	d02c      	beq.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005a50:	4b32      	ldr	r3, [pc, #200]	; (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005a52:	6a1b      	ldr	r3, [r3, #32]
 8005a54:	4a33      	ldr	r2, [pc, #204]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8005a56:	4013      	ands	r3, r2
 8005a58:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005a5a:	4b30      	ldr	r3, [pc, #192]	; (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005a5c:	6a1a      	ldr	r2, [r3, #32]
 8005a5e:	4b2f      	ldr	r3, [pc, #188]	; (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005a60:	2180      	movs	r1, #128	; 0x80
 8005a62:	0249      	lsls	r1, r1, #9
 8005a64:	430a      	orrs	r2, r1
 8005a66:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005a68:	4b2c      	ldr	r3, [pc, #176]	; (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005a6a:	6a1a      	ldr	r2, [r3, #32]
 8005a6c:	4b2b      	ldr	r3, [pc, #172]	; (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005a6e:	492e      	ldr	r1, [pc, #184]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8005a70:	400a      	ands	r2, r1
 8005a72:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005a74:	4b29      	ldr	r3, [pc, #164]	; (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005a76:	68fa      	ldr	r2, [r7, #12]
 8005a78:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	2201      	movs	r2, #1
 8005a7e:	4013      	ands	r3, r2
 8005a80:	d013      	beq.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a82:	f7fd fc05 	bl	8003290 <HAL_GetTick>
 8005a86:	0003      	movs	r3, r0
 8005a88:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a8a:	e009      	b.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a8c:	f7fd fc00 	bl	8003290 <HAL_GetTick>
 8005a90:	0002      	movs	r2, r0
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	1ad3      	subs	r3, r2, r3
 8005a96:	4a25      	ldr	r2, [pc, #148]	; (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d901      	bls.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8005a9c:	2303      	movs	r3, #3
 8005a9e:	e038      	b.n	8005b12 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005aa0:	4b1e      	ldr	r3, [pc, #120]	; (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005aa2:	6a1b      	ldr	r3, [r3, #32]
 8005aa4:	2202      	movs	r2, #2
 8005aa6:	4013      	ands	r3, r2
 8005aa8:	d0f0      	beq.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005aaa:	4b1c      	ldr	r3, [pc, #112]	; (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005aac:	6a1b      	ldr	r3, [r3, #32]
 8005aae:	4a1d      	ldr	r2, [pc, #116]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8005ab0:	4013      	ands	r3, r2
 8005ab2:	0019      	movs	r1, r3
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	685a      	ldr	r2, [r3, #4]
 8005ab8:	4b18      	ldr	r3, [pc, #96]	; (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005aba:	430a      	orrs	r2, r1
 8005abc:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005abe:	2317      	movs	r3, #23
 8005ac0:	18fb      	adds	r3, r7, r3
 8005ac2:	781b      	ldrb	r3, [r3, #0]
 8005ac4:	2b01      	cmp	r3, #1
 8005ac6:	d105      	bne.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ac8:	4b14      	ldr	r3, [pc, #80]	; (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005aca:	69da      	ldr	r2, [r3, #28]
 8005acc:	4b13      	ldr	r3, [pc, #76]	; (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005ace:	4918      	ldr	r1, [pc, #96]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8005ad0:	400a      	ands	r2, r1
 8005ad2:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	2201      	movs	r2, #1
 8005ada:	4013      	ands	r3, r2
 8005adc:	d009      	beq.n	8005af2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005ade:	4b0f      	ldr	r3, [pc, #60]	; (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ae2:	2203      	movs	r2, #3
 8005ae4:	4393      	bics	r3, r2
 8005ae6:	0019      	movs	r1, r3
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	689a      	ldr	r2, [r3, #8]
 8005aec:	4b0b      	ldr	r3, [pc, #44]	; (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005aee:	430a      	orrs	r2, r1
 8005af0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	2220      	movs	r2, #32
 8005af8:	4013      	ands	r3, r2
 8005afa:	d009      	beq.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005afc:	4b07      	ldr	r3, [pc, #28]	; (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b00:	2210      	movs	r2, #16
 8005b02:	4393      	bics	r3, r2
 8005b04:	0019      	movs	r1, r3
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	68da      	ldr	r2, [r3, #12]
 8005b0a:	4b04      	ldr	r3, [pc, #16]	; (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005b0c:	430a      	orrs	r2, r1
 8005b0e:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8005b10:	2300      	movs	r3, #0
}
 8005b12:	0018      	movs	r0, r3
 8005b14:	46bd      	mov	sp, r7
 8005b16:	b006      	add	sp, #24
 8005b18:	bd80      	pop	{r7, pc}
 8005b1a:	46c0      	nop			; (mov r8, r8)
 8005b1c:	40021000 	.word	0x40021000
 8005b20:	40007000 	.word	0x40007000
 8005b24:	fffffcff 	.word	0xfffffcff
 8005b28:	fffeffff 	.word	0xfffeffff
 8005b2c:	00001388 	.word	0x00001388
 8005b30:	efffffff 	.word	0xefffffff

08005b34 <HAL_RTC_Init>:
  *         in the RTC_InitTypeDef structure and initialize the associated handle.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b082      	sub	sp, #8
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d101      	bne.n	8005b46 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8005b42:	2301      	movs	r3, #1
 8005b44:	e081      	b.n	8005c4a <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	7f5b      	ldrb	r3, [r3, #29]
 8005b4a:	b2db      	uxtb	r3, r3
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d106      	bne.n	8005b5e <HAL_RTC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2200      	movs	r2, #0
 8005b54:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	0018      	movs	r0, r3
 8005b5a:	f7fd f86b 	bl	8002c34 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2202      	movs	r2, #2
 8005b62:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	22ca      	movs	r2, #202	; 0xca
 8005b6a:	625a      	str	r2, [r3, #36]	; 0x24
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	2253      	movs	r2, #83	; 0x53
 8005b72:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	0018      	movs	r0, r3
 8005b78:	f000 f9fb 	bl	8005f72 <RTC_EnterInitMode>
 8005b7c:	1e03      	subs	r3, r0, #0
 8005b7e:	d008      	beq.n	8005b92 <HAL_RTC_Init+0x5e>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	22ff      	movs	r2, #255	; 0xff
 8005b86:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2204      	movs	r2, #4
 8005b8c:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8005b8e:	2301      	movs	r3, #1
 8005b90:	e05b      	b.n	8005c4a <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	689a      	ldr	r2, [r3, #8]
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	492d      	ldr	r1, [pc, #180]	; (8005c54 <HAL_RTC_Init+0x120>)
 8005b9e:	400a      	ands	r2, r1
 8005ba0:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	6899      	ldr	r1, [r3, #8]
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	685a      	ldr	r2, [r3, #4]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	691b      	ldr	r3, [r3, #16]
 8005bb0:	431a      	orrs	r2, r3
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	695b      	ldr	r3, [r3, #20]
 8005bb6:	431a      	orrs	r2, r3
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	430a      	orrs	r2, r1
 8005bbe:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	687a      	ldr	r2, [r7, #4]
 8005bc6:	68d2      	ldr	r2, [r2, #12]
 8005bc8:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	6919      	ldr	r1, [r3, #16]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	689b      	ldr	r3, [r3, #8]
 8005bd4:	041a      	lsls	r2, r3, #16
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	430a      	orrs	r2, r1
 8005bdc:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	68da      	ldr	r2, [r3, #12]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	2180      	movs	r1, #128	; 0x80
 8005bea:	438a      	bics	r2, r1
 8005bec:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	689b      	ldr	r3, [r3, #8]
 8005bf4:	2220      	movs	r2, #32
 8005bf6:	4013      	ands	r3, r2
 8005bf8:	d10e      	bne.n	8005c18 <HAL_RTC_Init+0xe4>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	0018      	movs	r0, r3
 8005bfe:	f000 f98f 	bl	8005f20 <HAL_RTC_WaitForSynchro>
 8005c02:	1e03      	subs	r3, r0, #0
 8005c04:	d008      	beq.n	8005c18 <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	22ff      	movs	r2, #255	; 0xff
 8005c0c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2204      	movs	r2, #4
 8005c12:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8005c14:	2301      	movs	r3, #1
 8005c16:	e018      	b.n	8005c4a <HAL_RTC_Init+0x116>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	490d      	ldr	r1, [pc, #52]	; (8005c58 <HAL_RTC_Init+0x124>)
 8005c24:	400a      	ands	r2, r1
 8005c26:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	699a      	ldr	r2, [r3, #24]
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	430a      	orrs	r2, r1
 8005c38:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	22ff      	movs	r2, #255	; 0xff
 8005c40:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2201      	movs	r2, #1
 8005c46:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8005c48:	2300      	movs	r3, #0
  }
}
 8005c4a:	0018      	movs	r0, r3
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	b002      	add	sp, #8
 8005c50:	bd80      	pop	{r7, pc}
 8005c52:	46c0      	nop			; (mov r8, r8)
 8005c54:	ff8fffbf 	.word	0xff8fffbf
 8005c58:	fffbffff 	.word	0xfffbffff

08005c5c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005c5c:	b590      	push	{r4, r7, lr}
 8005c5e:	b087      	sub	sp, #28
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	60f8      	str	r0, [r7, #12]
 8005c64:	60b9      	str	r1, [r7, #8]
 8005c66:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005c68:	2300      	movs	r3, #0
 8005c6a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	7f1b      	ldrb	r3, [r3, #28]
 8005c70:	2b01      	cmp	r3, #1
 8005c72:	d101      	bne.n	8005c78 <HAL_RTC_SetTime+0x1c>
 8005c74:	2302      	movs	r3, #2
 8005c76:	e0a5      	b.n	8005dc4 <HAL_RTC_SetTime+0x168>
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	2202      	movs	r2, #2
 8005c82:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d125      	bne.n	8005cd6 <HAL_RTC_SetTime+0x7a>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	689b      	ldr	r3, [r3, #8]
 8005c90:	2240      	movs	r2, #64	; 0x40
 8005c92:	4013      	ands	r3, r2
 8005c94:	d102      	bne.n	8005c9c <HAL_RTC_SetTime+0x40>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	781b      	ldrb	r3, [r3, #0]
 8005ca0:	0018      	movs	r0, r3
 8005ca2:	f000 f992 	bl	8005fca <RTC_ByteToBcd2>
 8005ca6:	0003      	movs	r3, r0
 8005ca8:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	785b      	ldrb	r3, [r3, #1]
 8005cae:	0018      	movs	r0, r3
 8005cb0:	f000 f98b 	bl	8005fca <RTC_ByteToBcd2>
 8005cb4:	0003      	movs	r3, r0
 8005cb6:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005cb8:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	789b      	ldrb	r3, [r3, #2]
 8005cbe:	0018      	movs	r0, r3
 8005cc0:	f000 f983 	bl	8005fca <RTC_ByteToBcd2>
 8005cc4:	0003      	movs	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8005cc6:	0022      	movs	r2, r4
 8005cc8:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	78db      	ldrb	r3, [r3, #3]
 8005cce:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	617b      	str	r3, [r7, #20]
 8005cd4:	e017      	b.n	8005d06 <HAL_RTC_SetTime+0xaa>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	689b      	ldr	r3, [r3, #8]
 8005cdc:	2240      	movs	r2, #64	; 0x40
 8005cde:	4013      	ands	r3, r2
 8005ce0:	d102      	bne.n	8005ce8 <HAL_RTC_SetTime+0x8c>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	781b      	ldrb	r3, [r3, #0]
 8005cec:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	785b      	ldrb	r3, [r3, #1]
 8005cf2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005cf4:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8005cf6:	68ba      	ldr	r2, [r7, #8]
 8005cf8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8005cfa:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	78db      	ldrb	r3, [r3, #3]
 8005d00:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005d02:	4313      	orrs	r3, r2
 8005d04:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	22ca      	movs	r2, #202	; 0xca
 8005d0c:	625a      	str	r2, [r3, #36]	; 0x24
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	2253      	movs	r2, #83	; 0x53
 8005d14:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	0018      	movs	r0, r3
 8005d1a:	f000 f92a 	bl	8005f72 <RTC_EnterInitMode>
 8005d1e:	1e03      	subs	r3, r0, #0
 8005d20:	d00b      	beq.n	8005d3a <HAL_RTC_SetTime+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	22ff      	movs	r2, #255	; 0xff
 8005d28:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	2204      	movs	r2, #4
 8005d2e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2200      	movs	r2, #0
 8005d34:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8005d36:	2301      	movs	r3, #1
 8005d38:	e044      	b.n	8005dc4 <HAL_RTC_SetTime+0x168>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	697a      	ldr	r2, [r7, #20]
 8005d40:	4922      	ldr	r1, [pc, #136]	; (8005dcc <HAL_RTC_SetTime+0x170>)
 8005d42:	400a      	ands	r2, r1
 8005d44:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	689a      	ldr	r2, [r3, #8]
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	491f      	ldr	r1, [pc, #124]	; (8005dd0 <HAL_RTC_SetTime+0x174>)
 8005d52:	400a      	ands	r2, r1
 8005d54:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	6899      	ldr	r1, [r3, #8]
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	68da      	ldr	r2, [r3, #12]
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	691b      	ldr	r3, [r3, #16]
 8005d64:	431a      	orrs	r2, r3
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	430a      	orrs	r2, r1
 8005d6c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	68da      	ldr	r2, [r3, #12]
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	2180      	movs	r1, #128	; 0x80
 8005d7a:	438a      	bics	r2, r1
 8005d7c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	689b      	ldr	r3, [r3, #8]
 8005d84:	2220      	movs	r2, #32
 8005d86:	4013      	ands	r3, r2
 8005d88:	d111      	bne.n	8005dae <HAL_RTC_SetTime+0x152>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	0018      	movs	r0, r3
 8005d8e:	f000 f8c7 	bl	8005f20 <HAL_RTC_WaitForSynchro>
 8005d92:	1e03      	subs	r3, r0, #0
 8005d94:	d00b      	beq.n	8005dae <HAL_RTC_SetTime+0x152>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	22ff      	movs	r2, #255	; 0xff
 8005d9c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	2204      	movs	r2, #4
 8005da2:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	2200      	movs	r2, #0
 8005da8:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8005daa:	2301      	movs	r3, #1
 8005dac:	e00a      	b.n	8005dc4 <HAL_RTC_SetTime+0x168>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	22ff      	movs	r2, #255	; 0xff
 8005db4:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	2201      	movs	r2, #1
 8005dba:	775a      	strb	r2, [r3, #29]

    __HAL_UNLOCK(hrtc);
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8005dc2:	2300      	movs	r3, #0
  }
}
 8005dc4:	0018      	movs	r0, r3
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	b007      	add	sp, #28
 8005dca:	bd90      	pop	{r4, r7, pc}
 8005dcc:	007f7f7f 	.word	0x007f7f7f
 8005dd0:	fffbffff 	.word	0xfffbffff

08005dd4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005dd4:	b590      	push	{r4, r7, lr}
 8005dd6:	b087      	sub	sp, #28
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	60f8      	str	r0, [r7, #12]
 8005ddc:	60b9      	str	r1, [r7, #8]
 8005dde:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005de0:	2300      	movs	r3, #0
 8005de2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	7f1b      	ldrb	r3, [r3, #28]
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	d101      	bne.n	8005df0 <HAL_RTC_SetDate+0x1c>
 8005dec:	2302      	movs	r3, #2
 8005dee:	e091      	b.n	8005f14 <HAL_RTC_SetDate+0x140>
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	2201      	movs	r2, #1
 8005df4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	2202      	movs	r2, #2
 8005dfa:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d10e      	bne.n	8005e20 <HAL_RTC_SetDate+0x4c>
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	785b      	ldrb	r3, [r3, #1]
 8005e06:	001a      	movs	r2, r3
 8005e08:	2310      	movs	r3, #16
 8005e0a:	4013      	ands	r3, r2
 8005e0c:	d008      	beq.n	8005e20 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	785b      	ldrb	r3, [r3, #1]
 8005e12:	2210      	movs	r2, #16
 8005e14:	4393      	bics	r3, r2
 8005e16:	b2db      	uxtb	r3, r3
 8005e18:	330a      	adds	r3, #10
 8005e1a:	b2da      	uxtb	r2, r3
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d11c      	bne.n	8005e60 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	78db      	ldrb	r3, [r3, #3]
 8005e2a:	0018      	movs	r0, r3
 8005e2c:	f000 f8cd 	bl	8005fca <RTC_ByteToBcd2>
 8005e30:	0003      	movs	r3, r0
 8005e32:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	785b      	ldrb	r3, [r3, #1]
 8005e38:	0018      	movs	r0, r3
 8005e3a:	f000 f8c6 	bl	8005fca <RTC_ByteToBcd2>
 8005e3e:	0003      	movs	r3, r0
 8005e40:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005e42:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	789b      	ldrb	r3, [r3, #2]
 8005e48:	0018      	movs	r0, r3
 8005e4a:	f000 f8be 	bl	8005fca <RTC_ByteToBcd2>
 8005e4e:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8005e50:	0022      	movs	r2, r4
 8005e52:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	781b      	ldrb	r3, [r3, #0]
 8005e58:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	617b      	str	r3, [r7, #20]
 8005e5e:	e00e      	b.n	8005e7e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	78db      	ldrb	r3, [r3, #3]
 8005e64:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	785b      	ldrb	r3, [r3, #1]
 8005e6a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005e6c:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8005e6e:	68ba      	ldr	r2, [r7, #8]
 8005e70:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8005e72:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	781b      	ldrb	r3, [r3, #0]
 8005e78:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	22ca      	movs	r2, #202	; 0xca
 8005e84:	625a      	str	r2, [r3, #36]	; 0x24
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	2253      	movs	r2, #83	; 0x53
 8005e8c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	0018      	movs	r0, r3
 8005e92:	f000 f86e 	bl	8005f72 <RTC_EnterInitMode>
 8005e96:	1e03      	subs	r3, r0, #0
 8005e98:	d00b      	beq.n	8005eb2 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	22ff      	movs	r2, #255	; 0xff
 8005ea0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	2204      	movs	r2, #4
 8005ea6:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8005eae:	2301      	movs	r3, #1
 8005eb0:	e030      	b.n	8005f14 <HAL_RTC_SetDate+0x140>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	697a      	ldr	r2, [r7, #20]
 8005eb8:	4918      	ldr	r1, [pc, #96]	; (8005f1c <HAL_RTC_SetDate+0x148>)
 8005eba:	400a      	ands	r2, r1
 8005ebc:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	68da      	ldr	r2, [r3, #12]
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	2180      	movs	r1, #128	; 0x80
 8005eca:	438a      	bics	r2, r1
 8005ecc:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	689b      	ldr	r3, [r3, #8]
 8005ed4:	2220      	movs	r2, #32
 8005ed6:	4013      	ands	r3, r2
 8005ed8:	d111      	bne.n	8005efe <HAL_RTC_SetDate+0x12a>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	0018      	movs	r0, r3
 8005ede:	f000 f81f 	bl	8005f20 <HAL_RTC_WaitForSynchro>
 8005ee2:	1e03      	subs	r3, r0, #0
 8005ee4:	d00b      	beq.n	8005efe <HAL_RTC_SetDate+0x12a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	22ff      	movs	r2, #255	; 0xff
 8005eec:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	2204      	movs	r2, #4
 8005ef2:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8005efa:	2301      	movs	r3, #1
 8005efc:	e00a      	b.n	8005f14 <HAL_RTC_SetDate+0x140>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	22ff      	movs	r2, #255	; 0xff
 8005f04:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	2201      	movs	r2, #1
 8005f0a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8005f12:	2300      	movs	r3, #0
  }
}
 8005f14:	0018      	movs	r0, r3
 8005f16:	46bd      	mov	sp, r7
 8005f18:	b007      	add	sp, #28
 8005f1a:	bd90      	pop	{r4, r7, pc}
 8005f1c:	00ffff3f 	.word	0x00ffff3f

08005f20 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b084      	sub	sp, #16
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005f28:	2300      	movs	r3, #0
 8005f2a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	68da      	ldr	r2, [r3, #12]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	21a0      	movs	r1, #160	; 0xa0
 8005f38:	438a      	bics	r2, r1
 8005f3a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8005f3c:	f7fd f9a8 	bl	8003290 <HAL_GetTick>
 8005f40:	0003      	movs	r3, r0
 8005f42:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005f44:	e00a      	b.n	8005f5c <HAL_RTC_WaitForSynchro+0x3c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005f46:	f7fd f9a3 	bl	8003290 <HAL_GetTick>
 8005f4a:	0002      	movs	r2, r0
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	1ad2      	subs	r2, r2, r3
 8005f50:	23fa      	movs	r3, #250	; 0xfa
 8005f52:	009b      	lsls	r3, r3, #2
 8005f54:	429a      	cmp	r2, r3
 8005f56:	d901      	bls.n	8005f5c <HAL_RTC_WaitForSynchro+0x3c>
    {
      return HAL_TIMEOUT;
 8005f58:	2303      	movs	r3, #3
 8005f5a:	e006      	b.n	8005f6a <HAL_RTC_WaitForSynchro+0x4a>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	68db      	ldr	r3, [r3, #12]
 8005f62:	2220      	movs	r2, #32
 8005f64:	4013      	ands	r3, r2
 8005f66:	d0ee      	beq.n	8005f46 <HAL_RTC_WaitForSynchro+0x26>
    }
  }

  return HAL_OK;
 8005f68:	2300      	movs	r3, #0
}
 8005f6a:	0018      	movs	r0, r3
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	b004      	add	sp, #16
 8005f70:	bd80      	pop	{r7, pc}

08005f72 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005f72:	b580      	push	{r7, lr}
 8005f74:	b084      	sub	sp, #16
 8005f76:	af00      	add	r7, sp, #0
 8005f78:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	68db      	ldr	r3, [r3, #12]
 8005f84:	2240      	movs	r2, #64	; 0x40
 8005f86:	4013      	ands	r3, r2
 8005f88:	d11a      	bne.n	8005fc0 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	2201      	movs	r2, #1
 8005f90:	4252      	negs	r2, r2
 8005f92:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005f94:	f7fd f97c 	bl	8003290 <HAL_GetTick>
 8005f98:	0003      	movs	r3, r0
 8005f9a:	60fb      	str	r3, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005f9c:	e00a      	b.n	8005fb4 <RTC_EnterInitMode+0x42>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005f9e:	f7fd f977 	bl	8003290 <HAL_GetTick>
 8005fa2:	0002      	movs	r2, r0
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	1ad2      	subs	r2, r2, r3
 8005fa8:	23fa      	movs	r3, #250	; 0xfa
 8005faa:	009b      	lsls	r3, r3, #2
 8005fac:	429a      	cmp	r2, r3
 8005fae:	d901      	bls.n	8005fb4 <RTC_EnterInitMode+0x42>
      {
        return HAL_TIMEOUT;
 8005fb0:	2303      	movs	r3, #3
 8005fb2:	e006      	b.n	8005fc2 <RTC_EnterInitMode+0x50>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	68db      	ldr	r3, [r3, #12]
 8005fba:	2240      	movs	r2, #64	; 0x40
 8005fbc:	4013      	ands	r3, r2
 8005fbe:	d0ee      	beq.n	8005f9e <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8005fc0:	2300      	movs	r3, #0
}
 8005fc2:	0018      	movs	r0, r3
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	b004      	add	sp, #16
 8005fc8:	bd80      	pop	{r7, pc}

08005fca <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005fca:	b580      	push	{r7, lr}
 8005fcc:	b084      	sub	sp, #16
 8005fce:	af00      	add	r7, sp, #0
 8005fd0:	0002      	movs	r2, r0
 8005fd2:	1dfb      	adds	r3, r7, #7
 8005fd4:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8005fda:	e007      	b.n	8005fec <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	3301      	adds	r3, #1
 8005fe0:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8005fe2:	1dfb      	adds	r3, r7, #7
 8005fe4:	1dfa      	adds	r2, r7, #7
 8005fe6:	7812      	ldrb	r2, [r2, #0]
 8005fe8:	3a0a      	subs	r2, #10
 8005fea:	701a      	strb	r2, [r3, #0]
  while (Value >= 10U)
 8005fec:	1dfb      	adds	r3, r7, #7
 8005fee:	781b      	ldrb	r3, [r3, #0]
 8005ff0:	2b09      	cmp	r3, #9
 8005ff2:	d8f3      	bhi.n	8005fdc <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	b2db      	uxtb	r3, r3
 8005ff8:	011b      	lsls	r3, r3, #4
 8005ffa:	b2da      	uxtb	r2, r3
 8005ffc:	1dfb      	adds	r3, r7, #7
 8005ffe:	781b      	ldrb	r3, [r3, #0]
 8006000:	4313      	orrs	r3, r2
 8006002:	b2db      	uxtb	r3, r3
}
 8006004:	0018      	movs	r0, r3
 8006006:	46bd      	mov	sp, r7
 8006008:	b004      	add	sp, #16
 800600a:	bd80      	pop	{r7, pc}

0800600c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b082      	sub	sp, #8
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d101      	bne.n	800601e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800601a:	2301      	movs	r3, #1
 800601c:	e042      	b.n	80060a4 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	223d      	movs	r2, #61	; 0x3d
 8006022:	5c9b      	ldrb	r3, [r3, r2]
 8006024:	b2db      	uxtb	r3, r3
 8006026:	2b00      	cmp	r3, #0
 8006028:	d107      	bne.n	800603a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	223c      	movs	r2, #60	; 0x3c
 800602e:	2100      	movs	r1, #0
 8006030:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	0018      	movs	r0, r3
 8006036:	f000 f839 	bl	80060ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	223d      	movs	r2, #61	; 0x3d
 800603e:	2102      	movs	r1, #2
 8006040:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681a      	ldr	r2, [r3, #0]
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	3304      	adds	r3, #4
 800604a:	0019      	movs	r1, r3
 800604c:	0010      	movs	r0, r2
 800604e:	f000 f9b7 	bl	80063c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2246      	movs	r2, #70	; 0x46
 8006056:	2101      	movs	r1, #1
 8006058:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	223e      	movs	r2, #62	; 0x3e
 800605e:	2101      	movs	r1, #1
 8006060:	5499      	strb	r1, [r3, r2]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	223f      	movs	r2, #63	; 0x3f
 8006066:	2101      	movs	r1, #1
 8006068:	5499      	strb	r1, [r3, r2]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2240      	movs	r2, #64	; 0x40
 800606e:	2101      	movs	r1, #1
 8006070:	5499      	strb	r1, [r3, r2]
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2241      	movs	r2, #65	; 0x41
 8006076:	2101      	movs	r1, #1
 8006078:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2242      	movs	r2, #66	; 0x42
 800607e:	2101      	movs	r1, #1
 8006080:	5499      	strb	r1, [r3, r2]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2243      	movs	r2, #67	; 0x43
 8006086:	2101      	movs	r1, #1
 8006088:	5499      	strb	r1, [r3, r2]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2244      	movs	r2, #68	; 0x44
 800608e:	2101      	movs	r1, #1
 8006090:	5499      	strb	r1, [r3, r2]
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2245      	movs	r2, #69	; 0x45
 8006096:	2101      	movs	r1, #1
 8006098:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	223d      	movs	r2, #61	; 0x3d
 800609e:	2101      	movs	r1, #1
 80060a0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80060a2:	2300      	movs	r3, #0
}
 80060a4:	0018      	movs	r0, r3
 80060a6:	46bd      	mov	sp, r7
 80060a8:	b002      	add	sp, #8
 80060aa:	bd80      	pop	{r7, pc}

080060ac <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b082      	sub	sp, #8
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80060b4:	46c0      	nop			; (mov r8, r8)
 80060b6:	46bd      	mov	sp, r7
 80060b8:	b002      	add	sp, #8
 80060ba:	bd80      	pop	{r7, pc}

080060bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b084      	sub	sp, #16
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	223d      	movs	r2, #61	; 0x3d
 80060c8:	5c9b      	ldrb	r3, [r3, r2]
 80060ca:	b2db      	uxtb	r3, r3
 80060cc:	2b01      	cmp	r3, #1
 80060ce:	d001      	beq.n	80060d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80060d0:	2301      	movs	r3, #1
 80060d2:	e035      	b.n	8006140 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	223d      	movs	r2, #61	; 0x3d
 80060d8:	2102      	movs	r1, #2
 80060da:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	68da      	ldr	r2, [r3, #12]
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	2101      	movs	r1, #1
 80060e8:	430a      	orrs	r2, r1
 80060ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a15      	ldr	r2, [pc, #84]	; (8006148 <HAL_TIM_Base_Start_IT+0x8c>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d009      	beq.n	800610a <HAL_TIM_Base_Start_IT+0x4e>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4a14      	ldr	r2, [pc, #80]	; (800614c <HAL_TIM_Base_Start_IT+0x90>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d004      	beq.n	800610a <HAL_TIM_Base_Start_IT+0x4e>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4a12      	ldr	r2, [pc, #72]	; (8006150 <HAL_TIM_Base_Start_IT+0x94>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d111      	bne.n	800612e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	689b      	ldr	r3, [r3, #8]
 8006110:	2207      	movs	r2, #7
 8006112:	4013      	ands	r3, r2
 8006114:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	2b06      	cmp	r3, #6
 800611a:	d010      	beq.n	800613e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	681a      	ldr	r2, [r3, #0]
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	2101      	movs	r1, #1
 8006128:	430a      	orrs	r2, r1
 800612a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800612c:	e007      	b.n	800613e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	681a      	ldr	r2, [r3, #0]
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	2101      	movs	r1, #1
 800613a:	430a      	orrs	r2, r1
 800613c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800613e:	2300      	movs	r3, #0
}
 8006140:	0018      	movs	r0, r3
 8006142:	46bd      	mov	sp, r7
 8006144:	b004      	add	sp, #16
 8006146:	bd80      	pop	{r7, pc}
 8006148:	40012c00 	.word	0x40012c00
 800614c:	40000400 	.word	0x40000400
 8006150:	40014000 	.word	0x40014000

08006154 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b082      	sub	sp, #8
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	691b      	ldr	r3, [r3, #16]
 8006162:	2202      	movs	r2, #2
 8006164:	4013      	ands	r3, r2
 8006166:	2b02      	cmp	r3, #2
 8006168:	d124      	bne.n	80061b4 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	68db      	ldr	r3, [r3, #12]
 8006170:	2202      	movs	r2, #2
 8006172:	4013      	ands	r3, r2
 8006174:	2b02      	cmp	r3, #2
 8006176:	d11d      	bne.n	80061b4 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	2203      	movs	r2, #3
 800617e:	4252      	negs	r2, r2
 8006180:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2201      	movs	r2, #1
 8006186:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	699b      	ldr	r3, [r3, #24]
 800618e:	2203      	movs	r2, #3
 8006190:	4013      	ands	r3, r2
 8006192:	d004      	beq.n	800619e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	0018      	movs	r0, r3
 8006198:	f000 f8fa 	bl	8006390 <HAL_TIM_IC_CaptureCallback>
 800619c:	e007      	b.n	80061ae <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	0018      	movs	r0, r3
 80061a2:	f000 f8ed 	bl	8006380 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	0018      	movs	r0, r3
 80061aa:	f000 f8f9 	bl	80063a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2200      	movs	r2, #0
 80061b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	691b      	ldr	r3, [r3, #16]
 80061ba:	2204      	movs	r2, #4
 80061bc:	4013      	ands	r3, r2
 80061be:	2b04      	cmp	r3, #4
 80061c0:	d125      	bne.n	800620e <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	68db      	ldr	r3, [r3, #12]
 80061c8:	2204      	movs	r2, #4
 80061ca:	4013      	ands	r3, r2
 80061cc:	2b04      	cmp	r3, #4
 80061ce:	d11e      	bne.n	800620e <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	2205      	movs	r2, #5
 80061d6:	4252      	negs	r2, r2
 80061d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2202      	movs	r2, #2
 80061de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	699a      	ldr	r2, [r3, #24]
 80061e6:	23c0      	movs	r3, #192	; 0xc0
 80061e8:	009b      	lsls	r3, r3, #2
 80061ea:	4013      	ands	r3, r2
 80061ec:	d004      	beq.n	80061f8 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	0018      	movs	r0, r3
 80061f2:	f000 f8cd 	bl	8006390 <HAL_TIM_IC_CaptureCallback>
 80061f6:	e007      	b.n	8006208 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	0018      	movs	r0, r3
 80061fc:	f000 f8c0 	bl	8006380 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	0018      	movs	r0, r3
 8006204:	f000 f8cc 	bl	80063a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2200      	movs	r2, #0
 800620c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	691b      	ldr	r3, [r3, #16]
 8006214:	2208      	movs	r2, #8
 8006216:	4013      	ands	r3, r2
 8006218:	2b08      	cmp	r3, #8
 800621a:	d124      	bne.n	8006266 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	68db      	ldr	r3, [r3, #12]
 8006222:	2208      	movs	r2, #8
 8006224:	4013      	ands	r3, r2
 8006226:	2b08      	cmp	r3, #8
 8006228:	d11d      	bne.n	8006266 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	2209      	movs	r2, #9
 8006230:	4252      	negs	r2, r2
 8006232:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2204      	movs	r2, #4
 8006238:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	69db      	ldr	r3, [r3, #28]
 8006240:	2203      	movs	r2, #3
 8006242:	4013      	ands	r3, r2
 8006244:	d004      	beq.n	8006250 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	0018      	movs	r0, r3
 800624a:	f000 f8a1 	bl	8006390 <HAL_TIM_IC_CaptureCallback>
 800624e:	e007      	b.n	8006260 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	0018      	movs	r0, r3
 8006254:	f000 f894 	bl	8006380 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	0018      	movs	r0, r3
 800625c:	f000 f8a0 	bl	80063a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2200      	movs	r2, #0
 8006264:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	691b      	ldr	r3, [r3, #16]
 800626c:	2210      	movs	r2, #16
 800626e:	4013      	ands	r3, r2
 8006270:	2b10      	cmp	r3, #16
 8006272:	d125      	bne.n	80062c0 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	68db      	ldr	r3, [r3, #12]
 800627a:	2210      	movs	r2, #16
 800627c:	4013      	ands	r3, r2
 800627e:	2b10      	cmp	r3, #16
 8006280:	d11e      	bne.n	80062c0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	2211      	movs	r2, #17
 8006288:	4252      	negs	r2, r2
 800628a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2208      	movs	r2, #8
 8006290:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	69da      	ldr	r2, [r3, #28]
 8006298:	23c0      	movs	r3, #192	; 0xc0
 800629a:	009b      	lsls	r3, r3, #2
 800629c:	4013      	ands	r3, r2
 800629e:	d004      	beq.n	80062aa <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	0018      	movs	r0, r3
 80062a4:	f000 f874 	bl	8006390 <HAL_TIM_IC_CaptureCallback>
 80062a8:	e007      	b.n	80062ba <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	0018      	movs	r0, r3
 80062ae:	f000 f867 	bl	8006380 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	0018      	movs	r0, r3
 80062b6:	f000 f873 	bl	80063a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2200      	movs	r2, #0
 80062be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	691b      	ldr	r3, [r3, #16]
 80062c6:	2201      	movs	r2, #1
 80062c8:	4013      	ands	r3, r2
 80062ca:	2b01      	cmp	r3, #1
 80062cc:	d10f      	bne.n	80062ee <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	68db      	ldr	r3, [r3, #12]
 80062d4:	2201      	movs	r2, #1
 80062d6:	4013      	ands	r3, r2
 80062d8:	2b01      	cmp	r3, #1
 80062da:	d108      	bne.n	80062ee <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	2202      	movs	r2, #2
 80062e2:	4252      	negs	r2, r2
 80062e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	0018      	movs	r0, r3
 80062ea:	f7fc fc29 	bl	8002b40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	691b      	ldr	r3, [r3, #16]
 80062f4:	2280      	movs	r2, #128	; 0x80
 80062f6:	4013      	ands	r3, r2
 80062f8:	2b80      	cmp	r3, #128	; 0x80
 80062fa:	d10f      	bne.n	800631c <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	68db      	ldr	r3, [r3, #12]
 8006302:	2280      	movs	r2, #128	; 0x80
 8006304:	4013      	ands	r3, r2
 8006306:	2b80      	cmp	r3, #128	; 0x80
 8006308:	d108      	bne.n	800631c <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	2281      	movs	r2, #129	; 0x81
 8006310:	4252      	negs	r2, r2
 8006312:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	0018      	movs	r0, r3
 8006318:	f000 f8d0 	bl	80064bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	691b      	ldr	r3, [r3, #16]
 8006322:	2240      	movs	r2, #64	; 0x40
 8006324:	4013      	ands	r3, r2
 8006326:	2b40      	cmp	r3, #64	; 0x40
 8006328:	d10f      	bne.n	800634a <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	68db      	ldr	r3, [r3, #12]
 8006330:	2240      	movs	r2, #64	; 0x40
 8006332:	4013      	ands	r3, r2
 8006334:	2b40      	cmp	r3, #64	; 0x40
 8006336:	d108      	bne.n	800634a <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	2241      	movs	r2, #65	; 0x41
 800633e:	4252      	negs	r2, r2
 8006340:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	0018      	movs	r0, r3
 8006346:	f000 f833 	bl	80063b0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	691b      	ldr	r3, [r3, #16]
 8006350:	2220      	movs	r2, #32
 8006352:	4013      	ands	r3, r2
 8006354:	2b20      	cmp	r3, #32
 8006356:	d10f      	bne.n	8006378 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	68db      	ldr	r3, [r3, #12]
 800635e:	2220      	movs	r2, #32
 8006360:	4013      	ands	r3, r2
 8006362:	2b20      	cmp	r3, #32
 8006364:	d108      	bne.n	8006378 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	2221      	movs	r2, #33	; 0x21
 800636c:	4252      	negs	r2, r2
 800636e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	0018      	movs	r0, r3
 8006374:	f000 f89a 	bl	80064ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006378:	46c0      	nop			; (mov r8, r8)
 800637a:	46bd      	mov	sp, r7
 800637c:	b002      	add	sp, #8
 800637e:	bd80      	pop	{r7, pc}

08006380 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b082      	sub	sp, #8
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006388:	46c0      	nop			; (mov r8, r8)
 800638a:	46bd      	mov	sp, r7
 800638c:	b002      	add	sp, #8
 800638e:	bd80      	pop	{r7, pc}

08006390 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b082      	sub	sp, #8
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006398:	46c0      	nop			; (mov r8, r8)
 800639a:	46bd      	mov	sp, r7
 800639c:	b002      	add	sp, #8
 800639e:	bd80      	pop	{r7, pc}

080063a0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b082      	sub	sp, #8
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80063a8:	46c0      	nop			; (mov r8, r8)
 80063aa:	46bd      	mov	sp, r7
 80063ac:	b002      	add	sp, #8
 80063ae:	bd80      	pop	{r7, pc}

080063b0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b082      	sub	sp, #8
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80063b8:	46c0      	nop			; (mov r8, r8)
 80063ba:	46bd      	mov	sp, r7
 80063bc:	b002      	add	sp, #8
 80063be:	bd80      	pop	{r7, pc}

080063c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b084      	sub	sp, #16
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
 80063c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	4a2f      	ldr	r2, [pc, #188]	; (8006490 <TIM_Base_SetConfig+0xd0>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d003      	beq.n	80063e0 <TIM_Base_SetConfig+0x20>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	4a2e      	ldr	r2, [pc, #184]	; (8006494 <TIM_Base_SetConfig+0xd4>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d108      	bne.n	80063f2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	2270      	movs	r2, #112	; 0x70
 80063e4:	4393      	bics	r3, r2
 80063e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	68fa      	ldr	r2, [r7, #12]
 80063ee:	4313      	orrs	r3, r2
 80063f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	4a26      	ldr	r2, [pc, #152]	; (8006490 <TIM_Base_SetConfig+0xd0>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d013      	beq.n	8006422 <TIM_Base_SetConfig+0x62>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	4a25      	ldr	r2, [pc, #148]	; (8006494 <TIM_Base_SetConfig+0xd4>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d00f      	beq.n	8006422 <TIM_Base_SetConfig+0x62>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	4a24      	ldr	r2, [pc, #144]	; (8006498 <TIM_Base_SetConfig+0xd8>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d00b      	beq.n	8006422 <TIM_Base_SetConfig+0x62>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	4a23      	ldr	r2, [pc, #140]	; (800649c <TIM_Base_SetConfig+0xdc>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d007      	beq.n	8006422 <TIM_Base_SetConfig+0x62>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	4a22      	ldr	r2, [pc, #136]	; (80064a0 <TIM_Base_SetConfig+0xe0>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d003      	beq.n	8006422 <TIM_Base_SetConfig+0x62>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	4a21      	ldr	r2, [pc, #132]	; (80064a4 <TIM_Base_SetConfig+0xe4>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d108      	bne.n	8006434 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	4a20      	ldr	r2, [pc, #128]	; (80064a8 <TIM_Base_SetConfig+0xe8>)
 8006426:	4013      	ands	r3, r2
 8006428:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	68db      	ldr	r3, [r3, #12]
 800642e:	68fa      	ldr	r2, [r7, #12]
 8006430:	4313      	orrs	r3, r2
 8006432:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	2280      	movs	r2, #128	; 0x80
 8006438:	4393      	bics	r3, r2
 800643a:	001a      	movs	r2, r3
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	695b      	ldr	r3, [r3, #20]
 8006440:	4313      	orrs	r3, r2
 8006442:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	68fa      	ldr	r2, [r7, #12]
 8006448:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	689a      	ldr	r2, [r3, #8]
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	681a      	ldr	r2, [r3, #0]
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	4a0c      	ldr	r2, [pc, #48]	; (8006490 <TIM_Base_SetConfig+0xd0>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d00b      	beq.n	800647a <TIM_Base_SetConfig+0xba>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	4a0d      	ldr	r2, [pc, #52]	; (800649c <TIM_Base_SetConfig+0xdc>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d007      	beq.n	800647a <TIM_Base_SetConfig+0xba>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	4a0c      	ldr	r2, [pc, #48]	; (80064a0 <TIM_Base_SetConfig+0xe0>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d003      	beq.n	800647a <TIM_Base_SetConfig+0xba>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	4a0b      	ldr	r2, [pc, #44]	; (80064a4 <TIM_Base_SetConfig+0xe4>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d103      	bne.n	8006482 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	691a      	ldr	r2, [r3, #16]
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2201      	movs	r2, #1
 8006486:	615a      	str	r2, [r3, #20]
}
 8006488:	46c0      	nop			; (mov r8, r8)
 800648a:	46bd      	mov	sp, r7
 800648c:	b004      	add	sp, #16
 800648e:	bd80      	pop	{r7, pc}
 8006490:	40012c00 	.word	0x40012c00
 8006494:	40000400 	.word	0x40000400
 8006498:	40002000 	.word	0x40002000
 800649c:	40014000 	.word	0x40014000
 80064a0:	40014400 	.word	0x40014400
 80064a4:	40014800 	.word	0x40014800
 80064a8:	fffffcff 	.word	0xfffffcff

080064ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b082      	sub	sp, #8
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80064b4:	46c0      	nop			; (mov r8, r8)
 80064b6:	46bd      	mov	sp, r7
 80064b8:	b002      	add	sp, #8
 80064ba:	bd80      	pop	{r7, pc}

080064bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b082      	sub	sp, #8
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80064c4:	46c0      	nop			; (mov r8, r8)
 80064c6:	46bd      	mov	sp, r7
 80064c8:	b002      	add	sp, #8
 80064ca:	bd80      	pop	{r7, pc}

080064cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b082      	sub	sp, #8
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d101      	bne.n	80064de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80064da:	2301      	movs	r3, #1
 80064dc:	e044      	b.n	8006568 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d107      	bne.n	80064f6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2274      	movs	r2, #116	; 0x74
 80064ea:	2100      	movs	r1, #0
 80064ec:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	0018      	movs	r0, r3
 80064f2:	f7fc fe27 	bl	8003144 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2224      	movs	r2, #36	; 0x24
 80064fa:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	681a      	ldr	r2, [r3, #0]
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	2101      	movs	r1, #1
 8006508:	438a      	bics	r2, r1
 800650a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	0018      	movs	r0, r3
 8006510:	f000 fae4 	bl	8006adc <UART_SetConfig>
 8006514:	0003      	movs	r3, r0
 8006516:	2b01      	cmp	r3, #1
 8006518:	d101      	bne.n	800651e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800651a:	2301      	movs	r3, #1
 800651c:	e024      	b.n	8006568 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006522:	2b00      	cmp	r3, #0
 8006524:	d003      	beq.n	800652e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	0018      	movs	r0, r3
 800652a:	f000 fc17 	bl	8006d5c <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	685a      	ldr	r2, [r3, #4]
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	490d      	ldr	r1, [pc, #52]	; (8006570 <HAL_UART_Init+0xa4>)
 800653a:	400a      	ands	r2, r1
 800653c:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	689a      	ldr	r2, [r3, #8]
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	2108      	movs	r1, #8
 800654a:	438a      	bics	r2, r1
 800654c:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	681a      	ldr	r2, [r3, #0]
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	2101      	movs	r1, #1
 800655a:	430a      	orrs	r2, r1
 800655c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	0018      	movs	r0, r3
 8006562:	f000 fcaf 	bl	8006ec4 <UART_CheckIdleState>
 8006566:	0003      	movs	r3, r0
}
 8006568:	0018      	movs	r0, r3
 800656a:	46bd      	mov	sp, r7
 800656c:	b002      	add	sp, #8
 800656e:	bd80      	pop	{r7, pc}
 8006570:	fffff7ff 	.word	0xfffff7ff

08006574 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b08a      	sub	sp, #40	; 0x28
 8006578:	af02      	add	r7, sp, #8
 800657a:	60f8      	str	r0, [r7, #12]
 800657c:	60b9      	str	r1, [r7, #8]
 800657e:	603b      	str	r3, [r7, #0]
 8006580:	1dbb      	adds	r3, r7, #6
 8006582:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006588:	2b20      	cmp	r3, #32
 800658a:	d000      	beq.n	800658e <HAL_UART_Transmit+0x1a>
 800658c:	e096      	b.n	80066bc <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d003      	beq.n	800659c <HAL_UART_Transmit+0x28>
 8006594:	1dbb      	adds	r3, r7, #6
 8006596:	881b      	ldrh	r3, [r3, #0]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d101      	bne.n	80065a0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800659c:	2301      	movs	r3, #1
 800659e:	e08e      	b.n	80066be <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	689a      	ldr	r2, [r3, #8]
 80065a4:	2380      	movs	r3, #128	; 0x80
 80065a6:	015b      	lsls	r3, r3, #5
 80065a8:	429a      	cmp	r2, r3
 80065aa:	d109      	bne.n	80065c0 <HAL_UART_Transmit+0x4c>
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	691b      	ldr	r3, [r3, #16]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d105      	bne.n	80065c0 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	2201      	movs	r2, #1
 80065b8:	4013      	ands	r3, r2
 80065ba:	d001      	beq.n	80065c0 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80065bc:	2301      	movs	r3, #1
 80065be:	e07e      	b.n	80066be <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	2274      	movs	r2, #116	; 0x74
 80065c4:	5c9b      	ldrb	r3, [r3, r2]
 80065c6:	2b01      	cmp	r3, #1
 80065c8:	d101      	bne.n	80065ce <HAL_UART_Transmit+0x5a>
 80065ca:	2302      	movs	r3, #2
 80065cc:	e077      	b.n	80066be <HAL_UART_Transmit+0x14a>
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	2274      	movs	r2, #116	; 0x74
 80065d2:	2101      	movs	r1, #1
 80065d4:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	2280      	movs	r2, #128	; 0x80
 80065da:	2100      	movs	r1, #0
 80065dc:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	2221      	movs	r2, #33	; 0x21
 80065e2:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80065e4:	f7fc fe54 	bl	8003290 <HAL_GetTick>
 80065e8:	0003      	movs	r3, r0
 80065ea:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	1dba      	adds	r2, r7, #6
 80065f0:	2150      	movs	r1, #80	; 0x50
 80065f2:	8812      	ldrh	r2, [r2, #0]
 80065f4:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	1dba      	adds	r2, r7, #6
 80065fa:	2152      	movs	r1, #82	; 0x52
 80065fc:	8812      	ldrh	r2, [r2, #0]
 80065fe:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	689a      	ldr	r2, [r3, #8]
 8006604:	2380      	movs	r3, #128	; 0x80
 8006606:	015b      	lsls	r3, r3, #5
 8006608:	429a      	cmp	r2, r3
 800660a:	d108      	bne.n	800661e <HAL_UART_Transmit+0xaa>
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	691b      	ldr	r3, [r3, #16]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d104      	bne.n	800661e <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8006614:	2300      	movs	r3, #0
 8006616:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	61bb      	str	r3, [r7, #24]
 800661c:	e003      	b.n	8006626 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006622:	2300      	movs	r3, #0
 8006624:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	2274      	movs	r2, #116	; 0x74
 800662a:	2100      	movs	r1, #0
 800662c:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 800662e:	e02d      	b.n	800668c <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006630:	697a      	ldr	r2, [r7, #20]
 8006632:	68f8      	ldr	r0, [r7, #12]
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	9300      	str	r3, [sp, #0]
 8006638:	0013      	movs	r3, r2
 800663a:	2200      	movs	r2, #0
 800663c:	2180      	movs	r1, #128	; 0x80
 800663e:	f000 fc89 	bl	8006f54 <UART_WaitOnFlagUntilTimeout>
 8006642:	1e03      	subs	r3, r0, #0
 8006644:	d001      	beq.n	800664a <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8006646:	2303      	movs	r3, #3
 8006648:	e039      	b.n	80066be <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 800664a:	69fb      	ldr	r3, [r7, #28]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d10b      	bne.n	8006668 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006650:	69bb      	ldr	r3, [r7, #24]
 8006652:	881a      	ldrh	r2, [r3, #0]
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	05d2      	lsls	r2, r2, #23
 800665a:	0dd2      	lsrs	r2, r2, #23
 800665c:	b292      	uxth	r2, r2
 800665e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006660:	69bb      	ldr	r3, [r7, #24]
 8006662:	3302      	adds	r3, #2
 8006664:	61bb      	str	r3, [r7, #24]
 8006666:	e008      	b.n	800667a <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006668:	69fb      	ldr	r3, [r7, #28]
 800666a:	781a      	ldrb	r2, [r3, #0]
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	b292      	uxth	r2, r2
 8006672:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006674:	69fb      	ldr	r3, [r7, #28]
 8006676:	3301      	adds	r3, #1
 8006678:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	2252      	movs	r2, #82	; 0x52
 800667e:	5a9b      	ldrh	r3, [r3, r2]
 8006680:	b29b      	uxth	r3, r3
 8006682:	3b01      	subs	r3, #1
 8006684:	b299      	uxth	r1, r3
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	2252      	movs	r2, #82	; 0x52
 800668a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	2252      	movs	r2, #82	; 0x52
 8006690:	5a9b      	ldrh	r3, [r3, r2]
 8006692:	b29b      	uxth	r3, r3
 8006694:	2b00      	cmp	r3, #0
 8006696:	d1cb      	bne.n	8006630 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006698:	697a      	ldr	r2, [r7, #20]
 800669a:	68f8      	ldr	r0, [r7, #12]
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	9300      	str	r3, [sp, #0]
 80066a0:	0013      	movs	r3, r2
 80066a2:	2200      	movs	r2, #0
 80066a4:	2140      	movs	r1, #64	; 0x40
 80066a6:	f000 fc55 	bl	8006f54 <UART_WaitOnFlagUntilTimeout>
 80066aa:	1e03      	subs	r3, r0, #0
 80066ac:	d001      	beq.n	80066b2 <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 80066ae:	2303      	movs	r3, #3
 80066b0:	e005      	b.n	80066be <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	2220      	movs	r2, #32
 80066b6:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80066b8:	2300      	movs	r3, #0
 80066ba:	e000      	b.n	80066be <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80066bc:	2302      	movs	r3, #2
  }
}
 80066be:	0018      	movs	r0, r3
 80066c0:	46bd      	mov	sp, r7
 80066c2:	b008      	add	sp, #32
 80066c4:	bd80      	pop	{r7, pc}
	...

080066c8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b088      	sub	sp, #32
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	69db      	ldr	r3, [r3, #28]
 80066d6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	689b      	ldr	r3, [r3, #8]
 80066e6:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80066e8:	69fb      	ldr	r3, [r7, #28]
 80066ea:	4ab4      	ldr	r2, [pc, #720]	; (80069bc <HAL_UART_IRQHandler+0x2f4>)
 80066ec:	4013      	ands	r3, r2
 80066ee:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80066f0:	693b      	ldr	r3, [r7, #16]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d112      	bne.n	800671c <HAL_UART_IRQHandler+0x54>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80066f6:	69fb      	ldr	r3, [r7, #28]
 80066f8:	2220      	movs	r2, #32
 80066fa:	4013      	ands	r3, r2
 80066fc:	d00e      	beq.n	800671c <HAL_UART_IRQHandler+0x54>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80066fe:	69bb      	ldr	r3, [r7, #24]
 8006700:	2220      	movs	r2, #32
 8006702:	4013      	ands	r3, r2
 8006704:	d00a      	beq.n	800671c <HAL_UART_IRQHandler+0x54>
    {
      if (huart->RxISR != NULL)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800670a:	2b00      	cmp	r3, #0
 800670c:	d100      	bne.n	8006710 <HAL_UART_IRQHandler+0x48>
 800670e:	e1ba      	b.n	8006a86 <HAL_UART_IRQHandler+0x3be>
      {
        huart->RxISR(huart);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006714:	687a      	ldr	r2, [r7, #4]
 8006716:	0010      	movs	r0, r2
 8006718:	4798      	blx	r3
      }
      return;
 800671a:	e1b4      	b.n	8006a86 <HAL_UART_IRQHandler+0x3be>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800671c:	693b      	ldr	r3, [r7, #16]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d100      	bne.n	8006724 <HAL_UART_IRQHandler+0x5c>
 8006722:	e0d9      	b.n	80068d8 <HAL_UART_IRQHandler+0x210>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006724:	697b      	ldr	r3, [r7, #20]
 8006726:	2201      	movs	r2, #1
 8006728:	4013      	ands	r3, r2
 800672a:	d104      	bne.n	8006736 <HAL_UART_IRQHandler+0x6e>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800672c:	69bb      	ldr	r3, [r7, #24]
 800672e:	4aa4      	ldr	r2, [pc, #656]	; (80069c0 <HAL_UART_IRQHandler+0x2f8>)
 8006730:	4013      	ands	r3, r2
 8006732:	d100      	bne.n	8006736 <HAL_UART_IRQHandler+0x6e>
 8006734:	e0d0      	b.n	80068d8 <HAL_UART_IRQHandler+0x210>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006736:	69fb      	ldr	r3, [r7, #28]
 8006738:	2201      	movs	r2, #1
 800673a:	4013      	ands	r3, r2
 800673c:	d010      	beq.n	8006760 <HAL_UART_IRQHandler+0x98>
 800673e:	69ba      	ldr	r2, [r7, #24]
 8006740:	2380      	movs	r3, #128	; 0x80
 8006742:	005b      	lsls	r3, r3, #1
 8006744:	4013      	ands	r3, r2
 8006746:	d00b      	beq.n	8006760 <HAL_UART_IRQHandler+0x98>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	2201      	movs	r2, #1
 800674e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2280      	movs	r2, #128	; 0x80
 8006754:	589b      	ldr	r3, [r3, r2]
 8006756:	2201      	movs	r2, #1
 8006758:	431a      	orrs	r2, r3
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2180      	movs	r1, #128	; 0x80
 800675e:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006760:	69fb      	ldr	r3, [r7, #28]
 8006762:	2202      	movs	r2, #2
 8006764:	4013      	ands	r3, r2
 8006766:	d00f      	beq.n	8006788 <HAL_UART_IRQHandler+0xc0>
 8006768:	697b      	ldr	r3, [r7, #20]
 800676a:	2201      	movs	r2, #1
 800676c:	4013      	ands	r3, r2
 800676e:	d00b      	beq.n	8006788 <HAL_UART_IRQHandler+0xc0>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	2202      	movs	r2, #2
 8006776:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2280      	movs	r2, #128	; 0x80
 800677c:	589b      	ldr	r3, [r3, r2]
 800677e:	2204      	movs	r2, #4
 8006780:	431a      	orrs	r2, r3
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2180      	movs	r1, #128	; 0x80
 8006786:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006788:	69fb      	ldr	r3, [r7, #28]
 800678a:	2204      	movs	r2, #4
 800678c:	4013      	ands	r3, r2
 800678e:	d00f      	beq.n	80067b0 <HAL_UART_IRQHandler+0xe8>
 8006790:	697b      	ldr	r3, [r7, #20]
 8006792:	2201      	movs	r2, #1
 8006794:	4013      	ands	r3, r2
 8006796:	d00b      	beq.n	80067b0 <HAL_UART_IRQHandler+0xe8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	2204      	movs	r2, #4
 800679e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2280      	movs	r2, #128	; 0x80
 80067a4:	589b      	ldr	r3, [r3, r2]
 80067a6:	2202      	movs	r2, #2
 80067a8:	431a      	orrs	r2, r3
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2180      	movs	r1, #128	; 0x80
 80067ae:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80067b0:	69fb      	ldr	r3, [r7, #28]
 80067b2:	2208      	movs	r2, #8
 80067b4:	4013      	ands	r3, r2
 80067b6:	d013      	beq.n	80067e0 <HAL_UART_IRQHandler+0x118>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80067b8:	69bb      	ldr	r3, [r7, #24]
 80067ba:	2220      	movs	r2, #32
 80067bc:	4013      	ands	r3, r2
 80067be:	d103      	bne.n	80067c8 <HAL_UART_IRQHandler+0x100>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80067c0:	697b      	ldr	r3, [r7, #20]
 80067c2:	2201      	movs	r2, #1
 80067c4:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80067c6:	d00b      	beq.n	80067e0 <HAL_UART_IRQHandler+0x118>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	2208      	movs	r2, #8
 80067ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2280      	movs	r2, #128	; 0x80
 80067d4:	589b      	ldr	r3, [r3, r2]
 80067d6:	2208      	movs	r2, #8
 80067d8:	431a      	orrs	r2, r3
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2180      	movs	r1, #128	; 0x80
 80067de:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80067e0:	69fa      	ldr	r2, [r7, #28]
 80067e2:	2380      	movs	r3, #128	; 0x80
 80067e4:	011b      	lsls	r3, r3, #4
 80067e6:	4013      	ands	r3, r2
 80067e8:	d011      	beq.n	800680e <HAL_UART_IRQHandler+0x146>
 80067ea:	69ba      	ldr	r2, [r7, #24]
 80067ec:	2380      	movs	r3, #128	; 0x80
 80067ee:	04db      	lsls	r3, r3, #19
 80067f0:	4013      	ands	r3, r2
 80067f2:	d00c      	beq.n	800680e <HAL_UART_IRQHandler+0x146>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	2280      	movs	r2, #128	; 0x80
 80067fa:	0112      	lsls	r2, r2, #4
 80067fc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2280      	movs	r2, #128	; 0x80
 8006802:	589b      	ldr	r3, [r3, r2]
 8006804:	2220      	movs	r2, #32
 8006806:	431a      	orrs	r2, r3
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2180      	movs	r1, #128	; 0x80
 800680c:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2280      	movs	r2, #128	; 0x80
 8006812:	589b      	ldr	r3, [r3, r2]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d100      	bne.n	800681a <HAL_UART_IRQHandler+0x152>
 8006818:	e137      	b.n	8006a8a <HAL_UART_IRQHandler+0x3c2>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800681a:	69fb      	ldr	r3, [r7, #28]
 800681c:	2220      	movs	r2, #32
 800681e:	4013      	ands	r3, r2
 8006820:	d00c      	beq.n	800683c <HAL_UART_IRQHandler+0x174>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006822:	69bb      	ldr	r3, [r7, #24]
 8006824:	2220      	movs	r2, #32
 8006826:	4013      	ands	r3, r2
 8006828:	d008      	beq.n	800683c <HAL_UART_IRQHandler+0x174>
      {
        if (huart->RxISR != NULL)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800682e:	2b00      	cmp	r3, #0
 8006830:	d004      	beq.n	800683c <HAL_UART_IRQHandler+0x174>
        {
          huart->RxISR(huart);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006836:	687a      	ldr	r2, [r7, #4]
 8006838:	0010      	movs	r0, r2
 800683a:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2280      	movs	r2, #128	; 0x80
 8006840:	589b      	ldr	r3, [r3, r2]
 8006842:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	689b      	ldr	r3, [r3, #8]
 800684a:	2240      	movs	r2, #64	; 0x40
 800684c:	4013      	ands	r3, r2
 800684e:	2b40      	cmp	r3, #64	; 0x40
 8006850:	d003      	beq.n	800685a <HAL_UART_IRQHandler+0x192>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	2228      	movs	r2, #40	; 0x28
 8006856:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006858:	d033      	beq.n	80068c2 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	0018      	movs	r0, r3
 800685e:	f000 fbf7 	bl	8007050 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	689b      	ldr	r3, [r3, #8]
 8006868:	2240      	movs	r2, #64	; 0x40
 800686a:	4013      	ands	r3, r2
 800686c:	2b40      	cmp	r3, #64	; 0x40
 800686e:	d123      	bne.n	80068b8 <HAL_UART_IRQHandler+0x1f0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	689a      	ldr	r2, [r3, #8]
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	2140      	movs	r1, #64	; 0x40
 800687c:	438a      	bics	r2, r1
 800687e:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006884:	2b00      	cmp	r3, #0
 8006886:	d012      	beq.n	80068ae <HAL_UART_IRQHandler+0x1e6>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800688c:	4a4d      	ldr	r2, [pc, #308]	; (80069c4 <HAL_UART_IRQHandler+0x2fc>)
 800688e:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006894:	0018      	movs	r0, r3
 8006896:	f7fd f844 	bl	8003922 <HAL_DMA_Abort_IT>
 800689a:	1e03      	subs	r3, r0, #0
 800689c:	d01a      	beq.n	80068d4 <HAL_UART_IRQHandler+0x20c>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068a8:	0018      	movs	r0, r3
 80068aa:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068ac:	e012      	b.n	80068d4 <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	0018      	movs	r0, r3
 80068b2:	f000 f8ff 	bl	8006ab4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068b6:	e00d      	b.n	80068d4 <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	0018      	movs	r0, r3
 80068bc:	f000 f8fa 	bl	8006ab4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068c0:	e008      	b.n	80068d4 <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	0018      	movs	r0, r3
 80068c6:	f000 f8f5 	bl	8006ab4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2280      	movs	r2, #128	; 0x80
 80068ce:	2100      	movs	r1, #0
 80068d0:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80068d2:	e0da      	b.n	8006a8a <HAL_UART_IRQHandler+0x3c2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068d4:	46c0      	nop			; (mov r8, r8)
    return;
 80068d6:	e0d8      	b.n	8006a8a <HAL_UART_IRQHandler+0x3c2>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068dc:	2b01      	cmp	r3, #1
 80068de:	d000      	beq.n	80068e2 <HAL_UART_IRQHandler+0x21a>
 80068e0:	e0b2      	b.n	8006a48 <HAL_UART_IRQHandler+0x380>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 80068e2:	69fb      	ldr	r3, [r7, #28]
 80068e4:	2210      	movs	r2, #16
 80068e6:	4013      	ands	r3, r2
 80068e8:	d100      	bne.n	80068ec <HAL_UART_IRQHandler+0x224>
 80068ea:	e0ad      	b.n	8006a48 <HAL_UART_IRQHandler+0x380>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 80068ec:	69bb      	ldr	r3, [r7, #24]
 80068ee:	2210      	movs	r2, #16
 80068f0:	4013      	ands	r3, r2
 80068f2:	d100      	bne.n	80068f6 <HAL_UART_IRQHandler+0x22e>
 80068f4:	e0a8      	b.n	8006a48 <HAL_UART_IRQHandler+0x380>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	2210      	movs	r2, #16
 80068fc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	689b      	ldr	r3, [r3, #8]
 8006904:	2240      	movs	r2, #64	; 0x40
 8006906:	4013      	ands	r3, r2
 8006908:	2b40      	cmp	r3, #64	; 0x40
 800690a:	d15f      	bne.n	80069cc <HAL_UART_IRQHandler+0x304>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	685a      	ldr	r2, [r3, #4]
 8006914:	2108      	movs	r1, #8
 8006916:	187b      	adds	r3, r7, r1
 8006918:	801a      	strh	r2, [r3, #0]
      if (  (nb_remaining_rx_data > 0U)
 800691a:	187b      	adds	r3, r7, r1
 800691c:	881b      	ldrh	r3, [r3, #0]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d100      	bne.n	8006924 <HAL_UART_IRQHandler+0x25c>
 8006922:	e0b4      	b.n	8006a8e <HAL_UART_IRQHandler+0x3c6>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2258      	movs	r2, #88	; 0x58
 8006928:	5a9b      	ldrh	r3, [r3, r2]
 800692a:	187a      	adds	r2, r7, r1
 800692c:	8812      	ldrh	r2, [r2, #0]
 800692e:	429a      	cmp	r2, r3
 8006930:	d300      	bcc.n	8006934 <HAL_UART_IRQHandler+0x26c>
 8006932:	e0ac      	b.n	8006a8e <HAL_UART_IRQHandler+0x3c6>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	187a      	adds	r2, r7, r1
 8006938:	215a      	movs	r1, #90	; 0x5a
 800693a:	8812      	ldrh	r2, [r2, #0]
 800693c:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006942:	699b      	ldr	r3, [r3, #24]
 8006944:	2b20      	cmp	r3, #32
 8006946:	d02a      	beq.n	800699e <HAL_UART_IRQHandler+0x2d6>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	681a      	ldr	r2, [r3, #0]
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	491d      	ldr	r1, [pc, #116]	; (80069c8 <HAL_UART_IRQHandler+0x300>)
 8006954:	400a      	ands	r2, r1
 8006956:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	689a      	ldr	r2, [r3, #8]
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	2101      	movs	r1, #1
 8006964:	438a      	bics	r2, r1
 8006966:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	689a      	ldr	r2, [r3, #8]
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	2140      	movs	r1, #64	; 0x40
 8006974:	438a      	bics	r2, r1
 8006976:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2220      	movs	r2, #32
 800697c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2200      	movs	r2, #0
 8006982:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	681a      	ldr	r2, [r3, #0]
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	2110      	movs	r1, #16
 8006990:	438a      	bics	r2, r1
 8006992:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006998:	0018      	movs	r0, r3
 800699a:	f7fc ff8a 	bl	80038b2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2258      	movs	r2, #88	; 0x58
 80069a2:	5a9a      	ldrh	r2, [r3, r2]
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	215a      	movs	r1, #90	; 0x5a
 80069a8:	5a5b      	ldrh	r3, [r3, r1]
 80069aa:	b29b      	uxth	r3, r3
 80069ac:	1ad3      	subs	r3, r2, r3
 80069ae:	b29a      	uxth	r2, r3
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	0011      	movs	r1, r2
 80069b4:	0018      	movs	r0, r3
 80069b6:	f000 f885 	bl	8006ac4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80069ba:	e068      	b.n	8006a8e <HAL_UART_IRQHandler+0x3c6>
 80069bc:	0000080f 	.word	0x0000080f
 80069c0:	04000120 	.word	0x04000120
 80069c4:	080070b1 	.word	0x080070b1
 80069c8:	fffffeff 	.word	0xfffffeff
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2258      	movs	r2, #88	; 0x58
 80069d0:	5a99      	ldrh	r1, [r3, r2]
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	225a      	movs	r2, #90	; 0x5a
 80069d6:	5a9b      	ldrh	r3, [r3, r2]
 80069d8:	b29a      	uxth	r2, r3
 80069da:	200a      	movs	r0, #10
 80069dc:	183b      	adds	r3, r7, r0
 80069de:	1a8a      	subs	r2, r1, r2
 80069e0:	801a      	strh	r2, [r3, #0]
      if (  (huart->RxXferCount > 0U)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	225a      	movs	r2, #90	; 0x5a
 80069e6:	5a9b      	ldrh	r3, [r3, r2]
 80069e8:	b29b      	uxth	r3, r3
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d051      	beq.n	8006a92 <HAL_UART_IRQHandler+0x3ca>
          &&(nb_rx_data > 0U) )
 80069ee:	183b      	adds	r3, r7, r0
 80069f0:	881b      	ldrh	r3, [r3, #0]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d04d      	beq.n	8006a92 <HAL_UART_IRQHandler+0x3ca>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	681a      	ldr	r2, [r3, #0]
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4927      	ldr	r1, [pc, #156]	; (8006aa0 <HAL_UART_IRQHandler+0x3d8>)
 8006a02:	400a      	ands	r2, r1
 8006a04:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	689a      	ldr	r2, [r3, #8]
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	2101      	movs	r1, #1
 8006a12:	438a      	bics	r2, r1
 8006a14:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2220      	movs	r2, #32
 8006a1a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2200      	movs	r2, #0
 8006a26:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	681a      	ldr	r2, [r3, #0]
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	2110      	movs	r1, #16
 8006a34:	438a      	bics	r2, r1
 8006a36:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006a38:	183b      	adds	r3, r7, r0
 8006a3a:	881a      	ldrh	r2, [r3, #0]
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	0011      	movs	r1, r2
 8006a40:	0018      	movs	r0, r3
 8006a42:	f000 f83f 	bl	8006ac4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006a46:	e024      	b.n	8006a92 <HAL_UART_IRQHandler+0x3ca>
    return;
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006a48:	69fb      	ldr	r3, [r7, #28]
 8006a4a:	2280      	movs	r2, #128	; 0x80
 8006a4c:	4013      	ands	r3, r2
 8006a4e:	d00d      	beq.n	8006a6c <HAL_UART_IRQHandler+0x3a4>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006a50:	69bb      	ldr	r3, [r7, #24]
 8006a52:	2280      	movs	r2, #128	; 0x80
 8006a54:	4013      	ands	r3, r2
 8006a56:	d009      	beq.n	8006a6c <HAL_UART_IRQHandler+0x3a4>
  {
    if (huart->TxISR != NULL)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d01a      	beq.n	8006a96 <HAL_UART_IRQHandler+0x3ce>
    {
      huart->TxISR(huart);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a64:	687a      	ldr	r2, [r7, #4]
 8006a66:	0010      	movs	r0, r2
 8006a68:	4798      	blx	r3
    }
    return;
 8006a6a:	e014      	b.n	8006a96 <HAL_UART_IRQHandler+0x3ce>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006a6c:	69fb      	ldr	r3, [r7, #28]
 8006a6e:	2240      	movs	r2, #64	; 0x40
 8006a70:	4013      	ands	r3, r2
 8006a72:	d011      	beq.n	8006a98 <HAL_UART_IRQHandler+0x3d0>
 8006a74:	69bb      	ldr	r3, [r7, #24]
 8006a76:	2240      	movs	r2, #64	; 0x40
 8006a78:	4013      	ands	r3, r2
 8006a7a:	d00d      	beq.n	8006a98 <HAL_UART_IRQHandler+0x3d0>
  {
    UART_EndTransmit_IT(huart);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	0018      	movs	r0, r3
 8006a80:	f000 fb2d 	bl	80070de <UART_EndTransmit_IT>
    return;
 8006a84:	e008      	b.n	8006a98 <HAL_UART_IRQHandler+0x3d0>
      return;
 8006a86:	46c0      	nop			; (mov r8, r8)
 8006a88:	e006      	b.n	8006a98 <HAL_UART_IRQHandler+0x3d0>
    return;
 8006a8a:	46c0      	nop			; (mov r8, r8)
 8006a8c:	e004      	b.n	8006a98 <HAL_UART_IRQHandler+0x3d0>
      return;
 8006a8e:	46c0      	nop			; (mov r8, r8)
 8006a90:	e002      	b.n	8006a98 <HAL_UART_IRQHandler+0x3d0>
      return;
 8006a92:	46c0      	nop			; (mov r8, r8)
 8006a94:	e000      	b.n	8006a98 <HAL_UART_IRQHandler+0x3d0>
    return;
 8006a96:	46c0      	nop			; (mov r8, r8)
  }

}
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	b008      	add	sp, #32
 8006a9c:	bd80      	pop	{r7, pc}
 8006a9e:	46c0      	nop			; (mov r8, r8)
 8006aa0:	fffffedf 	.word	0xfffffedf

08006aa4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b082      	sub	sp, #8
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006aac:	46c0      	nop			; (mov r8, r8)
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	b002      	add	sp, #8
 8006ab2:	bd80      	pop	{r7, pc}

08006ab4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b082      	sub	sp, #8
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006abc:	46c0      	nop			; (mov r8, r8)
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	b002      	add	sp, #8
 8006ac2:	bd80      	pop	{r7, pc}

08006ac4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b082      	sub	sp, #8
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
 8006acc:	000a      	movs	r2, r1
 8006ace:	1cbb      	adds	r3, r7, #2
 8006ad0:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006ad2:	46c0      	nop			; (mov r8, r8)
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	b002      	add	sp, #8
 8006ad8:	bd80      	pop	{r7, pc}
	...

08006adc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b088      	sub	sp, #32
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006ae4:	231e      	movs	r3, #30
 8006ae6:	18fb      	adds	r3, r7, r3
 8006ae8:	2200      	movs	r2, #0
 8006aea:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	689a      	ldr	r2, [r3, #8]
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	691b      	ldr	r3, [r3, #16]
 8006af4:	431a      	orrs	r2, r3
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	695b      	ldr	r3, [r3, #20]
 8006afa:	431a      	orrs	r2, r3
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	69db      	ldr	r3, [r3, #28]
 8006b00:	4313      	orrs	r3, r2
 8006b02:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	4a8d      	ldr	r2, [pc, #564]	; (8006d40 <UART_SetConfig+0x264>)
 8006b0c:	4013      	ands	r3, r2
 8006b0e:	0019      	movs	r1, r3
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	697a      	ldr	r2, [r7, #20]
 8006b16:	430a      	orrs	r2, r1
 8006b18:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	685b      	ldr	r3, [r3, #4]
 8006b20:	4a88      	ldr	r2, [pc, #544]	; (8006d44 <UART_SetConfig+0x268>)
 8006b22:	4013      	ands	r3, r2
 8006b24:	0019      	movs	r1, r3
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	68da      	ldr	r2, [r3, #12]
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	430a      	orrs	r2, r1
 8006b30:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	699b      	ldr	r3, [r3, #24]
 8006b36:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6a1b      	ldr	r3, [r3, #32]
 8006b3c:	697a      	ldr	r2, [r7, #20]
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	689b      	ldr	r3, [r3, #8]
 8006b48:	4a7f      	ldr	r2, [pc, #508]	; (8006d48 <UART_SetConfig+0x26c>)
 8006b4a:	4013      	ands	r3, r2
 8006b4c:	0019      	movs	r1, r3
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	697a      	ldr	r2, [r7, #20]
 8006b54:	430a      	orrs	r2, r1
 8006b56:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	4a7b      	ldr	r2, [pc, #492]	; (8006d4c <UART_SetConfig+0x270>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d127      	bne.n	8006bb2 <UART_SetConfig+0xd6>
 8006b62:	4b7b      	ldr	r3, [pc, #492]	; (8006d50 <UART_SetConfig+0x274>)
 8006b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b66:	2203      	movs	r2, #3
 8006b68:	4013      	ands	r3, r2
 8006b6a:	2b03      	cmp	r3, #3
 8006b6c:	d00d      	beq.n	8006b8a <UART_SetConfig+0xae>
 8006b6e:	d81b      	bhi.n	8006ba8 <UART_SetConfig+0xcc>
 8006b70:	2b02      	cmp	r3, #2
 8006b72:	d014      	beq.n	8006b9e <UART_SetConfig+0xc2>
 8006b74:	d818      	bhi.n	8006ba8 <UART_SetConfig+0xcc>
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d002      	beq.n	8006b80 <UART_SetConfig+0xa4>
 8006b7a:	2b01      	cmp	r3, #1
 8006b7c:	d00a      	beq.n	8006b94 <UART_SetConfig+0xb8>
 8006b7e:	e013      	b.n	8006ba8 <UART_SetConfig+0xcc>
 8006b80:	231f      	movs	r3, #31
 8006b82:	18fb      	adds	r3, r7, r3
 8006b84:	2200      	movs	r2, #0
 8006b86:	701a      	strb	r2, [r3, #0]
 8006b88:	e021      	b.n	8006bce <UART_SetConfig+0xf2>
 8006b8a:	231f      	movs	r3, #31
 8006b8c:	18fb      	adds	r3, r7, r3
 8006b8e:	2202      	movs	r2, #2
 8006b90:	701a      	strb	r2, [r3, #0]
 8006b92:	e01c      	b.n	8006bce <UART_SetConfig+0xf2>
 8006b94:	231f      	movs	r3, #31
 8006b96:	18fb      	adds	r3, r7, r3
 8006b98:	2204      	movs	r2, #4
 8006b9a:	701a      	strb	r2, [r3, #0]
 8006b9c:	e017      	b.n	8006bce <UART_SetConfig+0xf2>
 8006b9e:	231f      	movs	r3, #31
 8006ba0:	18fb      	adds	r3, r7, r3
 8006ba2:	2208      	movs	r2, #8
 8006ba4:	701a      	strb	r2, [r3, #0]
 8006ba6:	e012      	b.n	8006bce <UART_SetConfig+0xf2>
 8006ba8:	231f      	movs	r3, #31
 8006baa:	18fb      	adds	r3, r7, r3
 8006bac:	2210      	movs	r2, #16
 8006bae:	701a      	strb	r2, [r3, #0]
 8006bb0:	e00d      	b.n	8006bce <UART_SetConfig+0xf2>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	4a67      	ldr	r2, [pc, #412]	; (8006d54 <UART_SetConfig+0x278>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d104      	bne.n	8006bc6 <UART_SetConfig+0xea>
 8006bbc:	231f      	movs	r3, #31
 8006bbe:	18fb      	adds	r3, r7, r3
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	701a      	strb	r2, [r3, #0]
 8006bc4:	e003      	b.n	8006bce <UART_SetConfig+0xf2>
 8006bc6:	231f      	movs	r3, #31
 8006bc8:	18fb      	adds	r3, r7, r3
 8006bca:	2210      	movs	r2, #16
 8006bcc:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	69da      	ldr	r2, [r3, #28]
 8006bd2:	2380      	movs	r3, #128	; 0x80
 8006bd4:	021b      	lsls	r3, r3, #8
 8006bd6:	429a      	cmp	r2, r3
 8006bd8:	d15d      	bne.n	8006c96 <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 8006bda:	231f      	movs	r3, #31
 8006bdc:	18fb      	adds	r3, r7, r3
 8006bde:	781b      	ldrb	r3, [r3, #0]
 8006be0:	2b08      	cmp	r3, #8
 8006be2:	d015      	beq.n	8006c10 <UART_SetConfig+0x134>
 8006be4:	dc18      	bgt.n	8006c18 <UART_SetConfig+0x13c>
 8006be6:	2b04      	cmp	r3, #4
 8006be8:	d00d      	beq.n	8006c06 <UART_SetConfig+0x12a>
 8006bea:	dc15      	bgt.n	8006c18 <UART_SetConfig+0x13c>
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d002      	beq.n	8006bf6 <UART_SetConfig+0x11a>
 8006bf0:	2b02      	cmp	r3, #2
 8006bf2:	d005      	beq.n	8006c00 <UART_SetConfig+0x124>
 8006bf4:	e010      	b.n	8006c18 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006bf6:	f7fe fe8f 	bl	8005918 <HAL_RCC_GetPCLK1Freq>
 8006bfa:	0003      	movs	r3, r0
 8006bfc:	61bb      	str	r3, [r7, #24]
        break;
 8006bfe:	e012      	b.n	8006c26 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c00:	4b55      	ldr	r3, [pc, #340]	; (8006d58 <UART_SetConfig+0x27c>)
 8006c02:	61bb      	str	r3, [r7, #24]
        break;
 8006c04:	e00f      	b.n	8006c26 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c06:	f7fe fe19 	bl	800583c <HAL_RCC_GetSysClockFreq>
 8006c0a:	0003      	movs	r3, r0
 8006c0c:	61bb      	str	r3, [r7, #24]
        break;
 8006c0e:	e00a      	b.n	8006c26 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c10:	2380      	movs	r3, #128	; 0x80
 8006c12:	021b      	lsls	r3, r3, #8
 8006c14:	61bb      	str	r3, [r7, #24]
        break;
 8006c16:	e006      	b.n	8006c26 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8006c18:	2300      	movs	r3, #0
 8006c1a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006c1c:	231e      	movs	r3, #30
 8006c1e:	18fb      	adds	r3, r7, r3
 8006c20:	2201      	movs	r2, #1
 8006c22:	701a      	strb	r2, [r3, #0]
        break;
 8006c24:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006c26:	69bb      	ldr	r3, [r7, #24]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d100      	bne.n	8006c2e <UART_SetConfig+0x152>
 8006c2c:	e07b      	b.n	8006d26 <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006c2e:	69bb      	ldr	r3, [r7, #24]
 8006c30:	005a      	lsls	r2, r3, #1
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	685b      	ldr	r3, [r3, #4]
 8006c36:	085b      	lsrs	r3, r3, #1
 8006c38:	18d2      	adds	r2, r2, r3
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	685b      	ldr	r3, [r3, #4]
 8006c3e:	0019      	movs	r1, r3
 8006c40:	0010      	movs	r0, r2
 8006c42:	f7f9 fa7d 	bl	8000140 <__udivsi3>
 8006c46:	0003      	movs	r3, r0
 8006c48:	b29b      	uxth	r3, r3
 8006c4a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c4c:	693b      	ldr	r3, [r7, #16]
 8006c4e:	2b0f      	cmp	r3, #15
 8006c50:	d91c      	bls.n	8006c8c <UART_SetConfig+0x1b0>
 8006c52:	693a      	ldr	r2, [r7, #16]
 8006c54:	2380      	movs	r3, #128	; 0x80
 8006c56:	025b      	lsls	r3, r3, #9
 8006c58:	429a      	cmp	r2, r3
 8006c5a:	d217      	bcs.n	8006c8c <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006c5c:	693b      	ldr	r3, [r7, #16]
 8006c5e:	b29a      	uxth	r2, r3
 8006c60:	200e      	movs	r0, #14
 8006c62:	183b      	adds	r3, r7, r0
 8006c64:	210f      	movs	r1, #15
 8006c66:	438a      	bics	r2, r1
 8006c68:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006c6a:	693b      	ldr	r3, [r7, #16]
 8006c6c:	085b      	lsrs	r3, r3, #1
 8006c6e:	b29b      	uxth	r3, r3
 8006c70:	2207      	movs	r2, #7
 8006c72:	4013      	ands	r3, r2
 8006c74:	b299      	uxth	r1, r3
 8006c76:	183b      	adds	r3, r7, r0
 8006c78:	183a      	adds	r2, r7, r0
 8006c7a:	8812      	ldrh	r2, [r2, #0]
 8006c7c:	430a      	orrs	r2, r1
 8006c7e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	183a      	adds	r2, r7, r0
 8006c86:	8812      	ldrh	r2, [r2, #0]
 8006c88:	60da      	str	r2, [r3, #12]
 8006c8a:	e04c      	b.n	8006d26 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8006c8c:	231e      	movs	r3, #30
 8006c8e:	18fb      	adds	r3, r7, r3
 8006c90:	2201      	movs	r2, #1
 8006c92:	701a      	strb	r2, [r3, #0]
 8006c94:	e047      	b.n	8006d26 <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006c96:	231f      	movs	r3, #31
 8006c98:	18fb      	adds	r3, r7, r3
 8006c9a:	781b      	ldrb	r3, [r3, #0]
 8006c9c:	2b08      	cmp	r3, #8
 8006c9e:	d015      	beq.n	8006ccc <UART_SetConfig+0x1f0>
 8006ca0:	dc18      	bgt.n	8006cd4 <UART_SetConfig+0x1f8>
 8006ca2:	2b04      	cmp	r3, #4
 8006ca4:	d00d      	beq.n	8006cc2 <UART_SetConfig+0x1e6>
 8006ca6:	dc15      	bgt.n	8006cd4 <UART_SetConfig+0x1f8>
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d002      	beq.n	8006cb2 <UART_SetConfig+0x1d6>
 8006cac:	2b02      	cmp	r3, #2
 8006cae:	d005      	beq.n	8006cbc <UART_SetConfig+0x1e0>
 8006cb0:	e010      	b.n	8006cd4 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006cb2:	f7fe fe31 	bl	8005918 <HAL_RCC_GetPCLK1Freq>
 8006cb6:	0003      	movs	r3, r0
 8006cb8:	61bb      	str	r3, [r7, #24]
        break;
 8006cba:	e012      	b.n	8006ce2 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006cbc:	4b26      	ldr	r3, [pc, #152]	; (8006d58 <UART_SetConfig+0x27c>)
 8006cbe:	61bb      	str	r3, [r7, #24]
        break;
 8006cc0:	e00f      	b.n	8006ce2 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006cc2:	f7fe fdbb 	bl	800583c <HAL_RCC_GetSysClockFreq>
 8006cc6:	0003      	movs	r3, r0
 8006cc8:	61bb      	str	r3, [r7, #24]
        break;
 8006cca:	e00a      	b.n	8006ce2 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ccc:	2380      	movs	r3, #128	; 0x80
 8006cce:	021b      	lsls	r3, r3, #8
 8006cd0:	61bb      	str	r3, [r7, #24]
        break;
 8006cd2:	e006      	b.n	8006ce2 <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006cd8:	231e      	movs	r3, #30
 8006cda:	18fb      	adds	r3, r7, r3
 8006cdc:	2201      	movs	r2, #1
 8006cde:	701a      	strb	r2, [r3, #0]
        break;
 8006ce0:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8006ce2:	69bb      	ldr	r3, [r7, #24]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d01e      	beq.n	8006d26 <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	685b      	ldr	r3, [r3, #4]
 8006cec:	085a      	lsrs	r2, r3, #1
 8006cee:	69bb      	ldr	r3, [r7, #24]
 8006cf0:	18d2      	adds	r2, r2, r3
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	685b      	ldr	r3, [r3, #4]
 8006cf6:	0019      	movs	r1, r3
 8006cf8:	0010      	movs	r0, r2
 8006cfa:	f7f9 fa21 	bl	8000140 <__udivsi3>
 8006cfe:	0003      	movs	r3, r0
 8006d00:	b29b      	uxth	r3, r3
 8006d02:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d04:	693b      	ldr	r3, [r7, #16]
 8006d06:	2b0f      	cmp	r3, #15
 8006d08:	d909      	bls.n	8006d1e <UART_SetConfig+0x242>
 8006d0a:	693a      	ldr	r2, [r7, #16]
 8006d0c:	2380      	movs	r3, #128	; 0x80
 8006d0e:	025b      	lsls	r3, r3, #9
 8006d10:	429a      	cmp	r2, r3
 8006d12:	d204      	bcs.n	8006d1e <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	693a      	ldr	r2, [r7, #16]
 8006d1a:	60da      	str	r2, [r3, #12]
 8006d1c:	e003      	b.n	8006d26 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8006d1e:	231e      	movs	r3, #30
 8006d20:	18fb      	adds	r3, r7, r3
 8006d22:	2201      	movs	r2, #1
 8006d24:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2200      	movs	r2, #0
 8006d30:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006d32:	231e      	movs	r3, #30
 8006d34:	18fb      	adds	r3, r7, r3
 8006d36:	781b      	ldrb	r3, [r3, #0]
}
 8006d38:	0018      	movs	r0, r3
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	b008      	add	sp, #32
 8006d3e:	bd80      	pop	{r7, pc}
 8006d40:	ffff69f3 	.word	0xffff69f3
 8006d44:	ffffcfff 	.word	0xffffcfff
 8006d48:	fffff4ff 	.word	0xfffff4ff
 8006d4c:	40013800 	.word	0x40013800
 8006d50:	40021000 	.word	0x40021000
 8006d54:	40004400 	.word	0x40004400
 8006d58:	007a1200 	.word	0x007a1200

08006d5c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b082      	sub	sp, #8
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d68:	2201      	movs	r2, #1
 8006d6a:	4013      	ands	r3, r2
 8006d6c:	d00b      	beq.n	8006d86 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	685b      	ldr	r3, [r3, #4]
 8006d74:	4a4a      	ldr	r2, [pc, #296]	; (8006ea0 <UART_AdvFeatureConfig+0x144>)
 8006d76:	4013      	ands	r3, r2
 8006d78:	0019      	movs	r1, r3
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	430a      	orrs	r2, r1
 8006d84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d8a:	2202      	movs	r2, #2
 8006d8c:	4013      	ands	r3, r2
 8006d8e:	d00b      	beq.n	8006da8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	685b      	ldr	r3, [r3, #4]
 8006d96:	4a43      	ldr	r2, [pc, #268]	; (8006ea4 <UART_AdvFeatureConfig+0x148>)
 8006d98:	4013      	ands	r3, r2
 8006d9a:	0019      	movs	r1, r3
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	430a      	orrs	r2, r1
 8006da6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dac:	2204      	movs	r2, #4
 8006dae:	4013      	ands	r3, r2
 8006db0:	d00b      	beq.n	8006dca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	685b      	ldr	r3, [r3, #4]
 8006db8:	4a3b      	ldr	r2, [pc, #236]	; (8006ea8 <UART_AdvFeatureConfig+0x14c>)
 8006dba:	4013      	ands	r3, r2
 8006dbc:	0019      	movs	r1, r3
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	430a      	orrs	r2, r1
 8006dc8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dce:	2208      	movs	r2, #8
 8006dd0:	4013      	ands	r3, r2
 8006dd2:	d00b      	beq.n	8006dec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	685b      	ldr	r3, [r3, #4]
 8006dda:	4a34      	ldr	r2, [pc, #208]	; (8006eac <UART_AdvFeatureConfig+0x150>)
 8006ddc:	4013      	ands	r3, r2
 8006dde:	0019      	movs	r1, r3
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	430a      	orrs	r2, r1
 8006dea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006df0:	2210      	movs	r2, #16
 8006df2:	4013      	ands	r3, r2
 8006df4:	d00b      	beq.n	8006e0e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	689b      	ldr	r3, [r3, #8]
 8006dfc:	4a2c      	ldr	r2, [pc, #176]	; (8006eb0 <UART_AdvFeatureConfig+0x154>)
 8006dfe:	4013      	ands	r3, r2
 8006e00:	0019      	movs	r1, r3
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	430a      	orrs	r2, r1
 8006e0c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e12:	2220      	movs	r2, #32
 8006e14:	4013      	ands	r3, r2
 8006e16:	d00b      	beq.n	8006e30 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	689b      	ldr	r3, [r3, #8]
 8006e1e:	4a25      	ldr	r2, [pc, #148]	; (8006eb4 <UART_AdvFeatureConfig+0x158>)
 8006e20:	4013      	ands	r3, r2
 8006e22:	0019      	movs	r1, r3
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	430a      	orrs	r2, r1
 8006e2e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e34:	2240      	movs	r2, #64	; 0x40
 8006e36:	4013      	ands	r3, r2
 8006e38:	d01d      	beq.n	8006e76 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	685b      	ldr	r3, [r3, #4]
 8006e40:	4a1d      	ldr	r2, [pc, #116]	; (8006eb8 <UART_AdvFeatureConfig+0x15c>)
 8006e42:	4013      	ands	r3, r2
 8006e44:	0019      	movs	r1, r3
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	430a      	orrs	r2, r1
 8006e50:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006e56:	2380      	movs	r3, #128	; 0x80
 8006e58:	035b      	lsls	r3, r3, #13
 8006e5a:	429a      	cmp	r2, r3
 8006e5c:	d10b      	bne.n	8006e76 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	685b      	ldr	r3, [r3, #4]
 8006e64:	4a15      	ldr	r2, [pc, #84]	; (8006ebc <UART_AdvFeatureConfig+0x160>)
 8006e66:	4013      	ands	r3, r2
 8006e68:	0019      	movs	r1, r3
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	430a      	orrs	r2, r1
 8006e74:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e7a:	2280      	movs	r2, #128	; 0x80
 8006e7c:	4013      	ands	r3, r2
 8006e7e:	d00b      	beq.n	8006e98 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	685b      	ldr	r3, [r3, #4]
 8006e86:	4a0e      	ldr	r2, [pc, #56]	; (8006ec0 <UART_AdvFeatureConfig+0x164>)
 8006e88:	4013      	ands	r3, r2
 8006e8a:	0019      	movs	r1, r3
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	430a      	orrs	r2, r1
 8006e96:	605a      	str	r2, [r3, #4]
  }
}
 8006e98:	46c0      	nop			; (mov r8, r8)
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	b002      	add	sp, #8
 8006e9e:	bd80      	pop	{r7, pc}
 8006ea0:	fffdffff 	.word	0xfffdffff
 8006ea4:	fffeffff 	.word	0xfffeffff
 8006ea8:	fffbffff 	.word	0xfffbffff
 8006eac:	ffff7fff 	.word	0xffff7fff
 8006eb0:	ffffefff 	.word	0xffffefff
 8006eb4:	ffffdfff 	.word	0xffffdfff
 8006eb8:	ffefffff 	.word	0xffefffff
 8006ebc:	ff9fffff 	.word	0xff9fffff
 8006ec0:	fff7ffff 	.word	0xfff7ffff

08006ec4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b086      	sub	sp, #24
 8006ec8:	af02      	add	r7, sp, #8
 8006eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2280      	movs	r2, #128	; 0x80
 8006ed0:	2100      	movs	r1, #0
 8006ed2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006ed4:	f7fc f9dc 	bl	8003290 <HAL_GetTick>
 8006ed8:	0003      	movs	r3, r0
 8006eda:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	2208      	movs	r2, #8
 8006ee4:	4013      	ands	r3, r2
 8006ee6:	2b08      	cmp	r3, #8
 8006ee8:	d10c      	bne.n	8006f04 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	2280      	movs	r2, #128	; 0x80
 8006eee:	0391      	lsls	r1, r2, #14
 8006ef0:	6878      	ldr	r0, [r7, #4]
 8006ef2:	4a17      	ldr	r2, [pc, #92]	; (8006f50 <UART_CheckIdleState+0x8c>)
 8006ef4:	9200      	str	r2, [sp, #0]
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	f000 f82c 	bl	8006f54 <UART_WaitOnFlagUntilTimeout>
 8006efc:	1e03      	subs	r3, r0, #0
 8006efe:	d001      	beq.n	8006f04 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f00:	2303      	movs	r3, #3
 8006f02:	e021      	b.n	8006f48 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	2204      	movs	r2, #4
 8006f0c:	4013      	ands	r3, r2
 8006f0e:	2b04      	cmp	r3, #4
 8006f10:	d10c      	bne.n	8006f2c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	2280      	movs	r2, #128	; 0x80
 8006f16:	03d1      	lsls	r1, r2, #15
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	4a0d      	ldr	r2, [pc, #52]	; (8006f50 <UART_CheckIdleState+0x8c>)
 8006f1c:	9200      	str	r2, [sp, #0]
 8006f1e:	2200      	movs	r2, #0
 8006f20:	f000 f818 	bl	8006f54 <UART_WaitOnFlagUntilTimeout>
 8006f24:	1e03      	subs	r3, r0, #0
 8006f26:	d001      	beq.n	8006f2c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f28:	2303      	movs	r3, #3
 8006f2a:	e00d      	b.n	8006f48 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2220      	movs	r2, #32
 8006f30:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2220      	movs	r2, #32
 8006f36:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2274      	movs	r2, #116	; 0x74
 8006f42:	2100      	movs	r1, #0
 8006f44:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006f46:	2300      	movs	r3, #0
}
 8006f48:	0018      	movs	r0, r3
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	b004      	add	sp, #16
 8006f4e:	bd80      	pop	{r7, pc}
 8006f50:	01ffffff 	.word	0x01ffffff

08006f54 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b084      	sub	sp, #16
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	60f8      	str	r0, [r7, #12]
 8006f5c:	60b9      	str	r1, [r7, #8]
 8006f5e:	603b      	str	r3, [r7, #0]
 8006f60:	1dfb      	adds	r3, r7, #7
 8006f62:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f64:	e05e      	b.n	8007024 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f66:	69bb      	ldr	r3, [r7, #24]
 8006f68:	3301      	adds	r3, #1
 8006f6a:	d05b      	beq.n	8007024 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f6c:	f7fc f990 	bl	8003290 <HAL_GetTick>
 8006f70:	0002      	movs	r2, r0
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	1ad3      	subs	r3, r2, r3
 8006f76:	69ba      	ldr	r2, [r7, #24]
 8006f78:	429a      	cmp	r2, r3
 8006f7a:	d302      	bcc.n	8006f82 <UART_WaitOnFlagUntilTimeout+0x2e>
 8006f7c:	69bb      	ldr	r3, [r7, #24]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d11b      	bne.n	8006fba <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	681a      	ldr	r2, [r3, #0]
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	492f      	ldr	r1, [pc, #188]	; (800704c <UART_WaitOnFlagUntilTimeout+0xf8>)
 8006f8e:	400a      	ands	r2, r1
 8006f90:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	689a      	ldr	r2, [r3, #8]
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	2101      	movs	r1, #1
 8006f9e:	438a      	bics	r2, r1
 8006fa0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	2220      	movs	r2, #32
 8006fa6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	2220      	movs	r2, #32
 8006fac:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	2274      	movs	r2, #116	; 0x74
 8006fb2:	2100      	movs	r1, #0
 8006fb4:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006fb6:	2303      	movs	r3, #3
 8006fb8:	e044      	b.n	8007044 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	2204      	movs	r2, #4
 8006fc2:	4013      	ands	r3, r2
 8006fc4:	d02e      	beq.n	8007024 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	69da      	ldr	r2, [r3, #28]
 8006fcc:	2380      	movs	r3, #128	; 0x80
 8006fce:	011b      	lsls	r3, r3, #4
 8006fd0:	401a      	ands	r2, r3
 8006fd2:	2380      	movs	r3, #128	; 0x80
 8006fd4:	011b      	lsls	r3, r3, #4
 8006fd6:	429a      	cmp	r2, r3
 8006fd8:	d124      	bne.n	8007024 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	2280      	movs	r2, #128	; 0x80
 8006fe0:	0112      	lsls	r2, r2, #4
 8006fe2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	681a      	ldr	r2, [r3, #0]
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	4917      	ldr	r1, [pc, #92]	; (800704c <UART_WaitOnFlagUntilTimeout+0xf8>)
 8006ff0:	400a      	ands	r2, r1
 8006ff2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	689a      	ldr	r2, [r3, #8]
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	2101      	movs	r1, #1
 8007000:	438a      	bics	r2, r1
 8007002:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	2220      	movs	r2, #32
 8007008:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	2220      	movs	r2, #32
 800700e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	2280      	movs	r2, #128	; 0x80
 8007014:	2120      	movs	r1, #32
 8007016:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	2274      	movs	r2, #116	; 0x74
 800701c:	2100      	movs	r1, #0
 800701e:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8007020:	2303      	movs	r3, #3
 8007022:	e00f      	b.n	8007044 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	69db      	ldr	r3, [r3, #28]
 800702a:	68ba      	ldr	r2, [r7, #8]
 800702c:	4013      	ands	r3, r2
 800702e:	68ba      	ldr	r2, [r7, #8]
 8007030:	1ad3      	subs	r3, r2, r3
 8007032:	425a      	negs	r2, r3
 8007034:	4153      	adcs	r3, r2
 8007036:	b2db      	uxtb	r3, r3
 8007038:	001a      	movs	r2, r3
 800703a:	1dfb      	adds	r3, r7, #7
 800703c:	781b      	ldrb	r3, [r3, #0]
 800703e:	429a      	cmp	r2, r3
 8007040:	d091      	beq.n	8006f66 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007042:	2300      	movs	r3, #0
}
 8007044:	0018      	movs	r0, r3
 8007046:	46bd      	mov	sp, r7
 8007048:	b004      	add	sp, #16
 800704a:	bd80      	pop	{r7, pc}
 800704c:	fffffe5f 	.word	0xfffffe5f

08007050 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b082      	sub	sp, #8
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	681a      	ldr	r2, [r3, #0]
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4912      	ldr	r1, [pc, #72]	; (80070ac <UART_EndRxTransfer+0x5c>)
 8007064:	400a      	ands	r2, r1
 8007066:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	689a      	ldr	r2, [r3, #8]
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	2101      	movs	r1, #1
 8007074:	438a      	bics	r2, r1
 8007076:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800707c:	2b01      	cmp	r3, #1
 800707e:	d107      	bne.n	8007090 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	681a      	ldr	r2, [r3, #0]
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	2110      	movs	r1, #16
 800708c:	438a      	bics	r2, r1
 800708e:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2220      	movs	r2, #32
 8007094:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2200      	movs	r2, #0
 800709a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2200      	movs	r2, #0
 80070a0:	665a      	str	r2, [r3, #100]	; 0x64
}
 80070a2:	46c0      	nop			; (mov r8, r8)
 80070a4:	46bd      	mov	sp, r7
 80070a6:	b002      	add	sp, #8
 80070a8:	bd80      	pop	{r7, pc}
 80070aa:	46c0      	nop			; (mov r8, r8)
 80070ac:	fffffedf 	.word	0xfffffedf

080070b0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b084      	sub	sp, #16
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070bc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	225a      	movs	r2, #90	; 0x5a
 80070c2:	2100      	movs	r1, #0
 80070c4:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	2252      	movs	r2, #82	; 0x52
 80070ca:	2100      	movs	r1, #0
 80070cc:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	0018      	movs	r0, r3
 80070d2:	f7ff fcef 	bl	8006ab4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80070d6:	46c0      	nop			; (mov r8, r8)
 80070d8:	46bd      	mov	sp, r7
 80070da:	b004      	add	sp, #16
 80070dc:	bd80      	pop	{r7, pc}

080070de <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80070de:	b580      	push	{r7, lr}
 80070e0:	b082      	sub	sp, #8
 80070e2:	af00      	add	r7, sp, #0
 80070e4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	681a      	ldr	r2, [r3, #0]
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	2140      	movs	r1, #64	; 0x40
 80070f2:	438a      	bics	r2, r1
 80070f4:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2220      	movs	r2, #32
 80070fa:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2200      	movs	r2, #0
 8007100:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	0018      	movs	r0, r3
 8007106:	f7ff fccd 	bl	8006aa4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800710a:	46c0      	nop			; (mov r8, r8)
 800710c:	46bd      	mov	sp, r7
 800710e:	b002      	add	sp, #8
 8007110:	bd80      	pop	{r7, pc}
	...

08007114 <configureCCS811>:
  * @brief  configureCCS811.
  * @param  NONE.
  * @retval None.
 */
char configureCCS811()
{
 8007114:	b590      	push	{r4, r7, lr}
 8007116:	b085      	sub	sp, #20
 8007118:	af02      	add	r7, sp, #8
	HAL_Delay(100);
 800711a:	2064      	movs	r0, #100	; 0x64
 800711c:	f7fc f8c2 	bl	80032a4 <HAL_Delay>
	ccs811_wakeup();
 8007120:	f000 fa12 	bl	8007548 <ccs811_wakeup>
	HAL_Delay(500);
 8007124:	23fa      	movs	r3, #250	; 0xfa
 8007126:	005b      	lsls	r3, r3, #1
 8007128:	0018      	movs	r0, r3
 800712a:	f7fc f8bb 	bl	80032a4 <HAL_Delay>

	//Verify the hardware ID is what we expect
	unsigned char hwID = readRegister(0x20); //Hardware ID should be 0x81
 800712e:	1dfc      	adds	r4, r7, #7
 8007130:	2020      	movs	r0, #32
 8007132:	f000 fa51 	bl	80075d8 <readRegister>
 8007136:	0003      	movs	r3, r0
 8007138:	7023      	strb	r3, [r4, #0]
	if (hwID != 0x81){
 800713a:	1dfb      	adds	r3, r7, #7
 800713c:	781b      	ldrb	r3, [r3, #0]
 800713e:	2b81      	cmp	r3, #129	; 0x81
 8007140:	d008      	beq.n	8007154 <configureCCS811+0x40>
		printf("hwID:%d, CCS811 not found. Please check wiring.\n", hwID);
 8007142:	1dfb      	adds	r3, r7, #7
 8007144:	781a      	ldrb	r2, [r3, #0]
 8007146:	4b25      	ldr	r3, [pc, #148]	; (80071dc <configureCCS811+0xc8>)
 8007148:	0011      	movs	r1, r2
 800714a:	0018      	movs	r0, r3
 800714c:	f001 fda4 	bl	8008c98 <iprintf>
		return -1; //Freeze!
 8007150:	23ff      	movs	r3, #255	; 0xff
 8007152:	e03f      	b.n	80071d4 <configureCCS811+0xc0>
	}

	if (checkForError() == 1){
 8007154:	f000 f884 	bl	8007260 <checkForError>
 8007158:	0003      	movs	r3, r0
 800715a:	2b01      	cmp	r3, #1
 800715c:	d101      	bne.n	8007162 <configureCCS811+0x4e>
		return -2;
 800715e:	23fe      	movs	r3, #254	; 0xfe
 8007160:	e038      	b.n	80071d4 <configureCCS811+0xc0>
	}

	if(appValid() == 0){
 8007162:	f000 f8b9 	bl	80072d8 <appValid>
 8007166:	1e03      	subs	r3, r0, #0
 8007168:	d101      	bne.n	800716e <configureCCS811+0x5a>
		return -3;
 800716a:	23fd      	movs	r3, #253	; 0xfd
 800716c:	e032      	b.n	80071d4 <configureCCS811+0xc0>
	}

	unsigned char    lodata[1];
	lodata[0]= CSS811_APP_START;
 800716e:	1d3b      	adds	r3, r7, #4
 8007170:	22f4      	movs	r2, #244	; 0xf4
 8007172:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c2, CCS811_ADDR, lodata, 1, 100);
 8007174:	1d3a      	adds	r2, r7, #4
 8007176:	481a      	ldr	r0, [pc, #104]	; (80071e0 <configureCCS811+0xcc>)
 8007178:	2364      	movs	r3, #100	; 0x64
 800717a:	9300      	str	r3, [sp, #0]
 800717c:	2301      	movs	r3, #1
 800717e:	21b4      	movs	r1, #180	; 0xb4
 8007180:	f7fc fe8c 	bl	8003e9c <HAL_I2C_Master_Transmit>

	if (checkForError() == 1){
 8007184:	f000 f86c 	bl	8007260 <checkForError>
 8007188:	0003      	movs	r3, r0
 800718a:	2b01      	cmp	r3, #1
 800718c:	d101      	bne.n	8007192 <configureCCS811+0x7e>
			return -4;
 800718e:	23fc      	movs	r3, #252	; 0xfc
 8007190:	e020      	b.n	80071d4 <configureCCS811+0xc0>
	}

	setDriveMode(driveMode_1sec); //Read every second
 8007192:	2001      	movs	r0, #1
 8007194:	f000 f8b4 	bl	8007300 <setDriveMode>

	if (checkForError() == 1){
 8007198:	f000 f862 	bl	8007260 <checkForError>
 800719c:	0003      	movs	r3, r0
 800719e:	2b01      	cmp	r3, #1
 80071a0:	d100      	bne.n	80071a4 <configureCCS811+0x90>
		while (1); //Freeze!
 80071a2:	e7fe      	b.n	80071a2 <configureCCS811+0x8e>
	}
	//Set Drive Mode

	//Check for errors
	if (checkForError() == 1){
 80071a4:	f000 f85c 	bl	8007260 <checkForError>
 80071a8:	0003      	movs	r3, r0
 80071aa:	2b01      	cmp	r3, #1
 80071ac:	d101      	bne.n	80071b2 <configureCCS811+0x9e>
		return -5;
 80071ae:	23fb      	movs	r3, #251	; 0xfb
 80071b0:	e010      	b.n	80071d4 <configureCCS811+0xc0>
	}

	setEnvironmentalData(relativeHumidity, temperature);
 80071b2:	4b0c      	ldr	r3, [pc, #48]	; (80071e4 <configureCCS811+0xd0>)
 80071b4:	681a      	ldr	r2, [r3, #0]
 80071b6:	4b0c      	ldr	r3, [pc, #48]	; (80071e8 <configureCCS811+0xd4>)
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	1c19      	adds	r1, r3, #0
 80071bc:	1c10      	adds	r0, r2, #0
 80071be:	f000 f8e1 	bl	8007384 <setEnvironmentalData>
	while(!checkDataAndUpdate());
 80071c2:	46c0      	nop			; (mov r8, r8)
 80071c4:	f000 f866 	bl	8007294 <checkDataAndUpdate>
 80071c8:	1e03      	subs	r3, r0, #0
 80071ca:	d0fb      	beq.n	80071c4 <configureCCS811+0xb0>
//	if(checkDataAndUpdate()){
//	  printf("co2:%d, tvoc:%d\n", getCo2(), gettVOC());
//	}else{
//	  printf("can't read co2 and tvoc");
//	}
	HAL_Delay(2);
 80071cc:	2002      	movs	r0, #2
 80071ce:	f7fc f869 	bl	80032a4 <HAL_Delay>
//	unsigned int result = getBaseline();

//	readHumidity();
//	readTemperature();
//	setEnvironmentalData(  HDC1080_Humidity/1000,  HDC1080_Temp);
	return 1;
 80071d2:	2301      	movs	r3, #1
}
 80071d4:	0018      	movs	r0, r3
 80071d6:	46bd      	mov	sp, r7
 80071d8:	b003      	add	sp, #12
 80071da:	bd90      	pop	{r4, r7, pc}
 80071dc:	0800ca14 	.word	0x0800ca14
 80071e0:	20000270 	.word	0x20000270
 80071e4:	20000008 	.word	0x20000008
 80071e8:	2000000c 	.word	0x2000000c

080071ec <readAlgorithmResults>:
  * @brief  Updates the total voltatile organic compounds (TVOC) in parts per billion (PPB) and the CO2 value.
  * @param  NONE.
  * @retval None.
 */	
void readAlgorithmResults()
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b086      	sub	sp, #24
 80071f0:	af04      	add	r7, sp, #16
	 
	unsigned char data_rq[4];
	HAL_I2C_Mem_Read( &hi2c2, CCS811_ADDR, ( unsigned char )CSS811_ALG_RESULT_DATA, I2C_MEMADD_SIZE_8BIT, data_rq, 4,
 80071f2:	4818      	ldr	r0, [pc, #96]	; (8007254 <readAlgorithmResults+0x68>)
 80071f4:	2364      	movs	r3, #100	; 0x64
 80071f6:	9302      	str	r3, [sp, #8]
 80071f8:	2304      	movs	r3, #4
 80071fa:	9301      	str	r3, [sp, #4]
 80071fc:	003b      	movs	r3, r7
 80071fe:	9300      	str	r3, [sp, #0]
 8007200:	2301      	movs	r3, #1
 8007202:	2202      	movs	r2, #2
 8007204:	21b4      	movs	r1, #180	; 0xb4
 8007206:	f7fd f987 	bl	8004518 <HAL_I2C_Mem_Read>
															100 );

	unsigned char co2MSB = data_rq[0];
 800720a:	1dfb      	adds	r3, r7, #7
 800720c:	003a      	movs	r2, r7
 800720e:	7812      	ldrb	r2, [r2, #0]
 8007210:	701a      	strb	r2, [r3, #0]
	unsigned char co2LSB = data_rq[1];
 8007212:	1dbb      	adds	r3, r7, #6
 8007214:	003a      	movs	r2, r7
 8007216:	7852      	ldrb	r2, [r2, #1]
 8007218:	701a      	strb	r2, [r3, #0]
	unsigned char tvocMSB = data_rq[2];
 800721a:	1d7b      	adds	r3, r7, #5
 800721c:	003a      	movs	r2, r7
 800721e:	7892      	ldrb	r2, [r2, #2]
 8007220:	701a      	strb	r2, [r3, #0]
	unsigned char tvocLSB = data_rq[3];
 8007222:	1d3b      	adds	r3, r7, #4
 8007224:	003a      	movs	r2, r7
 8007226:	78d2      	ldrb	r2, [r2, #3]
 8007228:	701a      	strb	r2, [r3, #0]

	/*	TVOC value, in parts per billion (ppb)

	eC02 value, in parts per million (ppm) */
	CO2 = ((unsigned int)co2MSB << 8) | co2LSB;
 800722a:	1dfb      	adds	r3, r7, #7
 800722c:	781b      	ldrb	r3, [r3, #0]
 800722e:	021a      	lsls	r2, r3, #8
 8007230:	1dbb      	adds	r3, r7, #6
 8007232:	781b      	ldrb	r3, [r3, #0]
 8007234:	431a      	orrs	r2, r3
 8007236:	4b08      	ldr	r3, [pc, #32]	; (8007258 <readAlgorithmResults+0x6c>)
 8007238:	601a      	str	r2, [r3, #0]
	tVOC = ((unsigned int)tvocMSB << 8) | tvocLSB;
 800723a:	1d7b      	adds	r3, r7, #5
 800723c:	781b      	ldrb	r3, [r3, #0]
 800723e:	021a      	lsls	r2, r3, #8
 8007240:	1d3b      	adds	r3, r7, #4
 8007242:	781b      	ldrb	r3, [r3, #0]
 8007244:	431a      	orrs	r2, r3
 8007246:	4b05      	ldr	r3, [pc, #20]	; (800725c <readAlgorithmResults+0x70>)
 8007248:	601a      	str	r2, [r3, #0]
}
 800724a:	46c0      	nop			; (mov r8, r8)
 800724c:	46bd      	mov	sp, r7
 800724e:	b002      	add	sp, #8
 8007250:	bd80      	pop	{r7, pc}
 8007252:	46c0      	nop			; (mov r8, r8)
 8007254:	20000270 	.word	0x20000270
 8007258:	2000020c 	.word	0x2000020c
 800725c:	20000208 	.word	0x20000208

08007260 <checkForError>:


//Checks to see if error bit is set
FlagStatus checkForError(){
 8007260:	b580      	push	{r7, lr}
 8007262:	af00      	add	r7, sp, #0
	errvalue=readRegister(CSS811_ERROR_ID);
 8007264:	20e0      	movs	r0, #224	; 0xe0
 8007266:	f000 f9b7 	bl	80075d8 <readRegister>
 800726a:	0003      	movs	r3, r0
 800726c:	001a      	movs	r2, r3
 800726e:	4b08      	ldr	r3, [pc, #32]	; (8007290 <checkForError+0x30>)
 8007270:	701a      	strb	r2, [r3, #0]
	errvalue = readRegister(CSS811_STATUS);
 8007272:	2000      	movs	r0, #0
 8007274:	f000 f9b0 	bl	80075d8 <readRegister>
 8007278:	0003      	movs	r3, r0
 800727a:	001a      	movs	r2, r3
 800727c:	4b04      	ldr	r3, [pc, #16]	; (8007290 <checkForError+0x30>)
 800727e:	701a      	strb	r2, [r3, #0]
	return (errvalue & 1 << 0);
 8007280:	4b03      	ldr	r3, [pc, #12]	; (8007290 <checkForError+0x30>)
 8007282:	781b      	ldrb	r3, [r3, #0]
 8007284:	2201      	movs	r2, #1
 8007286:	4013      	ands	r3, r2
 8007288:	b2db      	uxtb	r3, r3
}
 800728a:	0018      	movs	r0, r3
 800728c:	46bd      	mov	sp, r7
 800728e:	bd80      	pop	{r7, pc}
 8007290:	20000211 	.word	0x20000211

08007294 <checkDataAndUpdate>:

FlagStatus checkDataAndUpdate(){
 8007294:	b580      	push	{r7, lr}
 8007296:	af00      	add	r7, sp, #0
	if(dataAvailable()){
 8007298:	f000 f80a 	bl	80072b0 <dataAvailable>
 800729c:	1e03      	subs	r3, r0, #0
 800729e:	d003      	beq.n	80072a8 <checkDataAndUpdate+0x14>
		readAlgorithmResults();
 80072a0:	f7ff ffa4 	bl	80071ec <readAlgorithmResults>
		return 1;
 80072a4:	2301      	movs	r3, #1
 80072a6:	e000      	b.n	80072aa <checkDataAndUpdate+0x16>
	};
	return 0;
 80072a8:	2300      	movs	r3, #0
}
 80072aa:	0018      	movs	r0, r3
 80072ac:	46bd      	mov	sp, r7
 80072ae:	bd80      	pop	{r7, pc}

080072b0 <dataAvailable>:



//Checks to see if DATA_READ flag is set in the status register
FlagStatus dataAvailable(){
 80072b0:	b580      	push	{r7, lr}
 80072b2:	af00      	add	r7, sp, #0
	// dtvalue = readRegister(CSS811_ERROR_ID);
	//HAL_Delay(00);
	dtvalue = readRegister(CSS811_STATUS);
 80072b4:	2000      	movs	r0, #0
 80072b6:	f000 f98f 	bl	80075d8 <readRegister>
 80072ba:	0003      	movs	r3, r0
 80072bc:	001a      	movs	r2, r3
 80072be:	4b05      	ldr	r3, [pc, #20]	; (80072d4 <dataAvailable+0x24>)
 80072c0:	701a      	strb	r2, [r3, #0]
	return (dtvalue & 1 << 3);
 80072c2:	4b04      	ldr	r3, [pc, #16]	; (80072d4 <dataAvailable+0x24>)
 80072c4:	781b      	ldrb	r3, [r3, #0]
 80072c6:	2208      	movs	r2, #8
 80072c8:	4013      	ands	r3, r2
 80072ca:	b2db      	uxtb	r3, r3
}
 80072cc:	0018      	movs	r0, r3
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bd80      	pop	{r7, pc}
 80072d2:	46c0      	nop			; (mov r8, r8)
 80072d4:	20000213 	.word	0x20000213

080072d8 <appValid>:

//Checks to see if APP_VALID flag is set in the status register
FlagStatus appValid(){
 80072d8:	b580      	push	{r7, lr}
 80072da:	af00      	add	r7, sp, #0
	appvalue = readRegister(CSS811_STATUS);
 80072dc:	2000      	movs	r0, #0
 80072de:	f000 f97b 	bl	80075d8 <readRegister>
 80072e2:	0003      	movs	r3, r0
 80072e4:	001a      	movs	r2, r3
 80072e6:	4b05      	ldr	r3, [pc, #20]	; (80072fc <appValid+0x24>)
 80072e8:	701a      	strb	r2, [r3, #0]
	return (appvalue & (1 << 4));
 80072ea:	4b04      	ldr	r3, [pc, #16]	; (80072fc <appValid+0x24>)
 80072ec:	781b      	ldrb	r3, [r3, #0]
 80072ee:	2210      	movs	r2, #16
 80072f0:	4013      	ands	r3, r2
 80072f2:	b2db      	uxtb	r3, r3
}
 80072f4:	0018      	movs	r0, r3
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd80      	pop	{r7, pc}
 80072fa:	46c0      	nop			; (mov r8, r8)
 80072fc:	20000210 	.word	0x20000210

08007300 <setDriveMode>:
	    //Mode 3 = every 60s
	    //Mode 4 = RAW mode.
  * @param  MODE.
  * @retval None.
 */
void setDriveMode(unsigned char mode){
 8007300:	b580      	push	{r7, lr}
 8007302:	b082      	sub	sp, #8
 8007304:	af00      	add	r7, sp, #0
 8007306:	0002      	movs	r2, r0
 8007308:	1dfb      	adds	r3, r7, #7
 800730a:	701a      	strb	r2, [r3, #0]
	if (mode > 4) mode = 4; //Error correction
 800730c:	1dfb      	adds	r3, r7, #7
 800730e:	781b      	ldrb	r3, [r3, #0]
 8007310:	2b04      	cmp	r3, #4
 8007312:	d902      	bls.n	800731a <setDriveMode+0x1a>
 8007314:	1dfb      	adds	r3, r7, #7
 8007316:	2204      	movs	r2, #4
 8007318:	701a      	strb	r2, [r3, #0]

	mosetting = readRegister(CSS811_MEAS_MODE); //Read what's currently there
 800731a:	2001      	movs	r0, #1
 800731c:	f000 f95c 	bl	80075d8 <readRegister>
 8007320:	0003      	movs	r3, r0
 8007322:	001a      	movs	r2, r3
 8007324:	4b16      	ldr	r3, [pc, #88]	; (8007380 <setDriveMode+0x80>)
 8007326:	701a      	strb	r2, [r3, #0]

	mosetting &=~(7<<4); //Clear DRIVE_MODE bits
 8007328:	4b15      	ldr	r3, [pc, #84]	; (8007380 <setDriveMode+0x80>)
 800732a:	781b      	ldrb	r3, [r3, #0]
 800732c:	2270      	movs	r2, #112	; 0x70
 800732e:	4393      	bics	r3, r2
 8007330:	b2da      	uxtb	r2, r3
 8007332:	4b13      	ldr	r3, [pc, #76]	; (8007380 <setDriveMode+0x80>)
 8007334:	701a      	strb	r2, [r3, #0]
	mosetting |= (mode << 4); //Mask in mode
 8007336:	1dfb      	adds	r3, r7, #7
 8007338:	781b      	ldrb	r3, [r3, #0]
 800733a:	011b      	lsls	r3, r3, #4
 800733c:	b25a      	sxtb	r2, r3
 800733e:	4b10      	ldr	r3, [pc, #64]	; (8007380 <setDriveMode+0x80>)
 8007340:	781b      	ldrb	r3, [r3, #0]
 8007342:	b25b      	sxtb	r3, r3
 8007344:	4313      	orrs	r3, r2
 8007346:	b25b      	sxtb	r3, r3
 8007348:	b2da      	uxtb	r2, r3
 800734a:	4b0d      	ldr	r3, [pc, #52]	; (8007380 <setDriveMode+0x80>)
 800734c:	701a      	strb	r2, [r3, #0]
	mosetting |= (1 << 3); //interrupt in mode
 800734e:	4b0c      	ldr	r3, [pc, #48]	; (8007380 <setDriveMode+0x80>)
 8007350:	781b      	ldrb	r3, [r3, #0]
 8007352:	2208      	movs	r2, #8
 8007354:	4313      	orrs	r3, r2
 8007356:	b2da      	uxtb	r2, r3
 8007358:	4b09      	ldr	r3, [pc, #36]	; (8007380 <setDriveMode+0x80>)
 800735a:	701a      	strb	r2, [r3, #0]

	writeRegister(CSS811_MEAS_MODE, mosetting);
 800735c:	4b08      	ldr	r3, [pc, #32]	; (8007380 <setDriveMode+0x80>)
 800735e:	781b      	ldrb	r3, [r3, #0]
 8007360:	0019      	movs	r1, r3
 8007362:	2001      	movs	r0, #1
 8007364:	f000 f8fe 	bl	8007564 <writeRegister>
	mosetting = readRegister(CSS811_MEAS_MODE); //Read what's currently there
 8007368:	2001      	movs	r0, #1
 800736a:	f000 f935 	bl	80075d8 <readRegister>
 800736e:	0003      	movs	r3, r0
 8007370:	001a      	movs	r2, r3
 8007372:	4b03      	ldr	r3, [pc, #12]	; (8007380 <setDriveMode+0x80>)
 8007374:	701a      	strb	r2, [r3, #0]
	 
}
 8007376:	46c0      	nop			; (mov r8, r8)
 8007378:	46bd      	mov	sp, r7
 800737a:	b002      	add	sp, #8
 800737c:	bd80      	pop	{r7, pc}
 800737e:	46c0      	nop			; (mov r8, r8)
 8007380:	20000212 	.word	0x20000212

08007384 <setEnvironmentalData>:
	 //This function expects the humidity and temp to come in as floats
  * @param  relativeHumidity HUMIDITY.
  * @param  temperature TEMPERATURE.
  * @retval None.
 */
void setEnvironmentalData(float relativeHumidity, float temperature){
 8007384:	b590      	push	{r4, r7, lr}
 8007386:	b08b      	sub	sp, #44	; 0x2c
 8007388:	af04      	add	r7, sp, #16
 800738a:	6078      	str	r0, [r7, #4]
 800738c:	6039      	str	r1, [r7, #0]
	int rH = relativeHumidity * 1000; //42.348 becomes 42348
 800738e:	496b      	ldr	r1, [pc, #428]	; (800753c <setEnvironmentalData+0x1b8>)
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	f7f9 f8f9 	bl	8000588 <__aeabi_fmul>
 8007396:	1c03      	adds	r3, r0, #0
 8007398:	1c18      	adds	r0, r3, #0
 800739a:	f7f9 fa0f 	bl	80007bc <__aeabi_f2iz>
 800739e:	0003      	movs	r3, r0
 80073a0:	617b      	str	r3, [r7, #20]
	int temp = temperature * 1000; //23.2 becomes 23200
 80073a2:	4966      	ldr	r1, [pc, #408]	; (800753c <setEnvironmentalData+0x1b8>)
 80073a4:	6838      	ldr	r0, [r7, #0]
 80073a6:	f7f9 f8ef 	bl	8000588 <__aeabi_fmul>
 80073aa:	1c03      	adds	r3, r0, #0
 80073ac:	1c18      	adds	r0, r3, #0
 80073ae:	f7f9 fa05 	bl	80007bc <__aeabi_f2iz>
 80073b2:	0003      	movs	r3, r0
 80073b4:	613b      	str	r3, [r7, #16]

	unsigned char envData[4];

	//Split value into 7-bit integer and 9-bit fractional
	envData[0] = ((rH % 1000) / 100) > 7 ? (rH / 1000 + 1) << 1 : (rH / 1000) << 1;
 80073b6:	697b      	ldr	r3, [r7, #20]
 80073b8:	22fa      	movs	r2, #250	; 0xfa
 80073ba:	0091      	lsls	r1, r2, #2
 80073bc:	0018      	movs	r0, r3
 80073be:	f7f9 f82f 	bl	8000420 <__aeabi_idivmod>
 80073c2:	000b      	movs	r3, r1
 80073c4:	001a      	movs	r2, r3
 80073c6:	23c8      	movs	r3, #200	; 0xc8
 80073c8:	009b      	lsls	r3, r3, #2
 80073ca:	429a      	cmp	r2, r3
 80073cc:	db0c      	blt.n	80073e8 <setEnvironmentalData+0x64>
 80073ce:	697b      	ldr	r3, [r7, #20]
 80073d0:	22fa      	movs	r2, #250	; 0xfa
 80073d2:	0091      	lsls	r1, r2, #2
 80073d4:	0018      	movs	r0, r3
 80073d6:	f7f8 ff3d 	bl	8000254 <__divsi3>
 80073da:	0003      	movs	r3, r0
 80073dc:	b2db      	uxtb	r3, r3
 80073de:	3301      	adds	r3, #1
 80073e0:	b2db      	uxtb	r3, r3
 80073e2:	18db      	adds	r3, r3, r3
 80073e4:	b2db      	uxtb	r3, r3
 80073e6:	e009      	b.n	80073fc <setEnvironmentalData+0x78>
 80073e8:	697b      	ldr	r3, [r7, #20]
 80073ea:	22fa      	movs	r2, #250	; 0xfa
 80073ec:	0091      	lsls	r1, r2, #2
 80073ee:	0018      	movs	r0, r3
 80073f0:	f7f8 ff30 	bl	8000254 <__divsi3>
 80073f4:	0003      	movs	r3, r0
 80073f6:	b2db      	uxtb	r3, r3
 80073f8:	18db      	adds	r3, r3, r3
 80073fa:	b2db      	uxtb	r3, r3
 80073fc:	240c      	movs	r4, #12
 80073fe:	193a      	adds	r2, r7, r4
 8007400:	7013      	strb	r3, [r2, #0]
	envData[1] = 0; //CCS811 only supports increments of 0.5 so bits 7-0 will always be zero
 8007402:	193b      	adds	r3, r7, r4
 8007404:	2200      	movs	r2, #0
 8007406:	705a      	strb	r2, [r3, #1]
	if (((rH % 1000) / 100) > 2 && (((rH % 1000) / 100) < 8)){
 8007408:	697b      	ldr	r3, [r7, #20]
 800740a:	22fa      	movs	r2, #250	; 0xfa
 800740c:	0091      	lsls	r1, r2, #2
 800740e:	0018      	movs	r0, r3
 8007410:	f7f9 f806 	bl	8000420 <__aeabi_idivmod>
 8007414:	000b      	movs	r3, r1
 8007416:	001a      	movs	r2, r3
 8007418:	2396      	movs	r3, #150	; 0x96
 800741a:	005b      	lsls	r3, r3, #1
 800741c:	429a      	cmp	r2, r3
 800741e:	db12      	blt.n	8007446 <setEnvironmentalData+0xc2>
 8007420:	697b      	ldr	r3, [r7, #20]
 8007422:	22fa      	movs	r2, #250	; 0xfa
 8007424:	0091      	lsls	r1, r2, #2
 8007426:	0018      	movs	r0, r3
 8007428:	f7f8 fffa 	bl	8000420 <__aeabi_idivmod>
 800742c:	000b      	movs	r3, r1
 800742e:	001a      	movs	r2, r3
 8007430:	23c8      	movs	r3, #200	; 0xc8
 8007432:	009b      	lsls	r3, r3, #2
 8007434:	429a      	cmp	r2, r3
 8007436:	da06      	bge.n	8007446 <setEnvironmentalData+0xc2>
		envData[0] |= 1; //Set 9th bit of fractional to indicate 0.5%
 8007438:	193b      	adds	r3, r7, r4
 800743a:	781b      	ldrb	r3, [r3, #0]
 800743c:	2201      	movs	r2, #1
 800743e:	4313      	orrs	r3, r2
 8007440:	b2da      	uxtb	r2, r3
 8007442:	193b      	adds	r3, r7, r4
 8007444:	701a      	strb	r2, [r3, #0]
	}

	temp += 25000; //Add the 25C offset
 8007446:	693b      	ldr	r3, [r7, #16]
 8007448:	4a3d      	ldr	r2, [pc, #244]	; (8007540 <setEnvironmentalData+0x1bc>)
 800744a:	4694      	mov	ip, r2
 800744c:	4463      	add	r3, ip
 800744e:	613b      	str	r3, [r7, #16]
	//Split value into 7-bit integer and 9-bit fractional
	envData[2] = ((temp % 1000) / 100) > 7 ? (temp / 1000 + 1) << 1 : (temp / 1000) << 1;
 8007450:	693b      	ldr	r3, [r7, #16]
 8007452:	22fa      	movs	r2, #250	; 0xfa
 8007454:	0091      	lsls	r1, r2, #2
 8007456:	0018      	movs	r0, r3
 8007458:	f7f8 ffe2 	bl	8000420 <__aeabi_idivmod>
 800745c:	000b      	movs	r3, r1
 800745e:	001a      	movs	r2, r3
 8007460:	23c8      	movs	r3, #200	; 0xc8
 8007462:	009b      	lsls	r3, r3, #2
 8007464:	429a      	cmp	r2, r3
 8007466:	db0c      	blt.n	8007482 <setEnvironmentalData+0xfe>
 8007468:	693b      	ldr	r3, [r7, #16]
 800746a:	22fa      	movs	r2, #250	; 0xfa
 800746c:	0091      	lsls	r1, r2, #2
 800746e:	0018      	movs	r0, r3
 8007470:	f7f8 fef0 	bl	8000254 <__divsi3>
 8007474:	0003      	movs	r3, r0
 8007476:	b2db      	uxtb	r3, r3
 8007478:	3301      	adds	r3, #1
 800747a:	b2db      	uxtb	r3, r3
 800747c:	18db      	adds	r3, r3, r3
 800747e:	b2db      	uxtb	r3, r3
 8007480:	e009      	b.n	8007496 <setEnvironmentalData+0x112>
 8007482:	693b      	ldr	r3, [r7, #16]
 8007484:	22fa      	movs	r2, #250	; 0xfa
 8007486:	0091      	lsls	r1, r2, #2
 8007488:	0018      	movs	r0, r3
 800748a:	f7f8 fee3 	bl	8000254 <__divsi3>
 800748e:	0003      	movs	r3, r0
 8007490:	b2db      	uxtb	r3, r3
 8007492:	18db      	adds	r3, r3, r3
 8007494:	b2db      	uxtb	r3, r3
 8007496:	240c      	movs	r4, #12
 8007498:	193a      	adds	r2, r7, r4
 800749a:	7093      	strb	r3, [r2, #2]
	envData[3] = 0;
 800749c:	193b      	adds	r3, r7, r4
 800749e:	2200      	movs	r2, #0
 80074a0:	70da      	strb	r2, [r3, #3]
	if (((temp % 1000) / 100) > 2 && (((temp % 1000) / 100) < 8)){
 80074a2:	693b      	ldr	r3, [r7, #16]
 80074a4:	22fa      	movs	r2, #250	; 0xfa
 80074a6:	0091      	lsls	r1, r2, #2
 80074a8:	0018      	movs	r0, r3
 80074aa:	f7f8 ffb9 	bl	8000420 <__aeabi_idivmod>
 80074ae:	000b      	movs	r3, r1
 80074b0:	001a      	movs	r2, r3
 80074b2:	2396      	movs	r3, #150	; 0x96
 80074b4:	005b      	lsls	r3, r3, #1
 80074b6:	429a      	cmp	r2, r3
 80074b8:	db12      	blt.n	80074e0 <setEnvironmentalData+0x15c>
 80074ba:	693b      	ldr	r3, [r7, #16]
 80074bc:	22fa      	movs	r2, #250	; 0xfa
 80074be:	0091      	lsls	r1, r2, #2
 80074c0:	0018      	movs	r0, r3
 80074c2:	f7f8 ffad 	bl	8000420 <__aeabi_idivmod>
 80074c6:	000b      	movs	r3, r1
 80074c8:	001a      	movs	r2, r3
 80074ca:	23c8      	movs	r3, #200	; 0xc8
 80074cc:	009b      	lsls	r3, r3, #2
 80074ce:	429a      	cmp	r2, r3
 80074d0:	da06      	bge.n	80074e0 <setEnvironmentalData+0x15c>
	envData[2] |= 1;  //Set 9th bit of fractional to indicate 0.5C
 80074d2:	193b      	adds	r3, r7, r4
 80074d4:	789b      	ldrb	r3, [r3, #2]
 80074d6:	2201      	movs	r2, #1
 80074d8:	4313      	orrs	r3, r2
 80074da:	b2da      	uxtb	r2, r3
 80074dc:	193b      	adds	r3, r7, r4
 80074de:	709a      	strb	r2, [r3, #2]
	}

	HAL_I2C_Mem_Write( &hi2c2, CCS811_ADDR, ( unsigned char )CSS811_ENV_DATA, I2C_MEMADD_SIZE_8BIT, envData, 4,
 80074e0:	4818      	ldr	r0, [pc, #96]	; (8007544 <setEnvironmentalData+0x1c0>)
 80074e2:	2364      	movs	r3, #100	; 0x64
 80074e4:	9302      	str	r3, [sp, #8]
 80074e6:	2304      	movs	r3, #4
 80074e8:	9301      	str	r3, [sp, #4]
 80074ea:	230c      	movs	r3, #12
 80074ec:	18fb      	adds	r3, r7, r3
 80074ee:	9300      	str	r3, [sp, #0]
 80074f0:	2301      	movs	r3, #1
 80074f2:	2205      	movs	r2, #5
 80074f4:	21b4      	movs	r1, #180	; 0xb4
 80074f6:	f7fc fee1 	bl	80042bc <HAL_I2C_Mem_Write>
							100 );
	while (HAL_I2C_GetState(&hi2c2) != HAL_I2C_STATE_READY){
 80074fa:	46c0      	nop			; (mov r8, r8)
 80074fc:	4b11      	ldr	r3, [pc, #68]	; (8007544 <setEnvironmentalData+0x1c0>)
 80074fe:	0018      	movs	r0, r3
 8007500:	f7fd fa58 	bl	80049b4 <HAL_I2C_GetState>
 8007504:	0003      	movs	r3, r0
 8007506:	2b20      	cmp	r3, #32
 8007508:	d1f8      	bne.n	80074fc <setEnvironmentalData+0x178>
	}
	while (HAL_I2C_IsDeviceReady(&hi2c2, CCS811_ADDR, 10, 300) == HAL_TIMEOUT);
 800750a:	46c0      	nop			; (mov r8, r8)
 800750c:	2396      	movs	r3, #150	; 0x96
 800750e:	005b      	lsls	r3, r3, #1
 8007510:	480c      	ldr	r0, [pc, #48]	; (8007544 <setEnvironmentalData+0x1c0>)
 8007512:	220a      	movs	r2, #10
 8007514:	21b4      	movs	r1, #180	; 0xb4
 8007516:	f7fd f933 	bl	8004780 <HAL_I2C_IsDeviceReady>
 800751a:	0003      	movs	r3, r0
 800751c:	2b03      	cmp	r3, #3
 800751e:	d0f5      	beq.n	800750c <setEnvironmentalData+0x188>
	while(HAL_I2C_GetState(&hi2c2) != HAL_I2C_STATE_READY){
 8007520:	46c0      	nop			; (mov r8, r8)
 8007522:	4b08      	ldr	r3, [pc, #32]	; (8007544 <setEnvironmentalData+0x1c0>)
 8007524:	0018      	movs	r0, r3
 8007526:	f7fd fa45 	bl	80049b4 <HAL_I2C_GetState>
 800752a:	0003      	movs	r3, r0
 800752c:	2b20      	cmp	r3, #32
 800752e:	d1f8      	bne.n	8007522 <setEnvironmentalData+0x19e>
	}

}
 8007530:	46c0      	nop			; (mov r8, r8)
 8007532:	46c0      	nop			; (mov r8, r8)
 8007534:	46bd      	mov	sp, r7
 8007536:	b007      	add	sp, #28
 8007538:	bd90      	pop	{r4, r7, pc}
 800753a:	46c0      	nop			; (mov r8, r8)
 800753c:	447a0000 	.word	0x447a0000
 8007540:	000061a8 	.word	0x000061a8
 8007544:	20000270 	.word	0x20000270

08007548 <ccs811_wakeup>:
	sensor_Resistance=((165*adc_raw)*10000)/(current_value*1023);
 
	return sensor_Resistance;
}

void ccs811_wakeup(void){
 8007548:	b580      	push	{r7, lr}
 800754a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 800754c:	2380      	movs	r3, #128	; 0x80
 800754e:	015b      	lsls	r3, r3, #5
 8007550:	4803      	ldr	r0, [pc, #12]	; (8007560 <ccs811_wakeup+0x18>)
 8007552:	2200      	movs	r2, #0
 8007554:	0019      	movs	r1, r3
 8007556:	f7fc fbb6 	bl	8003cc6 <HAL_GPIO_WritePin>
}
 800755a:	46c0      	nop			; (mov r8, r8)
 800755c:	46bd      	mov	sp, r7
 800755e:	bd80      	pop	{r7, pc}
 8007560:	48000400 	.word	0x48000400

08007564 <writeRegister>:
* @brief  Write a value to a spot in the CCS811
* @param  addr ADDRESS.
* @param  val  VALUE.
* @retval NONE.
*/
static void writeRegister(unsigned char addr, unsigned char val){
 8007564:	b580      	push	{r7, lr}
 8007566:	b086      	sub	sp, #24
 8007568:	af04      	add	r7, sp, #16
 800756a:	0002      	movs	r2, r0
 800756c:	1dfb      	adds	r3, r7, #7
 800756e:	701a      	strb	r2, [r3, #0]
 8007570:	1dbb      	adds	r3, r7, #6
 8007572:	1c0a      	adds	r2, r1, #0
 8007574:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write( &hi2c2, CCS811_ADDR_W, ( unsigned char )addr, I2C_MEMADD_SIZE_8BIT, &val, 1,1000);
 8007576:	1dfb      	adds	r3, r7, #7
 8007578:	781b      	ldrb	r3, [r3, #0]
 800757a:	b29a      	uxth	r2, r3
 800757c:	4815      	ldr	r0, [pc, #84]	; (80075d4 <writeRegister+0x70>)
 800757e:	23fa      	movs	r3, #250	; 0xfa
 8007580:	009b      	lsls	r3, r3, #2
 8007582:	9302      	str	r3, [sp, #8]
 8007584:	2301      	movs	r3, #1
 8007586:	9301      	str	r3, [sp, #4]
 8007588:	1dbb      	adds	r3, r7, #6
 800758a:	9300      	str	r3, [sp, #0]
 800758c:	2301      	movs	r3, #1
 800758e:	21b4      	movs	r1, #180	; 0xb4
 8007590:	f7fc fe94 	bl	80042bc <HAL_I2C_Mem_Write>
	while (HAL_I2C_GetState(&hi2c2) != HAL_I2C_STATE_READY){
 8007594:	46c0      	nop			; (mov r8, r8)
 8007596:	4b0f      	ldr	r3, [pc, #60]	; (80075d4 <writeRegister+0x70>)
 8007598:	0018      	movs	r0, r3
 800759a:	f7fd fa0b 	bl	80049b4 <HAL_I2C_GetState>
 800759e:	0003      	movs	r3, r0
 80075a0:	2b20      	cmp	r3, #32
 80075a2:	d1f8      	bne.n	8007596 <writeRegister+0x32>
	};
	while (HAL_I2C_IsDeviceReady(&hi2c2, CCS811_ADDR, 10, 300) == HAL_TIMEOUT);
 80075a4:	46c0      	nop			; (mov r8, r8)
 80075a6:	2396      	movs	r3, #150	; 0x96
 80075a8:	005b      	lsls	r3, r3, #1
 80075aa:	480a      	ldr	r0, [pc, #40]	; (80075d4 <writeRegister+0x70>)
 80075ac:	220a      	movs	r2, #10
 80075ae:	21b4      	movs	r1, #180	; 0xb4
 80075b0:	f7fd f8e6 	bl	8004780 <HAL_I2C_IsDeviceReady>
 80075b4:	0003      	movs	r3, r0
 80075b6:	2b03      	cmp	r3, #3
 80075b8:	d0f5      	beq.n	80075a6 <writeRegister+0x42>
	while(HAL_I2C_GetState(&hi2c2) != HAL_I2C_STATE_READY){
 80075ba:	46c0      	nop			; (mov r8, r8)
 80075bc:	4b05      	ldr	r3, [pc, #20]	; (80075d4 <writeRegister+0x70>)
 80075be:	0018      	movs	r0, r3
 80075c0:	f7fd f9f8 	bl	80049b4 <HAL_I2C_GetState>
 80075c4:	0003      	movs	r3, r0
 80075c6:	2b20      	cmp	r3, #32
 80075c8:	d1f8      	bne.n	80075bc <writeRegister+0x58>
	};
}
 80075ca:	46c0      	nop			; (mov r8, r8)
 80075cc:	46c0      	nop			; (mov r8, r8)
 80075ce:	46bd      	mov	sp, r7
 80075d0:	b002      	add	sp, #8
 80075d2:	bd80      	pop	{r7, pc}
 80075d4:	20000270 	.word	0x20000270

080075d8 <readRegister>:
/*
 * @brief  Reads from a give location from the CSS811
 * @param  addr  ADDRESS.
 * @retval VALUE AT THE ADDRESS.
*/
static unsigned char readRegister(unsigned char addr){
 80075d8:	b580      	push	{r7, lr}
 80075da:	b088      	sub	sp, #32
 80075dc:	af04      	add	r7, sp, #16
 80075de:	0002      	movs	r2, r0
 80075e0:	1dfb      	adds	r3, r7, #7
 80075e2:	701a      	strb	r2, [r3, #0]
	unsigned char dt;

	HAL_I2C_Mem_Read( &hi2c2, CCS811_ADDR_R, ( unsigned char )addr,I2C_MEMADD_SIZE_8BIT, &dt, 1, 0XFF );
 80075e4:	1dfb      	adds	r3, r7, #7
 80075e6:	781b      	ldrb	r3, [r3, #0]
 80075e8:	b29a      	uxth	r2, r3
 80075ea:	480d      	ldr	r0, [pc, #52]	; (8007620 <readRegister+0x48>)
 80075ec:	23ff      	movs	r3, #255	; 0xff
 80075ee:	9302      	str	r3, [sp, #8]
 80075f0:	2301      	movs	r3, #1
 80075f2:	9301      	str	r3, [sp, #4]
 80075f4:	230f      	movs	r3, #15
 80075f6:	18fb      	adds	r3, r7, r3
 80075f8:	9300      	str	r3, [sp, #0]
 80075fa:	2301      	movs	r3, #1
 80075fc:	21b5      	movs	r1, #181	; 0xb5
 80075fe:	f7fc ff8b 	bl	8004518 <HAL_I2C_Mem_Read>
	while (HAL_I2C_GetState(&hi2c2) != HAL_I2C_STATE_READY);
 8007602:	46c0      	nop			; (mov r8, r8)
 8007604:	4b06      	ldr	r3, [pc, #24]	; (8007620 <readRegister+0x48>)
 8007606:	0018      	movs	r0, r3
 8007608:	f7fd f9d4 	bl	80049b4 <HAL_I2C_GetState>
 800760c:	0003      	movs	r3, r0
 800760e:	2b20      	cmp	r3, #32
 8007610:	d1f8      	bne.n	8007604 <readRegister+0x2c>

	return dt;
 8007612:	230f      	movs	r3, #15
 8007614:	18fb      	adds	r3, r7, r3
 8007616:	781b      	ldrb	r3, [r3, #0]
}
 8007618:	0018      	movs	r0, r3
 800761a:	46bd      	mov	sp, r7
 800761c:	b004      	add	sp, #16
 800761e:	bd80      	pop	{r7, pc}
 8007620:	20000270 	.word	0x20000270

08007624 <getCo2>:


unsigned int getCo2(){
 8007624:	b580      	push	{r7, lr}
 8007626:	af00      	add	r7, sp, #0
	return (CO2);
 8007628:	4b02      	ldr	r3, [pc, #8]	; (8007634 <getCo2+0x10>)
 800762a:	681b      	ldr	r3, [r3, #0]
}
 800762c:	0018      	movs	r0, r3
 800762e:	46bd      	mov	sp, r7
 8007630:	bd80      	pop	{r7, pc}
 8007632:	46c0      	nop			; (mov r8, r8)
 8007634:	2000020c 	.word	0x2000020c

08007638 <gettVOC>:

unsigned int gettVOC(){
 8007638:	b580      	push	{r7, lr}
 800763a:	af00      	add	r7, sp, #0
	return (tVOC);
 800763c:	4b02      	ldr	r3, [pc, #8]	; (8007648 <gettVOC+0x10>)
 800763e:	681b      	ldr	r3, [r3, #0]
}
 8007640:	0018      	movs	r0, r3
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}
 8007646:	46c0      	nop			; (mov r8, r8)
 8007648:	20000208 	.word	0x20000208

0800764c <hdc1080_init>:

static double temperature = 0;
static double humidity = 0;

void hdc1080_init(void)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b086      	sub	sp, #24
 8007650:	af04      	add	r7, sp, #16
	 * Default:   Temperature resolution = 14 bit,
	 *            Humidity resolution = 14 bit
	 */

	/* Set the acquisition mode to measure both temperature and humidity by setting Bit[12] to 1 */
	uint16_t config_reg_value=0x1000;
 8007652:	1dbb      	adds	r3, r7, #6
 8007654:	2280      	movs	r2, #128	; 0x80
 8007656:	0152      	lsls	r2, r2, #5
 8007658:	801a      	strh	r2, [r3, #0]
	uint8_t data_send[2];

	config_reg_value |= (1<<10); //11 bit
 800765a:	1dbb      	adds	r3, r7, #6
 800765c:	1dba      	adds	r2, r7, #6
 800765e:	8812      	ldrh	r2, [r2, #0]
 8007660:	2180      	movs	r1, #128	; 0x80
 8007662:	00c9      	lsls	r1, r1, #3
 8007664:	430a      	orrs	r2, r1
 8007666:	801a      	strh	r2, [r3, #0]
	config_reg_value|= (1<<8);
 8007668:	1dbb      	adds	r3, r7, #6
 800766a:	1dba      	adds	r2, r7, #6
 800766c:	8812      	ldrh	r2, [r2, #0]
 800766e:	2180      	movs	r1, #128	; 0x80
 8007670:	0049      	lsls	r1, r1, #1
 8007672:	430a      	orrs	r2, r1
 8007674:	801a      	strh	r2, [r3, #0]


	data_send[0]= (config_reg_value>>8);
 8007676:	1dbb      	adds	r3, r7, #6
 8007678:	881b      	ldrh	r3, [r3, #0]
 800767a:	0a1b      	lsrs	r3, r3, #8
 800767c:	b29b      	uxth	r3, r3
 800767e:	b2da      	uxtb	r2, r3
 8007680:	1d3b      	adds	r3, r7, #4
 8007682:	701a      	strb	r2, [r3, #0]
	data_send[1]= (config_reg_value&0x00ff);
 8007684:	1dbb      	adds	r3, r7, #6
 8007686:	881b      	ldrh	r3, [r3, #0]
 8007688:	b2da      	uxtb	r2, r3
 800768a:	1d3b      	adds	r3, r7, #4
 800768c:	705a      	strb	r2, [r3, #1]

	HAL_I2C_Mem_Write(&hi2c2,HDC_1080_ADD<<1,Configuration_register_add,I2C_MEMADD_SIZE_8BIT,data_send,2,1000);
 800768e:	4809      	ldr	r0, [pc, #36]	; (80076b4 <hdc1080_init+0x68>)
 8007690:	23fa      	movs	r3, #250	; 0xfa
 8007692:	009b      	lsls	r3, r3, #2
 8007694:	9302      	str	r3, [sp, #8]
 8007696:	2302      	movs	r3, #2
 8007698:	9301      	str	r3, [sp, #4]
 800769a:	1d3b      	adds	r3, r7, #4
 800769c:	9300      	str	r3, [sp, #0]
 800769e:	2301      	movs	r3, #1
 80076a0:	2202      	movs	r2, #2
 80076a2:	2180      	movs	r1, #128	; 0x80
 80076a4:	f7fc fe0a 	bl	80042bc <HAL_I2C_Mem_Write>
	hdc1080_start_measurement();
 80076a8:	f000 f806 	bl	80076b8 <hdc1080_start_measurement>
}
 80076ac:	46c0      	nop			; (mov r8, r8)
 80076ae:	46bd      	mov	sp, r7
 80076b0:	b002      	add	sp, #8
 80076b2:	bd80      	pop	{r7, pc}
 80076b4:	20000270 	.word	0x20000270

080076b8 <hdc1080_start_measurement>:


uint8_t hdc1080_start_measurement(void)
{
 80076b8:	b590      	push	{r4, r7, lr}
 80076ba:	b087      	sub	sp, #28
 80076bc:	af02      	add	r7, sp, #8
	uint8_t receive_data[4];
	uint16_t temp_x,humi_x;
	uint8_t send_data = Temperature_register_add;
 80076be:	1dfb      	adds	r3, r7, #7
 80076c0:	2200      	movs	r2, #0
 80076c2:	701a      	strb	r2, [r3, #0]

	HAL_I2C_Master_Transmit(&hi2c2,HDC_1080_ADD<<1,&send_data,1,1000);
 80076c4:	1dfa      	adds	r2, r7, #7
 80076c6:	4839      	ldr	r0, [pc, #228]	; (80077ac <hdc1080_start_measurement+0xf4>)
 80076c8:	23fa      	movs	r3, #250	; 0xfa
 80076ca:	009b      	lsls	r3, r3, #2
 80076cc:	9300      	str	r3, [sp, #0]
 80076ce:	2301      	movs	r3, #1
 80076d0:	2180      	movs	r1, #128	; 0x80
 80076d2:	f7fc fbe3 	bl	8003e9c <HAL_I2C_Master_Transmit>

	/* Delay here 15ms for conversion compelete.
	 * Note: datasheet say maximum is 7ms, but when delay=7ms, the read value is not correct
	 */
	HAL_Delay(15);
 80076d6:	200f      	movs	r0, #15
 80076d8:	f7fb fde4 	bl	80032a4 <HAL_Delay>

	/* Read temperature and humidity */
	HAL_I2C_Master_Receive(&hi2c2,HDC_1080_ADD<<1,receive_data,4,1000);
 80076dc:	2408      	movs	r4, #8
 80076de:	193a      	adds	r2, r7, r4
 80076e0:	4832      	ldr	r0, [pc, #200]	; (80077ac <hdc1080_start_measurement+0xf4>)
 80076e2:	23fa      	movs	r3, #250	; 0xfa
 80076e4:	009b      	lsls	r3, r3, #2
 80076e6:	9300      	str	r3, [sp, #0]
 80076e8:	2304      	movs	r3, #4
 80076ea:	2180      	movs	r1, #128	; 0x80
 80076ec:	f7fc fcde 	bl	80040ac <HAL_I2C_Master_Receive>

	temp_x =((receive_data[0]<<8)|receive_data[1]);
 80076f0:	0021      	movs	r1, r4
 80076f2:	187b      	adds	r3, r7, r1
 80076f4:	781b      	ldrb	r3, [r3, #0]
 80076f6:	021b      	lsls	r3, r3, #8
 80076f8:	b21a      	sxth	r2, r3
 80076fa:	187b      	adds	r3, r7, r1
 80076fc:	785b      	ldrb	r3, [r3, #1]
 80076fe:	b21b      	sxth	r3, r3
 8007700:	4313      	orrs	r3, r2
 8007702:	b21a      	sxth	r2, r3
 8007704:	200e      	movs	r0, #14
 8007706:	183b      	adds	r3, r7, r0
 8007708:	801a      	strh	r2, [r3, #0]
	humi_x =((receive_data[2]<<8)|receive_data[3]);
 800770a:	187b      	adds	r3, r7, r1
 800770c:	789b      	ldrb	r3, [r3, #2]
 800770e:	021b      	lsls	r3, r3, #8
 8007710:	b21a      	sxth	r2, r3
 8007712:	187b      	adds	r3, r7, r1
 8007714:	78db      	ldrb	r3, [r3, #3]
 8007716:	b21b      	sxth	r3, r3
 8007718:	4313      	orrs	r3, r2
 800771a:	b21a      	sxth	r2, r3
 800771c:	240c      	movs	r4, #12
 800771e:	193b      	adds	r3, r7, r4
 8007720:	801a      	strh	r2, [r3, #0]

	temperature=((temp_x/65536.0)*165.0)-40.0;
 8007722:	183b      	adds	r3, r7, r0
 8007724:	881b      	ldrh	r3, [r3, #0]
 8007726:	0018      	movs	r0, r3
 8007728:	f7fa fe2a 	bl	8002380 <__aeabi_i2d>
 800772c:	2200      	movs	r2, #0
 800772e:	4b20      	ldr	r3, [pc, #128]	; (80077b0 <hdc1080_start_measurement+0xf8>)
 8007730:	f7f9 fbce 	bl	8000ed0 <__aeabi_ddiv>
 8007734:	0002      	movs	r2, r0
 8007736:	000b      	movs	r3, r1
 8007738:	0010      	movs	r0, r2
 800773a:	0019      	movs	r1, r3
 800773c:	2200      	movs	r2, #0
 800773e:	4b1d      	ldr	r3, [pc, #116]	; (80077b4 <hdc1080_start_measurement+0xfc>)
 8007740:	f7f9 ffcc 	bl	80016dc <__aeabi_dmul>
 8007744:	0002      	movs	r2, r0
 8007746:	000b      	movs	r3, r1
 8007748:	0010      	movs	r0, r2
 800774a:	0019      	movs	r1, r3
 800774c:	2200      	movs	r2, #0
 800774e:	4b1a      	ldr	r3, [pc, #104]	; (80077b8 <hdc1080_start_measurement+0x100>)
 8007750:	f7fa fa30 	bl	8001bb4 <__aeabi_dsub>
 8007754:	0002      	movs	r2, r0
 8007756:	000b      	movs	r3, r1
 8007758:	4918      	ldr	r1, [pc, #96]	; (80077bc <hdc1080_start_measurement+0x104>)
 800775a:	600a      	str	r2, [r1, #0]
 800775c:	604b      	str	r3, [r1, #4]
	humidity=(uint8_t)((humi_x/65536.0)*100.0);
 800775e:	193b      	adds	r3, r7, r4
 8007760:	881b      	ldrh	r3, [r3, #0]
 8007762:	0018      	movs	r0, r3
 8007764:	f7fa fe0c 	bl	8002380 <__aeabi_i2d>
 8007768:	2200      	movs	r2, #0
 800776a:	4b11      	ldr	r3, [pc, #68]	; (80077b0 <hdc1080_start_measurement+0xf8>)
 800776c:	f7f9 fbb0 	bl	8000ed0 <__aeabi_ddiv>
 8007770:	0002      	movs	r2, r0
 8007772:	000b      	movs	r3, r1
 8007774:	0010      	movs	r0, r2
 8007776:	0019      	movs	r1, r3
 8007778:	2200      	movs	r2, #0
 800777a:	4b11      	ldr	r3, [pc, #68]	; (80077c0 <hdc1080_start_measurement+0x108>)
 800777c:	f7f9 ffae 	bl	80016dc <__aeabi_dmul>
 8007780:	0002      	movs	r2, r0
 8007782:	000b      	movs	r3, r1
 8007784:	0010      	movs	r0, r2
 8007786:	0019      	movs	r1, r3
 8007788:	f7f8 fe8e 	bl	80004a8 <__aeabi_d2uiz>
 800778c:	0003      	movs	r3, r0
 800778e:	b2db      	uxtb	r3, r3
 8007790:	0018      	movs	r0, r3
 8007792:	f7fa fe25 	bl	80023e0 <__aeabi_ui2d>
 8007796:	0002      	movs	r2, r0
 8007798:	000b      	movs	r3, r1
 800779a:	490a      	ldr	r1, [pc, #40]	; (80077c4 <hdc1080_start_measurement+0x10c>)
 800779c:	600a      	str	r2, [r1, #0]
 800779e:	604b      	str	r3, [r1, #4]

	return 0;
 80077a0:	2300      	movs	r3, #0

}
 80077a2:	0018      	movs	r0, r3
 80077a4:	46bd      	mov	sp, r7
 80077a6:	b005      	add	sp, #20
 80077a8:	bd90      	pop	{r4, r7, pc}
 80077aa:	46c0      	nop			; (mov r8, r8)
 80077ac:	20000270 	.word	0x20000270
 80077b0:	40f00000 	.word	0x40f00000
 80077b4:	4064a000 	.word	0x4064a000
 80077b8:	40440000 	.word	0x40440000
 80077bc:	20000218 	.word	0x20000218
 80077c0:	40590000 	.word	0x40590000
 80077c4:	20000220 	.word	0x20000220

080077c8 <gettemperature>:

double gettemperature(void){
 80077c8:	b580      	push	{r7, lr}
 80077ca:	af00      	add	r7, sp, #0
	return temperature;
 80077cc:	4b03      	ldr	r3, [pc, #12]	; (80077dc <gettemperature+0x14>)
 80077ce:	681a      	ldr	r2, [r3, #0]
 80077d0:	685b      	ldr	r3, [r3, #4]
}
 80077d2:	0010      	movs	r0, r2
 80077d4:	0019      	movs	r1, r3
 80077d6:	46bd      	mov	sp, r7
 80077d8:	bd80      	pop	{r7, pc}
 80077da:	46c0      	nop			; (mov r8, r8)
 80077dc:	20000218 	.word	0x20000218

080077e0 <gethumidity>:

double gethumidity(void){
 80077e0:	b580      	push	{r7, lr}
 80077e2:	af00      	add	r7, sp, #0
	return humidity;
 80077e4:	4b03      	ldr	r3, [pc, #12]	; (80077f4 <gethumidity+0x14>)
 80077e6:	681a      	ldr	r2, [r3, #0]
 80077e8:	685b      	ldr	r3, [r3, #4]
}
 80077ea:	0010      	movs	r0, r2
 80077ec:	0019      	movs	r1, r3
 80077ee:	46bd      	mov	sp, r7
 80077f0:	bd80      	pop	{r7, pc}
 80077f2:	46c0      	nop			; (mov r8, r8)
 80077f4:	20000220 	.word	0x20000220

080077f8 <OLED_Write_Cmd>:
#include "oled.h"
#include "oledfont.h"
#include "stdio.h"

static void OLED_Write_Cmd(uint8_t cmd)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b086      	sub	sp, #24
 80077fc:	af02      	add	r7, sp, #8
 80077fe:	0002      	movs	r2, r0
 8007800:	1dfb      	adds	r3, r7, #7
 8007802:	701a      	strb	r2, [r3, #0]
	uint8_t buf[2];
	buf[0] = 0x00;	//control byte
 8007804:	210c      	movs	r1, #12
 8007806:	187b      	adds	r3, r7, r1
 8007808:	2200      	movs	r2, #0
 800780a:	701a      	strb	r2, [r3, #0]
	buf[1] = cmd;
 800780c:	187b      	adds	r3, r7, r1
 800780e:	1dfa      	adds	r2, r7, #7
 8007810:	7812      	ldrb	r2, [r2, #0]
 8007812:	705a      	strb	r2, [r3, #1]
	
	//ʹ��HAL���APIʵ��
	HAL_I2C_Master_Transmit(&hi2c2, 0x78, buf, 2, 0xFFFF);
 8007814:	187a      	adds	r2, r7, r1
 8007816:	4805      	ldr	r0, [pc, #20]	; (800782c <OLED_Write_Cmd+0x34>)
 8007818:	4b05      	ldr	r3, [pc, #20]	; (8007830 <OLED_Write_Cmd+0x38>)
 800781a:	9300      	str	r3, [sp, #0]
 800781c:	2302      	movs	r3, #2
 800781e:	2178      	movs	r1, #120	; 0x78
 8007820:	f7fc fb3c 	bl	8003e9c <HAL_I2C_Master_Transmit>
}
 8007824:	46c0      	nop			; (mov r8, r8)
 8007826:	46bd      	mov	sp, r7
 8007828:	b004      	add	sp, #16
 800782a:	bd80      	pop	{r7, pc}
 800782c:	20000270 	.word	0x20000270
 8007830:	0000ffff 	.word	0x0000ffff

08007834 <OLED_Write_Dat>:
 * @brief	OLEDд������
 * @param cmd - ��д������
 * @note	��ֲʱ����ʹ���Լ��ĵײ�APIʵ�� 
*/
static void OLED_Write_Dat(uint8_t dat)
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b086      	sub	sp, #24
 8007838:	af02      	add	r7, sp, #8
 800783a:	0002      	movs	r2, r0
 800783c:	1dfb      	adds	r3, r7, #7
 800783e:	701a      	strb	r2, [r3, #0]
	uint8_t buf[2];
	buf[0] = 0x40; //control byte
 8007840:	210c      	movs	r1, #12
 8007842:	187b      	adds	r3, r7, r1
 8007844:	2240      	movs	r2, #64	; 0x40
 8007846:	701a      	strb	r2, [r3, #0]
	buf[1] = dat;
 8007848:	187b      	adds	r3, r7, r1
 800784a:	1dfa      	adds	r2, r7, #7
 800784c:	7812      	ldrb	r2, [r2, #0]
 800784e:	705a      	strb	r2, [r3, #1]
	
	//ʹ��HAL���APIʵ��
	HAL_I2C_Master_Transmit(&hi2c2, 0x78, buf, 2, 0xFFFF);
 8007850:	187a      	adds	r2, r7, r1
 8007852:	4805      	ldr	r0, [pc, #20]	; (8007868 <OLED_Write_Dat+0x34>)
 8007854:	4b05      	ldr	r3, [pc, #20]	; (800786c <OLED_Write_Dat+0x38>)
 8007856:	9300      	str	r3, [sp, #0]
 8007858:	2302      	movs	r3, #2
 800785a:	2178      	movs	r1, #120	; 0x78
 800785c:	f7fc fb1e 	bl	8003e9c <HAL_I2C_Master_Transmit>
}
 8007860:	46c0      	nop			; (mov r8, r8)
 8007862:	46bd      	mov	sp, r7
 8007864:	b004      	add	sp, #16
 8007866:	bd80      	pop	{r7, pc}
 8007868:	20000270 	.word	0x20000270
 800786c:	0000ffff 	.word	0x0000ffff

08007870 <OLED_Set_Pos>:
 * @brief	OLED������ʾλ��
 * @param x - X����λ��
 * @param y - Y����λ��
*/
void OLED_Set_Pos(uint8_t x, uint8_t y)
{ 	
 8007870:	b580      	push	{r7, lr}
 8007872:	b082      	sub	sp, #8
 8007874:	af00      	add	r7, sp, #0
 8007876:	0002      	movs	r2, r0
 8007878:	1dfb      	adds	r3, r7, #7
 800787a:	701a      	strb	r2, [r3, #0]
 800787c:	1dbb      	adds	r3, r7, #6
 800787e:	1c0a      	adds	r2, r1, #0
 8007880:	701a      	strb	r2, [r3, #0]
	OLED_Write_Cmd(0xb0+y);
 8007882:	1dbb      	adds	r3, r7, #6
 8007884:	781b      	ldrb	r3, [r3, #0]
 8007886:	3b50      	subs	r3, #80	; 0x50
 8007888:	b2db      	uxtb	r3, r3
 800788a:	0018      	movs	r0, r3
 800788c:	f7ff ffb4 	bl	80077f8 <OLED_Write_Cmd>
	OLED_Write_Cmd(((x&0xf0)>>4)|0x10);
 8007890:	1dfb      	adds	r3, r7, #7
 8007892:	781b      	ldrb	r3, [r3, #0]
 8007894:	091b      	lsrs	r3, r3, #4
 8007896:	b2db      	uxtb	r3, r3
 8007898:	2210      	movs	r2, #16
 800789a:	4313      	orrs	r3, r2
 800789c:	b2db      	uxtb	r3, r3
 800789e:	0018      	movs	r0, r3
 80078a0:	f7ff ffaa 	bl	80077f8 <OLED_Write_Cmd>
	OLED_Write_Cmd((x&0x0f)|0x01);
 80078a4:	1dfb      	adds	r3, r7, #7
 80078a6:	781b      	ldrb	r3, [r3, #0]
 80078a8:	b25b      	sxtb	r3, r3
 80078aa:	220e      	movs	r2, #14
 80078ac:	4013      	ands	r3, r2
 80078ae:	b25b      	sxtb	r3, r3
 80078b0:	2201      	movs	r2, #1
 80078b2:	4313      	orrs	r3, r2
 80078b4:	b25b      	sxtb	r3, r3
 80078b6:	b2db      	uxtb	r3, r3
 80078b8:	0018      	movs	r0, r3
 80078ba:	f7ff ff9d 	bl	80077f8 <OLED_Write_Cmd>
}   	  
 80078be:	46c0      	nop			; (mov r8, r8)
 80078c0:	46bd      	mov	sp, r7
 80078c2:	b002      	add	sp, #8
 80078c4:	bd80      	pop	{r7, pc}

080078c6 <OLED_Clear>:
}		   			 
/**
 * @brief	OLED��������������֮����ĻȫΪ��ɫ��
*/ 
void OLED_Clear(void)
{  
 80078c6:	b580      	push	{r7, lr}
 80078c8:	b082      	sub	sp, #8
 80078ca:	af00      	add	r7, sp, #0
	uint8_t i,n;
	for(i=0;i<8;i++)  
 80078cc:	1dfb      	adds	r3, r7, #7
 80078ce:	2200      	movs	r2, #0
 80078d0:	701a      	strb	r2, [r3, #0]
 80078d2:	e022      	b.n	800791a <OLED_Clear+0x54>
	{  
		OLED_Write_Cmd(0xb0+i);    //����ҳ��ַ��0~7��
 80078d4:	1dfb      	adds	r3, r7, #7
 80078d6:	781b      	ldrb	r3, [r3, #0]
 80078d8:	3b50      	subs	r3, #80	; 0x50
 80078da:	b2db      	uxtb	r3, r3
 80078dc:	0018      	movs	r0, r3
 80078de:	f7ff ff8b 	bl	80077f8 <OLED_Write_Cmd>
		OLED_Write_Cmd(0x00);      //������ʾλ�á��е͵�ַ
 80078e2:	2000      	movs	r0, #0
 80078e4:	f7ff ff88 	bl	80077f8 <OLED_Write_Cmd>
		OLED_Write_Cmd(0x10);      //������ʾλ�á��иߵ�ַ   
 80078e8:	2010      	movs	r0, #16
 80078ea:	f7ff ff85 	bl	80077f8 <OLED_Write_Cmd>
		for(n=0;n<128;n++)
 80078ee:	1dbb      	adds	r3, r7, #6
 80078f0:	2200      	movs	r2, #0
 80078f2:	701a      	strb	r2, [r3, #0]
 80078f4:	e007      	b.n	8007906 <OLED_Clear+0x40>
		{
			OLED_Write_Dat(0);
 80078f6:	2000      	movs	r0, #0
 80078f8:	f7ff ff9c 	bl	8007834 <OLED_Write_Dat>
		for(n=0;n<128;n++)
 80078fc:	1dbb      	adds	r3, r7, #6
 80078fe:	781a      	ldrb	r2, [r3, #0]
 8007900:	1dbb      	adds	r3, r7, #6
 8007902:	3201      	adds	r2, #1
 8007904:	701a      	strb	r2, [r3, #0]
 8007906:	1dbb      	adds	r3, r7, #6
 8007908:	781b      	ldrb	r3, [r3, #0]
 800790a:	b25b      	sxtb	r3, r3
 800790c:	2b00      	cmp	r3, #0
 800790e:	daf2      	bge.n	80078f6 <OLED_Clear+0x30>
	for(i=0;i<8;i++)  
 8007910:	1dfb      	adds	r3, r7, #7
 8007912:	781a      	ldrb	r2, [r3, #0]
 8007914:	1dfb      	adds	r3, r7, #7
 8007916:	3201      	adds	r2, #1
 8007918:	701a      	strb	r2, [r3, #0]
 800791a:	1dfb      	adds	r3, r7, #7
 800791c:	781b      	ldrb	r3, [r3, #0]
 800791e:	2b07      	cmp	r3, #7
 8007920:	d9d8      	bls.n	80078d4 <OLED_Clear+0xe>
		}			
	}
}
 8007922:	46c0      	nop			; (mov r8, r8)
 8007924:	46c0      	nop			; (mov r8, r8)
 8007926:	46bd      	mov	sp, r7
 8007928:	b002      	add	sp, #8
 800792a:	bd80      	pop	{r7, pc}

0800792c <OLED_ShowChar>:
 * @param chr  - ����ʾ��ASCII�ַ�
 * @param size - ASCII�ַ���С
 * 				�ַ���С��12(6*8)/16(8*16)���ִ�С
*/
void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t size)
{   
 800792c:	b5b0      	push	{r4, r5, r7, lr}
 800792e:	b084      	sub	sp, #16
 8007930:	af00      	add	r7, sp, #0
 8007932:	0005      	movs	r5, r0
 8007934:	000c      	movs	r4, r1
 8007936:	0010      	movs	r0, r2
 8007938:	0019      	movs	r1, r3
 800793a:	1dfb      	adds	r3, r7, #7
 800793c:	1c2a      	adds	r2, r5, #0
 800793e:	701a      	strb	r2, [r3, #0]
 8007940:	1dbb      	adds	r3, r7, #6
 8007942:	1c22      	adds	r2, r4, #0
 8007944:	701a      	strb	r2, [r3, #0]
 8007946:	1d7b      	adds	r3, r7, #5
 8007948:	1c02      	adds	r2, r0, #0
 800794a:	701a      	strb	r2, [r3, #0]
 800794c:	1d3b      	adds	r3, r7, #4
 800794e:	1c0a      	adds	r2, r1, #0
 8007950:	701a      	strb	r2, [r3, #0]
	uint8_t c=0,i=0;
 8007952:	210e      	movs	r1, #14
 8007954:	187b      	adds	r3, r7, r1
 8007956:	2200      	movs	r2, #0
 8007958:	701a      	strb	r2, [r3, #0]
 800795a:	230f      	movs	r3, #15
 800795c:	18fb      	adds	r3, r7, r3
 800795e:	2200      	movs	r2, #0
 8007960:	701a      	strb	r2, [r3, #0]
	
	c = chr-' ';	
 8007962:	187b      	adds	r3, r7, r1
 8007964:	1d7a      	adds	r2, r7, #5
 8007966:	7812      	ldrb	r2, [r2, #0]
 8007968:	3a20      	subs	r2, #32
 800796a:	701a      	strb	r2, [r3, #0]
	if(x > 128-1)
 800796c:	1dfb      	adds	r3, r7, #7
 800796e:	781b      	ldrb	r3, [r3, #0]
 8007970:	b25b      	sxtb	r3, r3
 8007972:	2b00      	cmp	r3, #0
 8007974:	da07      	bge.n	8007986 <OLED_ShowChar+0x5a>
	{
		x=0;
 8007976:	1dfb      	adds	r3, r7, #7
 8007978:	2200      	movs	r2, #0
 800797a:	701a      	strb	r2, [r3, #0]
		y++;
 800797c:	1dbb      	adds	r3, r7, #6
 800797e:	781a      	ldrb	r2, [r3, #0]
 8007980:	1dbb      	adds	r3, r7, #6
 8007982:	3201      	adds	r2, #1
 8007984:	701a      	strb	r2, [r3, #0]
	}
	
	if(size ==16)
 8007986:	1d3b      	adds	r3, r7, #4
 8007988:	781b      	ldrb	r3, [r3, #0]
 800798a:	2b10      	cmp	r3, #16
 800798c:	d14a      	bne.n	8007a24 <OLED_ShowChar+0xf8>
	{
		OLED_Set_Pos(x,y);	
 800798e:	1dbb      	adds	r3, r7, #6
 8007990:	781a      	ldrb	r2, [r3, #0]
 8007992:	1dfb      	adds	r3, r7, #7
 8007994:	781b      	ldrb	r3, [r3, #0]
 8007996:	0011      	movs	r1, r2
 8007998:	0018      	movs	r0, r3
 800799a:	f7ff ff69 	bl	8007870 <OLED_Set_Pos>
		for(i=0;i<8;i++)
 800799e:	230f      	movs	r3, #15
 80079a0:	18fb      	adds	r3, r7, r3
 80079a2:	2200      	movs	r2, #0
 80079a4:	701a      	strb	r2, [r3, #0]
 80079a6:	e011      	b.n	80079cc <OLED_ShowChar+0xa0>
		{
			OLED_Write_Dat(F8X16[c*16+i]);
 80079a8:	230e      	movs	r3, #14
 80079aa:	18fb      	adds	r3, r7, r3
 80079ac:	781b      	ldrb	r3, [r3, #0]
 80079ae:	011a      	lsls	r2, r3, #4
 80079b0:	240f      	movs	r4, #15
 80079b2:	193b      	adds	r3, r7, r4
 80079b4:	781b      	ldrb	r3, [r3, #0]
 80079b6:	18d3      	adds	r3, r2, r3
 80079b8:	4a30      	ldr	r2, [pc, #192]	; (8007a7c <OLED_ShowChar+0x150>)
 80079ba:	5cd3      	ldrb	r3, [r2, r3]
 80079bc:	0018      	movs	r0, r3
 80079be:	f7ff ff39 	bl	8007834 <OLED_Write_Dat>
		for(i=0;i<8;i++)
 80079c2:	193b      	adds	r3, r7, r4
 80079c4:	781a      	ldrb	r2, [r3, #0]
 80079c6:	193b      	adds	r3, r7, r4
 80079c8:	3201      	adds	r2, #1
 80079ca:	701a      	strb	r2, [r3, #0]
 80079cc:	240f      	movs	r4, #15
 80079ce:	193b      	adds	r3, r7, r4
 80079d0:	781b      	ldrb	r3, [r3, #0]
 80079d2:	2b07      	cmp	r3, #7
 80079d4:	d9e8      	bls.n	80079a8 <OLED_ShowChar+0x7c>
		}
		OLED_Set_Pos(x,y+1);
 80079d6:	1dbb      	adds	r3, r7, #6
 80079d8:	781b      	ldrb	r3, [r3, #0]
 80079da:	3301      	adds	r3, #1
 80079dc:	b2da      	uxtb	r2, r3
 80079de:	1dfb      	adds	r3, r7, #7
 80079e0:	781b      	ldrb	r3, [r3, #0]
 80079e2:	0011      	movs	r1, r2
 80079e4:	0018      	movs	r0, r3
 80079e6:	f7ff ff43 	bl	8007870 <OLED_Set_Pos>
		for(i=0;i<8;i++)
 80079ea:	193b      	adds	r3, r7, r4
 80079ec:	2200      	movs	r2, #0
 80079ee:	701a      	strb	r2, [r3, #0]
 80079f0:	e012      	b.n	8007a18 <OLED_ShowChar+0xec>
		{
			OLED_Write_Dat(F8X16[c*16+i+8]);
 80079f2:	230e      	movs	r3, #14
 80079f4:	18fb      	adds	r3, r7, r3
 80079f6:	781b      	ldrb	r3, [r3, #0]
 80079f8:	011a      	lsls	r2, r3, #4
 80079fa:	240f      	movs	r4, #15
 80079fc:	193b      	adds	r3, r7, r4
 80079fe:	781b      	ldrb	r3, [r3, #0]
 8007a00:	18d3      	adds	r3, r2, r3
 8007a02:	3308      	adds	r3, #8
 8007a04:	4a1d      	ldr	r2, [pc, #116]	; (8007a7c <OLED_ShowChar+0x150>)
 8007a06:	5cd3      	ldrb	r3, [r2, r3]
 8007a08:	0018      	movs	r0, r3
 8007a0a:	f7ff ff13 	bl	8007834 <OLED_Write_Dat>
		for(i=0;i<8;i++)
 8007a0e:	193b      	adds	r3, r7, r4
 8007a10:	781a      	ldrb	r2, [r3, #0]
 8007a12:	193b      	adds	r3, r7, r4
 8007a14:	3201      	adds	r2, #1
 8007a16:	701a      	strb	r2, [r3, #0]
 8007a18:	230f      	movs	r3, #15
 8007a1a:	18fb      	adds	r3, r7, r3
 8007a1c:	781b      	ldrb	r3, [r3, #0]
 8007a1e:	2b07      	cmp	r3, #7
 8007a20:	d9e7      	bls.n	80079f2 <OLED_ShowChar+0xc6>
		for(i=0;i<6;i++)
		{
			OLED_Write_Dat(F6x8[c][i]);
		}
	}
}
 8007a22:	e026      	b.n	8007a72 <OLED_ShowChar+0x146>
		OLED_Set_Pos(x,y);
 8007a24:	1dbb      	adds	r3, r7, #6
 8007a26:	781a      	ldrb	r2, [r3, #0]
 8007a28:	1dfb      	adds	r3, r7, #7
 8007a2a:	781b      	ldrb	r3, [r3, #0]
 8007a2c:	0011      	movs	r1, r2
 8007a2e:	0018      	movs	r0, r3
 8007a30:	f7ff ff1e 	bl	8007870 <OLED_Set_Pos>
		for(i=0;i<6;i++)
 8007a34:	230f      	movs	r3, #15
 8007a36:	18fb      	adds	r3, r7, r3
 8007a38:	2200      	movs	r2, #0
 8007a3a:	701a      	strb	r2, [r3, #0]
 8007a3c:	e014      	b.n	8007a68 <OLED_ShowChar+0x13c>
			OLED_Write_Dat(F6x8[c][i]);
 8007a3e:	230e      	movs	r3, #14
 8007a40:	18fb      	adds	r3, r7, r3
 8007a42:	781a      	ldrb	r2, [r3, #0]
 8007a44:	240f      	movs	r4, #15
 8007a46:	193b      	adds	r3, r7, r4
 8007a48:	7819      	ldrb	r1, [r3, #0]
 8007a4a:	480d      	ldr	r0, [pc, #52]	; (8007a80 <OLED_ShowChar+0x154>)
 8007a4c:	0013      	movs	r3, r2
 8007a4e:	005b      	lsls	r3, r3, #1
 8007a50:	189b      	adds	r3, r3, r2
 8007a52:	005b      	lsls	r3, r3, #1
 8007a54:	18c3      	adds	r3, r0, r3
 8007a56:	5c5b      	ldrb	r3, [r3, r1]
 8007a58:	0018      	movs	r0, r3
 8007a5a:	f7ff feeb 	bl	8007834 <OLED_Write_Dat>
		for(i=0;i<6;i++)
 8007a5e:	193b      	adds	r3, r7, r4
 8007a60:	781a      	ldrb	r2, [r3, #0]
 8007a62:	193b      	adds	r3, r7, r4
 8007a64:	3201      	adds	r2, #1
 8007a66:	701a      	strb	r2, [r3, #0]
 8007a68:	230f      	movs	r3, #15
 8007a6a:	18fb      	adds	r3, r7, r3
 8007a6c:	781b      	ldrb	r3, [r3, #0]
 8007a6e:	2b05      	cmp	r3, #5
 8007a70:	d9e5      	bls.n	8007a3e <OLED_ShowChar+0x112>
}
 8007a72:	46c0      	nop			; (mov r8, r8)
 8007a74:	46bd      	mov	sp, r7
 8007a76:	b004      	add	sp, #16
 8007a78:	bdb0      	pop	{r4, r5, r7, pc}
 8007a7a:	46c0      	nop			; (mov r8, r8)
 8007a7c:	0800cd58 	.word	0x0800cd58
 8007a80:	0800cb30 	.word	0x0800cb30

08007a84 <oled_pow>:
 * @brief	OLED ר��pow����
 * @param m - ����
 * @param n - ָ��
*/
static uint32_t oled_pow(uint8_t m,uint8_t n)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b084      	sub	sp, #16
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	0002      	movs	r2, r0
 8007a8c:	1dfb      	adds	r3, r7, #7
 8007a8e:	701a      	strb	r2, [r3, #0]
 8007a90:	1dbb      	adds	r3, r7, #6
 8007a92:	1c0a      	adds	r2, r1, #0
 8007a94:	701a      	strb	r2, [r3, #0]
	uint32_t result=1;
 8007a96:	2301      	movs	r3, #1
 8007a98:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;    
 8007a9a:	e004      	b.n	8007aa6 <oled_pow+0x22>
 8007a9c:	1dfb      	adds	r3, r7, #7
 8007a9e:	781a      	ldrb	r2, [r3, #0]
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	4353      	muls	r3, r2
 8007aa4:	60fb      	str	r3, [r7, #12]
 8007aa6:	1dbb      	adds	r3, r7, #6
 8007aa8:	781b      	ldrb	r3, [r3, #0]
 8007aaa:	1dba      	adds	r2, r7, #6
 8007aac:	1e59      	subs	r1, r3, #1
 8007aae:	7011      	strb	r1, [r2, #0]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d1f3      	bne.n	8007a9c <oled_pow+0x18>
	return result;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
}	
 8007ab6:	0018      	movs	r0, r3
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	b004      	add	sp, #16
 8007abc:	bd80      	pop	{r7, pc}

08007abe <OLED_ShowNum>:
 * @param	len - ���ֵ�λ�� 
 * @param size - ASCII�ַ���С
 * 				�ַ���С��12(6*8)/16(8*16)���ִ�С
*/
void OLED_ShowNum(uint8_t x,uint8_t y,uint32_t num,uint8_t len,uint8_t size)
{         	
 8007abe:	b590      	push	{r4, r7, lr}
 8007ac0:	b085      	sub	sp, #20
 8007ac2:	af00      	add	r7, sp, #0
 8007ac4:	0004      	movs	r4, r0
 8007ac6:	0008      	movs	r0, r1
 8007ac8:	603a      	str	r2, [r7, #0]
 8007aca:	0019      	movs	r1, r3
 8007acc:	1dfb      	adds	r3, r7, #7
 8007ace:	1c22      	adds	r2, r4, #0
 8007ad0:	701a      	strb	r2, [r3, #0]
 8007ad2:	1dbb      	adds	r3, r7, #6
 8007ad4:	1c02      	adds	r2, r0, #0
 8007ad6:	701a      	strb	r2, [r3, #0]
 8007ad8:	1d7b      	adds	r3, r7, #5
 8007ada:	1c0a      	adds	r2, r1, #0
 8007adc:	701a      	strb	r2, [r3, #0]
	uint8_t t,temp;
	uint8_t enshow=0;
 8007ade:	230e      	movs	r3, #14
 8007ae0:	18fb      	adds	r3, r7, r3
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	701a      	strb	r2, [r3, #0]
	for(t=0;t<len;t++)
 8007ae6:	230f      	movs	r3, #15
 8007ae8:	18fb      	adds	r3, r7, r3
 8007aea:	2200      	movs	r2, #0
 8007aec:	701a      	strb	r2, [r3, #0]
 8007aee:	e065      	b.n	8007bbc <OLED_ShowNum+0xfe>
	{
		temp=(num/oled_pow(10,len-t-1))%10;
 8007af0:	1d7a      	adds	r2, r7, #5
 8007af2:	240f      	movs	r4, #15
 8007af4:	193b      	adds	r3, r7, r4
 8007af6:	7812      	ldrb	r2, [r2, #0]
 8007af8:	781b      	ldrb	r3, [r3, #0]
 8007afa:	1ad3      	subs	r3, r2, r3
 8007afc:	b2db      	uxtb	r3, r3
 8007afe:	3b01      	subs	r3, #1
 8007b00:	b2db      	uxtb	r3, r3
 8007b02:	0019      	movs	r1, r3
 8007b04:	200a      	movs	r0, #10
 8007b06:	f7ff ffbd 	bl	8007a84 <oled_pow>
 8007b0a:	0003      	movs	r3, r0
 8007b0c:	0019      	movs	r1, r3
 8007b0e:	6838      	ldr	r0, [r7, #0]
 8007b10:	f7f8 fb16 	bl	8000140 <__udivsi3>
 8007b14:	0003      	movs	r3, r0
 8007b16:	210a      	movs	r1, #10
 8007b18:	0018      	movs	r0, r3
 8007b1a:	f7f8 fb97 	bl	800024c <__aeabi_uidivmod>
 8007b1e:	000b      	movs	r3, r1
 8007b20:	001a      	movs	r2, r3
 8007b22:	210d      	movs	r1, #13
 8007b24:	187b      	adds	r3, r7, r1
 8007b26:	701a      	strb	r2, [r3, #0]
		if(enshow==0&&t<(len-1))
 8007b28:	230e      	movs	r3, #14
 8007b2a:	18fb      	adds	r3, r7, r3
 8007b2c:	781b      	ldrb	r3, [r3, #0]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d124      	bne.n	8007b7c <OLED_ShowNum+0xbe>
 8007b32:	193b      	adds	r3, r7, r4
 8007b34:	781a      	ldrb	r2, [r3, #0]
 8007b36:	1d7b      	adds	r3, r7, #5
 8007b38:	781b      	ldrb	r3, [r3, #0]
 8007b3a:	3b01      	subs	r3, #1
 8007b3c:	429a      	cmp	r2, r3
 8007b3e:	da1d      	bge.n	8007b7c <OLED_ShowNum+0xbe>
		{
			if(temp==0)
 8007b40:	187b      	adds	r3, r7, r1
 8007b42:	781b      	ldrb	r3, [r3, #0]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d115      	bne.n	8007b74 <OLED_ShowNum+0xb6>
			{
				OLED_ShowChar(x+(size/2)*t,y,' ',size);
 8007b48:	2120      	movs	r1, #32
 8007b4a:	187b      	adds	r3, r7, r1
 8007b4c:	781b      	ldrb	r3, [r3, #0]
 8007b4e:	085b      	lsrs	r3, r3, #1
 8007b50:	b2db      	uxtb	r3, r3
 8007b52:	193a      	adds	r2, r7, r4
 8007b54:	7812      	ldrb	r2, [r2, #0]
 8007b56:	4353      	muls	r3, r2
 8007b58:	b2da      	uxtb	r2, r3
 8007b5a:	1dfb      	adds	r3, r7, #7
 8007b5c:	781b      	ldrb	r3, [r3, #0]
 8007b5e:	18d3      	adds	r3, r2, r3
 8007b60:	b2d8      	uxtb	r0, r3
 8007b62:	187b      	adds	r3, r7, r1
 8007b64:	781a      	ldrb	r2, [r3, #0]
 8007b66:	1dbb      	adds	r3, r7, #6
 8007b68:	7819      	ldrb	r1, [r3, #0]
 8007b6a:	0013      	movs	r3, r2
 8007b6c:	2220      	movs	r2, #32
 8007b6e:	f7ff fedd 	bl	800792c <OLED_ShowChar>
				continue;
 8007b72:	e01d      	b.n	8007bb0 <OLED_ShowNum+0xf2>
			}else enshow=1; 
 8007b74:	230e      	movs	r3, #14
 8007b76:	18fb      	adds	r3, r7, r3
 8007b78:	2201      	movs	r2, #1
 8007b7a:	701a      	strb	r2, [r3, #0]
		 	 
		}
	 	OLED_ShowChar(x+(size/2)*t,y,temp+'0',size); 
 8007b7c:	2120      	movs	r1, #32
 8007b7e:	187b      	adds	r3, r7, r1
 8007b80:	781b      	ldrb	r3, [r3, #0]
 8007b82:	085b      	lsrs	r3, r3, #1
 8007b84:	b2db      	uxtb	r3, r3
 8007b86:	220f      	movs	r2, #15
 8007b88:	18ba      	adds	r2, r7, r2
 8007b8a:	7812      	ldrb	r2, [r2, #0]
 8007b8c:	4353      	muls	r3, r2
 8007b8e:	b2da      	uxtb	r2, r3
 8007b90:	1dfb      	adds	r3, r7, #7
 8007b92:	781b      	ldrb	r3, [r3, #0]
 8007b94:	18d3      	adds	r3, r2, r3
 8007b96:	b2d8      	uxtb	r0, r3
 8007b98:	230d      	movs	r3, #13
 8007b9a:	18fb      	adds	r3, r7, r3
 8007b9c:	781b      	ldrb	r3, [r3, #0]
 8007b9e:	3330      	adds	r3, #48	; 0x30
 8007ba0:	b2da      	uxtb	r2, r3
 8007ba2:	187b      	adds	r3, r7, r1
 8007ba4:	781c      	ldrb	r4, [r3, #0]
 8007ba6:	1dbb      	adds	r3, r7, #6
 8007ba8:	7819      	ldrb	r1, [r3, #0]
 8007baa:	0023      	movs	r3, r4
 8007bac:	f7ff febe 	bl	800792c <OLED_ShowChar>
	for(t=0;t<len;t++)
 8007bb0:	210f      	movs	r1, #15
 8007bb2:	187b      	adds	r3, r7, r1
 8007bb4:	781a      	ldrb	r2, [r3, #0]
 8007bb6:	187b      	adds	r3, r7, r1
 8007bb8:	3201      	adds	r2, #1
 8007bba:	701a      	strb	r2, [r3, #0]
 8007bbc:	230f      	movs	r3, #15
 8007bbe:	18fa      	adds	r2, r7, r3
 8007bc0:	1d7b      	adds	r3, r7, #5
 8007bc2:	7812      	ldrb	r2, [r2, #0]
 8007bc4:	781b      	ldrb	r3, [r3, #0]
 8007bc6:	429a      	cmp	r2, r3
 8007bc8:	d392      	bcc.n	8007af0 <OLED_ShowNum+0x32>
	}
} 
 8007bca:	46c0      	nop			; (mov r8, r8)
 8007bcc:	46c0      	nop			; (mov r8, r8)
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	b005      	add	sp, #20
 8007bd2:	bd90      	pop	{r4, r7, pc}

08007bd4 <OLED_ShowString>:
 * @param chr - ����ʾ���ַ���ָ��
 * @param size - ASCII�ַ���С
 * 				�ַ���С��12(6*8)/16(8*16)���ִ�С
*/
void OLED_ShowString(uint8_t x,uint8_t y,char *chr,uint8_t size)
{
 8007bd4:	b590      	push	{r4, r7, lr}
 8007bd6:	b085      	sub	sp, #20
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	0004      	movs	r4, r0
 8007bdc:	0008      	movs	r0, r1
 8007bde:	603a      	str	r2, [r7, #0]
 8007be0:	0019      	movs	r1, r3
 8007be2:	1dfb      	adds	r3, r7, #7
 8007be4:	1c22      	adds	r2, r4, #0
 8007be6:	701a      	strb	r2, [r3, #0]
 8007be8:	1dbb      	adds	r3, r7, #6
 8007bea:	1c02      	adds	r2, r0, #0
 8007bec:	701a      	strb	r2, [r3, #0]
 8007bee:	1d7b      	adds	r3, r7, #5
 8007bf0:	1c0a      	adds	r2, r1, #0
 8007bf2:	701a      	strb	r2, [r3, #0]
	uint8_t j=0;
 8007bf4:	230f      	movs	r3, #15
 8007bf6:	18fb      	adds	r3, r7, r3
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	701a      	strb	r2, [r3, #0]
	while (chr[j]!='\0')
 8007bfc:	e025      	b.n	8007c4a <OLED_ShowString+0x76>
	{		OLED_ShowChar(x,y,chr[j],size);
 8007bfe:	230f      	movs	r3, #15
 8007c00:	18fb      	adds	r3, r7, r3
 8007c02:	781b      	ldrb	r3, [r3, #0]
 8007c04:	683a      	ldr	r2, [r7, #0]
 8007c06:	18d3      	adds	r3, r2, r3
 8007c08:	781a      	ldrb	r2, [r3, #0]
 8007c0a:	1d7b      	adds	r3, r7, #5
 8007c0c:	781c      	ldrb	r4, [r3, #0]
 8007c0e:	1dbb      	adds	r3, r7, #6
 8007c10:	7819      	ldrb	r1, [r3, #0]
 8007c12:	1dfb      	adds	r3, r7, #7
 8007c14:	7818      	ldrb	r0, [r3, #0]
 8007c16:	0023      	movs	r3, r4
 8007c18:	f7ff fe88 	bl	800792c <OLED_ShowChar>
			x+=8;
 8007c1c:	1dfb      	adds	r3, r7, #7
 8007c1e:	1dfa      	adds	r2, r7, #7
 8007c20:	7812      	ldrb	r2, [r2, #0]
 8007c22:	3208      	adds	r2, #8
 8007c24:	701a      	strb	r2, [r3, #0]
			if(x>120){x=0;y+=2;}
 8007c26:	1dfb      	adds	r3, r7, #7
 8007c28:	781b      	ldrb	r3, [r3, #0]
 8007c2a:	2b78      	cmp	r3, #120	; 0x78
 8007c2c:	d907      	bls.n	8007c3e <OLED_ShowString+0x6a>
 8007c2e:	1dfb      	adds	r3, r7, #7
 8007c30:	2200      	movs	r2, #0
 8007c32:	701a      	strb	r2, [r3, #0]
 8007c34:	1dbb      	adds	r3, r7, #6
 8007c36:	1dba      	adds	r2, r7, #6
 8007c38:	7812      	ldrb	r2, [r2, #0]
 8007c3a:	3202      	adds	r2, #2
 8007c3c:	701a      	strb	r2, [r3, #0]
			j++;
 8007c3e:	210f      	movs	r1, #15
 8007c40:	187b      	adds	r3, r7, r1
 8007c42:	781a      	ldrb	r2, [r3, #0]
 8007c44:	187b      	adds	r3, r7, r1
 8007c46:	3201      	adds	r2, #1
 8007c48:	701a      	strb	r2, [r3, #0]
	while (chr[j]!='\0')
 8007c4a:	230f      	movs	r3, #15
 8007c4c:	18fb      	adds	r3, r7, r3
 8007c4e:	781b      	ldrb	r3, [r3, #0]
 8007c50:	683a      	ldr	r2, [r7, #0]
 8007c52:	18d3      	adds	r3, r2, r3
 8007c54:	781b      	ldrb	r3, [r3, #0]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d1d1      	bne.n	8007bfe <OLED_ShowString+0x2a>
	}
}
 8007c5a:	46c0      	nop			; (mov r8, r8)
 8007c5c:	46c0      	nop			; (mov r8, r8)
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	b005      	add	sp, #20
 8007c62:	bd90      	pop	{r4, r7, pc}

08007c64 <OLED_Show_Float_Num>:


void OLED_Show_Float_Num(unsigned int x,unsigned int y,double num ,uint8_t size)
{
 8007c64:	b590      	push	{r4, r7, lr}
 8007c66:	b089      	sub	sp, #36	; 0x24
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	60f8      	str	r0, [r7, #12]
 8007c6c:	60b9      	str	r1, [r7, #8]
 8007c6e:	603a      	str	r2, [r7, #0]
 8007c70:	607b      	str	r3, [r7, #4]
	uint32_t B;

	char Num[] = {'\0','\0','\0','\0' ,'\0', '\0'};
 8007c72:	2314      	movs	r3, #20
 8007c74:	18fb      	adds	r3, r7, r3
 8007c76:	4a42      	ldr	r2, [pc, #264]	; (8007d80 <OLED_Show_Float_Num+0x11c>)
 8007c78:	6811      	ldr	r1, [r2, #0]
 8007c7a:	6019      	str	r1, [r3, #0]
 8007c7c:	8892      	ldrh	r2, [r2, #4]
 8007c7e:	809a      	strh	r2, [r3, #4]
	//符号位  0    0    0     .    0    0    0     0

	if(num < 0)//负数时
 8007c80:	2200      	movs	r2, #0
 8007c82:	2300      	movs	r3, #0
 8007c84:	6838      	ldr	r0, [r7, #0]
 8007c86:	6879      	ldr	r1, [r7, #4]
 8007c88:	f7f8 fbe6 	bl	8000458 <__aeabi_dcmplt>
 8007c8c:	1e03      	subs	r3, r0, #0
 8007c8e:	d006      	beq.n	8007c9e <OLED_Show_Float_Num+0x3a>
	{
	num = -num;//将数值转化为正数进行处理
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	603b      	str	r3, [r7, #0]
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2280      	movs	r2, #128	; 0x80
 8007c98:	0612      	lsls	r2, r2, #24
 8007c9a:	4053      	eors	r3, r2
 8007c9c:	607b      	str	r3, [r7, #4]
	}

	if(num >= 100)//数值限幅，设置上限
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	4b38      	ldr	r3, [pc, #224]	; (8007d84 <OLED_Show_Float_Num+0x120>)
 8007ca2:	6838      	ldr	r0, [r7, #0]
 8007ca4:	6879      	ldr	r1, [r7, #4]
 8007ca6:	f7f8 fbf5 	bl	8000494 <__aeabi_dcmpge>
 8007caa:	1e03      	subs	r3, r0, #0
 8007cac:	d003      	beq.n	8007cb6 <OLED_Show_Float_Num+0x52>
	{
		num = 99.99;
 8007cae:	4a36      	ldr	r2, [pc, #216]	; (8007d88 <OLED_Show_Float_Num+0x124>)
 8007cb0:	4b36      	ldr	r3, [pc, #216]	; (8007d8c <OLED_Show_Float_Num+0x128>)
 8007cb2:	603a      	str	r2, [r7, #0]
 8007cb4:	607b      	str	r3, [r7, #4]
	}

	B = (uint32_t)(num * 100);//将小数为转化为整数
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	4b32      	ldr	r3, [pc, #200]	; (8007d84 <OLED_Show_Float_Num+0x120>)
 8007cba:	6838      	ldr	r0, [r7, #0]
 8007cbc:	6879      	ldr	r1, [r7, #4]
 8007cbe:	f7f9 fd0d 	bl	80016dc <__aeabi_dmul>
 8007cc2:	0002      	movs	r2, r0
 8007cc4:	000b      	movs	r3, r1
 8007cc6:	0010      	movs	r0, r2
 8007cc8:	0019      	movs	r1, r3
 8007cca:	f7f8 fbed 	bl	80004a8 <__aeabi_d2uiz>
 8007cce:	0003      	movs	r3, r0
 8007cd0:	61fb      	str	r3, [r7, #28]

	Num[4] = B % 10 + '0';
 8007cd2:	69fb      	ldr	r3, [r7, #28]
 8007cd4:	210a      	movs	r1, #10
 8007cd6:	0018      	movs	r0, r3
 8007cd8:	f7f8 fab8 	bl	800024c <__aeabi_uidivmod>
 8007cdc:	000b      	movs	r3, r1
 8007cde:	b2db      	uxtb	r3, r3
 8007ce0:	3330      	adds	r3, #48	; 0x30
 8007ce2:	b2da      	uxtb	r2, r3
 8007ce4:	2414      	movs	r4, #20
 8007ce6:	193b      	adds	r3, r7, r4
 8007ce8:	711a      	strb	r2, [r3, #4]
	B = B/10;
 8007cea:	69fb      	ldr	r3, [r7, #28]
 8007cec:	210a      	movs	r1, #10
 8007cee:	0018      	movs	r0, r3
 8007cf0:	f7f8 fa26 	bl	8000140 <__udivsi3>
 8007cf4:	0003      	movs	r3, r0
 8007cf6:	61fb      	str	r3, [r7, #28]
	Num[3] = B % 10 + '0';
 8007cf8:	69fb      	ldr	r3, [r7, #28]
 8007cfa:	210a      	movs	r1, #10
 8007cfc:	0018      	movs	r0, r3
 8007cfe:	f7f8 faa5 	bl	800024c <__aeabi_uidivmod>
 8007d02:	000b      	movs	r3, r1
 8007d04:	b2db      	uxtb	r3, r3
 8007d06:	3330      	adds	r3, #48	; 0x30
 8007d08:	b2da      	uxtb	r2, r3
 8007d0a:	193b      	adds	r3, r7, r4
 8007d0c:	70da      	strb	r2, [r3, #3]
	B = B/10;
 8007d0e:	69fb      	ldr	r3, [r7, #28]
 8007d10:	210a      	movs	r1, #10
 8007d12:	0018      	movs	r0, r3
 8007d14:	f7f8 fa14 	bl	8000140 <__udivsi3>
 8007d18:	0003      	movs	r3, r0
 8007d1a:	61fb      	str	r3, [r7, #28]
	Num[2] = '.';
 8007d1c:	193b      	adds	r3, r7, r4
 8007d1e:	222e      	movs	r2, #46	; 0x2e
 8007d20:	709a      	strb	r2, [r3, #2]
	Num[1] = B % 10 + '0';
 8007d22:	69fb      	ldr	r3, [r7, #28]
 8007d24:	210a      	movs	r1, #10
 8007d26:	0018      	movs	r0, r3
 8007d28:	f7f8 fa90 	bl	800024c <__aeabi_uidivmod>
 8007d2c:	000b      	movs	r3, r1
 8007d2e:	b2db      	uxtb	r3, r3
 8007d30:	3330      	adds	r3, #48	; 0x30
 8007d32:	b2da      	uxtb	r2, r3
 8007d34:	193b      	adds	r3, r7, r4
 8007d36:	705a      	strb	r2, [r3, #1]
	B = B/10;
 8007d38:	69fb      	ldr	r3, [r7, #28]
 8007d3a:	210a      	movs	r1, #10
 8007d3c:	0018      	movs	r0, r3
 8007d3e:	f7f8 f9ff 	bl	8000140 <__udivsi3>
 8007d42:	0003      	movs	r3, r0
 8007d44:	61fb      	str	r3, [r7, #28]
	Num[0] = B % 10 + '0';
 8007d46:	69fb      	ldr	r3, [r7, #28]
 8007d48:	210a      	movs	r1, #10
 8007d4a:	0018      	movs	r0, r3
 8007d4c:	f7f8 fa7e 	bl	800024c <__aeabi_uidivmod>
 8007d50:	000b      	movs	r3, r1
 8007d52:	b2db      	uxtb	r3, r3
 8007d54:	3330      	adds	r3, #48	; 0x30
 8007d56:	b2da      	uxtb	r2, r3
 8007d58:	193b      	adds	r3, r7, r4
 8007d5a:	701a      	strb	r2, [r3, #0]
//			Num[2] = '.';
//		}
//		OLED_ShowChar(0,i*2,Num[i], 12);//该函数为中景园OLED的库
//	}

	OLED_ShowString(x,y,Num, size);//该函数为中景园OLED的库
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	b2d8      	uxtb	r0, r3
 8007d60:	68bb      	ldr	r3, [r7, #8]
 8007d62:	b2d9      	uxtb	r1, r3
 8007d64:	2328      	movs	r3, #40	; 0x28
 8007d66:	2208      	movs	r2, #8
 8007d68:	4694      	mov	ip, r2
 8007d6a:	44bc      	add	ip, r7
 8007d6c:	4463      	add	r3, ip
 8007d6e:	781b      	ldrb	r3, [r3, #0]
 8007d70:	193a      	adds	r2, r7, r4
 8007d72:	f7ff ff2f 	bl	8007bd4 <OLED_ShowString>
}
 8007d76:	46c0      	nop			; (mov r8, r8)
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	b009      	add	sp, #36	; 0x24
 8007d7c:	bd90      	pop	{r4, r7, pc}
 8007d7e:	46c0      	nop			; (mov r8, r8)
 8007d80:	0800ca50 	.word	0x0800ca50
 8007d84:	40590000 	.word	0x40590000
 8007d88:	28f5c28f 	.word	0x28f5c28f
 8007d8c:	4058ff5c 	.word	0x4058ff5c

08007d90 <OLED_ShowCHinese>:

//显示汉字
void OLED_ShowCHinese(uint8_t x,uint8_t y,uint8_t no)
{
 8007d90:	b590      	push	{r4, r7, lr}
 8007d92:	b085      	sub	sp, #20
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	0004      	movs	r4, r0
 8007d98:	0008      	movs	r0, r1
 8007d9a:	0011      	movs	r1, r2
 8007d9c:	1dfb      	adds	r3, r7, #7
 8007d9e:	1c22      	adds	r2, r4, #0
 8007da0:	701a      	strb	r2, [r3, #0]
 8007da2:	1dbb      	adds	r3, r7, #6
 8007da4:	1c02      	adds	r2, r0, #0
 8007da6:	701a      	strb	r2, [r3, #0]
 8007da8:	1d7b      	adds	r3, r7, #5
 8007daa:	1c0a      	adds	r2, r1, #0
 8007dac:	701a      	strb	r2, [r3, #0]
 uint8_t t,adder=0;
 8007dae:	230e      	movs	r3, #14
 8007db0:	18fb      	adds	r3, r7, r3
 8007db2:	2200      	movs	r2, #0
 8007db4:	701a      	strb	r2, [r3, #0]
 OLED_Set_Pos(x,y);
 8007db6:	1dbb      	adds	r3, r7, #6
 8007db8:	781a      	ldrb	r2, [r3, #0]
 8007dba:	1dfb      	adds	r3, r7, #7
 8007dbc:	781b      	ldrb	r3, [r3, #0]
 8007dbe:	0011      	movs	r1, r2
 8007dc0:	0018      	movs	r0, r3
 8007dc2:	f7ff fd55 	bl	8007870 <OLED_Set_Pos>
    for(t=0;t<16;t++)
 8007dc6:	230f      	movs	r3, #15
 8007dc8:	18fb      	adds	r3, r7, r3
 8007dca:	2200      	movs	r2, #0
 8007dcc:	701a      	strb	r2, [r3, #0]
 8007dce:	e017      	b.n	8007e00 <OLED_ShowCHinese+0x70>
 {
    	OLED_Write_Dat(Hzk[2*no][t]);
 8007dd0:	1d7b      	adds	r3, r7, #5
 8007dd2:	781b      	ldrb	r3, [r3, #0]
 8007dd4:	005a      	lsls	r2, r3, #1
 8007dd6:	240f      	movs	r4, #15
 8007dd8:	193b      	adds	r3, r7, r4
 8007dda:	781b      	ldrb	r3, [r3, #0]
 8007ddc:	4923      	ldr	r1, [pc, #140]	; (8007e6c <OLED_ShowCHinese+0xdc>)
 8007dde:	0152      	lsls	r2, r2, #5
 8007de0:	188a      	adds	r2, r1, r2
 8007de2:	5cd3      	ldrb	r3, [r2, r3]
 8007de4:	0018      	movs	r0, r3
 8007de6:	f7ff fd25 	bl	8007834 <OLED_Write_Dat>
  adder+=1;
 8007dea:	220e      	movs	r2, #14
 8007dec:	18bb      	adds	r3, r7, r2
 8007dee:	18ba      	adds	r2, r7, r2
 8007df0:	7812      	ldrb	r2, [r2, #0]
 8007df2:	3201      	adds	r2, #1
 8007df4:	701a      	strb	r2, [r3, #0]
    for(t=0;t<16;t++)
 8007df6:	193b      	adds	r3, r7, r4
 8007df8:	781a      	ldrb	r2, [r3, #0]
 8007dfa:	193b      	adds	r3, r7, r4
 8007dfc:	3201      	adds	r2, #1
 8007dfe:	701a      	strb	r2, [r3, #0]
 8007e00:	240f      	movs	r4, #15
 8007e02:	193b      	adds	r3, r7, r4
 8007e04:	781b      	ldrb	r3, [r3, #0]
 8007e06:	2b0f      	cmp	r3, #15
 8007e08:	d9e2      	bls.n	8007dd0 <OLED_ShowCHinese+0x40>
 }
 OLED_Set_Pos(x,y+1);
 8007e0a:	1dbb      	adds	r3, r7, #6
 8007e0c:	781b      	ldrb	r3, [r3, #0]
 8007e0e:	3301      	adds	r3, #1
 8007e10:	b2da      	uxtb	r2, r3
 8007e12:	1dfb      	adds	r3, r7, #7
 8007e14:	781b      	ldrb	r3, [r3, #0]
 8007e16:	0011      	movs	r1, r2
 8007e18:	0018      	movs	r0, r3
 8007e1a:	f7ff fd29 	bl	8007870 <OLED_Set_Pos>
    for(t=0;t<16;t++)
 8007e1e:	193b      	adds	r3, r7, r4
 8007e20:	2200      	movs	r2, #0
 8007e22:	701a      	strb	r2, [r3, #0]
 8007e24:	e018      	b.n	8007e58 <OLED_ShowCHinese+0xc8>
 {
    	OLED_Write_Dat(Hzk[2*no+1][t]);
 8007e26:	1d7b      	adds	r3, r7, #5
 8007e28:	781b      	ldrb	r3, [r3, #0]
 8007e2a:	005b      	lsls	r3, r3, #1
 8007e2c:	1c5a      	adds	r2, r3, #1
 8007e2e:	240f      	movs	r4, #15
 8007e30:	193b      	adds	r3, r7, r4
 8007e32:	781b      	ldrb	r3, [r3, #0]
 8007e34:	490d      	ldr	r1, [pc, #52]	; (8007e6c <OLED_ShowCHinese+0xdc>)
 8007e36:	0152      	lsls	r2, r2, #5
 8007e38:	188a      	adds	r2, r1, r2
 8007e3a:	5cd3      	ldrb	r3, [r2, r3]
 8007e3c:	0018      	movs	r0, r3
 8007e3e:	f7ff fcf9 	bl	8007834 <OLED_Write_Dat>
  adder+=1;
 8007e42:	220e      	movs	r2, #14
 8007e44:	18bb      	adds	r3, r7, r2
 8007e46:	18ba      	adds	r2, r7, r2
 8007e48:	7812      	ldrb	r2, [r2, #0]
 8007e4a:	3201      	adds	r2, #1
 8007e4c:	701a      	strb	r2, [r3, #0]
    for(t=0;t<16;t++)
 8007e4e:	193b      	adds	r3, r7, r4
 8007e50:	781a      	ldrb	r2, [r3, #0]
 8007e52:	193b      	adds	r3, r7, r4
 8007e54:	3201      	adds	r2, #1
 8007e56:	701a      	strb	r2, [r3, #0]
 8007e58:	230f      	movs	r3, #15
 8007e5a:	18fb      	adds	r3, r7, r3
 8007e5c:	781b      	ldrb	r3, [r3, #0]
 8007e5e:	2b0f      	cmp	r3, #15
 8007e60:	d9e1      	bls.n	8007e26 <OLED_ShowCHinese+0x96>
 }
}
 8007e62:	46c0      	nop			; (mov r8, r8)
 8007e64:	46c0      	nop			; (mov r8, r8)
 8007e66:	46bd      	mov	sp, r7
 8007e68:	b005      	add	sp, #20
 8007e6a:	bd90      	pop	{r4, r7, pc}
 8007e6c:	0800d348 	.word	0x0800d348

08007e70 <OLED_Init>:

/**
 * @brief	OLED��ʼ��
*/			    
void OLED_Init(void)
{ 	
 8007e70:	b580      	push	{r7, lr}
 8007e72:	af00      	add	r7, sp, #0
	OLED_Write_Cmd(0xAE);//--display off
 8007e74:	20ae      	movs	r0, #174	; 0xae
 8007e76:	f7ff fcbf 	bl	80077f8 <OLED_Write_Cmd>
	OLED_Write_Cmd(0x00);//---set low column address
 8007e7a:	2000      	movs	r0, #0
 8007e7c:	f7ff fcbc 	bl	80077f8 <OLED_Write_Cmd>
	OLED_Write_Cmd(0x10);//---set high column address
 8007e80:	2010      	movs	r0, #16
 8007e82:	f7ff fcb9 	bl	80077f8 <OLED_Write_Cmd>
	OLED_Write_Cmd(0x40);//--set start line address  
 8007e86:	2040      	movs	r0, #64	; 0x40
 8007e88:	f7ff fcb6 	bl	80077f8 <OLED_Write_Cmd>
	OLED_Write_Cmd(0x81); // contract control
 8007e8c:	2081      	movs	r0, #129	; 0x81
 8007e8e:	f7ff fcb3 	bl	80077f8 <OLED_Write_Cmd>
	OLED_Write_Cmd(0xFF);//--128   
 8007e92:	20ff      	movs	r0, #255	; 0xff
 8007e94:	f7ff fcb0 	bl	80077f8 <OLED_Write_Cmd>
	OLED_Write_Cmd(0xA1);//set segment remap 
 8007e98:	20a1      	movs	r0, #161	; 0xa1
 8007e9a:	f7ff fcad 	bl	80077f8 <OLED_Write_Cmd>
	OLED_Write_Cmd(0xC8);//Com scan direction
 8007e9e:	20c8      	movs	r0, #200	; 0xc8
 8007ea0:	f7ff fcaa 	bl	80077f8 <OLED_Write_Cmd>
	OLED_Write_Cmd(0xA6);//--normal / reverse
 8007ea4:	20a6      	movs	r0, #166	; 0xa6
 8007ea6:	f7ff fca7 	bl	80077f8 <OLED_Write_Cmd>
	OLED_Write_Cmd(0xA8);//--set multiplex ratio(1 to 64)
 8007eaa:	20a8      	movs	r0, #168	; 0xa8
 8007eac:	f7ff fca4 	bl	80077f8 <OLED_Write_Cmd>
	OLED_Write_Cmd(0x3F);//--1/32 duty
 8007eb0:	203f      	movs	r0, #63	; 0x3f
 8007eb2:	f7ff fca1 	bl	80077f8 <OLED_Write_Cmd>
	OLED_Write_Cmd(0xD3);//-set display offset
 8007eb6:	20d3      	movs	r0, #211	; 0xd3
 8007eb8:	f7ff fc9e 	bl	80077f8 <OLED_Write_Cmd>
	OLED_Write_Cmd(0x00);//
 8007ebc:	2000      	movs	r0, #0
 8007ebe:	f7ff fc9b 	bl	80077f8 <OLED_Write_Cmd>
	OLED_Write_Cmd(0xD5);//set osc division
 8007ec2:	20d5      	movs	r0, #213	; 0xd5
 8007ec4:	f7ff fc98 	bl	80077f8 <OLED_Write_Cmd>
	OLED_Write_Cmd(0x80);
 8007ec8:	2080      	movs	r0, #128	; 0x80
 8007eca:	f7ff fc95 	bl	80077f8 <OLED_Write_Cmd>
	OLED_Write_Cmd(0xD9);//Set Pre-Charge Period
 8007ece:	20d9      	movs	r0, #217	; 0xd9
 8007ed0:	f7ff fc92 	bl	80077f8 <OLED_Write_Cmd>
	OLED_Write_Cmd(0xF1);//
 8007ed4:	20f1      	movs	r0, #241	; 0xf1
 8007ed6:	f7ff fc8f 	bl	80077f8 <OLED_Write_Cmd>
	OLED_Write_Cmd(0xDA);//set com pin configuartion
 8007eda:	20da      	movs	r0, #218	; 0xda
 8007edc:	f7ff fc8c 	bl	80077f8 <OLED_Write_Cmd>
	OLED_Write_Cmd(0x12);//
 8007ee0:	2012      	movs	r0, #18
 8007ee2:	f7ff fc89 	bl	80077f8 <OLED_Write_Cmd>
	OLED_Write_Cmd(0xDB);//set Vcomh
 8007ee6:	20db      	movs	r0, #219	; 0xdb
 8007ee8:	f7ff fc86 	bl	80077f8 <OLED_Write_Cmd>
	OLED_Write_Cmd(0x40);//
 8007eec:	2040      	movs	r0, #64	; 0x40
 8007eee:	f7ff fc83 	bl	80077f8 <OLED_Write_Cmd>
	OLED_Write_Cmd(0x20);
 8007ef2:	2020      	movs	r0, #32
 8007ef4:	f7ff fc80 	bl	80077f8 <OLED_Write_Cmd>
	OLED_Write_Cmd(0x02);
 8007ef8:	2002      	movs	r0, #2
 8007efa:	f7ff fc7d 	bl	80077f8 <OLED_Write_Cmd>
	OLED_Write_Cmd(0x8D);//set charge pump enable
 8007efe:	208d      	movs	r0, #141	; 0x8d
 8007f00:	f7ff fc7a 	bl	80077f8 <OLED_Write_Cmd>
	OLED_Write_Cmd(0x14);//
 8007f04:	2014      	movs	r0, #20
 8007f06:	f7ff fc77 	bl	80077f8 <OLED_Write_Cmd>
	OLED_Write_Cmd(0xA4);
 8007f0a:	20a4      	movs	r0, #164	; 0xa4
 8007f0c:	f7ff fc74 	bl	80077f8 <OLED_Write_Cmd>
	OLED_Write_Cmd(0xA6);
 8007f10:	20a6      	movs	r0, #166	; 0xa6
 8007f12:	f7ff fc71 	bl	80077f8 <OLED_Write_Cmd>
	OLED_Write_Cmd(0xAF);//--turn on oled panel
 8007f16:	20af      	movs	r0, #175	; 0xaf
 8007f18:	f7ff fc6e 	bl	80077f8 <OLED_Write_Cmd>
	
	OLED_Clear();
 8007f1c:	f7ff fcd3 	bl	80078c6 <OLED_Clear>
	OLED_Set_Pos(0,0);
 8007f20:	2100      	movs	r1, #0
 8007f22:	2000      	movs	r0, #0
 8007f24:	f7ff fca4 	bl	8007870 <OLED_Set_Pos>
}
 8007f28:	46c0      	nop			; (mov r8, r8)
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	bd80      	pop	{r7, pc}
	...

08007f30 <__errno>:
 8007f30:	4b01      	ldr	r3, [pc, #4]	; (8007f38 <__errno+0x8>)
 8007f32:	6818      	ldr	r0, [r3, #0]
 8007f34:	4770      	bx	lr
 8007f36:	46c0      	nop			; (mov r8, r8)
 8007f38:	20000010 	.word	0x20000010

08007f3c <__libc_init_array>:
 8007f3c:	b570      	push	{r4, r5, r6, lr}
 8007f3e:	2600      	movs	r6, #0
 8007f40:	4d0c      	ldr	r5, [pc, #48]	; (8007f74 <__libc_init_array+0x38>)
 8007f42:	4c0d      	ldr	r4, [pc, #52]	; (8007f78 <__libc_init_array+0x3c>)
 8007f44:	1b64      	subs	r4, r4, r5
 8007f46:	10a4      	asrs	r4, r4, #2
 8007f48:	42a6      	cmp	r6, r4
 8007f4a:	d109      	bne.n	8007f60 <__libc_init_array+0x24>
 8007f4c:	2600      	movs	r6, #0
 8007f4e:	f004 fd1f 	bl	800c990 <_init>
 8007f52:	4d0a      	ldr	r5, [pc, #40]	; (8007f7c <__libc_init_array+0x40>)
 8007f54:	4c0a      	ldr	r4, [pc, #40]	; (8007f80 <__libc_init_array+0x44>)
 8007f56:	1b64      	subs	r4, r4, r5
 8007f58:	10a4      	asrs	r4, r4, #2
 8007f5a:	42a6      	cmp	r6, r4
 8007f5c:	d105      	bne.n	8007f6a <__libc_init_array+0x2e>
 8007f5e:	bd70      	pop	{r4, r5, r6, pc}
 8007f60:	00b3      	lsls	r3, r6, #2
 8007f62:	58eb      	ldr	r3, [r5, r3]
 8007f64:	4798      	blx	r3
 8007f66:	3601      	adds	r6, #1
 8007f68:	e7ee      	b.n	8007f48 <__libc_init_array+0xc>
 8007f6a:	00b3      	lsls	r3, r6, #2
 8007f6c:	58eb      	ldr	r3, [r5, r3]
 8007f6e:	4798      	blx	r3
 8007f70:	3601      	adds	r6, #1
 8007f72:	e7f2      	b.n	8007f5a <__libc_init_array+0x1e>
 8007f74:	0800d83c 	.word	0x0800d83c
 8007f78:	0800d83c 	.word	0x0800d83c
 8007f7c:	0800d83c 	.word	0x0800d83c
 8007f80:	0800d840 	.word	0x0800d840

08007f84 <memset>:
 8007f84:	0003      	movs	r3, r0
 8007f86:	1882      	adds	r2, r0, r2
 8007f88:	4293      	cmp	r3, r2
 8007f8a:	d100      	bne.n	8007f8e <memset+0xa>
 8007f8c:	4770      	bx	lr
 8007f8e:	7019      	strb	r1, [r3, #0]
 8007f90:	3301      	adds	r3, #1
 8007f92:	e7f9      	b.n	8007f88 <memset+0x4>

08007f94 <__cvt>:
 8007f94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f96:	001e      	movs	r6, r3
 8007f98:	2300      	movs	r3, #0
 8007f9a:	0014      	movs	r4, r2
 8007f9c:	b08b      	sub	sp, #44	; 0x2c
 8007f9e:	429e      	cmp	r6, r3
 8007fa0:	da04      	bge.n	8007fac <__cvt+0x18>
 8007fa2:	2180      	movs	r1, #128	; 0x80
 8007fa4:	0609      	lsls	r1, r1, #24
 8007fa6:	1873      	adds	r3, r6, r1
 8007fa8:	001e      	movs	r6, r3
 8007faa:	232d      	movs	r3, #45	; 0x2d
 8007fac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007fae:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8007fb0:	7013      	strb	r3, [r2, #0]
 8007fb2:	2320      	movs	r3, #32
 8007fb4:	2203      	movs	r2, #3
 8007fb6:	439f      	bics	r7, r3
 8007fb8:	2f46      	cmp	r7, #70	; 0x46
 8007fba:	d007      	beq.n	8007fcc <__cvt+0x38>
 8007fbc:	003b      	movs	r3, r7
 8007fbe:	3b45      	subs	r3, #69	; 0x45
 8007fc0:	4259      	negs	r1, r3
 8007fc2:	414b      	adcs	r3, r1
 8007fc4:	9910      	ldr	r1, [sp, #64]	; 0x40
 8007fc6:	3a01      	subs	r2, #1
 8007fc8:	18cb      	adds	r3, r1, r3
 8007fca:	9310      	str	r3, [sp, #64]	; 0x40
 8007fcc:	ab09      	add	r3, sp, #36	; 0x24
 8007fce:	9304      	str	r3, [sp, #16]
 8007fd0:	ab08      	add	r3, sp, #32
 8007fd2:	9303      	str	r3, [sp, #12]
 8007fd4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007fd6:	9200      	str	r2, [sp, #0]
 8007fd8:	9302      	str	r3, [sp, #8]
 8007fda:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007fdc:	0022      	movs	r2, r4
 8007fde:	9301      	str	r3, [sp, #4]
 8007fe0:	0033      	movs	r3, r6
 8007fe2:	f001 fdf9 	bl	8009bd8 <_dtoa_r>
 8007fe6:	0005      	movs	r5, r0
 8007fe8:	2f47      	cmp	r7, #71	; 0x47
 8007fea:	d102      	bne.n	8007ff2 <__cvt+0x5e>
 8007fec:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007fee:	07db      	lsls	r3, r3, #31
 8007ff0:	d528      	bpl.n	8008044 <__cvt+0xb0>
 8007ff2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007ff4:	18eb      	adds	r3, r5, r3
 8007ff6:	9307      	str	r3, [sp, #28]
 8007ff8:	2f46      	cmp	r7, #70	; 0x46
 8007ffa:	d114      	bne.n	8008026 <__cvt+0x92>
 8007ffc:	782b      	ldrb	r3, [r5, #0]
 8007ffe:	2b30      	cmp	r3, #48	; 0x30
 8008000:	d10c      	bne.n	800801c <__cvt+0x88>
 8008002:	2200      	movs	r2, #0
 8008004:	2300      	movs	r3, #0
 8008006:	0020      	movs	r0, r4
 8008008:	0031      	movs	r1, r6
 800800a:	f7f8 fa1f 	bl	800044c <__aeabi_dcmpeq>
 800800e:	2800      	cmp	r0, #0
 8008010:	d104      	bne.n	800801c <__cvt+0x88>
 8008012:	2301      	movs	r3, #1
 8008014:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008016:	1a9b      	subs	r3, r3, r2
 8008018:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800801a:	6013      	str	r3, [r2, #0]
 800801c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800801e:	9a07      	ldr	r2, [sp, #28]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	18d3      	adds	r3, r2, r3
 8008024:	9307      	str	r3, [sp, #28]
 8008026:	2200      	movs	r2, #0
 8008028:	2300      	movs	r3, #0
 800802a:	0020      	movs	r0, r4
 800802c:	0031      	movs	r1, r6
 800802e:	f7f8 fa0d 	bl	800044c <__aeabi_dcmpeq>
 8008032:	2800      	cmp	r0, #0
 8008034:	d001      	beq.n	800803a <__cvt+0xa6>
 8008036:	9b07      	ldr	r3, [sp, #28]
 8008038:	9309      	str	r3, [sp, #36]	; 0x24
 800803a:	2230      	movs	r2, #48	; 0x30
 800803c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800803e:	9907      	ldr	r1, [sp, #28]
 8008040:	428b      	cmp	r3, r1
 8008042:	d306      	bcc.n	8008052 <__cvt+0xbe>
 8008044:	0028      	movs	r0, r5
 8008046:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008048:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800804a:	1b5b      	subs	r3, r3, r5
 800804c:	6013      	str	r3, [r2, #0]
 800804e:	b00b      	add	sp, #44	; 0x2c
 8008050:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008052:	1c59      	adds	r1, r3, #1
 8008054:	9109      	str	r1, [sp, #36]	; 0x24
 8008056:	701a      	strb	r2, [r3, #0]
 8008058:	e7f0      	b.n	800803c <__cvt+0xa8>

0800805a <__exponent>:
 800805a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800805c:	1c83      	adds	r3, r0, #2
 800805e:	b087      	sub	sp, #28
 8008060:	9303      	str	r3, [sp, #12]
 8008062:	0005      	movs	r5, r0
 8008064:	000c      	movs	r4, r1
 8008066:	232b      	movs	r3, #43	; 0x2b
 8008068:	7002      	strb	r2, [r0, #0]
 800806a:	2900      	cmp	r1, #0
 800806c:	da01      	bge.n	8008072 <__exponent+0x18>
 800806e:	424c      	negs	r4, r1
 8008070:	3302      	adds	r3, #2
 8008072:	706b      	strb	r3, [r5, #1]
 8008074:	2c09      	cmp	r4, #9
 8008076:	dd31      	ble.n	80080dc <__exponent+0x82>
 8008078:	270a      	movs	r7, #10
 800807a:	ab04      	add	r3, sp, #16
 800807c:	1dde      	adds	r6, r3, #7
 800807e:	0020      	movs	r0, r4
 8008080:	0039      	movs	r1, r7
 8008082:	9601      	str	r6, [sp, #4]
 8008084:	f7f8 f9cc 	bl	8000420 <__aeabi_idivmod>
 8008088:	3e01      	subs	r6, #1
 800808a:	3130      	adds	r1, #48	; 0x30
 800808c:	0020      	movs	r0, r4
 800808e:	7031      	strb	r1, [r6, #0]
 8008090:	0039      	movs	r1, r7
 8008092:	9402      	str	r4, [sp, #8]
 8008094:	f7f8 f8de 	bl	8000254 <__divsi3>
 8008098:	9b02      	ldr	r3, [sp, #8]
 800809a:	0004      	movs	r4, r0
 800809c:	2b63      	cmp	r3, #99	; 0x63
 800809e:	dcee      	bgt.n	800807e <__exponent+0x24>
 80080a0:	9b01      	ldr	r3, [sp, #4]
 80080a2:	3430      	adds	r4, #48	; 0x30
 80080a4:	1e9a      	subs	r2, r3, #2
 80080a6:	0013      	movs	r3, r2
 80080a8:	9903      	ldr	r1, [sp, #12]
 80080aa:	7014      	strb	r4, [r2, #0]
 80080ac:	a804      	add	r0, sp, #16
 80080ae:	3007      	adds	r0, #7
 80080b0:	4298      	cmp	r0, r3
 80080b2:	d80e      	bhi.n	80080d2 <__exponent+0x78>
 80080b4:	ab04      	add	r3, sp, #16
 80080b6:	3307      	adds	r3, #7
 80080b8:	2000      	movs	r0, #0
 80080ba:	429a      	cmp	r2, r3
 80080bc:	d804      	bhi.n	80080c8 <__exponent+0x6e>
 80080be:	ab04      	add	r3, sp, #16
 80080c0:	3009      	adds	r0, #9
 80080c2:	18c0      	adds	r0, r0, r3
 80080c4:	9b01      	ldr	r3, [sp, #4]
 80080c6:	1ac0      	subs	r0, r0, r3
 80080c8:	9b03      	ldr	r3, [sp, #12]
 80080ca:	1818      	adds	r0, r3, r0
 80080cc:	1b40      	subs	r0, r0, r5
 80080ce:	b007      	add	sp, #28
 80080d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80080d2:	7818      	ldrb	r0, [r3, #0]
 80080d4:	3301      	adds	r3, #1
 80080d6:	7008      	strb	r0, [r1, #0]
 80080d8:	3101      	adds	r1, #1
 80080da:	e7e7      	b.n	80080ac <__exponent+0x52>
 80080dc:	2330      	movs	r3, #48	; 0x30
 80080de:	18e4      	adds	r4, r4, r3
 80080e0:	70ab      	strb	r3, [r5, #2]
 80080e2:	1d28      	adds	r0, r5, #4
 80080e4:	70ec      	strb	r4, [r5, #3]
 80080e6:	e7f1      	b.n	80080cc <__exponent+0x72>

080080e8 <_printf_float>:
 80080e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80080ea:	b095      	sub	sp, #84	; 0x54
 80080ec:	000c      	movs	r4, r1
 80080ee:	9208      	str	r2, [sp, #32]
 80080f0:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80080f2:	9309      	str	r3, [sp, #36]	; 0x24
 80080f4:	0007      	movs	r7, r0
 80080f6:	f003 f801 	bl	800b0fc <_localeconv_r>
 80080fa:	6803      	ldr	r3, [r0, #0]
 80080fc:	0018      	movs	r0, r3
 80080fe:	930b      	str	r3, [sp, #44]	; 0x2c
 8008100:	f7f8 f802 	bl	8000108 <strlen>
 8008104:	2300      	movs	r3, #0
 8008106:	9312      	str	r3, [sp, #72]	; 0x48
 8008108:	7e23      	ldrb	r3, [r4, #24]
 800810a:	2207      	movs	r2, #7
 800810c:	001e      	movs	r6, r3
 800810e:	6823      	ldr	r3, [r4, #0]
 8008110:	900d      	str	r0, [sp, #52]	; 0x34
 8008112:	930c      	str	r3, [sp, #48]	; 0x30
 8008114:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008116:	682b      	ldr	r3, [r5, #0]
 8008118:	05c9      	lsls	r1, r1, #23
 800811a:	d547      	bpl.n	80081ac <_printf_float+0xc4>
 800811c:	189b      	adds	r3, r3, r2
 800811e:	4393      	bics	r3, r2
 8008120:	001a      	movs	r2, r3
 8008122:	3208      	adds	r2, #8
 8008124:	602a      	str	r2, [r5, #0]
 8008126:	681a      	ldr	r2, [r3, #0]
 8008128:	685b      	ldr	r3, [r3, #4]
 800812a:	64a2      	str	r2, [r4, #72]	; 0x48
 800812c:	64e3      	str	r3, [r4, #76]	; 0x4c
 800812e:	2201      	movs	r2, #1
 8008130:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8008132:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8008134:	930a      	str	r3, [sp, #40]	; 0x28
 8008136:	006b      	lsls	r3, r5, #1
 8008138:	085b      	lsrs	r3, r3, #1
 800813a:	930e      	str	r3, [sp, #56]	; 0x38
 800813c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800813e:	4ba8      	ldr	r3, [pc, #672]	; (80083e0 <_printf_float+0x2f8>)
 8008140:	990e      	ldr	r1, [sp, #56]	; 0x38
 8008142:	4252      	negs	r2, r2
 8008144:	f7fa f8c8 	bl	80022d8 <__aeabi_dcmpun>
 8008148:	2800      	cmp	r0, #0
 800814a:	d131      	bne.n	80081b0 <_printf_float+0xc8>
 800814c:	2201      	movs	r2, #1
 800814e:	4ba4      	ldr	r3, [pc, #656]	; (80083e0 <_printf_float+0x2f8>)
 8008150:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008152:	990e      	ldr	r1, [sp, #56]	; 0x38
 8008154:	4252      	negs	r2, r2
 8008156:	f7f8 f989 	bl	800046c <__aeabi_dcmple>
 800815a:	2800      	cmp	r0, #0
 800815c:	d128      	bne.n	80081b0 <_printf_float+0xc8>
 800815e:	2200      	movs	r2, #0
 8008160:	2300      	movs	r3, #0
 8008162:	0029      	movs	r1, r5
 8008164:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008166:	f7f8 f977 	bl	8000458 <__aeabi_dcmplt>
 800816a:	2800      	cmp	r0, #0
 800816c:	d003      	beq.n	8008176 <_printf_float+0x8e>
 800816e:	0023      	movs	r3, r4
 8008170:	222d      	movs	r2, #45	; 0x2d
 8008172:	3343      	adds	r3, #67	; 0x43
 8008174:	701a      	strb	r2, [r3, #0]
 8008176:	4d9b      	ldr	r5, [pc, #620]	; (80083e4 <_printf_float+0x2fc>)
 8008178:	2e47      	cmp	r6, #71	; 0x47
 800817a:	d900      	bls.n	800817e <_printf_float+0x96>
 800817c:	4d9a      	ldr	r5, [pc, #616]	; (80083e8 <_printf_float+0x300>)
 800817e:	2303      	movs	r3, #3
 8008180:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008182:	6123      	str	r3, [r4, #16]
 8008184:	3301      	adds	r3, #1
 8008186:	439a      	bics	r2, r3
 8008188:	2300      	movs	r3, #0
 800818a:	6022      	str	r2, [r4, #0]
 800818c:	930a      	str	r3, [sp, #40]	; 0x28
 800818e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008190:	0021      	movs	r1, r4
 8008192:	9300      	str	r3, [sp, #0]
 8008194:	0038      	movs	r0, r7
 8008196:	9b08      	ldr	r3, [sp, #32]
 8008198:	aa13      	add	r2, sp, #76	; 0x4c
 800819a:	f000 f9f3 	bl	8008584 <_printf_common>
 800819e:	1c43      	adds	r3, r0, #1
 80081a0:	d000      	beq.n	80081a4 <_printf_float+0xbc>
 80081a2:	e09e      	b.n	80082e2 <_printf_float+0x1fa>
 80081a4:	2001      	movs	r0, #1
 80081a6:	4240      	negs	r0, r0
 80081a8:	b015      	add	sp, #84	; 0x54
 80081aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80081ac:	3307      	adds	r3, #7
 80081ae:	e7b6      	b.n	800811e <_printf_float+0x36>
 80081b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80081b2:	002b      	movs	r3, r5
 80081b4:	0010      	movs	r0, r2
 80081b6:	0029      	movs	r1, r5
 80081b8:	f7fa f88e 	bl	80022d8 <__aeabi_dcmpun>
 80081bc:	2800      	cmp	r0, #0
 80081be:	d00a      	beq.n	80081d6 <_printf_float+0xee>
 80081c0:	2d00      	cmp	r5, #0
 80081c2:	da03      	bge.n	80081cc <_printf_float+0xe4>
 80081c4:	0023      	movs	r3, r4
 80081c6:	222d      	movs	r2, #45	; 0x2d
 80081c8:	3343      	adds	r3, #67	; 0x43
 80081ca:	701a      	strb	r2, [r3, #0]
 80081cc:	4d87      	ldr	r5, [pc, #540]	; (80083ec <_printf_float+0x304>)
 80081ce:	2e47      	cmp	r6, #71	; 0x47
 80081d0:	d9d5      	bls.n	800817e <_printf_float+0x96>
 80081d2:	4d87      	ldr	r5, [pc, #540]	; (80083f0 <_printf_float+0x308>)
 80081d4:	e7d3      	b.n	800817e <_printf_float+0x96>
 80081d6:	2220      	movs	r2, #32
 80081d8:	0031      	movs	r1, r6
 80081da:	6863      	ldr	r3, [r4, #4]
 80081dc:	4391      	bics	r1, r2
 80081de:	910e      	str	r1, [sp, #56]	; 0x38
 80081e0:	1c5a      	adds	r2, r3, #1
 80081e2:	d147      	bne.n	8008274 <_printf_float+0x18c>
 80081e4:	3307      	adds	r3, #7
 80081e6:	6063      	str	r3, [r4, #4]
 80081e8:	2380      	movs	r3, #128	; 0x80
 80081ea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80081ec:	00db      	lsls	r3, r3, #3
 80081ee:	4313      	orrs	r3, r2
 80081f0:	2200      	movs	r2, #0
 80081f2:	9206      	str	r2, [sp, #24]
 80081f4:	aa12      	add	r2, sp, #72	; 0x48
 80081f6:	9205      	str	r2, [sp, #20]
 80081f8:	aa11      	add	r2, sp, #68	; 0x44
 80081fa:	9203      	str	r2, [sp, #12]
 80081fc:	2223      	movs	r2, #35	; 0x23
 80081fe:	a908      	add	r1, sp, #32
 8008200:	6023      	str	r3, [r4, #0]
 8008202:	9301      	str	r3, [sp, #4]
 8008204:	6863      	ldr	r3, [r4, #4]
 8008206:	1852      	adds	r2, r2, r1
 8008208:	9202      	str	r2, [sp, #8]
 800820a:	9300      	str	r3, [sp, #0]
 800820c:	0038      	movs	r0, r7
 800820e:	002b      	movs	r3, r5
 8008210:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008212:	9604      	str	r6, [sp, #16]
 8008214:	f7ff febe 	bl	8007f94 <__cvt>
 8008218:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800821a:	0005      	movs	r5, r0
 800821c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800821e:	2b47      	cmp	r3, #71	; 0x47
 8008220:	d108      	bne.n	8008234 <_printf_float+0x14c>
 8008222:	1ccb      	adds	r3, r1, #3
 8008224:	db02      	blt.n	800822c <_printf_float+0x144>
 8008226:	6863      	ldr	r3, [r4, #4]
 8008228:	4299      	cmp	r1, r3
 800822a:	dd46      	ble.n	80082ba <_printf_float+0x1d2>
 800822c:	0033      	movs	r3, r6
 800822e:	3b02      	subs	r3, #2
 8008230:	b2db      	uxtb	r3, r3
 8008232:	001e      	movs	r6, r3
 8008234:	2e65      	cmp	r6, #101	; 0x65
 8008236:	d824      	bhi.n	8008282 <_printf_float+0x19a>
 8008238:	0020      	movs	r0, r4
 800823a:	0032      	movs	r2, r6
 800823c:	3901      	subs	r1, #1
 800823e:	3050      	adds	r0, #80	; 0x50
 8008240:	9111      	str	r1, [sp, #68]	; 0x44
 8008242:	f7ff ff0a 	bl	800805a <__exponent>
 8008246:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008248:	900a      	str	r0, [sp, #40]	; 0x28
 800824a:	1813      	adds	r3, r2, r0
 800824c:	6123      	str	r3, [r4, #16]
 800824e:	2a01      	cmp	r2, #1
 8008250:	dc02      	bgt.n	8008258 <_printf_float+0x170>
 8008252:	6822      	ldr	r2, [r4, #0]
 8008254:	07d2      	lsls	r2, r2, #31
 8008256:	d501      	bpl.n	800825c <_printf_float+0x174>
 8008258:	3301      	adds	r3, #1
 800825a:	6123      	str	r3, [r4, #16]
 800825c:	2323      	movs	r3, #35	; 0x23
 800825e:	aa08      	add	r2, sp, #32
 8008260:	189b      	adds	r3, r3, r2
 8008262:	781b      	ldrb	r3, [r3, #0]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d100      	bne.n	800826a <_printf_float+0x182>
 8008268:	e791      	b.n	800818e <_printf_float+0xa6>
 800826a:	0023      	movs	r3, r4
 800826c:	222d      	movs	r2, #45	; 0x2d
 800826e:	3343      	adds	r3, #67	; 0x43
 8008270:	701a      	strb	r2, [r3, #0]
 8008272:	e78c      	b.n	800818e <_printf_float+0xa6>
 8008274:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008276:	2a47      	cmp	r2, #71	; 0x47
 8008278:	d1b6      	bne.n	80081e8 <_printf_float+0x100>
 800827a:	2b00      	cmp	r3, #0
 800827c:	d1b4      	bne.n	80081e8 <_printf_float+0x100>
 800827e:	3301      	adds	r3, #1
 8008280:	e7b1      	b.n	80081e6 <_printf_float+0xfe>
 8008282:	2e66      	cmp	r6, #102	; 0x66
 8008284:	d11b      	bne.n	80082be <_printf_float+0x1d6>
 8008286:	6863      	ldr	r3, [r4, #4]
 8008288:	2900      	cmp	r1, #0
 800828a:	dd0d      	ble.n	80082a8 <_printf_float+0x1c0>
 800828c:	6121      	str	r1, [r4, #16]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d102      	bne.n	8008298 <_printf_float+0x1b0>
 8008292:	6822      	ldr	r2, [r4, #0]
 8008294:	07d2      	lsls	r2, r2, #31
 8008296:	d502      	bpl.n	800829e <_printf_float+0x1b6>
 8008298:	3301      	adds	r3, #1
 800829a:	1859      	adds	r1, r3, r1
 800829c:	6121      	str	r1, [r4, #16]
 800829e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80082a0:	65a3      	str	r3, [r4, #88]	; 0x58
 80082a2:	2300      	movs	r3, #0
 80082a4:	930a      	str	r3, [sp, #40]	; 0x28
 80082a6:	e7d9      	b.n	800825c <_printf_float+0x174>
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d103      	bne.n	80082b4 <_printf_float+0x1cc>
 80082ac:	2201      	movs	r2, #1
 80082ae:	6821      	ldr	r1, [r4, #0]
 80082b0:	4211      	tst	r1, r2
 80082b2:	d000      	beq.n	80082b6 <_printf_float+0x1ce>
 80082b4:	1c9a      	adds	r2, r3, #2
 80082b6:	6122      	str	r2, [r4, #16]
 80082b8:	e7f1      	b.n	800829e <_printf_float+0x1b6>
 80082ba:	2367      	movs	r3, #103	; 0x67
 80082bc:	001e      	movs	r6, r3
 80082be:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80082c0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80082c2:	4293      	cmp	r3, r2
 80082c4:	db06      	blt.n	80082d4 <_printf_float+0x1ec>
 80082c6:	6822      	ldr	r2, [r4, #0]
 80082c8:	6123      	str	r3, [r4, #16]
 80082ca:	07d2      	lsls	r2, r2, #31
 80082cc:	d5e7      	bpl.n	800829e <_printf_float+0x1b6>
 80082ce:	3301      	adds	r3, #1
 80082d0:	6123      	str	r3, [r4, #16]
 80082d2:	e7e4      	b.n	800829e <_printf_float+0x1b6>
 80082d4:	2101      	movs	r1, #1
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	dc01      	bgt.n	80082de <_printf_float+0x1f6>
 80082da:	1849      	adds	r1, r1, r1
 80082dc:	1ac9      	subs	r1, r1, r3
 80082de:	1852      	adds	r2, r2, r1
 80082e0:	e7e9      	b.n	80082b6 <_printf_float+0x1ce>
 80082e2:	6822      	ldr	r2, [r4, #0]
 80082e4:	0553      	lsls	r3, r2, #21
 80082e6:	d408      	bmi.n	80082fa <_printf_float+0x212>
 80082e8:	6923      	ldr	r3, [r4, #16]
 80082ea:	002a      	movs	r2, r5
 80082ec:	0038      	movs	r0, r7
 80082ee:	9908      	ldr	r1, [sp, #32]
 80082f0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80082f2:	47a8      	blx	r5
 80082f4:	1c43      	adds	r3, r0, #1
 80082f6:	d129      	bne.n	800834c <_printf_float+0x264>
 80082f8:	e754      	b.n	80081a4 <_printf_float+0xbc>
 80082fa:	2e65      	cmp	r6, #101	; 0x65
 80082fc:	d800      	bhi.n	8008300 <_printf_float+0x218>
 80082fe:	e0ec      	b.n	80084da <_printf_float+0x3f2>
 8008300:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8008302:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8008304:	2200      	movs	r2, #0
 8008306:	2300      	movs	r3, #0
 8008308:	f7f8 f8a0 	bl	800044c <__aeabi_dcmpeq>
 800830c:	2800      	cmp	r0, #0
 800830e:	d034      	beq.n	800837a <_printf_float+0x292>
 8008310:	2301      	movs	r3, #1
 8008312:	0038      	movs	r0, r7
 8008314:	4a37      	ldr	r2, [pc, #220]	; (80083f4 <_printf_float+0x30c>)
 8008316:	9908      	ldr	r1, [sp, #32]
 8008318:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800831a:	47a8      	blx	r5
 800831c:	1c43      	adds	r3, r0, #1
 800831e:	d100      	bne.n	8008322 <_printf_float+0x23a>
 8008320:	e740      	b.n	80081a4 <_printf_float+0xbc>
 8008322:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008324:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008326:	4293      	cmp	r3, r2
 8008328:	db02      	blt.n	8008330 <_printf_float+0x248>
 800832a:	6823      	ldr	r3, [r4, #0]
 800832c:	07db      	lsls	r3, r3, #31
 800832e:	d50d      	bpl.n	800834c <_printf_float+0x264>
 8008330:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008332:	0038      	movs	r0, r7
 8008334:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008336:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008338:	9908      	ldr	r1, [sp, #32]
 800833a:	47a8      	blx	r5
 800833c:	2500      	movs	r5, #0
 800833e:	1c43      	adds	r3, r0, #1
 8008340:	d100      	bne.n	8008344 <_printf_float+0x25c>
 8008342:	e72f      	b.n	80081a4 <_printf_float+0xbc>
 8008344:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008346:	3b01      	subs	r3, #1
 8008348:	42ab      	cmp	r3, r5
 800834a:	dc0a      	bgt.n	8008362 <_printf_float+0x27a>
 800834c:	6823      	ldr	r3, [r4, #0]
 800834e:	079b      	lsls	r3, r3, #30
 8008350:	d500      	bpl.n	8008354 <_printf_float+0x26c>
 8008352:	e114      	b.n	800857e <_printf_float+0x496>
 8008354:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008356:	68e0      	ldr	r0, [r4, #12]
 8008358:	4298      	cmp	r0, r3
 800835a:	db00      	blt.n	800835e <_printf_float+0x276>
 800835c:	e724      	b.n	80081a8 <_printf_float+0xc0>
 800835e:	0018      	movs	r0, r3
 8008360:	e722      	b.n	80081a8 <_printf_float+0xc0>
 8008362:	0022      	movs	r2, r4
 8008364:	2301      	movs	r3, #1
 8008366:	0038      	movs	r0, r7
 8008368:	9908      	ldr	r1, [sp, #32]
 800836a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800836c:	321a      	adds	r2, #26
 800836e:	47b0      	blx	r6
 8008370:	1c43      	adds	r3, r0, #1
 8008372:	d100      	bne.n	8008376 <_printf_float+0x28e>
 8008374:	e716      	b.n	80081a4 <_printf_float+0xbc>
 8008376:	3501      	adds	r5, #1
 8008378:	e7e4      	b.n	8008344 <_printf_float+0x25c>
 800837a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800837c:	2b00      	cmp	r3, #0
 800837e:	dc3b      	bgt.n	80083f8 <_printf_float+0x310>
 8008380:	2301      	movs	r3, #1
 8008382:	0038      	movs	r0, r7
 8008384:	4a1b      	ldr	r2, [pc, #108]	; (80083f4 <_printf_float+0x30c>)
 8008386:	9908      	ldr	r1, [sp, #32]
 8008388:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800838a:	47b0      	blx	r6
 800838c:	1c43      	adds	r3, r0, #1
 800838e:	d100      	bne.n	8008392 <_printf_float+0x2aa>
 8008390:	e708      	b.n	80081a4 <_printf_float+0xbc>
 8008392:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008394:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008396:	4313      	orrs	r3, r2
 8008398:	d102      	bne.n	80083a0 <_printf_float+0x2b8>
 800839a:	6823      	ldr	r3, [r4, #0]
 800839c:	07db      	lsls	r3, r3, #31
 800839e:	d5d5      	bpl.n	800834c <_printf_float+0x264>
 80083a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80083a2:	0038      	movs	r0, r7
 80083a4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80083a6:	9908      	ldr	r1, [sp, #32]
 80083a8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80083aa:	47b0      	blx	r6
 80083ac:	1c43      	adds	r3, r0, #1
 80083ae:	d100      	bne.n	80083b2 <_printf_float+0x2ca>
 80083b0:	e6f8      	b.n	80081a4 <_printf_float+0xbc>
 80083b2:	2300      	movs	r3, #0
 80083b4:	930a      	str	r3, [sp, #40]	; 0x28
 80083b6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80083b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80083ba:	425b      	negs	r3, r3
 80083bc:	4293      	cmp	r3, r2
 80083be:	dc01      	bgt.n	80083c4 <_printf_float+0x2dc>
 80083c0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80083c2:	e792      	b.n	80082ea <_printf_float+0x202>
 80083c4:	0022      	movs	r2, r4
 80083c6:	2301      	movs	r3, #1
 80083c8:	0038      	movs	r0, r7
 80083ca:	9908      	ldr	r1, [sp, #32]
 80083cc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80083ce:	321a      	adds	r2, #26
 80083d0:	47b0      	blx	r6
 80083d2:	1c43      	adds	r3, r0, #1
 80083d4:	d100      	bne.n	80083d8 <_printf_float+0x2f0>
 80083d6:	e6e5      	b.n	80081a4 <_printf_float+0xbc>
 80083d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083da:	3301      	adds	r3, #1
 80083dc:	e7ea      	b.n	80083b4 <_printf_float+0x2cc>
 80083de:	46c0      	nop			; (mov r8, r8)
 80083e0:	7fefffff 	.word	0x7fefffff
 80083e4:	0800d38c 	.word	0x0800d38c
 80083e8:	0800d390 	.word	0x0800d390
 80083ec:	0800d394 	.word	0x0800d394
 80083f0:	0800d398 	.word	0x0800d398
 80083f4:	0800d39c 	.word	0x0800d39c
 80083f8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80083fa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80083fc:	920a      	str	r2, [sp, #40]	; 0x28
 80083fe:	429a      	cmp	r2, r3
 8008400:	dd00      	ble.n	8008404 <_printf_float+0x31c>
 8008402:	930a      	str	r3, [sp, #40]	; 0x28
 8008404:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008406:	2b00      	cmp	r3, #0
 8008408:	dc3d      	bgt.n	8008486 <_printf_float+0x39e>
 800840a:	2300      	movs	r3, #0
 800840c:	930e      	str	r3, [sp, #56]	; 0x38
 800840e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008410:	43db      	mvns	r3, r3
 8008412:	17db      	asrs	r3, r3, #31
 8008414:	930f      	str	r3, [sp, #60]	; 0x3c
 8008416:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008418:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800841a:	930c      	str	r3, [sp, #48]	; 0x30
 800841c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800841e:	4013      	ands	r3, r2
 8008420:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008422:	1ad3      	subs	r3, r2, r3
 8008424:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008426:	4293      	cmp	r3, r2
 8008428:	dc36      	bgt.n	8008498 <_printf_float+0x3b0>
 800842a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800842c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800842e:	4293      	cmp	r3, r2
 8008430:	db40      	blt.n	80084b4 <_printf_float+0x3cc>
 8008432:	6823      	ldr	r3, [r4, #0]
 8008434:	07db      	lsls	r3, r3, #31
 8008436:	d43d      	bmi.n	80084b4 <_printf_float+0x3cc>
 8008438:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800843a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800843c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800843e:	1ad3      	subs	r3, r2, r3
 8008440:	1a52      	subs	r2, r2, r1
 8008442:	920a      	str	r2, [sp, #40]	; 0x28
 8008444:	429a      	cmp	r2, r3
 8008446:	dd00      	ble.n	800844a <_printf_float+0x362>
 8008448:	930a      	str	r3, [sp, #40]	; 0x28
 800844a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800844c:	2b00      	cmp	r3, #0
 800844e:	dc3a      	bgt.n	80084c6 <_printf_float+0x3de>
 8008450:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008452:	2500      	movs	r5, #0
 8008454:	43db      	mvns	r3, r3
 8008456:	17db      	asrs	r3, r3, #31
 8008458:	930b      	str	r3, [sp, #44]	; 0x2c
 800845a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800845c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800845e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008460:	1a9b      	subs	r3, r3, r2
 8008462:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008464:	400a      	ands	r2, r1
 8008466:	1a9b      	subs	r3, r3, r2
 8008468:	42ab      	cmp	r3, r5
 800846a:	dc00      	bgt.n	800846e <_printf_float+0x386>
 800846c:	e76e      	b.n	800834c <_printf_float+0x264>
 800846e:	0022      	movs	r2, r4
 8008470:	2301      	movs	r3, #1
 8008472:	0038      	movs	r0, r7
 8008474:	9908      	ldr	r1, [sp, #32]
 8008476:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008478:	321a      	adds	r2, #26
 800847a:	47b0      	blx	r6
 800847c:	1c43      	adds	r3, r0, #1
 800847e:	d100      	bne.n	8008482 <_printf_float+0x39a>
 8008480:	e690      	b.n	80081a4 <_printf_float+0xbc>
 8008482:	3501      	adds	r5, #1
 8008484:	e7e9      	b.n	800845a <_printf_float+0x372>
 8008486:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008488:	002a      	movs	r2, r5
 800848a:	0038      	movs	r0, r7
 800848c:	9908      	ldr	r1, [sp, #32]
 800848e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008490:	47b0      	blx	r6
 8008492:	1c43      	adds	r3, r0, #1
 8008494:	d1b9      	bne.n	800840a <_printf_float+0x322>
 8008496:	e685      	b.n	80081a4 <_printf_float+0xbc>
 8008498:	0022      	movs	r2, r4
 800849a:	2301      	movs	r3, #1
 800849c:	0038      	movs	r0, r7
 800849e:	9908      	ldr	r1, [sp, #32]
 80084a0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80084a2:	321a      	adds	r2, #26
 80084a4:	47b0      	blx	r6
 80084a6:	1c43      	adds	r3, r0, #1
 80084a8:	d100      	bne.n	80084ac <_printf_float+0x3c4>
 80084aa:	e67b      	b.n	80081a4 <_printf_float+0xbc>
 80084ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80084ae:	3301      	adds	r3, #1
 80084b0:	930e      	str	r3, [sp, #56]	; 0x38
 80084b2:	e7b0      	b.n	8008416 <_printf_float+0x32e>
 80084b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80084b6:	0038      	movs	r0, r7
 80084b8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80084ba:	9908      	ldr	r1, [sp, #32]
 80084bc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80084be:	47b0      	blx	r6
 80084c0:	1c43      	adds	r3, r0, #1
 80084c2:	d1b9      	bne.n	8008438 <_printf_float+0x350>
 80084c4:	e66e      	b.n	80081a4 <_printf_float+0xbc>
 80084c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80084c8:	0038      	movs	r0, r7
 80084ca:	18ea      	adds	r2, r5, r3
 80084cc:	9908      	ldr	r1, [sp, #32]
 80084ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084d0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80084d2:	47a8      	blx	r5
 80084d4:	1c43      	adds	r3, r0, #1
 80084d6:	d1bb      	bne.n	8008450 <_printf_float+0x368>
 80084d8:	e664      	b.n	80081a4 <_printf_float+0xbc>
 80084da:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80084dc:	2b01      	cmp	r3, #1
 80084de:	dc02      	bgt.n	80084e6 <_printf_float+0x3fe>
 80084e0:	2301      	movs	r3, #1
 80084e2:	421a      	tst	r2, r3
 80084e4:	d038      	beq.n	8008558 <_printf_float+0x470>
 80084e6:	2301      	movs	r3, #1
 80084e8:	002a      	movs	r2, r5
 80084ea:	0038      	movs	r0, r7
 80084ec:	9908      	ldr	r1, [sp, #32]
 80084ee:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80084f0:	47b0      	blx	r6
 80084f2:	1c43      	adds	r3, r0, #1
 80084f4:	d100      	bne.n	80084f8 <_printf_float+0x410>
 80084f6:	e655      	b.n	80081a4 <_printf_float+0xbc>
 80084f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80084fa:	0038      	movs	r0, r7
 80084fc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80084fe:	9908      	ldr	r1, [sp, #32]
 8008500:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008502:	47b0      	blx	r6
 8008504:	1c43      	adds	r3, r0, #1
 8008506:	d100      	bne.n	800850a <_printf_float+0x422>
 8008508:	e64c      	b.n	80081a4 <_printf_float+0xbc>
 800850a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800850c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800850e:	2200      	movs	r2, #0
 8008510:	2300      	movs	r3, #0
 8008512:	f7f7 ff9b 	bl	800044c <__aeabi_dcmpeq>
 8008516:	2800      	cmp	r0, #0
 8008518:	d11c      	bne.n	8008554 <_printf_float+0x46c>
 800851a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800851c:	1c6a      	adds	r2, r5, #1
 800851e:	3b01      	subs	r3, #1
 8008520:	0038      	movs	r0, r7
 8008522:	9908      	ldr	r1, [sp, #32]
 8008524:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008526:	47a8      	blx	r5
 8008528:	1c43      	adds	r3, r0, #1
 800852a:	d10f      	bne.n	800854c <_printf_float+0x464>
 800852c:	e63a      	b.n	80081a4 <_printf_float+0xbc>
 800852e:	0022      	movs	r2, r4
 8008530:	2301      	movs	r3, #1
 8008532:	0038      	movs	r0, r7
 8008534:	9908      	ldr	r1, [sp, #32]
 8008536:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008538:	321a      	adds	r2, #26
 800853a:	47b0      	blx	r6
 800853c:	1c43      	adds	r3, r0, #1
 800853e:	d100      	bne.n	8008542 <_printf_float+0x45a>
 8008540:	e630      	b.n	80081a4 <_printf_float+0xbc>
 8008542:	3501      	adds	r5, #1
 8008544:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008546:	3b01      	subs	r3, #1
 8008548:	42ab      	cmp	r3, r5
 800854a:	dcf0      	bgt.n	800852e <_printf_float+0x446>
 800854c:	0022      	movs	r2, r4
 800854e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008550:	3250      	adds	r2, #80	; 0x50
 8008552:	e6cb      	b.n	80082ec <_printf_float+0x204>
 8008554:	2500      	movs	r5, #0
 8008556:	e7f5      	b.n	8008544 <_printf_float+0x45c>
 8008558:	002a      	movs	r2, r5
 800855a:	e7e1      	b.n	8008520 <_printf_float+0x438>
 800855c:	0022      	movs	r2, r4
 800855e:	2301      	movs	r3, #1
 8008560:	0038      	movs	r0, r7
 8008562:	9908      	ldr	r1, [sp, #32]
 8008564:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008566:	3219      	adds	r2, #25
 8008568:	47b0      	blx	r6
 800856a:	1c43      	adds	r3, r0, #1
 800856c:	d100      	bne.n	8008570 <_printf_float+0x488>
 800856e:	e619      	b.n	80081a4 <_printf_float+0xbc>
 8008570:	3501      	adds	r5, #1
 8008572:	68e3      	ldr	r3, [r4, #12]
 8008574:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008576:	1a9b      	subs	r3, r3, r2
 8008578:	42ab      	cmp	r3, r5
 800857a:	dcef      	bgt.n	800855c <_printf_float+0x474>
 800857c:	e6ea      	b.n	8008354 <_printf_float+0x26c>
 800857e:	2500      	movs	r5, #0
 8008580:	e7f7      	b.n	8008572 <_printf_float+0x48a>
 8008582:	46c0      	nop			; (mov r8, r8)

08008584 <_printf_common>:
 8008584:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008586:	0015      	movs	r5, r2
 8008588:	9301      	str	r3, [sp, #4]
 800858a:	688a      	ldr	r2, [r1, #8]
 800858c:	690b      	ldr	r3, [r1, #16]
 800858e:	000c      	movs	r4, r1
 8008590:	9000      	str	r0, [sp, #0]
 8008592:	4293      	cmp	r3, r2
 8008594:	da00      	bge.n	8008598 <_printf_common+0x14>
 8008596:	0013      	movs	r3, r2
 8008598:	0022      	movs	r2, r4
 800859a:	602b      	str	r3, [r5, #0]
 800859c:	3243      	adds	r2, #67	; 0x43
 800859e:	7812      	ldrb	r2, [r2, #0]
 80085a0:	2a00      	cmp	r2, #0
 80085a2:	d001      	beq.n	80085a8 <_printf_common+0x24>
 80085a4:	3301      	adds	r3, #1
 80085a6:	602b      	str	r3, [r5, #0]
 80085a8:	6823      	ldr	r3, [r4, #0]
 80085aa:	069b      	lsls	r3, r3, #26
 80085ac:	d502      	bpl.n	80085b4 <_printf_common+0x30>
 80085ae:	682b      	ldr	r3, [r5, #0]
 80085b0:	3302      	adds	r3, #2
 80085b2:	602b      	str	r3, [r5, #0]
 80085b4:	6822      	ldr	r2, [r4, #0]
 80085b6:	2306      	movs	r3, #6
 80085b8:	0017      	movs	r7, r2
 80085ba:	401f      	ands	r7, r3
 80085bc:	421a      	tst	r2, r3
 80085be:	d027      	beq.n	8008610 <_printf_common+0x8c>
 80085c0:	0023      	movs	r3, r4
 80085c2:	3343      	adds	r3, #67	; 0x43
 80085c4:	781b      	ldrb	r3, [r3, #0]
 80085c6:	1e5a      	subs	r2, r3, #1
 80085c8:	4193      	sbcs	r3, r2
 80085ca:	6822      	ldr	r2, [r4, #0]
 80085cc:	0692      	lsls	r2, r2, #26
 80085ce:	d430      	bmi.n	8008632 <_printf_common+0xae>
 80085d0:	0022      	movs	r2, r4
 80085d2:	9901      	ldr	r1, [sp, #4]
 80085d4:	9800      	ldr	r0, [sp, #0]
 80085d6:	9e08      	ldr	r6, [sp, #32]
 80085d8:	3243      	adds	r2, #67	; 0x43
 80085da:	47b0      	blx	r6
 80085dc:	1c43      	adds	r3, r0, #1
 80085de:	d025      	beq.n	800862c <_printf_common+0xa8>
 80085e0:	2306      	movs	r3, #6
 80085e2:	6820      	ldr	r0, [r4, #0]
 80085e4:	682a      	ldr	r2, [r5, #0]
 80085e6:	68e1      	ldr	r1, [r4, #12]
 80085e8:	2500      	movs	r5, #0
 80085ea:	4003      	ands	r3, r0
 80085ec:	2b04      	cmp	r3, #4
 80085ee:	d103      	bne.n	80085f8 <_printf_common+0x74>
 80085f0:	1a8d      	subs	r5, r1, r2
 80085f2:	43eb      	mvns	r3, r5
 80085f4:	17db      	asrs	r3, r3, #31
 80085f6:	401d      	ands	r5, r3
 80085f8:	68a3      	ldr	r3, [r4, #8]
 80085fa:	6922      	ldr	r2, [r4, #16]
 80085fc:	4293      	cmp	r3, r2
 80085fe:	dd01      	ble.n	8008604 <_printf_common+0x80>
 8008600:	1a9b      	subs	r3, r3, r2
 8008602:	18ed      	adds	r5, r5, r3
 8008604:	2700      	movs	r7, #0
 8008606:	42bd      	cmp	r5, r7
 8008608:	d120      	bne.n	800864c <_printf_common+0xc8>
 800860a:	2000      	movs	r0, #0
 800860c:	e010      	b.n	8008630 <_printf_common+0xac>
 800860e:	3701      	adds	r7, #1
 8008610:	68e3      	ldr	r3, [r4, #12]
 8008612:	682a      	ldr	r2, [r5, #0]
 8008614:	1a9b      	subs	r3, r3, r2
 8008616:	42bb      	cmp	r3, r7
 8008618:	ddd2      	ble.n	80085c0 <_printf_common+0x3c>
 800861a:	0022      	movs	r2, r4
 800861c:	2301      	movs	r3, #1
 800861e:	9901      	ldr	r1, [sp, #4]
 8008620:	9800      	ldr	r0, [sp, #0]
 8008622:	9e08      	ldr	r6, [sp, #32]
 8008624:	3219      	adds	r2, #25
 8008626:	47b0      	blx	r6
 8008628:	1c43      	adds	r3, r0, #1
 800862a:	d1f0      	bne.n	800860e <_printf_common+0x8a>
 800862c:	2001      	movs	r0, #1
 800862e:	4240      	negs	r0, r0
 8008630:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008632:	2030      	movs	r0, #48	; 0x30
 8008634:	18e1      	adds	r1, r4, r3
 8008636:	3143      	adds	r1, #67	; 0x43
 8008638:	7008      	strb	r0, [r1, #0]
 800863a:	0021      	movs	r1, r4
 800863c:	1c5a      	adds	r2, r3, #1
 800863e:	3145      	adds	r1, #69	; 0x45
 8008640:	7809      	ldrb	r1, [r1, #0]
 8008642:	18a2      	adds	r2, r4, r2
 8008644:	3243      	adds	r2, #67	; 0x43
 8008646:	3302      	adds	r3, #2
 8008648:	7011      	strb	r1, [r2, #0]
 800864a:	e7c1      	b.n	80085d0 <_printf_common+0x4c>
 800864c:	0022      	movs	r2, r4
 800864e:	2301      	movs	r3, #1
 8008650:	9901      	ldr	r1, [sp, #4]
 8008652:	9800      	ldr	r0, [sp, #0]
 8008654:	9e08      	ldr	r6, [sp, #32]
 8008656:	321a      	adds	r2, #26
 8008658:	47b0      	blx	r6
 800865a:	1c43      	adds	r3, r0, #1
 800865c:	d0e6      	beq.n	800862c <_printf_common+0xa8>
 800865e:	3701      	adds	r7, #1
 8008660:	e7d1      	b.n	8008606 <_printf_common+0x82>
	...

08008664 <_printf_i>:
 8008664:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008666:	b08b      	sub	sp, #44	; 0x2c
 8008668:	9206      	str	r2, [sp, #24]
 800866a:	000a      	movs	r2, r1
 800866c:	3243      	adds	r2, #67	; 0x43
 800866e:	9307      	str	r3, [sp, #28]
 8008670:	9005      	str	r0, [sp, #20]
 8008672:	9204      	str	r2, [sp, #16]
 8008674:	7e0a      	ldrb	r2, [r1, #24]
 8008676:	000c      	movs	r4, r1
 8008678:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800867a:	2a78      	cmp	r2, #120	; 0x78
 800867c:	d806      	bhi.n	800868c <_printf_i+0x28>
 800867e:	2a62      	cmp	r2, #98	; 0x62
 8008680:	d808      	bhi.n	8008694 <_printf_i+0x30>
 8008682:	2a00      	cmp	r2, #0
 8008684:	d100      	bne.n	8008688 <_printf_i+0x24>
 8008686:	e0c0      	b.n	800880a <_printf_i+0x1a6>
 8008688:	2a58      	cmp	r2, #88	; 0x58
 800868a:	d052      	beq.n	8008732 <_printf_i+0xce>
 800868c:	0026      	movs	r6, r4
 800868e:	3642      	adds	r6, #66	; 0x42
 8008690:	7032      	strb	r2, [r6, #0]
 8008692:	e022      	b.n	80086da <_printf_i+0x76>
 8008694:	0010      	movs	r0, r2
 8008696:	3863      	subs	r0, #99	; 0x63
 8008698:	2815      	cmp	r0, #21
 800869a:	d8f7      	bhi.n	800868c <_printf_i+0x28>
 800869c:	f7f7 fd46 	bl	800012c <__gnu_thumb1_case_shi>
 80086a0:	001f0016 	.word	0x001f0016
 80086a4:	fff6fff6 	.word	0xfff6fff6
 80086a8:	fff6fff6 	.word	0xfff6fff6
 80086ac:	fff6001f 	.word	0xfff6001f
 80086b0:	fff6fff6 	.word	0xfff6fff6
 80086b4:	00a8fff6 	.word	0x00a8fff6
 80086b8:	009a0036 	.word	0x009a0036
 80086bc:	fff6fff6 	.word	0xfff6fff6
 80086c0:	fff600b9 	.word	0xfff600b9
 80086c4:	fff60036 	.word	0xfff60036
 80086c8:	009efff6 	.word	0x009efff6
 80086cc:	0026      	movs	r6, r4
 80086ce:	681a      	ldr	r2, [r3, #0]
 80086d0:	3642      	adds	r6, #66	; 0x42
 80086d2:	1d11      	adds	r1, r2, #4
 80086d4:	6019      	str	r1, [r3, #0]
 80086d6:	6813      	ldr	r3, [r2, #0]
 80086d8:	7033      	strb	r3, [r6, #0]
 80086da:	2301      	movs	r3, #1
 80086dc:	e0a7      	b.n	800882e <_printf_i+0x1ca>
 80086de:	6808      	ldr	r0, [r1, #0]
 80086e0:	6819      	ldr	r1, [r3, #0]
 80086e2:	1d0a      	adds	r2, r1, #4
 80086e4:	0605      	lsls	r5, r0, #24
 80086e6:	d50b      	bpl.n	8008700 <_printf_i+0x9c>
 80086e8:	680d      	ldr	r5, [r1, #0]
 80086ea:	601a      	str	r2, [r3, #0]
 80086ec:	2d00      	cmp	r5, #0
 80086ee:	da03      	bge.n	80086f8 <_printf_i+0x94>
 80086f0:	232d      	movs	r3, #45	; 0x2d
 80086f2:	9a04      	ldr	r2, [sp, #16]
 80086f4:	426d      	negs	r5, r5
 80086f6:	7013      	strb	r3, [r2, #0]
 80086f8:	4b61      	ldr	r3, [pc, #388]	; (8008880 <_printf_i+0x21c>)
 80086fa:	270a      	movs	r7, #10
 80086fc:	9303      	str	r3, [sp, #12]
 80086fe:	e032      	b.n	8008766 <_printf_i+0x102>
 8008700:	680d      	ldr	r5, [r1, #0]
 8008702:	601a      	str	r2, [r3, #0]
 8008704:	0641      	lsls	r1, r0, #25
 8008706:	d5f1      	bpl.n	80086ec <_printf_i+0x88>
 8008708:	b22d      	sxth	r5, r5
 800870a:	e7ef      	b.n	80086ec <_printf_i+0x88>
 800870c:	680d      	ldr	r5, [r1, #0]
 800870e:	6819      	ldr	r1, [r3, #0]
 8008710:	1d08      	adds	r0, r1, #4
 8008712:	6018      	str	r0, [r3, #0]
 8008714:	062e      	lsls	r6, r5, #24
 8008716:	d501      	bpl.n	800871c <_printf_i+0xb8>
 8008718:	680d      	ldr	r5, [r1, #0]
 800871a:	e003      	b.n	8008724 <_printf_i+0xc0>
 800871c:	066d      	lsls	r5, r5, #25
 800871e:	d5fb      	bpl.n	8008718 <_printf_i+0xb4>
 8008720:	680d      	ldr	r5, [r1, #0]
 8008722:	b2ad      	uxth	r5, r5
 8008724:	4b56      	ldr	r3, [pc, #344]	; (8008880 <_printf_i+0x21c>)
 8008726:	270a      	movs	r7, #10
 8008728:	9303      	str	r3, [sp, #12]
 800872a:	2a6f      	cmp	r2, #111	; 0x6f
 800872c:	d117      	bne.n	800875e <_printf_i+0xfa>
 800872e:	2708      	movs	r7, #8
 8008730:	e015      	b.n	800875e <_printf_i+0xfa>
 8008732:	3145      	adds	r1, #69	; 0x45
 8008734:	700a      	strb	r2, [r1, #0]
 8008736:	4a52      	ldr	r2, [pc, #328]	; (8008880 <_printf_i+0x21c>)
 8008738:	9203      	str	r2, [sp, #12]
 800873a:	681a      	ldr	r2, [r3, #0]
 800873c:	6821      	ldr	r1, [r4, #0]
 800873e:	ca20      	ldmia	r2!, {r5}
 8008740:	601a      	str	r2, [r3, #0]
 8008742:	0608      	lsls	r0, r1, #24
 8008744:	d550      	bpl.n	80087e8 <_printf_i+0x184>
 8008746:	07cb      	lsls	r3, r1, #31
 8008748:	d502      	bpl.n	8008750 <_printf_i+0xec>
 800874a:	2320      	movs	r3, #32
 800874c:	4319      	orrs	r1, r3
 800874e:	6021      	str	r1, [r4, #0]
 8008750:	2710      	movs	r7, #16
 8008752:	2d00      	cmp	r5, #0
 8008754:	d103      	bne.n	800875e <_printf_i+0xfa>
 8008756:	2320      	movs	r3, #32
 8008758:	6822      	ldr	r2, [r4, #0]
 800875a:	439a      	bics	r2, r3
 800875c:	6022      	str	r2, [r4, #0]
 800875e:	0023      	movs	r3, r4
 8008760:	2200      	movs	r2, #0
 8008762:	3343      	adds	r3, #67	; 0x43
 8008764:	701a      	strb	r2, [r3, #0]
 8008766:	6863      	ldr	r3, [r4, #4]
 8008768:	60a3      	str	r3, [r4, #8]
 800876a:	2b00      	cmp	r3, #0
 800876c:	db03      	blt.n	8008776 <_printf_i+0x112>
 800876e:	2204      	movs	r2, #4
 8008770:	6821      	ldr	r1, [r4, #0]
 8008772:	4391      	bics	r1, r2
 8008774:	6021      	str	r1, [r4, #0]
 8008776:	2d00      	cmp	r5, #0
 8008778:	d102      	bne.n	8008780 <_printf_i+0x11c>
 800877a:	9e04      	ldr	r6, [sp, #16]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d00c      	beq.n	800879a <_printf_i+0x136>
 8008780:	9e04      	ldr	r6, [sp, #16]
 8008782:	0028      	movs	r0, r5
 8008784:	0039      	movs	r1, r7
 8008786:	f7f7 fd61 	bl	800024c <__aeabi_uidivmod>
 800878a:	9b03      	ldr	r3, [sp, #12]
 800878c:	3e01      	subs	r6, #1
 800878e:	5c5b      	ldrb	r3, [r3, r1]
 8008790:	7033      	strb	r3, [r6, #0]
 8008792:	002b      	movs	r3, r5
 8008794:	0005      	movs	r5, r0
 8008796:	429f      	cmp	r7, r3
 8008798:	d9f3      	bls.n	8008782 <_printf_i+0x11e>
 800879a:	2f08      	cmp	r7, #8
 800879c:	d109      	bne.n	80087b2 <_printf_i+0x14e>
 800879e:	6823      	ldr	r3, [r4, #0]
 80087a0:	07db      	lsls	r3, r3, #31
 80087a2:	d506      	bpl.n	80087b2 <_printf_i+0x14e>
 80087a4:	6863      	ldr	r3, [r4, #4]
 80087a6:	6922      	ldr	r2, [r4, #16]
 80087a8:	4293      	cmp	r3, r2
 80087aa:	dc02      	bgt.n	80087b2 <_printf_i+0x14e>
 80087ac:	2330      	movs	r3, #48	; 0x30
 80087ae:	3e01      	subs	r6, #1
 80087b0:	7033      	strb	r3, [r6, #0]
 80087b2:	9b04      	ldr	r3, [sp, #16]
 80087b4:	1b9b      	subs	r3, r3, r6
 80087b6:	6123      	str	r3, [r4, #16]
 80087b8:	9b07      	ldr	r3, [sp, #28]
 80087ba:	0021      	movs	r1, r4
 80087bc:	9300      	str	r3, [sp, #0]
 80087be:	9805      	ldr	r0, [sp, #20]
 80087c0:	9b06      	ldr	r3, [sp, #24]
 80087c2:	aa09      	add	r2, sp, #36	; 0x24
 80087c4:	f7ff fede 	bl	8008584 <_printf_common>
 80087c8:	1c43      	adds	r3, r0, #1
 80087ca:	d135      	bne.n	8008838 <_printf_i+0x1d4>
 80087cc:	2001      	movs	r0, #1
 80087ce:	4240      	negs	r0, r0
 80087d0:	b00b      	add	sp, #44	; 0x2c
 80087d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80087d4:	2220      	movs	r2, #32
 80087d6:	6809      	ldr	r1, [r1, #0]
 80087d8:	430a      	orrs	r2, r1
 80087da:	6022      	str	r2, [r4, #0]
 80087dc:	0022      	movs	r2, r4
 80087de:	2178      	movs	r1, #120	; 0x78
 80087e0:	3245      	adds	r2, #69	; 0x45
 80087e2:	7011      	strb	r1, [r2, #0]
 80087e4:	4a27      	ldr	r2, [pc, #156]	; (8008884 <_printf_i+0x220>)
 80087e6:	e7a7      	b.n	8008738 <_printf_i+0xd4>
 80087e8:	0648      	lsls	r0, r1, #25
 80087ea:	d5ac      	bpl.n	8008746 <_printf_i+0xe2>
 80087ec:	b2ad      	uxth	r5, r5
 80087ee:	e7aa      	b.n	8008746 <_printf_i+0xe2>
 80087f0:	681a      	ldr	r2, [r3, #0]
 80087f2:	680d      	ldr	r5, [r1, #0]
 80087f4:	1d10      	adds	r0, r2, #4
 80087f6:	6949      	ldr	r1, [r1, #20]
 80087f8:	6018      	str	r0, [r3, #0]
 80087fa:	6813      	ldr	r3, [r2, #0]
 80087fc:	062e      	lsls	r6, r5, #24
 80087fe:	d501      	bpl.n	8008804 <_printf_i+0x1a0>
 8008800:	6019      	str	r1, [r3, #0]
 8008802:	e002      	b.n	800880a <_printf_i+0x1a6>
 8008804:	066d      	lsls	r5, r5, #25
 8008806:	d5fb      	bpl.n	8008800 <_printf_i+0x19c>
 8008808:	8019      	strh	r1, [r3, #0]
 800880a:	2300      	movs	r3, #0
 800880c:	9e04      	ldr	r6, [sp, #16]
 800880e:	6123      	str	r3, [r4, #16]
 8008810:	e7d2      	b.n	80087b8 <_printf_i+0x154>
 8008812:	681a      	ldr	r2, [r3, #0]
 8008814:	1d11      	adds	r1, r2, #4
 8008816:	6019      	str	r1, [r3, #0]
 8008818:	6816      	ldr	r6, [r2, #0]
 800881a:	2100      	movs	r1, #0
 800881c:	0030      	movs	r0, r6
 800881e:	6862      	ldr	r2, [r4, #4]
 8008820:	f002 fc90 	bl	800b144 <memchr>
 8008824:	2800      	cmp	r0, #0
 8008826:	d001      	beq.n	800882c <_printf_i+0x1c8>
 8008828:	1b80      	subs	r0, r0, r6
 800882a:	6060      	str	r0, [r4, #4]
 800882c:	6863      	ldr	r3, [r4, #4]
 800882e:	6123      	str	r3, [r4, #16]
 8008830:	2300      	movs	r3, #0
 8008832:	9a04      	ldr	r2, [sp, #16]
 8008834:	7013      	strb	r3, [r2, #0]
 8008836:	e7bf      	b.n	80087b8 <_printf_i+0x154>
 8008838:	6923      	ldr	r3, [r4, #16]
 800883a:	0032      	movs	r2, r6
 800883c:	9906      	ldr	r1, [sp, #24]
 800883e:	9805      	ldr	r0, [sp, #20]
 8008840:	9d07      	ldr	r5, [sp, #28]
 8008842:	47a8      	blx	r5
 8008844:	1c43      	adds	r3, r0, #1
 8008846:	d0c1      	beq.n	80087cc <_printf_i+0x168>
 8008848:	6823      	ldr	r3, [r4, #0]
 800884a:	079b      	lsls	r3, r3, #30
 800884c:	d415      	bmi.n	800887a <_printf_i+0x216>
 800884e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008850:	68e0      	ldr	r0, [r4, #12]
 8008852:	4298      	cmp	r0, r3
 8008854:	dabc      	bge.n	80087d0 <_printf_i+0x16c>
 8008856:	0018      	movs	r0, r3
 8008858:	e7ba      	b.n	80087d0 <_printf_i+0x16c>
 800885a:	0022      	movs	r2, r4
 800885c:	2301      	movs	r3, #1
 800885e:	9906      	ldr	r1, [sp, #24]
 8008860:	9805      	ldr	r0, [sp, #20]
 8008862:	9e07      	ldr	r6, [sp, #28]
 8008864:	3219      	adds	r2, #25
 8008866:	47b0      	blx	r6
 8008868:	1c43      	adds	r3, r0, #1
 800886a:	d0af      	beq.n	80087cc <_printf_i+0x168>
 800886c:	3501      	adds	r5, #1
 800886e:	68e3      	ldr	r3, [r4, #12]
 8008870:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008872:	1a9b      	subs	r3, r3, r2
 8008874:	42ab      	cmp	r3, r5
 8008876:	dcf0      	bgt.n	800885a <_printf_i+0x1f6>
 8008878:	e7e9      	b.n	800884e <_printf_i+0x1ea>
 800887a:	2500      	movs	r5, #0
 800887c:	e7f7      	b.n	800886e <_printf_i+0x20a>
 800887e:	46c0      	nop			; (mov r8, r8)
 8008880:	0800d39e 	.word	0x0800d39e
 8008884:	0800d3af 	.word	0x0800d3af

08008888 <_scanf_float>:
 8008888:	b5f0      	push	{r4, r5, r6, r7, lr}
 800888a:	b08b      	sub	sp, #44	; 0x2c
 800888c:	0015      	movs	r5, r2
 800888e:	9001      	str	r0, [sp, #4]
 8008890:	22ae      	movs	r2, #174	; 0xae
 8008892:	2000      	movs	r0, #0
 8008894:	9306      	str	r3, [sp, #24]
 8008896:	688b      	ldr	r3, [r1, #8]
 8008898:	000e      	movs	r6, r1
 800889a:	1e59      	subs	r1, r3, #1
 800889c:	0052      	lsls	r2, r2, #1
 800889e:	9005      	str	r0, [sp, #20]
 80088a0:	4291      	cmp	r1, r2
 80088a2:	d905      	bls.n	80088b0 <_scanf_float+0x28>
 80088a4:	3b5e      	subs	r3, #94	; 0x5e
 80088a6:	3bff      	subs	r3, #255	; 0xff
 80088a8:	9305      	str	r3, [sp, #20]
 80088aa:	235e      	movs	r3, #94	; 0x5e
 80088ac:	33ff      	adds	r3, #255	; 0xff
 80088ae:	60b3      	str	r3, [r6, #8]
 80088b0:	23f0      	movs	r3, #240	; 0xf0
 80088b2:	6832      	ldr	r2, [r6, #0]
 80088b4:	00db      	lsls	r3, r3, #3
 80088b6:	4313      	orrs	r3, r2
 80088b8:	6033      	str	r3, [r6, #0]
 80088ba:	0033      	movs	r3, r6
 80088bc:	2400      	movs	r4, #0
 80088be:	331c      	adds	r3, #28
 80088c0:	001f      	movs	r7, r3
 80088c2:	9303      	str	r3, [sp, #12]
 80088c4:	9402      	str	r4, [sp, #8]
 80088c6:	9408      	str	r4, [sp, #32]
 80088c8:	9407      	str	r4, [sp, #28]
 80088ca:	9400      	str	r4, [sp, #0]
 80088cc:	9404      	str	r4, [sp, #16]
 80088ce:	68b2      	ldr	r2, [r6, #8]
 80088d0:	2a00      	cmp	r2, #0
 80088d2:	d00a      	beq.n	80088ea <_scanf_float+0x62>
 80088d4:	682b      	ldr	r3, [r5, #0]
 80088d6:	781b      	ldrb	r3, [r3, #0]
 80088d8:	2b4e      	cmp	r3, #78	; 0x4e
 80088da:	d844      	bhi.n	8008966 <_scanf_float+0xde>
 80088dc:	0018      	movs	r0, r3
 80088de:	2b40      	cmp	r3, #64	; 0x40
 80088e0:	d82c      	bhi.n	800893c <_scanf_float+0xb4>
 80088e2:	382b      	subs	r0, #43	; 0x2b
 80088e4:	b2c1      	uxtb	r1, r0
 80088e6:	290e      	cmp	r1, #14
 80088e8:	d92a      	bls.n	8008940 <_scanf_float+0xb8>
 80088ea:	9b00      	ldr	r3, [sp, #0]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d003      	beq.n	80088f8 <_scanf_float+0x70>
 80088f0:	6832      	ldr	r2, [r6, #0]
 80088f2:	4ba4      	ldr	r3, [pc, #656]	; (8008b84 <_scanf_float+0x2fc>)
 80088f4:	4013      	ands	r3, r2
 80088f6:	6033      	str	r3, [r6, #0]
 80088f8:	9b02      	ldr	r3, [sp, #8]
 80088fa:	3b01      	subs	r3, #1
 80088fc:	2b01      	cmp	r3, #1
 80088fe:	d900      	bls.n	8008902 <_scanf_float+0x7a>
 8008900:	e0f9      	b.n	8008af6 <_scanf_float+0x26e>
 8008902:	24be      	movs	r4, #190	; 0xbe
 8008904:	0064      	lsls	r4, r4, #1
 8008906:	9b03      	ldr	r3, [sp, #12]
 8008908:	429f      	cmp	r7, r3
 800890a:	d900      	bls.n	800890e <_scanf_float+0x86>
 800890c:	e0e9      	b.n	8008ae2 <_scanf_float+0x25a>
 800890e:	2301      	movs	r3, #1
 8008910:	9302      	str	r3, [sp, #8]
 8008912:	e185      	b.n	8008c20 <_scanf_float+0x398>
 8008914:	0018      	movs	r0, r3
 8008916:	3861      	subs	r0, #97	; 0x61
 8008918:	280d      	cmp	r0, #13
 800891a:	d8e6      	bhi.n	80088ea <_scanf_float+0x62>
 800891c:	f7f7 fc06 	bl	800012c <__gnu_thumb1_case_shi>
 8008920:	ffe50083 	.word	0xffe50083
 8008924:	ffe5ffe5 	.word	0xffe5ffe5
 8008928:	00a200b6 	.word	0x00a200b6
 800892c:	ffe5ffe5 	.word	0xffe5ffe5
 8008930:	ffe50089 	.word	0xffe50089
 8008934:	ffe5ffe5 	.word	0xffe5ffe5
 8008938:	0065ffe5 	.word	0x0065ffe5
 800893c:	3841      	subs	r0, #65	; 0x41
 800893e:	e7eb      	b.n	8008918 <_scanf_float+0x90>
 8008940:	280e      	cmp	r0, #14
 8008942:	d8d2      	bhi.n	80088ea <_scanf_float+0x62>
 8008944:	f7f7 fbf2 	bl	800012c <__gnu_thumb1_case_shi>
 8008948:	ffd1004b 	.word	0xffd1004b
 800894c:	0098004b 	.word	0x0098004b
 8008950:	0020ffd1 	.word	0x0020ffd1
 8008954:	00400040 	.word	0x00400040
 8008958:	00400040 	.word	0x00400040
 800895c:	00400040 	.word	0x00400040
 8008960:	00400040 	.word	0x00400040
 8008964:	0040      	.short	0x0040
 8008966:	2b6e      	cmp	r3, #110	; 0x6e
 8008968:	d809      	bhi.n	800897e <_scanf_float+0xf6>
 800896a:	2b60      	cmp	r3, #96	; 0x60
 800896c:	d8d2      	bhi.n	8008914 <_scanf_float+0x8c>
 800896e:	2b54      	cmp	r3, #84	; 0x54
 8008970:	d07d      	beq.n	8008a6e <_scanf_float+0x1e6>
 8008972:	2b59      	cmp	r3, #89	; 0x59
 8008974:	d1b9      	bne.n	80088ea <_scanf_float+0x62>
 8008976:	2c07      	cmp	r4, #7
 8008978:	d1b7      	bne.n	80088ea <_scanf_float+0x62>
 800897a:	2408      	movs	r4, #8
 800897c:	e02c      	b.n	80089d8 <_scanf_float+0x150>
 800897e:	2b74      	cmp	r3, #116	; 0x74
 8008980:	d075      	beq.n	8008a6e <_scanf_float+0x1e6>
 8008982:	2b79      	cmp	r3, #121	; 0x79
 8008984:	d0f7      	beq.n	8008976 <_scanf_float+0xee>
 8008986:	e7b0      	b.n	80088ea <_scanf_float+0x62>
 8008988:	6831      	ldr	r1, [r6, #0]
 800898a:	05c8      	lsls	r0, r1, #23
 800898c:	d51c      	bpl.n	80089c8 <_scanf_float+0x140>
 800898e:	2380      	movs	r3, #128	; 0x80
 8008990:	4399      	bics	r1, r3
 8008992:	9b00      	ldr	r3, [sp, #0]
 8008994:	6031      	str	r1, [r6, #0]
 8008996:	3301      	adds	r3, #1
 8008998:	9300      	str	r3, [sp, #0]
 800899a:	9b05      	ldr	r3, [sp, #20]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d003      	beq.n	80089a8 <_scanf_float+0x120>
 80089a0:	3b01      	subs	r3, #1
 80089a2:	3201      	adds	r2, #1
 80089a4:	9305      	str	r3, [sp, #20]
 80089a6:	60b2      	str	r2, [r6, #8]
 80089a8:	68b3      	ldr	r3, [r6, #8]
 80089aa:	3b01      	subs	r3, #1
 80089ac:	60b3      	str	r3, [r6, #8]
 80089ae:	6933      	ldr	r3, [r6, #16]
 80089b0:	3301      	adds	r3, #1
 80089b2:	6133      	str	r3, [r6, #16]
 80089b4:	686b      	ldr	r3, [r5, #4]
 80089b6:	3b01      	subs	r3, #1
 80089b8:	606b      	str	r3, [r5, #4]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	dc00      	bgt.n	80089c0 <_scanf_float+0x138>
 80089be:	e086      	b.n	8008ace <_scanf_float+0x246>
 80089c0:	682b      	ldr	r3, [r5, #0]
 80089c2:	3301      	adds	r3, #1
 80089c4:	602b      	str	r3, [r5, #0]
 80089c6:	e782      	b.n	80088ce <_scanf_float+0x46>
 80089c8:	9a02      	ldr	r2, [sp, #8]
 80089ca:	1912      	adds	r2, r2, r4
 80089cc:	2a00      	cmp	r2, #0
 80089ce:	d18c      	bne.n	80088ea <_scanf_float+0x62>
 80089d0:	4a6d      	ldr	r2, [pc, #436]	; (8008b88 <_scanf_float+0x300>)
 80089d2:	6831      	ldr	r1, [r6, #0]
 80089d4:	400a      	ands	r2, r1
 80089d6:	6032      	str	r2, [r6, #0]
 80089d8:	703b      	strb	r3, [r7, #0]
 80089da:	3701      	adds	r7, #1
 80089dc:	e7e4      	b.n	80089a8 <_scanf_float+0x120>
 80089de:	2180      	movs	r1, #128	; 0x80
 80089e0:	6832      	ldr	r2, [r6, #0]
 80089e2:	420a      	tst	r2, r1
 80089e4:	d081      	beq.n	80088ea <_scanf_float+0x62>
 80089e6:	438a      	bics	r2, r1
 80089e8:	e7f5      	b.n	80089d6 <_scanf_float+0x14e>
 80089ea:	9a02      	ldr	r2, [sp, #8]
 80089ec:	2a00      	cmp	r2, #0
 80089ee:	d10f      	bne.n	8008a10 <_scanf_float+0x188>
 80089f0:	9a00      	ldr	r2, [sp, #0]
 80089f2:	2a00      	cmp	r2, #0
 80089f4:	d10f      	bne.n	8008a16 <_scanf_float+0x18e>
 80089f6:	6832      	ldr	r2, [r6, #0]
 80089f8:	21e0      	movs	r1, #224	; 0xe0
 80089fa:	0010      	movs	r0, r2
 80089fc:	00c9      	lsls	r1, r1, #3
 80089fe:	4008      	ands	r0, r1
 8008a00:	4288      	cmp	r0, r1
 8008a02:	d108      	bne.n	8008a16 <_scanf_float+0x18e>
 8008a04:	4961      	ldr	r1, [pc, #388]	; (8008b8c <_scanf_float+0x304>)
 8008a06:	400a      	ands	r2, r1
 8008a08:	6032      	str	r2, [r6, #0]
 8008a0a:	2201      	movs	r2, #1
 8008a0c:	9202      	str	r2, [sp, #8]
 8008a0e:	e7e3      	b.n	80089d8 <_scanf_float+0x150>
 8008a10:	9a02      	ldr	r2, [sp, #8]
 8008a12:	2a02      	cmp	r2, #2
 8008a14:	d059      	beq.n	8008aca <_scanf_float+0x242>
 8008a16:	2c01      	cmp	r4, #1
 8008a18:	d002      	beq.n	8008a20 <_scanf_float+0x198>
 8008a1a:	2c04      	cmp	r4, #4
 8008a1c:	d000      	beq.n	8008a20 <_scanf_float+0x198>
 8008a1e:	e764      	b.n	80088ea <_scanf_float+0x62>
 8008a20:	3401      	adds	r4, #1
 8008a22:	b2e4      	uxtb	r4, r4
 8008a24:	e7d8      	b.n	80089d8 <_scanf_float+0x150>
 8008a26:	9a02      	ldr	r2, [sp, #8]
 8008a28:	2a01      	cmp	r2, #1
 8008a2a:	d000      	beq.n	8008a2e <_scanf_float+0x1a6>
 8008a2c:	e75d      	b.n	80088ea <_scanf_float+0x62>
 8008a2e:	2202      	movs	r2, #2
 8008a30:	e7ec      	b.n	8008a0c <_scanf_float+0x184>
 8008a32:	2c00      	cmp	r4, #0
 8008a34:	d110      	bne.n	8008a58 <_scanf_float+0x1d0>
 8008a36:	9a00      	ldr	r2, [sp, #0]
 8008a38:	2a00      	cmp	r2, #0
 8008a3a:	d000      	beq.n	8008a3e <_scanf_float+0x1b6>
 8008a3c:	e758      	b.n	80088f0 <_scanf_float+0x68>
 8008a3e:	6832      	ldr	r2, [r6, #0]
 8008a40:	21e0      	movs	r1, #224	; 0xe0
 8008a42:	0010      	movs	r0, r2
 8008a44:	00c9      	lsls	r1, r1, #3
 8008a46:	4008      	ands	r0, r1
 8008a48:	4288      	cmp	r0, r1
 8008a4a:	d000      	beq.n	8008a4e <_scanf_float+0x1c6>
 8008a4c:	e754      	b.n	80088f8 <_scanf_float+0x70>
 8008a4e:	494f      	ldr	r1, [pc, #316]	; (8008b8c <_scanf_float+0x304>)
 8008a50:	3401      	adds	r4, #1
 8008a52:	400a      	ands	r2, r1
 8008a54:	6032      	str	r2, [r6, #0]
 8008a56:	e7bf      	b.n	80089d8 <_scanf_float+0x150>
 8008a58:	21fd      	movs	r1, #253	; 0xfd
 8008a5a:	1ee2      	subs	r2, r4, #3
 8008a5c:	420a      	tst	r2, r1
 8008a5e:	d000      	beq.n	8008a62 <_scanf_float+0x1da>
 8008a60:	e743      	b.n	80088ea <_scanf_float+0x62>
 8008a62:	e7dd      	b.n	8008a20 <_scanf_float+0x198>
 8008a64:	2c02      	cmp	r4, #2
 8008a66:	d000      	beq.n	8008a6a <_scanf_float+0x1e2>
 8008a68:	e73f      	b.n	80088ea <_scanf_float+0x62>
 8008a6a:	2403      	movs	r4, #3
 8008a6c:	e7b4      	b.n	80089d8 <_scanf_float+0x150>
 8008a6e:	2c06      	cmp	r4, #6
 8008a70:	d000      	beq.n	8008a74 <_scanf_float+0x1ec>
 8008a72:	e73a      	b.n	80088ea <_scanf_float+0x62>
 8008a74:	2407      	movs	r4, #7
 8008a76:	e7af      	b.n	80089d8 <_scanf_float+0x150>
 8008a78:	6832      	ldr	r2, [r6, #0]
 8008a7a:	0591      	lsls	r1, r2, #22
 8008a7c:	d400      	bmi.n	8008a80 <_scanf_float+0x1f8>
 8008a7e:	e734      	b.n	80088ea <_scanf_float+0x62>
 8008a80:	4943      	ldr	r1, [pc, #268]	; (8008b90 <_scanf_float+0x308>)
 8008a82:	400a      	ands	r2, r1
 8008a84:	6032      	str	r2, [r6, #0]
 8008a86:	9a00      	ldr	r2, [sp, #0]
 8008a88:	9204      	str	r2, [sp, #16]
 8008a8a:	e7a5      	b.n	80089d8 <_scanf_float+0x150>
 8008a8c:	21a0      	movs	r1, #160	; 0xa0
 8008a8e:	2080      	movs	r0, #128	; 0x80
 8008a90:	6832      	ldr	r2, [r6, #0]
 8008a92:	00c9      	lsls	r1, r1, #3
 8008a94:	4011      	ands	r1, r2
 8008a96:	00c0      	lsls	r0, r0, #3
 8008a98:	4281      	cmp	r1, r0
 8008a9a:	d006      	beq.n	8008aaa <_scanf_float+0x222>
 8008a9c:	4202      	tst	r2, r0
 8008a9e:	d100      	bne.n	8008aa2 <_scanf_float+0x21a>
 8008aa0:	e723      	b.n	80088ea <_scanf_float+0x62>
 8008aa2:	9900      	ldr	r1, [sp, #0]
 8008aa4:	2900      	cmp	r1, #0
 8008aa6:	d100      	bne.n	8008aaa <_scanf_float+0x222>
 8008aa8:	e726      	b.n	80088f8 <_scanf_float+0x70>
 8008aaa:	0591      	lsls	r1, r2, #22
 8008aac:	d404      	bmi.n	8008ab8 <_scanf_float+0x230>
 8008aae:	9900      	ldr	r1, [sp, #0]
 8008ab0:	9804      	ldr	r0, [sp, #16]
 8008ab2:	9708      	str	r7, [sp, #32]
 8008ab4:	1a09      	subs	r1, r1, r0
 8008ab6:	9107      	str	r1, [sp, #28]
 8008ab8:	4934      	ldr	r1, [pc, #208]	; (8008b8c <_scanf_float+0x304>)
 8008aba:	400a      	ands	r2, r1
 8008abc:	21c0      	movs	r1, #192	; 0xc0
 8008abe:	0049      	lsls	r1, r1, #1
 8008ac0:	430a      	orrs	r2, r1
 8008ac2:	6032      	str	r2, [r6, #0]
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	9200      	str	r2, [sp, #0]
 8008ac8:	e786      	b.n	80089d8 <_scanf_float+0x150>
 8008aca:	2203      	movs	r2, #3
 8008acc:	e79e      	b.n	8008a0c <_scanf_float+0x184>
 8008ace:	23c0      	movs	r3, #192	; 0xc0
 8008ad0:	005b      	lsls	r3, r3, #1
 8008ad2:	0029      	movs	r1, r5
 8008ad4:	58f3      	ldr	r3, [r6, r3]
 8008ad6:	9801      	ldr	r0, [sp, #4]
 8008ad8:	4798      	blx	r3
 8008ada:	2800      	cmp	r0, #0
 8008adc:	d100      	bne.n	8008ae0 <_scanf_float+0x258>
 8008ade:	e6f6      	b.n	80088ce <_scanf_float+0x46>
 8008ae0:	e703      	b.n	80088ea <_scanf_float+0x62>
 8008ae2:	3f01      	subs	r7, #1
 8008ae4:	5933      	ldr	r3, [r6, r4]
 8008ae6:	002a      	movs	r2, r5
 8008ae8:	7839      	ldrb	r1, [r7, #0]
 8008aea:	9801      	ldr	r0, [sp, #4]
 8008aec:	4798      	blx	r3
 8008aee:	6933      	ldr	r3, [r6, #16]
 8008af0:	3b01      	subs	r3, #1
 8008af2:	6133      	str	r3, [r6, #16]
 8008af4:	e707      	b.n	8008906 <_scanf_float+0x7e>
 8008af6:	1e63      	subs	r3, r4, #1
 8008af8:	2b06      	cmp	r3, #6
 8008afa:	d80e      	bhi.n	8008b1a <_scanf_float+0x292>
 8008afc:	9702      	str	r7, [sp, #8]
 8008afe:	2c02      	cmp	r4, #2
 8008b00:	d920      	bls.n	8008b44 <_scanf_float+0x2bc>
 8008b02:	1be3      	subs	r3, r4, r7
 8008b04:	b2db      	uxtb	r3, r3
 8008b06:	9305      	str	r3, [sp, #20]
 8008b08:	9b02      	ldr	r3, [sp, #8]
 8008b0a:	9a05      	ldr	r2, [sp, #20]
 8008b0c:	189b      	adds	r3, r3, r2
 8008b0e:	b2db      	uxtb	r3, r3
 8008b10:	2b03      	cmp	r3, #3
 8008b12:	d827      	bhi.n	8008b64 <_scanf_float+0x2dc>
 8008b14:	3c03      	subs	r4, #3
 8008b16:	b2e4      	uxtb	r4, r4
 8008b18:	1b3f      	subs	r7, r7, r4
 8008b1a:	6833      	ldr	r3, [r6, #0]
 8008b1c:	05da      	lsls	r2, r3, #23
 8008b1e:	d554      	bpl.n	8008bca <_scanf_float+0x342>
 8008b20:	055b      	lsls	r3, r3, #21
 8008b22:	d537      	bpl.n	8008b94 <_scanf_float+0x30c>
 8008b24:	24be      	movs	r4, #190	; 0xbe
 8008b26:	0064      	lsls	r4, r4, #1
 8008b28:	9b03      	ldr	r3, [sp, #12]
 8008b2a:	429f      	cmp	r7, r3
 8008b2c:	d800      	bhi.n	8008b30 <_scanf_float+0x2a8>
 8008b2e:	e6ee      	b.n	800890e <_scanf_float+0x86>
 8008b30:	3f01      	subs	r7, #1
 8008b32:	5933      	ldr	r3, [r6, r4]
 8008b34:	002a      	movs	r2, r5
 8008b36:	7839      	ldrb	r1, [r7, #0]
 8008b38:	9801      	ldr	r0, [sp, #4]
 8008b3a:	4798      	blx	r3
 8008b3c:	6933      	ldr	r3, [r6, #16]
 8008b3e:	3b01      	subs	r3, #1
 8008b40:	6133      	str	r3, [r6, #16]
 8008b42:	e7f1      	b.n	8008b28 <_scanf_float+0x2a0>
 8008b44:	24be      	movs	r4, #190	; 0xbe
 8008b46:	0064      	lsls	r4, r4, #1
 8008b48:	9b03      	ldr	r3, [sp, #12]
 8008b4a:	429f      	cmp	r7, r3
 8008b4c:	d800      	bhi.n	8008b50 <_scanf_float+0x2c8>
 8008b4e:	e6de      	b.n	800890e <_scanf_float+0x86>
 8008b50:	3f01      	subs	r7, #1
 8008b52:	5933      	ldr	r3, [r6, r4]
 8008b54:	002a      	movs	r2, r5
 8008b56:	7839      	ldrb	r1, [r7, #0]
 8008b58:	9801      	ldr	r0, [sp, #4]
 8008b5a:	4798      	blx	r3
 8008b5c:	6933      	ldr	r3, [r6, #16]
 8008b5e:	3b01      	subs	r3, #1
 8008b60:	6133      	str	r3, [r6, #16]
 8008b62:	e7f1      	b.n	8008b48 <_scanf_float+0x2c0>
 8008b64:	9b02      	ldr	r3, [sp, #8]
 8008b66:	002a      	movs	r2, r5
 8008b68:	3b01      	subs	r3, #1
 8008b6a:	7819      	ldrb	r1, [r3, #0]
 8008b6c:	9302      	str	r3, [sp, #8]
 8008b6e:	23be      	movs	r3, #190	; 0xbe
 8008b70:	005b      	lsls	r3, r3, #1
 8008b72:	58f3      	ldr	r3, [r6, r3]
 8008b74:	9801      	ldr	r0, [sp, #4]
 8008b76:	9309      	str	r3, [sp, #36]	; 0x24
 8008b78:	4798      	blx	r3
 8008b7a:	6933      	ldr	r3, [r6, #16]
 8008b7c:	3b01      	subs	r3, #1
 8008b7e:	6133      	str	r3, [r6, #16]
 8008b80:	e7c2      	b.n	8008b08 <_scanf_float+0x280>
 8008b82:	46c0      	nop			; (mov r8, r8)
 8008b84:	fffffeff 	.word	0xfffffeff
 8008b88:	fffffe7f 	.word	0xfffffe7f
 8008b8c:	fffff87f 	.word	0xfffff87f
 8008b90:	fffffd7f 	.word	0xfffffd7f
 8008b94:	6933      	ldr	r3, [r6, #16]
 8008b96:	1e7c      	subs	r4, r7, #1
 8008b98:	7821      	ldrb	r1, [r4, #0]
 8008b9a:	3b01      	subs	r3, #1
 8008b9c:	6133      	str	r3, [r6, #16]
 8008b9e:	2965      	cmp	r1, #101	; 0x65
 8008ba0:	d00c      	beq.n	8008bbc <_scanf_float+0x334>
 8008ba2:	2945      	cmp	r1, #69	; 0x45
 8008ba4:	d00a      	beq.n	8008bbc <_scanf_float+0x334>
 8008ba6:	23be      	movs	r3, #190	; 0xbe
 8008ba8:	005b      	lsls	r3, r3, #1
 8008baa:	58f3      	ldr	r3, [r6, r3]
 8008bac:	002a      	movs	r2, r5
 8008bae:	9801      	ldr	r0, [sp, #4]
 8008bb0:	4798      	blx	r3
 8008bb2:	6933      	ldr	r3, [r6, #16]
 8008bb4:	1ebc      	subs	r4, r7, #2
 8008bb6:	3b01      	subs	r3, #1
 8008bb8:	7821      	ldrb	r1, [r4, #0]
 8008bba:	6133      	str	r3, [r6, #16]
 8008bbc:	23be      	movs	r3, #190	; 0xbe
 8008bbe:	005b      	lsls	r3, r3, #1
 8008bc0:	002a      	movs	r2, r5
 8008bc2:	58f3      	ldr	r3, [r6, r3]
 8008bc4:	9801      	ldr	r0, [sp, #4]
 8008bc6:	4798      	blx	r3
 8008bc8:	0027      	movs	r7, r4
 8008bca:	6832      	ldr	r2, [r6, #0]
 8008bcc:	2310      	movs	r3, #16
 8008bce:	0011      	movs	r1, r2
 8008bd0:	4019      	ands	r1, r3
 8008bd2:	9102      	str	r1, [sp, #8]
 8008bd4:	421a      	tst	r2, r3
 8008bd6:	d158      	bne.n	8008c8a <_scanf_float+0x402>
 8008bd8:	23c0      	movs	r3, #192	; 0xc0
 8008bda:	7039      	strb	r1, [r7, #0]
 8008bdc:	6832      	ldr	r2, [r6, #0]
 8008bde:	00db      	lsls	r3, r3, #3
 8008be0:	4013      	ands	r3, r2
 8008be2:	2280      	movs	r2, #128	; 0x80
 8008be4:	00d2      	lsls	r2, r2, #3
 8008be6:	4293      	cmp	r3, r2
 8008be8:	d11d      	bne.n	8008c26 <_scanf_float+0x39e>
 8008bea:	9b04      	ldr	r3, [sp, #16]
 8008bec:	9a00      	ldr	r2, [sp, #0]
 8008bee:	9900      	ldr	r1, [sp, #0]
 8008bf0:	1a9a      	subs	r2, r3, r2
 8008bf2:	428b      	cmp	r3, r1
 8008bf4:	d124      	bne.n	8008c40 <_scanf_float+0x3b8>
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	9903      	ldr	r1, [sp, #12]
 8008bfa:	9801      	ldr	r0, [sp, #4]
 8008bfc:	f000 fec6 	bl	800998c <_strtod_r>
 8008c00:	9b06      	ldr	r3, [sp, #24]
 8008c02:	000d      	movs	r5, r1
 8008c04:	6831      	ldr	r1, [r6, #0]
 8008c06:	0004      	movs	r4, r0
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	078a      	lsls	r2, r1, #30
 8008c0c:	d525      	bpl.n	8008c5a <_scanf_float+0x3d2>
 8008c0e:	1d1a      	adds	r2, r3, #4
 8008c10:	9906      	ldr	r1, [sp, #24]
 8008c12:	600a      	str	r2, [r1, #0]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	601c      	str	r4, [r3, #0]
 8008c18:	605d      	str	r5, [r3, #4]
 8008c1a:	68f3      	ldr	r3, [r6, #12]
 8008c1c:	3301      	adds	r3, #1
 8008c1e:	60f3      	str	r3, [r6, #12]
 8008c20:	9802      	ldr	r0, [sp, #8]
 8008c22:	b00b      	add	sp, #44	; 0x2c
 8008c24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c26:	9b07      	ldr	r3, [sp, #28]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d0e4      	beq.n	8008bf6 <_scanf_float+0x36e>
 8008c2c:	9b08      	ldr	r3, [sp, #32]
 8008c2e:	9a02      	ldr	r2, [sp, #8]
 8008c30:	1c59      	adds	r1, r3, #1
 8008c32:	9801      	ldr	r0, [sp, #4]
 8008c34:	230a      	movs	r3, #10
 8008c36:	f000 ff3f 	bl	8009ab8 <_strtol_r>
 8008c3a:	9b07      	ldr	r3, [sp, #28]
 8008c3c:	9f08      	ldr	r7, [sp, #32]
 8008c3e:	1ac2      	subs	r2, r0, r3
 8008c40:	0033      	movs	r3, r6
 8008c42:	3370      	adds	r3, #112	; 0x70
 8008c44:	33ff      	adds	r3, #255	; 0xff
 8008c46:	429f      	cmp	r7, r3
 8008c48:	d302      	bcc.n	8008c50 <_scanf_float+0x3c8>
 8008c4a:	0037      	movs	r7, r6
 8008c4c:	376f      	adds	r7, #111	; 0x6f
 8008c4e:	37ff      	adds	r7, #255	; 0xff
 8008c50:	0038      	movs	r0, r7
 8008c52:	490f      	ldr	r1, [pc, #60]	; (8008c90 <_scanf_float+0x408>)
 8008c54:	f000 f83e 	bl	8008cd4 <siprintf>
 8008c58:	e7cd      	b.n	8008bf6 <_scanf_float+0x36e>
 8008c5a:	1d1a      	adds	r2, r3, #4
 8008c5c:	0749      	lsls	r1, r1, #29
 8008c5e:	d4d7      	bmi.n	8008c10 <_scanf_float+0x388>
 8008c60:	9906      	ldr	r1, [sp, #24]
 8008c62:	0020      	movs	r0, r4
 8008c64:	600a      	str	r2, [r1, #0]
 8008c66:	681f      	ldr	r7, [r3, #0]
 8008c68:	0022      	movs	r2, r4
 8008c6a:	002b      	movs	r3, r5
 8008c6c:	0029      	movs	r1, r5
 8008c6e:	f7f9 fb33 	bl	80022d8 <__aeabi_dcmpun>
 8008c72:	2800      	cmp	r0, #0
 8008c74:	d004      	beq.n	8008c80 <_scanf_float+0x3f8>
 8008c76:	4807      	ldr	r0, [pc, #28]	; (8008c94 <_scanf_float+0x40c>)
 8008c78:	f000 f828 	bl	8008ccc <nanf>
 8008c7c:	6038      	str	r0, [r7, #0]
 8008c7e:	e7cc      	b.n	8008c1a <_scanf_float+0x392>
 8008c80:	0020      	movs	r0, r4
 8008c82:	0029      	movs	r1, r5
 8008c84:	f7f9 fbd2 	bl	800242c <__aeabi_d2f>
 8008c88:	e7f8      	b.n	8008c7c <_scanf_float+0x3f4>
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	e640      	b.n	8008910 <_scanf_float+0x88>
 8008c8e:	46c0      	nop			; (mov r8, r8)
 8008c90:	0800d3c0 	.word	0x0800d3c0
 8008c94:	0800d838 	.word	0x0800d838

08008c98 <iprintf>:
 8008c98:	b40f      	push	{r0, r1, r2, r3}
 8008c9a:	4b0b      	ldr	r3, [pc, #44]	; (8008cc8 <iprintf+0x30>)
 8008c9c:	b513      	push	{r0, r1, r4, lr}
 8008c9e:	681c      	ldr	r4, [r3, #0]
 8008ca0:	2c00      	cmp	r4, #0
 8008ca2:	d005      	beq.n	8008cb0 <iprintf+0x18>
 8008ca4:	69a3      	ldr	r3, [r4, #24]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d102      	bne.n	8008cb0 <iprintf+0x18>
 8008caa:	0020      	movs	r0, r4
 8008cac:	f001 fe14 	bl	800a8d8 <__sinit>
 8008cb0:	ab05      	add	r3, sp, #20
 8008cb2:	0020      	movs	r0, r4
 8008cb4:	9a04      	ldr	r2, [sp, #16]
 8008cb6:	68a1      	ldr	r1, [r4, #8]
 8008cb8:	9301      	str	r3, [sp, #4]
 8008cba:	f003 f961 	bl	800bf80 <_vfiprintf_r>
 8008cbe:	bc16      	pop	{r1, r2, r4}
 8008cc0:	bc08      	pop	{r3}
 8008cc2:	b004      	add	sp, #16
 8008cc4:	4718      	bx	r3
 8008cc6:	46c0      	nop			; (mov r8, r8)
 8008cc8:	20000010 	.word	0x20000010

08008ccc <nanf>:
 8008ccc:	4800      	ldr	r0, [pc, #0]	; (8008cd0 <nanf+0x4>)
 8008cce:	4770      	bx	lr
 8008cd0:	7fc00000 	.word	0x7fc00000

08008cd4 <siprintf>:
 8008cd4:	b40e      	push	{r1, r2, r3}
 8008cd6:	b500      	push	{lr}
 8008cd8:	490b      	ldr	r1, [pc, #44]	; (8008d08 <siprintf+0x34>)
 8008cda:	b09c      	sub	sp, #112	; 0x70
 8008cdc:	ab1d      	add	r3, sp, #116	; 0x74
 8008cde:	9002      	str	r0, [sp, #8]
 8008ce0:	9006      	str	r0, [sp, #24]
 8008ce2:	9107      	str	r1, [sp, #28]
 8008ce4:	9104      	str	r1, [sp, #16]
 8008ce6:	4809      	ldr	r0, [pc, #36]	; (8008d0c <siprintf+0x38>)
 8008ce8:	4909      	ldr	r1, [pc, #36]	; (8008d10 <siprintf+0x3c>)
 8008cea:	cb04      	ldmia	r3!, {r2}
 8008cec:	9105      	str	r1, [sp, #20]
 8008cee:	6800      	ldr	r0, [r0, #0]
 8008cf0:	a902      	add	r1, sp, #8
 8008cf2:	9301      	str	r3, [sp, #4]
 8008cf4:	f003 f81c 	bl	800bd30 <_svfiprintf_r>
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	9a02      	ldr	r2, [sp, #8]
 8008cfc:	7013      	strb	r3, [r2, #0]
 8008cfe:	b01c      	add	sp, #112	; 0x70
 8008d00:	bc08      	pop	{r3}
 8008d02:	b003      	add	sp, #12
 8008d04:	4718      	bx	r3
 8008d06:	46c0      	nop			; (mov r8, r8)
 8008d08:	7fffffff 	.word	0x7fffffff
 8008d0c:	20000010 	.word	0x20000010
 8008d10:	ffff0208 	.word	0xffff0208

08008d14 <sulp>:
 8008d14:	b570      	push	{r4, r5, r6, lr}
 8008d16:	0016      	movs	r6, r2
 8008d18:	000d      	movs	r5, r1
 8008d1a:	f002 fdad 	bl	800b878 <__ulp>
 8008d1e:	2e00      	cmp	r6, #0
 8008d20:	d00d      	beq.n	8008d3e <sulp+0x2a>
 8008d22:	236b      	movs	r3, #107	; 0x6b
 8008d24:	006a      	lsls	r2, r5, #1
 8008d26:	0d52      	lsrs	r2, r2, #21
 8008d28:	1a9b      	subs	r3, r3, r2
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	dd07      	ble.n	8008d3e <sulp+0x2a>
 8008d2e:	2400      	movs	r4, #0
 8008d30:	4a03      	ldr	r2, [pc, #12]	; (8008d40 <sulp+0x2c>)
 8008d32:	051b      	lsls	r3, r3, #20
 8008d34:	189d      	adds	r5, r3, r2
 8008d36:	002b      	movs	r3, r5
 8008d38:	0022      	movs	r2, r4
 8008d3a:	f7f8 fccf 	bl	80016dc <__aeabi_dmul>
 8008d3e:	bd70      	pop	{r4, r5, r6, pc}
 8008d40:	3ff00000 	.word	0x3ff00000

08008d44 <_strtod_l>:
 8008d44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d46:	001d      	movs	r5, r3
 8008d48:	2300      	movs	r3, #0
 8008d4a:	b0a7      	sub	sp, #156	; 0x9c
 8008d4c:	9322      	str	r3, [sp, #136]	; 0x88
 8008d4e:	4bae      	ldr	r3, [pc, #696]	; (8009008 <_strtod_l+0x2c4>)
 8008d50:	9005      	str	r0, [sp, #20]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	9108      	str	r1, [sp, #32]
 8008d56:	0018      	movs	r0, r3
 8008d58:	9307      	str	r3, [sp, #28]
 8008d5a:	921d      	str	r2, [sp, #116]	; 0x74
 8008d5c:	f7f7 f9d4 	bl	8000108 <strlen>
 8008d60:	2600      	movs	r6, #0
 8008d62:	0004      	movs	r4, r0
 8008d64:	2700      	movs	r7, #0
 8008d66:	9b08      	ldr	r3, [sp, #32]
 8008d68:	9321      	str	r3, [sp, #132]	; 0x84
 8008d6a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008d6c:	7813      	ldrb	r3, [r2, #0]
 8008d6e:	2b2b      	cmp	r3, #43	; 0x2b
 8008d70:	d058      	beq.n	8008e24 <_strtod_l+0xe0>
 8008d72:	d844      	bhi.n	8008dfe <_strtod_l+0xba>
 8008d74:	2b0d      	cmp	r3, #13
 8008d76:	d83d      	bhi.n	8008df4 <_strtod_l+0xb0>
 8008d78:	2b08      	cmp	r3, #8
 8008d7a:	d83d      	bhi.n	8008df8 <_strtod_l+0xb4>
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d047      	beq.n	8008e10 <_strtod_l+0xcc>
 8008d80:	2300      	movs	r3, #0
 8008d82:	9310      	str	r3, [sp, #64]	; 0x40
 8008d84:	2200      	movs	r2, #0
 8008d86:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008d88:	920a      	str	r2, [sp, #40]	; 0x28
 8008d8a:	9306      	str	r3, [sp, #24]
 8008d8c:	781b      	ldrb	r3, [r3, #0]
 8008d8e:	2b30      	cmp	r3, #48	; 0x30
 8008d90:	d000      	beq.n	8008d94 <_strtod_l+0x50>
 8008d92:	e083      	b.n	8008e9c <_strtod_l+0x158>
 8008d94:	9b06      	ldr	r3, [sp, #24]
 8008d96:	3220      	adds	r2, #32
 8008d98:	785b      	ldrb	r3, [r3, #1]
 8008d9a:	4393      	bics	r3, r2
 8008d9c:	2b58      	cmp	r3, #88	; 0x58
 8008d9e:	d000      	beq.n	8008da2 <_strtod_l+0x5e>
 8008da0:	e072      	b.n	8008e88 <_strtod_l+0x144>
 8008da2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008da4:	9502      	str	r5, [sp, #8]
 8008da6:	9301      	str	r3, [sp, #4]
 8008da8:	ab22      	add	r3, sp, #136	; 0x88
 8008daa:	9300      	str	r3, [sp, #0]
 8008dac:	4a97      	ldr	r2, [pc, #604]	; (800900c <_strtod_l+0x2c8>)
 8008dae:	ab23      	add	r3, sp, #140	; 0x8c
 8008db0:	9805      	ldr	r0, [sp, #20]
 8008db2:	a921      	add	r1, sp, #132	; 0x84
 8008db4:	f001 fe9a 	bl	800aaec <__gethex>
 8008db8:	2307      	movs	r3, #7
 8008dba:	0005      	movs	r5, r0
 8008dbc:	0004      	movs	r4, r0
 8008dbe:	401d      	ands	r5, r3
 8008dc0:	4218      	tst	r0, r3
 8008dc2:	d006      	beq.n	8008dd2 <_strtod_l+0x8e>
 8008dc4:	2d06      	cmp	r5, #6
 8008dc6:	d12f      	bne.n	8008e28 <_strtod_l+0xe4>
 8008dc8:	9b06      	ldr	r3, [sp, #24]
 8008dca:	3301      	adds	r3, #1
 8008dcc:	9321      	str	r3, [sp, #132]	; 0x84
 8008dce:	2300      	movs	r3, #0
 8008dd0:	9310      	str	r3, [sp, #64]	; 0x40
 8008dd2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d002      	beq.n	8008dde <_strtod_l+0x9a>
 8008dd8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008dda:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008ddc:	601a      	str	r2, [r3, #0]
 8008dde:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d01c      	beq.n	8008e1e <_strtod_l+0xda>
 8008de4:	2380      	movs	r3, #128	; 0x80
 8008de6:	0032      	movs	r2, r6
 8008de8:	061b      	lsls	r3, r3, #24
 8008dea:	18fb      	adds	r3, r7, r3
 8008dec:	0010      	movs	r0, r2
 8008dee:	0019      	movs	r1, r3
 8008df0:	b027      	add	sp, #156	; 0x9c
 8008df2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008df4:	2b20      	cmp	r3, #32
 8008df6:	d1c3      	bne.n	8008d80 <_strtod_l+0x3c>
 8008df8:	3201      	adds	r2, #1
 8008dfa:	9221      	str	r2, [sp, #132]	; 0x84
 8008dfc:	e7b5      	b.n	8008d6a <_strtod_l+0x26>
 8008dfe:	2b2d      	cmp	r3, #45	; 0x2d
 8008e00:	d1be      	bne.n	8008d80 <_strtod_l+0x3c>
 8008e02:	3b2c      	subs	r3, #44	; 0x2c
 8008e04:	9310      	str	r3, [sp, #64]	; 0x40
 8008e06:	1c53      	adds	r3, r2, #1
 8008e08:	9321      	str	r3, [sp, #132]	; 0x84
 8008e0a:	7853      	ldrb	r3, [r2, #1]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d1b9      	bne.n	8008d84 <_strtod_l+0x40>
 8008e10:	9b08      	ldr	r3, [sp, #32]
 8008e12:	9321      	str	r3, [sp, #132]	; 0x84
 8008e14:	2300      	movs	r3, #0
 8008e16:	9310      	str	r3, [sp, #64]	; 0x40
 8008e18:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d1dc      	bne.n	8008dd8 <_strtod_l+0x94>
 8008e1e:	0032      	movs	r2, r6
 8008e20:	003b      	movs	r3, r7
 8008e22:	e7e3      	b.n	8008dec <_strtod_l+0xa8>
 8008e24:	2300      	movs	r3, #0
 8008e26:	e7ed      	b.n	8008e04 <_strtod_l+0xc0>
 8008e28:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008e2a:	2a00      	cmp	r2, #0
 8008e2c:	d007      	beq.n	8008e3e <_strtod_l+0xfa>
 8008e2e:	2135      	movs	r1, #53	; 0x35
 8008e30:	a824      	add	r0, sp, #144	; 0x90
 8008e32:	f002 fe20 	bl	800ba76 <__copybits>
 8008e36:	9922      	ldr	r1, [sp, #136]	; 0x88
 8008e38:	9805      	ldr	r0, [sp, #20]
 8008e3a:	f002 f9db 	bl	800b1f4 <_Bfree>
 8008e3e:	1e68      	subs	r0, r5, #1
 8008e40:	2805      	cmp	r0, #5
 8008e42:	d806      	bhi.n	8008e52 <_strtod_l+0x10e>
 8008e44:	f7f7 f968 	bl	8000118 <__gnu_thumb1_case_uqi>
 8008e48:	1c190b0e 	.word	0x1c190b0e
 8008e4c:	030e      	.short	0x030e
 8008e4e:	2700      	movs	r7, #0
 8008e50:	003e      	movs	r6, r7
 8008e52:	0723      	lsls	r3, r4, #28
 8008e54:	d5bd      	bpl.n	8008dd2 <_strtod_l+0x8e>
 8008e56:	2380      	movs	r3, #128	; 0x80
 8008e58:	061b      	lsls	r3, r3, #24
 8008e5a:	431f      	orrs	r7, r3
 8008e5c:	e7b9      	b.n	8008dd2 <_strtod_l+0x8e>
 8008e5e:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8008e60:	9f25      	ldr	r7, [sp, #148]	; 0x94
 8008e62:	e7f6      	b.n	8008e52 <_strtod_l+0x10e>
 8008e64:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8008e66:	4a6a      	ldr	r2, [pc, #424]	; (8009010 <_strtod_l+0x2cc>)
 8008e68:	496a      	ldr	r1, [pc, #424]	; (8009014 <_strtod_l+0x2d0>)
 8008e6a:	401a      	ands	r2, r3
 8008e6c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008e6e:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8008e70:	185b      	adds	r3, r3, r1
 8008e72:	051b      	lsls	r3, r3, #20
 8008e74:	431a      	orrs	r2, r3
 8008e76:	0017      	movs	r7, r2
 8008e78:	e7eb      	b.n	8008e52 <_strtod_l+0x10e>
 8008e7a:	2600      	movs	r6, #0
 8008e7c:	4f66      	ldr	r7, [pc, #408]	; (8009018 <_strtod_l+0x2d4>)
 8008e7e:	e7e8      	b.n	8008e52 <_strtod_l+0x10e>
 8008e80:	2601      	movs	r6, #1
 8008e82:	4f66      	ldr	r7, [pc, #408]	; (800901c <_strtod_l+0x2d8>)
 8008e84:	4276      	negs	r6, r6
 8008e86:	e7e4      	b.n	8008e52 <_strtod_l+0x10e>
 8008e88:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008e8a:	1c5a      	adds	r2, r3, #1
 8008e8c:	9221      	str	r2, [sp, #132]	; 0x84
 8008e8e:	785b      	ldrb	r3, [r3, #1]
 8008e90:	2b30      	cmp	r3, #48	; 0x30
 8008e92:	d0f9      	beq.n	8008e88 <_strtod_l+0x144>
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d09c      	beq.n	8008dd2 <_strtod_l+0x8e>
 8008e98:	2301      	movs	r3, #1
 8008e9a:	930a      	str	r3, [sp, #40]	; 0x28
 8008e9c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008e9e:	220a      	movs	r2, #10
 8008ea0:	9311      	str	r3, [sp, #68]	; 0x44
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	930e      	str	r3, [sp, #56]	; 0x38
 8008ea6:	930b      	str	r3, [sp, #44]	; 0x2c
 8008ea8:	9309      	str	r3, [sp, #36]	; 0x24
 8008eaa:	9821      	ldr	r0, [sp, #132]	; 0x84
 8008eac:	7805      	ldrb	r5, [r0, #0]
 8008eae:	002b      	movs	r3, r5
 8008eb0:	3b30      	subs	r3, #48	; 0x30
 8008eb2:	b2d9      	uxtb	r1, r3
 8008eb4:	2909      	cmp	r1, #9
 8008eb6:	d927      	bls.n	8008f08 <_strtod_l+0x1c4>
 8008eb8:	0022      	movs	r2, r4
 8008eba:	9907      	ldr	r1, [sp, #28]
 8008ebc:	f003 f9fe 	bl	800c2bc <strncmp>
 8008ec0:	2800      	cmp	r0, #0
 8008ec2:	d033      	beq.n	8008f2c <_strtod_l+0x1e8>
 8008ec4:	2000      	movs	r0, #0
 8008ec6:	002b      	movs	r3, r5
 8008ec8:	4684      	mov	ip, r0
 8008eca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008ecc:	900c      	str	r0, [sp, #48]	; 0x30
 8008ece:	9206      	str	r2, [sp, #24]
 8008ed0:	2220      	movs	r2, #32
 8008ed2:	0019      	movs	r1, r3
 8008ed4:	4391      	bics	r1, r2
 8008ed6:	000a      	movs	r2, r1
 8008ed8:	2100      	movs	r1, #0
 8008eda:	9107      	str	r1, [sp, #28]
 8008edc:	2a45      	cmp	r2, #69	; 0x45
 8008ede:	d000      	beq.n	8008ee2 <_strtod_l+0x19e>
 8008ee0:	e0c5      	b.n	800906e <_strtod_l+0x32a>
 8008ee2:	9b06      	ldr	r3, [sp, #24]
 8008ee4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008ee6:	4303      	orrs	r3, r0
 8008ee8:	4313      	orrs	r3, r2
 8008eea:	428b      	cmp	r3, r1
 8008eec:	d090      	beq.n	8008e10 <_strtod_l+0xcc>
 8008eee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008ef0:	9308      	str	r3, [sp, #32]
 8008ef2:	3301      	adds	r3, #1
 8008ef4:	9321      	str	r3, [sp, #132]	; 0x84
 8008ef6:	9b08      	ldr	r3, [sp, #32]
 8008ef8:	785b      	ldrb	r3, [r3, #1]
 8008efa:	2b2b      	cmp	r3, #43	; 0x2b
 8008efc:	d075      	beq.n	8008fea <_strtod_l+0x2a6>
 8008efe:	000c      	movs	r4, r1
 8008f00:	2b2d      	cmp	r3, #45	; 0x2d
 8008f02:	d178      	bne.n	8008ff6 <_strtod_l+0x2b2>
 8008f04:	2401      	movs	r4, #1
 8008f06:	e071      	b.n	8008fec <_strtod_l+0x2a8>
 8008f08:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008f0a:	2908      	cmp	r1, #8
 8008f0c:	dc09      	bgt.n	8008f22 <_strtod_l+0x1de>
 8008f0e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008f10:	4351      	muls	r1, r2
 8008f12:	185b      	adds	r3, r3, r1
 8008f14:	930b      	str	r3, [sp, #44]	; 0x2c
 8008f16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f18:	3001      	adds	r0, #1
 8008f1a:	3301      	adds	r3, #1
 8008f1c:	9309      	str	r3, [sp, #36]	; 0x24
 8008f1e:	9021      	str	r0, [sp, #132]	; 0x84
 8008f20:	e7c3      	b.n	8008eaa <_strtod_l+0x166>
 8008f22:	990e      	ldr	r1, [sp, #56]	; 0x38
 8008f24:	4351      	muls	r1, r2
 8008f26:	185b      	adds	r3, r3, r1
 8008f28:	930e      	str	r3, [sp, #56]	; 0x38
 8008f2a:	e7f4      	b.n	8008f16 <_strtod_l+0x1d2>
 8008f2c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008f2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008f30:	191c      	adds	r4, r3, r4
 8008f32:	9421      	str	r4, [sp, #132]	; 0x84
 8008f34:	7823      	ldrb	r3, [r4, #0]
 8008f36:	2a00      	cmp	r2, #0
 8008f38:	d039      	beq.n	8008fae <_strtod_l+0x26a>
 8008f3a:	900c      	str	r0, [sp, #48]	; 0x30
 8008f3c:	9206      	str	r2, [sp, #24]
 8008f3e:	001a      	movs	r2, r3
 8008f40:	3a30      	subs	r2, #48	; 0x30
 8008f42:	2a09      	cmp	r2, #9
 8008f44:	d912      	bls.n	8008f6c <_strtod_l+0x228>
 8008f46:	2201      	movs	r2, #1
 8008f48:	4694      	mov	ip, r2
 8008f4a:	e7c1      	b.n	8008ed0 <_strtod_l+0x18c>
 8008f4c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008f4e:	3001      	adds	r0, #1
 8008f50:	1c5a      	adds	r2, r3, #1
 8008f52:	9221      	str	r2, [sp, #132]	; 0x84
 8008f54:	785b      	ldrb	r3, [r3, #1]
 8008f56:	2b30      	cmp	r3, #48	; 0x30
 8008f58:	d0f8      	beq.n	8008f4c <_strtod_l+0x208>
 8008f5a:	001a      	movs	r2, r3
 8008f5c:	3a31      	subs	r2, #49	; 0x31
 8008f5e:	2a08      	cmp	r2, #8
 8008f60:	d83e      	bhi.n	8008fe0 <_strtod_l+0x29c>
 8008f62:	900c      	str	r0, [sp, #48]	; 0x30
 8008f64:	2000      	movs	r0, #0
 8008f66:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008f68:	9006      	str	r0, [sp, #24]
 8008f6a:	9211      	str	r2, [sp, #68]	; 0x44
 8008f6c:	001a      	movs	r2, r3
 8008f6e:	9906      	ldr	r1, [sp, #24]
 8008f70:	1c44      	adds	r4, r0, #1
 8008f72:	3a30      	subs	r2, #48	; 0x30
 8008f74:	2b30      	cmp	r3, #48	; 0x30
 8008f76:	d013      	beq.n	8008fa0 <_strtod_l+0x25c>
 8008f78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008f7a:	191b      	adds	r3, r3, r4
 8008f7c:	930c      	str	r3, [sp, #48]	; 0x30
 8008f7e:	1844      	adds	r4, r0, r1
 8008f80:	000b      	movs	r3, r1
 8008f82:	210a      	movs	r1, #10
 8008f84:	429c      	cmp	r4, r3
 8008f86:	d114      	bne.n	8008fb2 <_strtod_l+0x26e>
 8008f88:	9b06      	ldr	r3, [sp, #24]
 8008f8a:	1c59      	adds	r1, r3, #1
 8008f8c:	1809      	adds	r1, r1, r0
 8008f8e:	1818      	adds	r0, r3, r0
 8008f90:	2808      	cmp	r0, #8
 8008f92:	dc1c      	bgt.n	8008fce <_strtod_l+0x28a>
 8008f94:	230a      	movs	r3, #10
 8008f96:	2400      	movs	r4, #0
 8008f98:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8008f9a:	4343      	muls	r3, r0
 8008f9c:	18d3      	adds	r3, r2, r3
 8008f9e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008fa0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008fa2:	0020      	movs	r0, r4
 8008fa4:	1c5a      	adds	r2, r3, #1
 8008fa6:	9221      	str	r2, [sp, #132]	; 0x84
 8008fa8:	785b      	ldrb	r3, [r3, #1]
 8008faa:	9106      	str	r1, [sp, #24]
 8008fac:	e7c7      	b.n	8008f3e <_strtod_l+0x1fa>
 8008fae:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008fb0:	e7d1      	b.n	8008f56 <_strtod_l+0x212>
 8008fb2:	2b08      	cmp	r3, #8
 8008fb4:	dc04      	bgt.n	8008fc0 <_strtod_l+0x27c>
 8008fb6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8008fb8:	434d      	muls	r5, r1
 8008fba:	950b      	str	r5, [sp, #44]	; 0x2c
 8008fbc:	3301      	adds	r3, #1
 8008fbe:	e7e1      	b.n	8008f84 <_strtod_l+0x240>
 8008fc0:	1c5d      	adds	r5, r3, #1
 8008fc2:	2d10      	cmp	r5, #16
 8008fc4:	dcfa      	bgt.n	8008fbc <_strtod_l+0x278>
 8008fc6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8008fc8:	434d      	muls	r5, r1
 8008fca:	950e      	str	r5, [sp, #56]	; 0x38
 8008fcc:	e7f6      	b.n	8008fbc <_strtod_l+0x278>
 8008fce:	2400      	movs	r4, #0
 8008fd0:	2910      	cmp	r1, #16
 8008fd2:	dce5      	bgt.n	8008fa0 <_strtod_l+0x25c>
 8008fd4:	230a      	movs	r3, #10
 8008fd6:	980e      	ldr	r0, [sp, #56]	; 0x38
 8008fd8:	4343      	muls	r3, r0
 8008fda:	18d3      	adds	r3, r2, r3
 8008fdc:	930e      	str	r3, [sp, #56]	; 0x38
 8008fde:	e7df      	b.n	8008fa0 <_strtod_l+0x25c>
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	920c      	str	r2, [sp, #48]	; 0x30
 8008fe4:	9206      	str	r2, [sp, #24]
 8008fe6:	3201      	adds	r2, #1
 8008fe8:	e7ae      	b.n	8008f48 <_strtod_l+0x204>
 8008fea:	2400      	movs	r4, #0
 8008fec:	9b08      	ldr	r3, [sp, #32]
 8008fee:	3302      	adds	r3, #2
 8008ff0:	9321      	str	r3, [sp, #132]	; 0x84
 8008ff2:	9b08      	ldr	r3, [sp, #32]
 8008ff4:	789b      	ldrb	r3, [r3, #2]
 8008ff6:	001a      	movs	r2, r3
 8008ff8:	3a30      	subs	r2, #48	; 0x30
 8008ffa:	2a09      	cmp	r2, #9
 8008ffc:	d914      	bls.n	8009028 <_strtod_l+0x2e4>
 8008ffe:	9a08      	ldr	r2, [sp, #32]
 8009000:	9221      	str	r2, [sp, #132]	; 0x84
 8009002:	2200      	movs	r2, #0
 8009004:	e032      	b.n	800906c <_strtod_l+0x328>
 8009006:	46c0      	nop			; (mov r8, r8)
 8009008:	0800d67c 	.word	0x0800d67c
 800900c:	0800d3c8 	.word	0x0800d3c8
 8009010:	ffefffff 	.word	0xffefffff
 8009014:	00000433 	.word	0x00000433
 8009018:	7ff00000 	.word	0x7ff00000
 800901c:	7fffffff 	.word	0x7fffffff
 8009020:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009022:	1c5a      	adds	r2, r3, #1
 8009024:	9221      	str	r2, [sp, #132]	; 0x84
 8009026:	785b      	ldrb	r3, [r3, #1]
 8009028:	2b30      	cmp	r3, #48	; 0x30
 800902a:	d0f9      	beq.n	8009020 <_strtod_l+0x2dc>
 800902c:	2200      	movs	r2, #0
 800902e:	9207      	str	r2, [sp, #28]
 8009030:	001a      	movs	r2, r3
 8009032:	3a31      	subs	r2, #49	; 0x31
 8009034:	2a08      	cmp	r2, #8
 8009036:	d81a      	bhi.n	800906e <_strtod_l+0x32a>
 8009038:	3b30      	subs	r3, #48	; 0x30
 800903a:	001a      	movs	r2, r3
 800903c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800903e:	9307      	str	r3, [sp, #28]
 8009040:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009042:	1c59      	adds	r1, r3, #1
 8009044:	9121      	str	r1, [sp, #132]	; 0x84
 8009046:	785b      	ldrb	r3, [r3, #1]
 8009048:	001d      	movs	r5, r3
 800904a:	3d30      	subs	r5, #48	; 0x30
 800904c:	2d09      	cmp	r5, #9
 800904e:	d939      	bls.n	80090c4 <_strtod_l+0x380>
 8009050:	9d07      	ldr	r5, [sp, #28]
 8009052:	1b49      	subs	r1, r1, r5
 8009054:	4daf      	ldr	r5, [pc, #700]	; (8009314 <_strtod_l+0x5d0>)
 8009056:	9507      	str	r5, [sp, #28]
 8009058:	2908      	cmp	r1, #8
 800905a:	dc03      	bgt.n	8009064 <_strtod_l+0x320>
 800905c:	9207      	str	r2, [sp, #28]
 800905e:	42aa      	cmp	r2, r5
 8009060:	dd00      	ble.n	8009064 <_strtod_l+0x320>
 8009062:	9507      	str	r5, [sp, #28]
 8009064:	2c00      	cmp	r4, #0
 8009066:	d002      	beq.n	800906e <_strtod_l+0x32a>
 8009068:	9a07      	ldr	r2, [sp, #28]
 800906a:	4252      	negs	r2, r2
 800906c:	9207      	str	r2, [sp, #28]
 800906e:	9a06      	ldr	r2, [sp, #24]
 8009070:	2a00      	cmp	r2, #0
 8009072:	d14b      	bne.n	800910c <_strtod_l+0x3c8>
 8009074:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009076:	4310      	orrs	r0, r2
 8009078:	d000      	beq.n	800907c <_strtod_l+0x338>
 800907a:	e6aa      	b.n	8008dd2 <_strtod_l+0x8e>
 800907c:	4662      	mov	r2, ip
 800907e:	2a00      	cmp	r2, #0
 8009080:	d000      	beq.n	8009084 <_strtod_l+0x340>
 8009082:	e6c5      	b.n	8008e10 <_strtod_l+0xcc>
 8009084:	2b69      	cmp	r3, #105	; 0x69
 8009086:	d025      	beq.n	80090d4 <_strtod_l+0x390>
 8009088:	dc21      	bgt.n	80090ce <_strtod_l+0x38a>
 800908a:	2b49      	cmp	r3, #73	; 0x49
 800908c:	d022      	beq.n	80090d4 <_strtod_l+0x390>
 800908e:	2b4e      	cmp	r3, #78	; 0x4e
 8009090:	d000      	beq.n	8009094 <_strtod_l+0x350>
 8009092:	e6bd      	b.n	8008e10 <_strtod_l+0xcc>
 8009094:	49a0      	ldr	r1, [pc, #640]	; (8009318 <_strtod_l+0x5d4>)
 8009096:	a821      	add	r0, sp, #132	; 0x84
 8009098:	f001 ff76 	bl	800af88 <__match>
 800909c:	2800      	cmp	r0, #0
 800909e:	d100      	bne.n	80090a2 <_strtod_l+0x35e>
 80090a0:	e6b6      	b.n	8008e10 <_strtod_l+0xcc>
 80090a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80090a4:	781b      	ldrb	r3, [r3, #0]
 80090a6:	2b28      	cmp	r3, #40	; 0x28
 80090a8:	d12a      	bne.n	8009100 <_strtod_l+0x3bc>
 80090aa:	499c      	ldr	r1, [pc, #624]	; (800931c <_strtod_l+0x5d8>)
 80090ac:	aa24      	add	r2, sp, #144	; 0x90
 80090ae:	a821      	add	r0, sp, #132	; 0x84
 80090b0:	f001 ff7e 	bl	800afb0 <__hexnan>
 80090b4:	2805      	cmp	r0, #5
 80090b6:	d123      	bne.n	8009100 <_strtod_l+0x3bc>
 80090b8:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80090ba:	4a99      	ldr	r2, [pc, #612]	; (8009320 <_strtod_l+0x5dc>)
 80090bc:	9e24      	ldr	r6, [sp, #144]	; 0x90
 80090be:	431a      	orrs	r2, r3
 80090c0:	0017      	movs	r7, r2
 80090c2:	e686      	b.n	8008dd2 <_strtod_l+0x8e>
 80090c4:	210a      	movs	r1, #10
 80090c6:	434a      	muls	r2, r1
 80090c8:	18d2      	adds	r2, r2, r3
 80090ca:	3a30      	subs	r2, #48	; 0x30
 80090cc:	e7b8      	b.n	8009040 <_strtod_l+0x2fc>
 80090ce:	2b6e      	cmp	r3, #110	; 0x6e
 80090d0:	d0e0      	beq.n	8009094 <_strtod_l+0x350>
 80090d2:	e69d      	b.n	8008e10 <_strtod_l+0xcc>
 80090d4:	4993      	ldr	r1, [pc, #588]	; (8009324 <_strtod_l+0x5e0>)
 80090d6:	a821      	add	r0, sp, #132	; 0x84
 80090d8:	f001 ff56 	bl	800af88 <__match>
 80090dc:	2800      	cmp	r0, #0
 80090de:	d100      	bne.n	80090e2 <_strtod_l+0x39e>
 80090e0:	e696      	b.n	8008e10 <_strtod_l+0xcc>
 80090e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80090e4:	4990      	ldr	r1, [pc, #576]	; (8009328 <_strtod_l+0x5e4>)
 80090e6:	3b01      	subs	r3, #1
 80090e8:	a821      	add	r0, sp, #132	; 0x84
 80090ea:	9321      	str	r3, [sp, #132]	; 0x84
 80090ec:	f001 ff4c 	bl	800af88 <__match>
 80090f0:	2800      	cmp	r0, #0
 80090f2:	d102      	bne.n	80090fa <_strtod_l+0x3b6>
 80090f4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80090f6:	3301      	adds	r3, #1
 80090f8:	9321      	str	r3, [sp, #132]	; 0x84
 80090fa:	2600      	movs	r6, #0
 80090fc:	4f88      	ldr	r7, [pc, #544]	; (8009320 <_strtod_l+0x5dc>)
 80090fe:	e668      	b.n	8008dd2 <_strtod_l+0x8e>
 8009100:	488a      	ldr	r0, [pc, #552]	; (800932c <_strtod_l+0x5e8>)
 8009102:	f003 f877 	bl	800c1f4 <nan>
 8009106:	0006      	movs	r6, r0
 8009108:	000f      	movs	r7, r1
 800910a:	e662      	b.n	8008dd2 <_strtod_l+0x8e>
 800910c:	9b07      	ldr	r3, [sp, #28]
 800910e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009110:	1a9b      	subs	r3, r3, r2
 8009112:	930a      	str	r3, [sp, #40]	; 0x28
 8009114:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009116:	2b00      	cmp	r3, #0
 8009118:	d101      	bne.n	800911e <_strtod_l+0x3da>
 800911a:	9b06      	ldr	r3, [sp, #24]
 800911c:	9309      	str	r3, [sp, #36]	; 0x24
 800911e:	9c06      	ldr	r4, [sp, #24]
 8009120:	2c10      	cmp	r4, #16
 8009122:	dd00      	ble.n	8009126 <_strtod_l+0x3e2>
 8009124:	2410      	movs	r4, #16
 8009126:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8009128:	f7f9 f95a 	bl	80023e0 <__aeabi_ui2d>
 800912c:	9b06      	ldr	r3, [sp, #24]
 800912e:	0006      	movs	r6, r0
 8009130:	000f      	movs	r7, r1
 8009132:	2b09      	cmp	r3, #9
 8009134:	dd15      	ble.n	8009162 <_strtod_l+0x41e>
 8009136:	0022      	movs	r2, r4
 8009138:	4b7d      	ldr	r3, [pc, #500]	; (8009330 <_strtod_l+0x5ec>)
 800913a:	3a09      	subs	r2, #9
 800913c:	00d2      	lsls	r2, r2, #3
 800913e:	189b      	adds	r3, r3, r2
 8009140:	681a      	ldr	r2, [r3, #0]
 8009142:	685b      	ldr	r3, [r3, #4]
 8009144:	f7f8 faca 	bl	80016dc <__aeabi_dmul>
 8009148:	0006      	movs	r6, r0
 800914a:	980e      	ldr	r0, [sp, #56]	; 0x38
 800914c:	000f      	movs	r7, r1
 800914e:	f7f9 f947 	bl	80023e0 <__aeabi_ui2d>
 8009152:	0002      	movs	r2, r0
 8009154:	000b      	movs	r3, r1
 8009156:	0030      	movs	r0, r6
 8009158:	0039      	movs	r1, r7
 800915a:	f7f7 fb4f 	bl	80007fc <__aeabi_dadd>
 800915e:	0006      	movs	r6, r0
 8009160:	000f      	movs	r7, r1
 8009162:	9b06      	ldr	r3, [sp, #24]
 8009164:	2b0f      	cmp	r3, #15
 8009166:	dc39      	bgt.n	80091dc <_strtod_l+0x498>
 8009168:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800916a:	2b00      	cmp	r3, #0
 800916c:	d100      	bne.n	8009170 <_strtod_l+0x42c>
 800916e:	e630      	b.n	8008dd2 <_strtod_l+0x8e>
 8009170:	dd24      	ble.n	80091bc <_strtod_l+0x478>
 8009172:	2b16      	cmp	r3, #22
 8009174:	dc09      	bgt.n	800918a <_strtod_l+0x446>
 8009176:	00dd      	lsls	r5, r3, #3
 8009178:	0032      	movs	r2, r6
 800917a:	003b      	movs	r3, r7
 800917c:	4c6c      	ldr	r4, [pc, #432]	; (8009330 <_strtod_l+0x5ec>)
 800917e:	1964      	adds	r4, r4, r5
 8009180:	6820      	ldr	r0, [r4, #0]
 8009182:	6861      	ldr	r1, [r4, #4]
 8009184:	f7f8 faaa 	bl	80016dc <__aeabi_dmul>
 8009188:	e7bd      	b.n	8009106 <_strtod_l+0x3c2>
 800918a:	2325      	movs	r3, #37	; 0x25
 800918c:	9a06      	ldr	r2, [sp, #24]
 800918e:	1a9b      	subs	r3, r3, r2
 8009190:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009192:	4293      	cmp	r3, r2
 8009194:	db22      	blt.n	80091dc <_strtod_l+0x498>
 8009196:	240f      	movs	r4, #15
 8009198:	9b06      	ldr	r3, [sp, #24]
 800919a:	4d65      	ldr	r5, [pc, #404]	; (8009330 <_strtod_l+0x5ec>)
 800919c:	1ae4      	subs	r4, r4, r3
 800919e:	00e1      	lsls	r1, r4, #3
 80091a0:	1869      	adds	r1, r5, r1
 80091a2:	0032      	movs	r2, r6
 80091a4:	6808      	ldr	r0, [r1, #0]
 80091a6:	6849      	ldr	r1, [r1, #4]
 80091a8:	003b      	movs	r3, r7
 80091aa:	f7f8 fa97 	bl	80016dc <__aeabi_dmul>
 80091ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80091b0:	1b1c      	subs	r4, r3, r4
 80091b2:	00e4      	lsls	r4, r4, #3
 80091b4:	192c      	adds	r4, r5, r4
 80091b6:	6822      	ldr	r2, [r4, #0]
 80091b8:	6863      	ldr	r3, [r4, #4]
 80091ba:	e7e3      	b.n	8009184 <_strtod_l+0x440>
 80091bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80091be:	3316      	adds	r3, #22
 80091c0:	db0c      	blt.n	80091dc <_strtod_l+0x498>
 80091c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80091c4:	9a07      	ldr	r2, [sp, #28]
 80091c6:	0030      	movs	r0, r6
 80091c8:	1a9a      	subs	r2, r3, r2
 80091ca:	4b59      	ldr	r3, [pc, #356]	; (8009330 <_strtod_l+0x5ec>)
 80091cc:	00d2      	lsls	r2, r2, #3
 80091ce:	189b      	adds	r3, r3, r2
 80091d0:	0039      	movs	r1, r7
 80091d2:	681a      	ldr	r2, [r3, #0]
 80091d4:	685b      	ldr	r3, [r3, #4]
 80091d6:	f7f7 fe7b 	bl	8000ed0 <__aeabi_ddiv>
 80091da:	e794      	b.n	8009106 <_strtod_l+0x3c2>
 80091dc:	9b06      	ldr	r3, [sp, #24]
 80091de:	1b1c      	subs	r4, r3, r4
 80091e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80091e2:	18e4      	adds	r4, r4, r3
 80091e4:	2c00      	cmp	r4, #0
 80091e6:	dd70      	ble.n	80092ca <_strtod_l+0x586>
 80091e8:	230f      	movs	r3, #15
 80091ea:	0021      	movs	r1, r4
 80091ec:	4019      	ands	r1, r3
 80091ee:	421c      	tst	r4, r3
 80091f0:	d00a      	beq.n	8009208 <_strtod_l+0x4c4>
 80091f2:	00cb      	lsls	r3, r1, #3
 80091f4:	494e      	ldr	r1, [pc, #312]	; (8009330 <_strtod_l+0x5ec>)
 80091f6:	0032      	movs	r2, r6
 80091f8:	18c9      	adds	r1, r1, r3
 80091fa:	6808      	ldr	r0, [r1, #0]
 80091fc:	6849      	ldr	r1, [r1, #4]
 80091fe:	003b      	movs	r3, r7
 8009200:	f7f8 fa6c 	bl	80016dc <__aeabi_dmul>
 8009204:	0006      	movs	r6, r0
 8009206:	000f      	movs	r7, r1
 8009208:	230f      	movs	r3, #15
 800920a:	439c      	bics	r4, r3
 800920c:	d048      	beq.n	80092a0 <_strtod_l+0x55c>
 800920e:	3326      	adds	r3, #38	; 0x26
 8009210:	33ff      	adds	r3, #255	; 0xff
 8009212:	429c      	cmp	r4, r3
 8009214:	dd22      	ble.n	800925c <_strtod_l+0x518>
 8009216:	2300      	movs	r3, #0
 8009218:	9306      	str	r3, [sp, #24]
 800921a:	9307      	str	r3, [sp, #28]
 800921c:	930b      	str	r3, [sp, #44]	; 0x2c
 800921e:	9309      	str	r3, [sp, #36]	; 0x24
 8009220:	2322      	movs	r3, #34	; 0x22
 8009222:	2600      	movs	r6, #0
 8009224:	9a05      	ldr	r2, [sp, #20]
 8009226:	4f3e      	ldr	r7, [pc, #248]	; (8009320 <_strtod_l+0x5dc>)
 8009228:	6013      	str	r3, [r2, #0]
 800922a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800922c:	42b3      	cmp	r3, r6
 800922e:	d100      	bne.n	8009232 <_strtod_l+0x4ee>
 8009230:	e5cf      	b.n	8008dd2 <_strtod_l+0x8e>
 8009232:	9922      	ldr	r1, [sp, #136]	; 0x88
 8009234:	9805      	ldr	r0, [sp, #20]
 8009236:	f001 ffdd 	bl	800b1f4 <_Bfree>
 800923a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800923c:	9805      	ldr	r0, [sp, #20]
 800923e:	f001 ffd9 	bl	800b1f4 <_Bfree>
 8009242:	9907      	ldr	r1, [sp, #28]
 8009244:	9805      	ldr	r0, [sp, #20]
 8009246:	f001 ffd5 	bl	800b1f4 <_Bfree>
 800924a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800924c:	9805      	ldr	r0, [sp, #20]
 800924e:	f001 ffd1 	bl	800b1f4 <_Bfree>
 8009252:	9906      	ldr	r1, [sp, #24]
 8009254:	9805      	ldr	r0, [sp, #20]
 8009256:	f001 ffcd 	bl	800b1f4 <_Bfree>
 800925a:	e5ba      	b.n	8008dd2 <_strtod_l+0x8e>
 800925c:	2300      	movs	r3, #0
 800925e:	0030      	movs	r0, r6
 8009260:	0039      	movs	r1, r7
 8009262:	001d      	movs	r5, r3
 8009264:	1124      	asrs	r4, r4, #4
 8009266:	2c01      	cmp	r4, #1
 8009268:	dc1d      	bgt.n	80092a6 <_strtod_l+0x562>
 800926a:	2b00      	cmp	r3, #0
 800926c:	d001      	beq.n	8009272 <_strtod_l+0x52e>
 800926e:	0006      	movs	r6, r0
 8009270:	000f      	movs	r7, r1
 8009272:	4b30      	ldr	r3, [pc, #192]	; (8009334 <_strtod_l+0x5f0>)
 8009274:	00ed      	lsls	r5, r5, #3
 8009276:	18ff      	adds	r7, r7, r3
 8009278:	4b2f      	ldr	r3, [pc, #188]	; (8009338 <_strtod_l+0x5f4>)
 800927a:	0032      	movs	r2, r6
 800927c:	195d      	adds	r5, r3, r5
 800927e:	6828      	ldr	r0, [r5, #0]
 8009280:	6869      	ldr	r1, [r5, #4]
 8009282:	003b      	movs	r3, r7
 8009284:	f7f8 fa2a 	bl	80016dc <__aeabi_dmul>
 8009288:	4b25      	ldr	r3, [pc, #148]	; (8009320 <_strtod_l+0x5dc>)
 800928a:	4a2c      	ldr	r2, [pc, #176]	; (800933c <_strtod_l+0x5f8>)
 800928c:	0006      	movs	r6, r0
 800928e:	400b      	ands	r3, r1
 8009290:	4293      	cmp	r3, r2
 8009292:	d8c0      	bhi.n	8009216 <_strtod_l+0x4d2>
 8009294:	4a2a      	ldr	r2, [pc, #168]	; (8009340 <_strtod_l+0x5fc>)
 8009296:	4293      	cmp	r3, r2
 8009298:	d913      	bls.n	80092c2 <_strtod_l+0x57e>
 800929a:	2601      	movs	r6, #1
 800929c:	4f29      	ldr	r7, [pc, #164]	; (8009344 <_strtod_l+0x600>)
 800929e:	4276      	negs	r6, r6
 80092a0:	2300      	movs	r3, #0
 80092a2:	9308      	str	r3, [sp, #32]
 80092a4:	e087      	b.n	80093b6 <_strtod_l+0x672>
 80092a6:	2201      	movs	r2, #1
 80092a8:	4214      	tst	r4, r2
 80092aa:	d007      	beq.n	80092bc <_strtod_l+0x578>
 80092ac:	4a22      	ldr	r2, [pc, #136]	; (8009338 <_strtod_l+0x5f4>)
 80092ae:	00eb      	lsls	r3, r5, #3
 80092b0:	189b      	adds	r3, r3, r2
 80092b2:	681a      	ldr	r2, [r3, #0]
 80092b4:	685b      	ldr	r3, [r3, #4]
 80092b6:	f7f8 fa11 	bl	80016dc <__aeabi_dmul>
 80092ba:	2301      	movs	r3, #1
 80092bc:	3501      	adds	r5, #1
 80092be:	1064      	asrs	r4, r4, #1
 80092c0:	e7d1      	b.n	8009266 <_strtod_l+0x522>
 80092c2:	23d4      	movs	r3, #212	; 0xd4
 80092c4:	049b      	lsls	r3, r3, #18
 80092c6:	18cf      	adds	r7, r1, r3
 80092c8:	e7ea      	b.n	80092a0 <_strtod_l+0x55c>
 80092ca:	2c00      	cmp	r4, #0
 80092cc:	d0e8      	beq.n	80092a0 <_strtod_l+0x55c>
 80092ce:	4264      	negs	r4, r4
 80092d0:	220f      	movs	r2, #15
 80092d2:	0023      	movs	r3, r4
 80092d4:	4013      	ands	r3, r2
 80092d6:	4214      	tst	r4, r2
 80092d8:	d00a      	beq.n	80092f0 <_strtod_l+0x5ac>
 80092da:	00da      	lsls	r2, r3, #3
 80092dc:	4b14      	ldr	r3, [pc, #80]	; (8009330 <_strtod_l+0x5ec>)
 80092de:	0030      	movs	r0, r6
 80092e0:	189b      	adds	r3, r3, r2
 80092e2:	0039      	movs	r1, r7
 80092e4:	681a      	ldr	r2, [r3, #0]
 80092e6:	685b      	ldr	r3, [r3, #4]
 80092e8:	f7f7 fdf2 	bl	8000ed0 <__aeabi_ddiv>
 80092ec:	0006      	movs	r6, r0
 80092ee:	000f      	movs	r7, r1
 80092f0:	1124      	asrs	r4, r4, #4
 80092f2:	d0d5      	beq.n	80092a0 <_strtod_l+0x55c>
 80092f4:	2c1f      	cmp	r4, #31
 80092f6:	dd27      	ble.n	8009348 <_strtod_l+0x604>
 80092f8:	2300      	movs	r3, #0
 80092fa:	9306      	str	r3, [sp, #24]
 80092fc:	9307      	str	r3, [sp, #28]
 80092fe:	930b      	str	r3, [sp, #44]	; 0x2c
 8009300:	9309      	str	r3, [sp, #36]	; 0x24
 8009302:	2322      	movs	r3, #34	; 0x22
 8009304:	9a05      	ldr	r2, [sp, #20]
 8009306:	2600      	movs	r6, #0
 8009308:	6013      	str	r3, [r2, #0]
 800930a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800930c:	2700      	movs	r7, #0
 800930e:	2b00      	cmp	r3, #0
 8009310:	d18f      	bne.n	8009232 <_strtod_l+0x4ee>
 8009312:	e55e      	b.n	8008dd2 <_strtod_l+0x8e>
 8009314:	00004e1f 	.word	0x00004e1f
 8009318:	0800d399 	.word	0x0800d399
 800931c:	0800d3dc 	.word	0x0800d3dc
 8009320:	7ff00000 	.word	0x7ff00000
 8009324:	0800d391 	.word	0x0800d391
 8009328:	0800d51c 	.word	0x0800d51c
 800932c:	0800d838 	.word	0x0800d838
 8009330:	0800d718 	.word	0x0800d718
 8009334:	fcb00000 	.word	0xfcb00000
 8009338:	0800d6f0 	.word	0x0800d6f0
 800933c:	7ca00000 	.word	0x7ca00000
 8009340:	7c900000 	.word	0x7c900000
 8009344:	7fefffff 	.word	0x7fefffff
 8009348:	2310      	movs	r3, #16
 800934a:	0022      	movs	r2, r4
 800934c:	401a      	ands	r2, r3
 800934e:	9208      	str	r2, [sp, #32]
 8009350:	421c      	tst	r4, r3
 8009352:	d001      	beq.n	8009358 <_strtod_l+0x614>
 8009354:	335a      	adds	r3, #90	; 0x5a
 8009356:	9308      	str	r3, [sp, #32]
 8009358:	0030      	movs	r0, r6
 800935a:	0039      	movs	r1, r7
 800935c:	2300      	movs	r3, #0
 800935e:	4dca      	ldr	r5, [pc, #808]	; (8009688 <_strtod_l+0x944>)
 8009360:	2201      	movs	r2, #1
 8009362:	4214      	tst	r4, r2
 8009364:	d004      	beq.n	8009370 <_strtod_l+0x62c>
 8009366:	682a      	ldr	r2, [r5, #0]
 8009368:	686b      	ldr	r3, [r5, #4]
 800936a:	f7f8 f9b7 	bl	80016dc <__aeabi_dmul>
 800936e:	2301      	movs	r3, #1
 8009370:	1064      	asrs	r4, r4, #1
 8009372:	3508      	adds	r5, #8
 8009374:	2c00      	cmp	r4, #0
 8009376:	d1f3      	bne.n	8009360 <_strtod_l+0x61c>
 8009378:	2b00      	cmp	r3, #0
 800937a:	d001      	beq.n	8009380 <_strtod_l+0x63c>
 800937c:	0006      	movs	r6, r0
 800937e:	000f      	movs	r7, r1
 8009380:	9b08      	ldr	r3, [sp, #32]
 8009382:	2b00      	cmp	r3, #0
 8009384:	d00f      	beq.n	80093a6 <_strtod_l+0x662>
 8009386:	236b      	movs	r3, #107	; 0x6b
 8009388:	0079      	lsls	r1, r7, #1
 800938a:	0d49      	lsrs	r1, r1, #21
 800938c:	003a      	movs	r2, r7
 800938e:	1a5b      	subs	r3, r3, r1
 8009390:	2b00      	cmp	r3, #0
 8009392:	dd08      	ble.n	80093a6 <_strtod_l+0x662>
 8009394:	2b1f      	cmp	r3, #31
 8009396:	dc00      	bgt.n	800939a <_strtod_l+0x656>
 8009398:	e126      	b.n	80095e8 <_strtod_l+0x8a4>
 800939a:	2600      	movs	r6, #0
 800939c:	2b34      	cmp	r3, #52	; 0x34
 800939e:	dc00      	bgt.n	80093a2 <_strtod_l+0x65e>
 80093a0:	e11b      	b.n	80095da <_strtod_l+0x896>
 80093a2:	27dc      	movs	r7, #220	; 0xdc
 80093a4:	04bf      	lsls	r7, r7, #18
 80093a6:	2200      	movs	r2, #0
 80093a8:	2300      	movs	r3, #0
 80093aa:	0030      	movs	r0, r6
 80093ac:	0039      	movs	r1, r7
 80093ae:	f7f7 f84d 	bl	800044c <__aeabi_dcmpeq>
 80093b2:	2800      	cmp	r0, #0
 80093b4:	d1a0      	bne.n	80092f8 <_strtod_l+0x5b4>
 80093b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80093b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80093ba:	9300      	str	r3, [sp, #0]
 80093bc:	9911      	ldr	r1, [sp, #68]	; 0x44
 80093be:	9b06      	ldr	r3, [sp, #24]
 80093c0:	9805      	ldr	r0, [sp, #20]
 80093c2:	f001 ff7f 	bl	800b2c4 <__s2b>
 80093c6:	900b      	str	r0, [sp, #44]	; 0x2c
 80093c8:	2800      	cmp	r0, #0
 80093ca:	d100      	bne.n	80093ce <_strtod_l+0x68a>
 80093cc:	e723      	b.n	8009216 <_strtod_l+0x4d2>
 80093ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093d0:	9907      	ldr	r1, [sp, #28]
 80093d2:	17da      	asrs	r2, r3, #31
 80093d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80093d6:	1a5b      	subs	r3, r3, r1
 80093d8:	401a      	ands	r2, r3
 80093da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093dc:	9215      	str	r2, [sp, #84]	; 0x54
 80093de:	43db      	mvns	r3, r3
 80093e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80093e2:	17db      	asrs	r3, r3, #31
 80093e4:	401a      	ands	r2, r3
 80093e6:	2300      	movs	r3, #0
 80093e8:	921c      	str	r2, [sp, #112]	; 0x70
 80093ea:	9306      	str	r3, [sp, #24]
 80093ec:	9307      	str	r3, [sp, #28]
 80093ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80093f0:	9805      	ldr	r0, [sp, #20]
 80093f2:	6859      	ldr	r1, [r3, #4]
 80093f4:	f001 feba 	bl	800b16c <_Balloc>
 80093f8:	9009      	str	r0, [sp, #36]	; 0x24
 80093fa:	2800      	cmp	r0, #0
 80093fc:	d100      	bne.n	8009400 <_strtod_l+0x6bc>
 80093fe:	e70f      	b.n	8009220 <_strtod_l+0x4dc>
 8009400:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009402:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009404:	691b      	ldr	r3, [r3, #16]
 8009406:	310c      	adds	r1, #12
 8009408:	1c9a      	adds	r2, r3, #2
 800940a:	0092      	lsls	r2, r2, #2
 800940c:	300c      	adds	r0, #12
 800940e:	930c      	str	r3, [sp, #48]	; 0x30
 8009410:	f001 fea3 	bl	800b15a <memcpy>
 8009414:	ab24      	add	r3, sp, #144	; 0x90
 8009416:	9301      	str	r3, [sp, #4]
 8009418:	ab23      	add	r3, sp, #140	; 0x8c
 800941a:	9300      	str	r3, [sp, #0]
 800941c:	0032      	movs	r2, r6
 800941e:	003b      	movs	r3, r7
 8009420:	9805      	ldr	r0, [sp, #20]
 8009422:	960e      	str	r6, [sp, #56]	; 0x38
 8009424:	970f      	str	r7, [sp, #60]	; 0x3c
 8009426:	f002 fa9b 	bl	800b960 <__d2b>
 800942a:	9022      	str	r0, [sp, #136]	; 0x88
 800942c:	2800      	cmp	r0, #0
 800942e:	d100      	bne.n	8009432 <_strtod_l+0x6ee>
 8009430:	e6f6      	b.n	8009220 <_strtod_l+0x4dc>
 8009432:	2101      	movs	r1, #1
 8009434:	9805      	ldr	r0, [sp, #20]
 8009436:	f001 ffd9 	bl	800b3ec <__i2b>
 800943a:	9007      	str	r0, [sp, #28]
 800943c:	2800      	cmp	r0, #0
 800943e:	d100      	bne.n	8009442 <_strtod_l+0x6fe>
 8009440:	e6ee      	b.n	8009220 <_strtod_l+0x4dc>
 8009442:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009444:	2b00      	cmp	r3, #0
 8009446:	da00      	bge.n	800944a <_strtod_l+0x706>
 8009448:	e0d3      	b.n	80095f2 <_strtod_l+0x8ae>
 800944a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800944c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800944e:	189d      	adds	r5, r3, r2
 8009450:	9908      	ldr	r1, [sp, #32]
 8009452:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009454:	1a5b      	subs	r3, r3, r1
 8009456:	2136      	movs	r1, #54	; 0x36
 8009458:	189b      	adds	r3, r3, r2
 800945a:	1a8a      	subs	r2, r1, r2
 800945c:	498b      	ldr	r1, [pc, #556]	; (800968c <_strtod_l+0x948>)
 800945e:	3b01      	subs	r3, #1
 8009460:	2001      	movs	r0, #1
 8009462:	428b      	cmp	r3, r1
 8009464:	db00      	blt.n	8009468 <_strtod_l+0x724>
 8009466:	e0cf      	b.n	8009608 <_strtod_l+0x8c4>
 8009468:	1ac9      	subs	r1, r1, r3
 800946a:	1a52      	subs	r2, r2, r1
 800946c:	291f      	cmp	r1, #31
 800946e:	dd00      	ble.n	8009472 <_strtod_l+0x72e>
 8009470:	e0c3      	b.n	80095fa <_strtod_l+0x8b6>
 8009472:	4088      	lsls	r0, r1
 8009474:	2300      	movs	r3, #0
 8009476:	9014      	str	r0, [sp, #80]	; 0x50
 8009478:	9312      	str	r3, [sp, #72]	; 0x48
 800947a:	18ab      	adds	r3, r5, r2
 800947c:	930c      	str	r3, [sp, #48]	; 0x30
 800947e:	18a4      	adds	r4, r4, r2
 8009480:	9b08      	ldr	r3, [sp, #32]
 8009482:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009484:	191c      	adds	r4, r3, r4
 8009486:	002b      	movs	r3, r5
 8009488:	4295      	cmp	r5, r2
 800948a:	dd00      	ble.n	800948e <_strtod_l+0x74a>
 800948c:	0013      	movs	r3, r2
 800948e:	42a3      	cmp	r3, r4
 8009490:	dd00      	ble.n	8009494 <_strtod_l+0x750>
 8009492:	0023      	movs	r3, r4
 8009494:	2b00      	cmp	r3, #0
 8009496:	dd04      	ble.n	80094a2 <_strtod_l+0x75e>
 8009498:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800949a:	1ae4      	subs	r4, r4, r3
 800949c:	1ad2      	subs	r2, r2, r3
 800949e:	920c      	str	r2, [sp, #48]	; 0x30
 80094a0:	1aed      	subs	r5, r5, r3
 80094a2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	dd17      	ble.n	80094d8 <_strtod_l+0x794>
 80094a8:	001a      	movs	r2, r3
 80094aa:	9907      	ldr	r1, [sp, #28]
 80094ac:	9805      	ldr	r0, [sp, #20]
 80094ae:	f002 f863 	bl	800b578 <__pow5mult>
 80094b2:	9007      	str	r0, [sp, #28]
 80094b4:	2800      	cmp	r0, #0
 80094b6:	d100      	bne.n	80094ba <_strtod_l+0x776>
 80094b8:	e6b2      	b.n	8009220 <_strtod_l+0x4dc>
 80094ba:	0001      	movs	r1, r0
 80094bc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80094be:	9805      	ldr	r0, [sp, #20]
 80094c0:	f001 ffaa 	bl	800b418 <__multiply>
 80094c4:	9011      	str	r0, [sp, #68]	; 0x44
 80094c6:	2800      	cmp	r0, #0
 80094c8:	d100      	bne.n	80094cc <_strtod_l+0x788>
 80094ca:	e6a9      	b.n	8009220 <_strtod_l+0x4dc>
 80094cc:	9922      	ldr	r1, [sp, #136]	; 0x88
 80094ce:	9805      	ldr	r0, [sp, #20]
 80094d0:	f001 fe90 	bl	800b1f4 <_Bfree>
 80094d4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80094d6:	9322      	str	r3, [sp, #136]	; 0x88
 80094d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80094da:	2b00      	cmp	r3, #0
 80094dc:	dd00      	ble.n	80094e0 <_strtod_l+0x79c>
 80094de:	e096      	b.n	800960e <_strtod_l+0x8ca>
 80094e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	dd08      	ble.n	80094f8 <_strtod_l+0x7b4>
 80094e6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80094e8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80094ea:	9805      	ldr	r0, [sp, #20]
 80094ec:	f002 f844 	bl	800b578 <__pow5mult>
 80094f0:	9009      	str	r0, [sp, #36]	; 0x24
 80094f2:	2800      	cmp	r0, #0
 80094f4:	d100      	bne.n	80094f8 <_strtod_l+0x7b4>
 80094f6:	e693      	b.n	8009220 <_strtod_l+0x4dc>
 80094f8:	2c00      	cmp	r4, #0
 80094fa:	dd08      	ble.n	800950e <_strtod_l+0x7ca>
 80094fc:	0022      	movs	r2, r4
 80094fe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009500:	9805      	ldr	r0, [sp, #20]
 8009502:	f002 f895 	bl	800b630 <__lshift>
 8009506:	9009      	str	r0, [sp, #36]	; 0x24
 8009508:	2800      	cmp	r0, #0
 800950a:	d100      	bne.n	800950e <_strtod_l+0x7ca>
 800950c:	e688      	b.n	8009220 <_strtod_l+0x4dc>
 800950e:	2d00      	cmp	r5, #0
 8009510:	dd08      	ble.n	8009524 <_strtod_l+0x7e0>
 8009512:	002a      	movs	r2, r5
 8009514:	9907      	ldr	r1, [sp, #28]
 8009516:	9805      	ldr	r0, [sp, #20]
 8009518:	f002 f88a 	bl	800b630 <__lshift>
 800951c:	9007      	str	r0, [sp, #28]
 800951e:	2800      	cmp	r0, #0
 8009520:	d100      	bne.n	8009524 <_strtod_l+0x7e0>
 8009522:	e67d      	b.n	8009220 <_strtod_l+0x4dc>
 8009524:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009526:	9922      	ldr	r1, [sp, #136]	; 0x88
 8009528:	9805      	ldr	r0, [sp, #20]
 800952a:	f002 f90d 	bl	800b748 <__mdiff>
 800952e:	9006      	str	r0, [sp, #24]
 8009530:	2800      	cmp	r0, #0
 8009532:	d100      	bne.n	8009536 <_strtod_l+0x7f2>
 8009534:	e674      	b.n	8009220 <_strtod_l+0x4dc>
 8009536:	2200      	movs	r2, #0
 8009538:	68c3      	ldr	r3, [r0, #12]
 800953a:	9907      	ldr	r1, [sp, #28]
 800953c:	60c2      	str	r2, [r0, #12]
 800953e:	9311      	str	r3, [sp, #68]	; 0x44
 8009540:	f002 f8e6 	bl	800b710 <__mcmp>
 8009544:	2800      	cmp	r0, #0
 8009546:	da6c      	bge.n	8009622 <_strtod_l+0x8de>
 8009548:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800954a:	4333      	orrs	r3, r6
 800954c:	d000      	beq.n	8009550 <_strtod_l+0x80c>
 800954e:	e097      	b.n	8009680 <_strtod_l+0x93c>
 8009550:	033b      	lsls	r3, r7, #12
 8009552:	d000      	beq.n	8009556 <_strtod_l+0x812>
 8009554:	e094      	b.n	8009680 <_strtod_l+0x93c>
 8009556:	22d6      	movs	r2, #214	; 0xd6
 8009558:	4b4d      	ldr	r3, [pc, #308]	; (8009690 <_strtod_l+0x94c>)
 800955a:	04d2      	lsls	r2, r2, #19
 800955c:	403b      	ands	r3, r7
 800955e:	4293      	cmp	r3, r2
 8009560:	d800      	bhi.n	8009564 <_strtod_l+0x820>
 8009562:	e08d      	b.n	8009680 <_strtod_l+0x93c>
 8009564:	9b06      	ldr	r3, [sp, #24]
 8009566:	695b      	ldr	r3, [r3, #20]
 8009568:	930a      	str	r3, [sp, #40]	; 0x28
 800956a:	2b00      	cmp	r3, #0
 800956c:	d105      	bne.n	800957a <_strtod_l+0x836>
 800956e:	9b06      	ldr	r3, [sp, #24]
 8009570:	691b      	ldr	r3, [r3, #16]
 8009572:	930a      	str	r3, [sp, #40]	; 0x28
 8009574:	2b01      	cmp	r3, #1
 8009576:	dc00      	bgt.n	800957a <_strtod_l+0x836>
 8009578:	e082      	b.n	8009680 <_strtod_l+0x93c>
 800957a:	9906      	ldr	r1, [sp, #24]
 800957c:	2201      	movs	r2, #1
 800957e:	9805      	ldr	r0, [sp, #20]
 8009580:	f002 f856 	bl	800b630 <__lshift>
 8009584:	9907      	ldr	r1, [sp, #28]
 8009586:	9006      	str	r0, [sp, #24]
 8009588:	f002 f8c2 	bl	800b710 <__mcmp>
 800958c:	2800      	cmp	r0, #0
 800958e:	dd77      	ble.n	8009680 <_strtod_l+0x93c>
 8009590:	9908      	ldr	r1, [sp, #32]
 8009592:	003b      	movs	r3, r7
 8009594:	4a3e      	ldr	r2, [pc, #248]	; (8009690 <_strtod_l+0x94c>)
 8009596:	2900      	cmp	r1, #0
 8009598:	d100      	bne.n	800959c <_strtod_l+0x858>
 800959a:	e09e      	b.n	80096da <_strtod_l+0x996>
 800959c:	0011      	movs	r1, r2
 800959e:	20d6      	movs	r0, #214	; 0xd6
 80095a0:	4039      	ands	r1, r7
 80095a2:	04c0      	lsls	r0, r0, #19
 80095a4:	4281      	cmp	r1, r0
 80095a6:	dd00      	ble.n	80095aa <_strtod_l+0x866>
 80095a8:	e097      	b.n	80096da <_strtod_l+0x996>
 80095aa:	23dc      	movs	r3, #220	; 0xdc
 80095ac:	049b      	lsls	r3, r3, #18
 80095ae:	4299      	cmp	r1, r3
 80095b0:	dc00      	bgt.n	80095b4 <_strtod_l+0x870>
 80095b2:	e6a6      	b.n	8009302 <_strtod_l+0x5be>
 80095b4:	4b37      	ldr	r3, [pc, #220]	; (8009694 <_strtod_l+0x950>)
 80095b6:	0030      	movs	r0, r6
 80095b8:	931b      	str	r3, [sp, #108]	; 0x6c
 80095ba:	2300      	movs	r3, #0
 80095bc:	931a      	str	r3, [sp, #104]	; 0x68
 80095be:	0039      	movs	r1, r7
 80095c0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80095c2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80095c4:	f7f8 f88a 	bl	80016dc <__aeabi_dmul>
 80095c8:	0006      	movs	r6, r0
 80095ca:	000f      	movs	r7, r1
 80095cc:	4308      	orrs	r0, r1
 80095ce:	d000      	beq.n	80095d2 <_strtod_l+0x88e>
 80095d0:	e62f      	b.n	8009232 <_strtod_l+0x4ee>
 80095d2:	2322      	movs	r3, #34	; 0x22
 80095d4:	9a05      	ldr	r2, [sp, #20]
 80095d6:	6013      	str	r3, [r2, #0]
 80095d8:	e62b      	b.n	8009232 <_strtod_l+0x4ee>
 80095da:	2101      	movs	r1, #1
 80095dc:	3b20      	subs	r3, #32
 80095de:	4249      	negs	r1, r1
 80095e0:	4099      	lsls	r1, r3
 80095e2:	400a      	ands	r2, r1
 80095e4:	0017      	movs	r7, r2
 80095e6:	e6de      	b.n	80093a6 <_strtod_l+0x662>
 80095e8:	2201      	movs	r2, #1
 80095ea:	4252      	negs	r2, r2
 80095ec:	409a      	lsls	r2, r3
 80095ee:	4016      	ands	r6, r2
 80095f0:	e6d9      	b.n	80093a6 <_strtod_l+0x662>
 80095f2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80095f4:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80095f6:	1ad4      	subs	r4, r2, r3
 80095f8:	e72a      	b.n	8009450 <_strtod_l+0x70c>
 80095fa:	4927      	ldr	r1, [pc, #156]	; (8009698 <_strtod_l+0x954>)
 80095fc:	1acb      	subs	r3, r1, r3
 80095fe:	0001      	movs	r1, r0
 8009600:	4099      	lsls	r1, r3
 8009602:	9112      	str	r1, [sp, #72]	; 0x48
 8009604:	9014      	str	r0, [sp, #80]	; 0x50
 8009606:	e738      	b.n	800947a <_strtod_l+0x736>
 8009608:	2300      	movs	r3, #0
 800960a:	9312      	str	r3, [sp, #72]	; 0x48
 800960c:	e7fa      	b.n	8009604 <_strtod_l+0x8c0>
 800960e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009610:	9922      	ldr	r1, [sp, #136]	; 0x88
 8009612:	9805      	ldr	r0, [sp, #20]
 8009614:	f002 f80c 	bl	800b630 <__lshift>
 8009618:	9022      	str	r0, [sp, #136]	; 0x88
 800961a:	2800      	cmp	r0, #0
 800961c:	d000      	beq.n	8009620 <_strtod_l+0x8dc>
 800961e:	e75f      	b.n	80094e0 <_strtod_l+0x79c>
 8009620:	e5fe      	b.n	8009220 <_strtod_l+0x4dc>
 8009622:	970c      	str	r7, [sp, #48]	; 0x30
 8009624:	2800      	cmp	r0, #0
 8009626:	d176      	bne.n	8009716 <_strtod_l+0x9d2>
 8009628:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800962a:	033b      	lsls	r3, r7, #12
 800962c:	0b1b      	lsrs	r3, r3, #12
 800962e:	2a00      	cmp	r2, #0
 8009630:	d038      	beq.n	80096a4 <_strtod_l+0x960>
 8009632:	4a1a      	ldr	r2, [pc, #104]	; (800969c <_strtod_l+0x958>)
 8009634:	4293      	cmp	r3, r2
 8009636:	d138      	bne.n	80096aa <_strtod_l+0x966>
 8009638:	2201      	movs	r2, #1
 800963a:	9b08      	ldr	r3, [sp, #32]
 800963c:	4252      	negs	r2, r2
 800963e:	0031      	movs	r1, r6
 8009640:	0010      	movs	r0, r2
 8009642:	2b00      	cmp	r3, #0
 8009644:	d00b      	beq.n	800965e <_strtod_l+0x91a>
 8009646:	24d4      	movs	r4, #212	; 0xd4
 8009648:	4b11      	ldr	r3, [pc, #68]	; (8009690 <_strtod_l+0x94c>)
 800964a:	0010      	movs	r0, r2
 800964c:	403b      	ands	r3, r7
 800964e:	04e4      	lsls	r4, r4, #19
 8009650:	42a3      	cmp	r3, r4
 8009652:	d804      	bhi.n	800965e <_strtod_l+0x91a>
 8009654:	306c      	adds	r0, #108	; 0x6c
 8009656:	0d1b      	lsrs	r3, r3, #20
 8009658:	1ac3      	subs	r3, r0, r3
 800965a:	409a      	lsls	r2, r3
 800965c:	0010      	movs	r0, r2
 800965e:	4281      	cmp	r1, r0
 8009660:	d123      	bne.n	80096aa <_strtod_l+0x966>
 8009662:	4b0f      	ldr	r3, [pc, #60]	; (80096a0 <_strtod_l+0x95c>)
 8009664:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009666:	429a      	cmp	r2, r3
 8009668:	d102      	bne.n	8009670 <_strtod_l+0x92c>
 800966a:	1c4b      	adds	r3, r1, #1
 800966c:	d100      	bne.n	8009670 <_strtod_l+0x92c>
 800966e:	e5d7      	b.n	8009220 <_strtod_l+0x4dc>
 8009670:	4b07      	ldr	r3, [pc, #28]	; (8009690 <_strtod_l+0x94c>)
 8009672:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009674:	2600      	movs	r6, #0
 8009676:	401a      	ands	r2, r3
 8009678:	0013      	movs	r3, r2
 800967a:	2280      	movs	r2, #128	; 0x80
 800967c:	0352      	lsls	r2, r2, #13
 800967e:	189f      	adds	r7, r3, r2
 8009680:	9b08      	ldr	r3, [sp, #32]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d196      	bne.n	80095b4 <_strtod_l+0x870>
 8009686:	e5d4      	b.n	8009232 <_strtod_l+0x4ee>
 8009688:	0800d3f0 	.word	0x0800d3f0
 800968c:	fffffc02 	.word	0xfffffc02
 8009690:	7ff00000 	.word	0x7ff00000
 8009694:	39500000 	.word	0x39500000
 8009698:	fffffbe2 	.word	0xfffffbe2
 800969c:	000fffff 	.word	0x000fffff
 80096a0:	7fefffff 	.word	0x7fefffff
 80096a4:	4333      	orrs	r3, r6
 80096a6:	d100      	bne.n	80096aa <_strtod_l+0x966>
 80096a8:	e772      	b.n	8009590 <_strtod_l+0x84c>
 80096aa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d01d      	beq.n	80096ec <_strtod_l+0x9a8>
 80096b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80096b2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80096b4:	4213      	tst	r3, r2
 80096b6:	d0e3      	beq.n	8009680 <_strtod_l+0x93c>
 80096b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80096ba:	0030      	movs	r0, r6
 80096bc:	0039      	movs	r1, r7
 80096be:	9a08      	ldr	r2, [sp, #32]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d017      	beq.n	80096f4 <_strtod_l+0x9b0>
 80096c4:	f7ff fb26 	bl	8008d14 <sulp>
 80096c8:	0002      	movs	r2, r0
 80096ca:	000b      	movs	r3, r1
 80096cc:	980e      	ldr	r0, [sp, #56]	; 0x38
 80096ce:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80096d0:	f7f7 f894 	bl	80007fc <__aeabi_dadd>
 80096d4:	0006      	movs	r6, r0
 80096d6:	000f      	movs	r7, r1
 80096d8:	e7d2      	b.n	8009680 <_strtod_l+0x93c>
 80096da:	2601      	movs	r6, #1
 80096dc:	4013      	ands	r3, r2
 80096de:	4a9b      	ldr	r2, [pc, #620]	; (800994c <_strtod_l+0xc08>)
 80096e0:	4276      	negs	r6, r6
 80096e2:	189b      	adds	r3, r3, r2
 80096e4:	4a9a      	ldr	r2, [pc, #616]	; (8009950 <_strtod_l+0xc0c>)
 80096e6:	431a      	orrs	r2, r3
 80096e8:	0017      	movs	r7, r2
 80096ea:	e7c9      	b.n	8009680 <_strtod_l+0x93c>
 80096ec:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80096ee:	4233      	tst	r3, r6
 80096f0:	d0c6      	beq.n	8009680 <_strtod_l+0x93c>
 80096f2:	e7e1      	b.n	80096b8 <_strtod_l+0x974>
 80096f4:	f7ff fb0e 	bl	8008d14 <sulp>
 80096f8:	0002      	movs	r2, r0
 80096fa:	000b      	movs	r3, r1
 80096fc:	980e      	ldr	r0, [sp, #56]	; 0x38
 80096fe:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009700:	f7f8 fa58 	bl	8001bb4 <__aeabi_dsub>
 8009704:	2200      	movs	r2, #0
 8009706:	2300      	movs	r3, #0
 8009708:	0006      	movs	r6, r0
 800970a:	000f      	movs	r7, r1
 800970c:	f7f6 fe9e 	bl	800044c <__aeabi_dcmpeq>
 8009710:	2800      	cmp	r0, #0
 8009712:	d0b5      	beq.n	8009680 <_strtod_l+0x93c>
 8009714:	e5f5      	b.n	8009302 <_strtod_l+0x5be>
 8009716:	9907      	ldr	r1, [sp, #28]
 8009718:	9806      	ldr	r0, [sp, #24]
 800971a:	f002 f985 	bl	800ba28 <__ratio>
 800971e:	2380      	movs	r3, #128	; 0x80
 8009720:	2200      	movs	r2, #0
 8009722:	05db      	lsls	r3, r3, #23
 8009724:	0004      	movs	r4, r0
 8009726:	000d      	movs	r5, r1
 8009728:	f7f6 fea0 	bl	800046c <__aeabi_dcmple>
 800972c:	2800      	cmp	r0, #0
 800972e:	d079      	beq.n	8009824 <_strtod_l+0xae0>
 8009730:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009732:	2b00      	cmp	r3, #0
 8009734:	d04b      	beq.n	80097ce <_strtod_l+0xa8a>
 8009736:	2300      	movs	r3, #0
 8009738:	4c86      	ldr	r4, [pc, #536]	; (8009954 <_strtod_l+0xc10>)
 800973a:	2500      	movs	r5, #0
 800973c:	9312      	str	r3, [sp, #72]	; 0x48
 800973e:	9413      	str	r4, [sp, #76]	; 0x4c
 8009740:	4c84      	ldr	r4, [pc, #528]	; (8009954 <_strtod_l+0xc10>)
 8009742:	4a85      	ldr	r2, [pc, #532]	; (8009958 <_strtod_l+0xc14>)
 8009744:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009746:	4013      	ands	r3, r2
 8009748:	9314      	str	r3, [sp, #80]	; 0x50
 800974a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800974c:	4b83      	ldr	r3, [pc, #524]	; (800995c <_strtod_l+0xc18>)
 800974e:	429a      	cmp	r2, r3
 8009750:	d000      	beq.n	8009754 <_strtod_l+0xa10>
 8009752:	e0b0      	b.n	80098b6 <_strtod_l+0xb72>
 8009754:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009756:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009758:	921a      	str	r2, [sp, #104]	; 0x68
 800975a:	931b      	str	r3, [sp, #108]	; 0x6c
 800975c:	4a80      	ldr	r2, [pc, #512]	; (8009960 <_strtod_l+0xc1c>)
 800975e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009760:	4694      	mov	ip, r2
 8009762:	4463      	add	r3, ip
 8009764:	001f      	movs	r7, r3
 8009766:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009768:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800976a:	0030      	movs	r0, r6
 800976c:	0039      	movs	r1, r7
 800976e:	920c      	str	r2, [sp, #48]	; 0x30
 8009770:	930d      	str	r3, [sp, #52]	; 0x34
 8009772:	f002 f881 	bl	800b878 <__ulp>
 8009776:	0002      	movs	r2, r0
 8009778:	000b      	movs	r3, r1
 800977a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800977c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800977e:	f7f7 ffad 	bl	80016dc <__aeabi_dmul>
 8009782:	0032      	movs	r2, r6
 8009784:	003b      	movs	r3, r7
 8009786:	f7f7 f839 	bl	80007fc <__aeabi_dadd>
 800978a:	4a73      	ldr	r2, [pc, #460]	; (8009958 <_strtod_l+0xc14>)
 800978c:	4b75      	ldr	r3, [pc, #468]	; (8009964 <_strtod_l+0xc20>)
 800978e:	0006      	movs	r6, r0
 8009790:	400a      	ands	r2, r1
 8009792:	429a      	cmp	r2, r3
 8009794:	d95e      	bls.n	8009854 <_strtod_l+0xb10>
 8009796:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009798:	4a73      	ldr	r2, [pc, #460]	; (8009968 <_strtod_l+0xc24>)
 800979a:	4293      	cmp	r3, r2
 800979c:	d103      	bne.n	80097a6 <_strtod_l+0xa62>
 800979e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80097a0:	3301      	adds	r3, #1
 80097a2:	d100      	bne.n	80097a6 <_strtod_l+0xa62>
 80097a4:	e53c      	b.n	8009220 <_strtod_l+0x4dc>
 80097a6:	2601      	movs	r6, #1
 80097a8:	4f6f      	ldr	r7, [pc, #444]	; (8009968 <_strtod_l+0xc24>)
 80097aa:	4276      	negs	r6, r6
 80097ac:	9922      	ldr	r1, [sp, #136]	; 0x88
 80097ae:	9805      	ldr	r0, [sp, #20]
 80097b0:	f001 fd20 	bl	800b1f4 <_Bfree>
 80097b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80097b6:	9805      	ldr	r0, [sp, #20]
 80097b8:	f001 fd1c 	bl	800b1f4 <_Bfree>
 80097bc:	9907      	ldr	r1, [sp, #28]
 80097be:	9805      	ldr	r0, [sp, #20]
 80097c0:	f001 fd18 	bl	800b1f4 <_Bfree>
 80097c4:	9906      	ldr	r1, [sp, #24]
 80097c6:	9805      	ldr	r0, [sp, #20]
 80097c8:	f001 fd14 	bl	800b1f4 <_Bfree>
 80097cc:	e60f      	b.n	80093ee <_strtod_l+0x6aa>
 80097ce:	2e00      	cmp	r6, #0
 80097d0:	d11c      	bne.n	800980c <_strtod_l+0xac8>
 80097d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80097d4:	031b      	lsls	r3, r3, #12
 80097d6:	d11f      	bne.n	8009818 <_strtod_l+0xad4>
 80097d8:	2200      	movs	r2, #0
 80097da:	0020      	movs	r0, r4
 80097dc:	0029      	movs	r1, r5
 80097de:	4b5d      	ldr	r3, [pc, #372]	; (8009954 <_strtod_l+0xc10>)
 80097e0:	f7f6 fe3a 	bl	8000458 <__aeabi_dcmplt>
 80097e4:	2800      	cmp	r0, #0
 80097e6:	d11a      	bne.n	800981e <_strtod_l+0xada>
 80097e8:	0020      	movs	r0, r4
 80097ea:	0029      	movs	r1, r5
 80097ec:	2200      	movs	r2, #0
 80097ee:	4b5f      	ldr	r3, [pc, #380]	; (800996c <_strtod_l+0xc28>)
 80097f0:	f7f7 ff74 	bl	80016dc <__aeabi_dmul>
 80097f4:	0005      	movs	r5, r0
 80097f6:	000c      	movs	r4, r1
 80097f8:	2380      	movs	r3, #128	; 0x80
 80097fa:	061b      	lsls	r3, r3, #24
 80097fc:	18e3      	adds	r3, r4, r3
 80097fe:	951e      	str	r5, [sp, #120]	; 0x78
 8009800:	931f      	str	r3, [sp, #124]	; 0x7c
 8009802:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8009804:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009806:	9212      	str	r2, [sp, #72]	; 0x48
 8009808:	9313      	str	r3, [sp, #76]	; 0x4c
 800980a:	e79a      	b.n	8009742 <_strtod_l+0x9fe>
 800980c:	2e01      	cmp	r6, #1
 800980e:	d103      	bne.n	8009818 <_strtod_l+0xad4>
 8009810:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009812:	2b00      	cmp	r3, #0
 8009814:	d100      	bne.n	8009818 <_strtod_l+0xad4>
 8009816:	e574      	b.n	8009302 <_strtod_l+0x5be>
 8009818:	2300      	movs	r3, #0
 800981a:	4c55      	ldr	r4, [pc, #340]	; (8009970 <_strtod_l+0xc2c>)
 800981c:	e78d      	b.n	800973a <_strtod_l+0x9f6>
 800981e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8009820:	4c52      	ldr	r4, [pc, #328]	; (800996c <_strtod_l+0xc28>)
 8009822:	e7e9      	b.n	80097f8 <_strtod_l+0xab4>
 8009824:	2200      	movs	r2, #0
 8009826:	0020      	movs	r0, r4
 8009828:	0029      	movs	r1, r5
 800982a:	4b50      	ldr	r3, [pc, #320]	; (800996c <_strtod_l+0xc28>)
 800982c:	f7f7 ff56 	bl	80016dc <__aeabi_dmul>
 8009830:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009832:	0005      	movs	r5, r0
 8009834:	000b      	movs	r3, r1
 8009836:	000c      	movs	r4, r1
 8009838:	2a00      	cmp	r2, #0
 800983a:	d107      	bne.n	800984c <_strtod_l+0xb08>
 800983c:	2280      	movs	r2, #128	; 0x80
 800983e:	0612      	lsls	r2, r2, #24
 8009840:	188b      	adds	r3, r1, r2
 8009842:	9016      	str	r0, [sp, #88]	; 0x58
 8009844:	9317      	str	r3, [sp, #92]	; 0x5c
 8009846:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009848:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800984a:	e7dc      	b.n	8009806 <_strtod_l+0xac2>
 800984c:	0002      	movs	r2, r0
 800984e:	9216      	str	r2, [sp, #88]	; 0x58
 8009850:	9317      	str	r3, [sp, #92]	; 0x5c
 8009852:	e7f8      	b.n	8009846 <_strtod_l+0xb02>
 8009854:	23d4      	movs	r3, #212	; 0xd4
 8009856:	049b      	lsls	r3, r3, #18
 8009858:	18cf      	adds	r7, r1, r3
 800985a:	9b08      	ldr	r3, [sp, #32]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d1a5      	bne.n	80097ac <_strtod_l+0xa68>
 8009860:	4b3d      	ldr	r3, [pc, #244]	; (8009958 <_strtod_l+0xc14>)
 8009862:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009864:	403b      	ands	r3, r7
 8009866:	429a      	cmp	r2, r3
 8009868:	d1a0      	bne.n	80097ac <_strtod_l+0xa68>
 800986a:	0028      	movs	r0, r5
 800986c:	0021      	movs	r1, r4
 800986e:	f7f6 fe39 	bl	80004e4 <__aeabi_d2lz>
 8009872:	f7f6 fe73 	bl	800055c <__aeabi_l2d>
 8009876:	0002      	movs	r2, r0
 8009878:	000b      	movs	r3, r1
 800987a:	0028      	movs	r0, r5
 800987c:	0021      	movs	r1, r4
 800987e:	f7f8 f999 	bl	8001bb4 <__aeabi_dsub>
 8009882:	033b      	lsls	r3, r7, #12
 8009884:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009886:	0b1b      	lsrs	r3, r3, #12
 8009888:	4333      	orrs	r3, r6
 800988a:	4313      	orrs	r3, r2
 800988c:	0004      	movs	r4, r0
 800988e:	000d      	movs	r5, r1
 8009890:	4a38      	ldr	r2, [pc, #224]	; (8009974 <_strtod_l+0xc30>)
 8009892:	2b00      	cmp	r3, #0
 8009894:	d055      	beq.n	8009942 <_strtod_l+0xbfe>
 8009896:	4b38      	ldr	r3, [pc, #224]	; (8009978 <_strtod_l+0xc34>)
 8009898:	f7f6 fdde 	bl	8000458 <__aeabi_dcmplt>
 800989c:	2800      	cmp	r0, #0
 800989e:	d000      	beq.n	80098a2 <_strtod_l+0xb5e>
 80098a0:	e4c7      	b.n	8009232 <_strtod_l+0x4ee>
 80098a2:	0020      	movs	r0, r4
 80098a4:	0029      	movs	r1, r5
 80098a6:	4a35      	ldr	r2, [pc, #212]	; (800997c <_strtod_l+0xc38>)
 80098a8:	4b30      	ldr	r3, [pc, #192]	; (800996c <_strtod_l+0xc28>)
 80098aa:	f7f6 fde9 	bl	8000480 <__aeabi_dcmpgt>
 80098ae:	2800      	cmp	r0, #0
 80098b0:	d100      	bne.n	80098b4 <_strtod_l+0xb70>
 80098b2:	e77b      	b.n	80097ac <_strtod_l+0xa68>
 80098b4:	e4bd      	b.n	8009232 <_strtod_l+0x4ee>
 80098b6:	9b08      	ldr	r3, [sp, #32]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d02b      	beq.n	8009914 <_strtod_l+0xbd0>
 80098bc:	23d4      	movs	r3, #212	; 0xd4
 80098be:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80098c0:	04db      	lsls	r3, r3, #19
 80098c2:	429a      	cmp	r2, r3
 80098c4:	d826      	bhi.n	8009914 <_strtod_l+0xbd0>
 80098c6:	0028      	movs	r0, r5
 80098c8:	0021      	movs	r1, r4
 80098ca:	4a2d      	ldr	r2, [pc, #180]	; (8009980 <_strtod_l+0xc3c>)
 80098cc:	4b2d      	ldr	r3, [pc, #180]	; (8009984 <_strtod_l+0xc40>)
 80098ce:	f7f6 fdcd 	bl	800046c <__aeabi_dcmple>
 80098d2:	2800      	cmp	r0, #0
 80098d4:	d017      	beq.n	8009906 <_strtod_l+0xbc2>
 80098d6:	0028      	movs	r0, r5
 80098d8:	0021      	movs	r1, r4
 80098da:	f7f6 fde5 	bl	80004a8 <__aeabi_d2uiz>
 80098de:	2800      	cmp	r0, #0
 80098e0:	d100      	bne.n	80098e4 <_strtod_l+0xba0>
 80098e2:	3001      	adds	r0, #1
 80098e4:	f7f8 fd7c 	bl	80023e0 <__aeabi_ui2d>
 80098e8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80098ea:	0005      	movs	r5, r0
 80098ec:	000b      	movs	r3, r1
 80098ee:	000c      	movs	r4, r1
 80098f0:	2a00      	cmp	r2, #0
 80098f2:	d122      	bne.n	800993a <_strtod_l+0xbf6>
 80098f4:	2280      	movs	r2, #128	; 0x80
 80098f6:	0612      	lsls	r2, r2, #24
 80098f8:	188b      	adds	r3, r1, r2
 80098fa:	9018      	str	r0, [sp, #96]	; 0x60
 80098fc:	9319      	str	r3, [sp, #100]	; 0x64
 80098fe:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009900:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009902:	9212      	str	r2, [sp, #72]	; 0x48
 8009904:	9313      	str	r3, [sp, #76]	; 0x4c
 8009906:	22d6      	movs	r2, #214	; 0xd6
 8009908:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800990a:	04d2      	lsls	r2, r2, #19
 800990c:	189b      	adds	r3, r3, r2
 800990e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009910:	1a9b      	subs	r3, r3, r2
 8009912:	9313      	str	r3, [sp, #76]	; 0x4c
 8009914:	980e      	ldr	r0, [sp, #56]	; 0x38
 8009916:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009918:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800991a:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 800991c:	f001 ffac 	bl	800b878 <__ulp>
 8009920:	0002      	movs	r2, r0
 8009922:	000b      	movs	r3, r1
 8009924:	0030      	movs	r0, r6
 8009926:	0039      	movs	r1, r7
 8009928:	f7f7 fed8 	bl	80016dc <__aeabi_dmul>
 800992c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800992e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009930:	f7f6 ff64 	bl	80007fc <__aeabi_dadd>
 8009934:	0006      	movs	r6, r0
 8009936:	000f      	movs	r7, r1
 8009938:	e78f      	b.n	800985a <_strtod_l+0xb16>
 800993a:	0002      	movs	r2, r0
 800993c:	9218      	str	r2, [sp, #96]	; 0x60
 800993e:	9319      	str	r3, [sp, #100]	; 0x64
 8009940:	e7dd      	b.n	80098fe <_strtod_l+0xbba>
 8009942:	4b11      	ldr	r3, [pc, #68]	; (8009988 <_strtod_l+0xc44>)
 8009944:	f7f6 fd88 	bl	8000458 <__aeabi_dcmplt>
 8009948:	e7b1      	b.n	80098ae <_strtod_l+0xb6a>
 800994a:	46c0      	nop			; (mov r8, r8)
 800994c:	fff00000 	.word	0xfff00000
 8009950:	000fffff 	.word	0x000fffff
 8009954:	3ff00000 	.word	0x3ff00000
 8009958:	7ff00000 	.word	0x7ff00000
 800995c:	7fe00000 	.word	0x7fe00000
 8009960:	fcb00000 	.word	0xfcb00000
 8009964:	7c9fffff 	.word	0x7c9fffff
 8009968:	7fefffff 	.word	0x7fefffff
 800996c:	3fe00000 	.word	0x3fe00000
 8009970:	bff00000 	.word	0xbff00000
 8009974:	94a03595 	.word	0x94a03595
 8009978:	3fdfffff 	.word	0x3fdfffff
 800997c:	35afe535 	.word	0x35afe535
 8009980:	ffc00000 	.word	0xffc00000
 8009984:	41dfffff 	.word	0x41dfffff
 8009988:	3fcfffff 	.word	0x3fcfffff

0800998c <_strtod_r>:
 800998c:	b510      	push	{r4, lr}
 800998e:	4b02      	ldr	r3, [pc, #8]	; (8009998 <_strtod_r+0xc>)
 8009990:	f7ff f9d8 	bl	8008d44 <_strtod_l>
 8009994:	bd10      	pop	{r4, pc}
 8009996:	46c0      	nop			; (mov r8, r8)
 8009998:	20000078 	.word	0x20000078

0800999c <_strtol_l.isra.0>:
 800999c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800999e:	b087      	sub	sp, #28
 80099a0:	001e      	movs	r6, r3
 80099a2:	9005      	str	r0, [sp, #20]
 80099a4:	9101      	str	r1, [sp, #4]
 80099a6:	9202      	str	r2, [sp, #8]
 80099a8:	2b01      	cmp	r3, #1
 80099aa:	d045      	beq.n	8009a38 <_strtol_l.isra.0+0x9c>
 80099ac:	0008      	movs	r0, r1
 80099ae:	2b24      	cmp	r3, #36	; 0x24
 80099b0:	d842      	bhi.n	8009a38 <_strtol_l.isra.0+0x9c>
 80099b2:	4b3f      	ldr	r3, [pc, #252]	; (8009ab0 <_strtol_l.isra.0+0x114>)
 80099b4:	2208      	movs	r2, #8
 80099b6:	469c      	mov	ip, r3
 80099b8:	0003      	movs	r3, r0
 80099ba:	4661      	mov	r1, ip
 80099bc:	781c      	ldrb	r4, [r3, #0]
 80099be:	1c45      	adds	r5, r0, #1
 80099c0:	5d09      	ldrb	r1, [r1, r4]
 80099c2:	0028      	movs	r0, r5
 80099c4:	000f      	movs	r7, r1
 80099c6:	4017      	ands	r7, r2
 80099c8:	4211      	tst	r1, r2
 80099ca:	d1f5      	bne.n	80099b8 <_strtol_l.isra.0+0x1c>
 80099cc:	2c2d      	cmp	r4, #45	; 0x2d
 80099ce:	d13a      	bne.n	8009a46 <_strtol_l.isra.0+0xaa>
 80099d0:	2701      	movs	r7, #1
 80099d2:	782c      	ldrb	r4, [r5, #0]
 80099d4:	1c9d      	adds	r5, r3, #2
 80099d6:	2e00      	cmp	r6, #0
 80099d8:	d065      	beq.n	8009aa6 <_strtol_l.isra.0+0x10a>
 80099da:	2e10      	cmp	r6, #16
 80099dc:	d109      	bne.n	80099f2 <_strtol_l.isra.0+0x56>
 80099de:	2c30      	cmp	r4, #48	; 0x30
 80099e0:	d107      	bne.n	80099f2 <_strtol_l.isra.0+0x56>
 80099e2:	2220      	movs	r2, #32
 80099e4:	782b      	ldrb	r3, [r5, #0]
 80099e6:	4393      	bics	r3, r2
 80099e8:	2b58      	cmp	r3, #88	; 0x58
 80099ea:	d157      	bne.n	8009a9c <_strtol_l.isra.0+0x100>
 80099ec:	2610      	movs	r6, #16
 80099ee:	786c      	ldrb	r4, [r5, #1]
 80099f0:	3502      	adds	r5, #2
 80099f2:	4b30      	ldr	r3, [pc, #192]	; (8009ab4 <_strtol_l.isra.0+0x118>)
 80099f4:	0031      	movs	r1, r6
 80099f6:	18fb      	adds	r3, r7, r3
 80099f8:	0018      	movs	r0, r3
 80099fa:	9303      	str	r3, [sp, #12]
 80099fc:	f7f6 fc26 	bl	800024c <__aeabi_uidivmod>
 8009a00:	2300      	movs	r3, #0
 8009a02:	2201      	movs	r2, #1
 8009a04:	4684      	mov	ip, r0
 8009a06:	0018      	movs	r0, r3
 8009a08:	9104      	str	r1, [sp, #16]
 8009a0a:	4252      	negs	r2, r2
 8009a0c:	0021      	movs	r1, r4
 8009a0e:	3930      	subs	r1, #48	; 0x30
 8009a10:	2909      	cmp	r1, #9
 8009a12:	d81d      	bhi.n	8009a50 <_strtol_l.isra.0+0xb4>
 8009a14:	000c      	movs	r4, r1
 8009a16:	42a6      	cmp	r6, r4
 8009a18:	dd28      	ble.n	8009a6c <_strtol_l.isra.0+0xd0>
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	db24      	blt.n	8009a68 <_strtol_l.isra.0+0xcc>
 8009a1e:	0013      	movs	r3, r2
 8009a20:	4584      	cmp	ip, r0
 8009a22:	d306      	bcc.n	8009a32 <_strtol_l.isra.0+0x96>
 8009a24:	d102      	bne.n	8009a2c <_strtol_l.isra.0+0x90>
 8009a26:	9904      	ldr	r1, [sp, #16]
 8009a28:	42a1      	cmp	r1, r4
 8009a2a:	db02      	blt.n	8009a32 <_strtol_l.isra.0+0x96>
 8009a2c:	2301      	movs	r3, #1
 8009a2e:	4370      	muls	r0, r6
 8009a30:	1820      	adds	r0, r4, r0
 8009a32:	782c      	ldrb	r4, [r5, #0]
 8009a34:	3501      	adds	r5, #1
 8009a36:	e7e9      	b.n	8009a0c <_strtol_l.isra.0+0x70>
 8009a38:	f7fe fa7a 	bl	8007f30 <__errno>
 8009a3c:	2316      	movs	r3, #22
 8009a3e:	6003      	str	r3, [r0, #0]
 8009a40:	2000      	movs	r0, #0
 8009a42:	b007      	add	sp, #28
 8009a44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a46:	2c2b      	cmp	r4, #43	; 0x2b
 8009a48:	d1c5      	bne.n	80099d6 <_strtol_l.isra.0+0x3a>
 8009a4a:	782c      	ldrb	r4, [r5, #0]
 8009a4c:	1c9d      	adds	r5, r3, #2
 8009a4e:	e7c2      	b.n	80099d6 <_strtol_l.isra.0+0x3a>
 8009a50:	0021      	movs	r1, r4
 8009a52:	3941      	subs	r1, #65	; 0x41
 8009a54:	2919      	cmp	r1, #25
 8009a56:	d801      	bhi.n	8009a5c <_strtol_l.isra.0+0xc0>
 8009a58:	3c37      	subs	r4, #55	; 0x37
 8009a5a:	e7dc      	b.n	8009a16 <_strtol_l.isra.0+0x7a>
 8009a5c:	0021      	movs	r1, r4
 8009a5e:	3961      	subs	r1, #97	; 0x61
 8009a60:	2919      	cmp	r1, #25
 8009a62:	d803      	bhi.n	8009a6c <_strtol_l.isra.0+0xd0>
 8009a64:	3c57      	subs	r4, #87	; 0x57
 8009a66:	e7d6      	b.n	8009a16 <_strtol_l.isra.0+0x7a>
 8009a68:	0013      	movs	r3, r2
 8009a6a:	e7e2      	b.n	8009a32 <_strtol_l.isra.0+0x96>
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	da09      	bge.n	8009a84 <_strtol_l.isra.0+0xe8>
 8009a70:	2322      	movs	r3, #34	; 0x22
 8009a72:	9a05      	ldr	r2, [sp, #20]
 8009a74:	9803      	ldr	r0, [sp, #12]
 8009a76:	6013      	str	r3, [r2, #0]
 8009a78:	9b02      	ldr	r3, [sp, #8]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d0e1      	beq.n	8009a42 <_strtol_l.isra.0+0xa6>
 8009a7e:	1e6b      	subs	r3, r5, #1
 8009a80:	9301      	str	r3, [sp, #4]
 8009a82:	e007      	b.n	8009a94 <_strtol_l.isra.0+0xf8>
 8009a84:	2f00      	cmp	r7, #0
 8009a86:	d000      	beq.n	8009a8a <_strtol_l.isra.0+0xee>
 8009a88:	4240      	negs	r0, r0
 8009a8a:	9a02      	ldr	r2, [sp, #8]
 8009a8c:	2a00      	cmp	r2, #0
 8009a8e:	d0d8      	beq.n	8009a42 <_strtol_l.isra.0+0xa6>
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d1f4      	bne.n	8009a7e <_strtol_l.isra.0+0xe2>
 8009a94:	9b02      	ldr	r3, [sp, #8]
 8009a96:	9a01      	ldr	r2, [sp, #4]
 8009a98:	601a      	str	r2, [r3, #0]
 8009a9a:	e7d2      	b.n	8009a42 <_strtol_l.isra.0+0xa6>
 8009a9c:	2430      	movs	r4, #48	; 0x30
 8009a9e:	2e00      	cmp	r6, #0
 8009aa0:	d1a7      	bne.n	80099f2 <_strtol_l.isra.0+0x56>
 8009aa2:	3608      	adds	r6, #8
 8009aa4:	e7a5      	b.n	80099f2 <_strtol_l.isra.0+0x56>
 8009aa6:	2c30      	cmp	r4, #48	; 0x30
 8009aa8:	d09b      	beq.n	80099e2 <_strtol_l.isra.0+0x46>
 8009aaa:	260a      	movs	r6, #10
 8009aac:	e7a1      	b.n	80099f2 <_strtol_l.isra.0+0x56>
 8009aae:	46c0      	nop			; (mov r8, r8)
 8009ab0:	0800d419 	.word	0x0800d419
 8009ab4:	7fffffff 	.word	0x7fffffff

08009ab8 <_strtol_r>:
 8009ab8:	b510      	push	{r4, lr}
 8009aba:	f7ff ff6f 	bl	800999c <_strtol_l.isra.0>
 8009abe:	bd10      	pop	{r4, pc}

08009ac0 <quorem>:
 8009ac0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ac2:	0006      	movs	r6, r0
 8009ac4:	690d      	ldr	r5, [r1, #16]
 8009ac6:	6933      	ldr	r3, [r6, #16]
 8009ac8:	b087      	sub	sp, #28
 8009aca:	2000      	movs	r0, #0
 8009acc:	9102      	str	r1, [sp, #8]
 8009ace:	42ab      	cmp	r3, r5
 8009ad0:	db6b      	blt.n	8009baa <quorem+0xea>
 8009ad2:	000b      	movs	r3, r1
 8009ad4:	3d01      	subs	r5, #1
 8009ad6:	00ac      	lsls	r4, r5, #2
 8009ad8:	3314      	adds	r3, #20
 8009ada:	9305      	str	r3, [sp, #20]
 8009adc:	191b      	adds	r3, r3, r4
 8009ade:	9303      	str	r3, [sp, #12]
 8009ae0:	0033      	movs	r3, r6
 8009ae2:	3314      	adds	r3, #20
 8009ae4:	9301      	str	r3, [sp, #4]
 8009ae6:	191c      	adds	r4, r3, r4
 8009ae8:	9b03      	ldr	r3, [sp, #12]
 8009aea:	6827      	ldr	r7, [r4, #0]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	0038      	movs	r0, r7
 8009af0:	9300      	str	r3, [sp, #0]
 8009af2:	3301      	adds	r3, #1
 8009af4:	0019      	movs	r1, r3
 8009af6:	9304      	str	r3, [sp, #16]
 8009af8:	f7f6 fb22 	bl	8000140 <__udivsi3>
 8009afc:	9b04      	ldr	r3, [sp, #16]
 8009afe:	9000      	str	r0, [sp, #0]
 8009b00:	429f      	cmp	r7, r3
 8009b02:	d329      	bcc.n	8009b58 <quorem+0x98>
 8009b04:	2300      	movs	r3, #0
 8009b06:	469c      	mov	ip, r3
 8009b08:	9801      	ldr	r0, [sp, #4]
 8009b0a:	9f05      	ldr	r7, [sp, #20]
 8009b0c:	9304      	str	r3, [sp, #16]
 8009b0e:	cf08      	ldmia	r7!, {r3}
 8009b10:	9a00      	ldr	r2, [sp, #0]
 8009b12:	b299      	uxth	r1, r3
 8009b14:	4351      	muls	r1, r2
 8009b16:	0c1b      	lsrs	r3, r3, #16
 8009b18:	4353      	muls	r3, r2
 8009b1a:	4461      	add	r1, ip
 8009b1c:	0c0a      	lsrs	r2, r1, #16
 8009b1e:	189b      	adds	r3, r3, r2
 8009b20:	0c1a      	lsrs	r2, r3, #16
 8009b22:	9305      	str	r3, [sp, #20]
 8009b24:	6803      	ldr	r3, [r0, #0]
 8009b26:	4694      	mov	ip, r2
 8009b28:	b29a      	uxth	r2, r3
 8009b2a:	9b04      	ldr	r3, [sp, #16]
 8009b2c:	b289      	uxth	r1, r1
 8009b2e:	18d2      	adds	r2, r2, r3
 8009b30:	6803      	ldr	r3, [r0, #0]
 8009b32:	1a52      	subs	r2, r2, r1
 8009b34:	0c19      	lsrs	r1, r3, #16
 8009b36:	466b      	mov	r3, sp
 8009b38:	8a9b      	ldrh	r3, [r3, #20]
 8009b3a:	1acb      	subs	r3, r1, r3
 8009b3c:	1411      	asrs	r1, r2, #16
 8009b3e:	185b      	adds	r3, r3, r1
 8009b40:	1419      	asrs	r1, r3, #16
 8009b42:	b292      	uxth	r2, r2
 8009b44:	041b      	lsls	r3, r3, #16
 8009b46:	431a      	orrs	r2, r3
 8009b48:	9b03      	ldr	r3, [sp, #12]
 8009b4a:	9104      	str	r1, [sp, #16]
 8009b4c:	c004      	stmia	r0!, {r2}
 8009b4e:	42bb      	cmp	r3, r7
 8009b50:	d2dd      	bcs.n	8009b0e <quorem+0x4e>
 8009b52:	6823      	ldr	r3, [r4, #0]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d02e      	beq.n	8009bb6 <quorem+0xf6>
 8009b58:	0030      	movs	r0, r6
 8009b5a:	9902      	ldr	r1, [sp, #8]
 8009b5c:	f001 fdd8 	bl	800b710 <__mcmp>
 8009b60:	2800      	cmp	r0, #0
 8009b62:	db21      	blt.n	8009ba8 <quorem+0xe8>
 8009b64:	0030      	movs	r0, r6
 8009b66:	2400      	movs	r4, #0
 8009b68:	9b00      	ldr	r3, [sp, #0]
 8009b6a:	9902      	ldr	r1, [sp, #8]
 8009b6c:	3301      	adds	r3, #1
 8009b6e:	9300      	str	r3, [sp, #0]
 8009b70:	3014      	adds	r0, #20
 8009b72:	3114      	adds	r1, #20
 8009b74:	6802      	ldr	r2, [r0, #0]
 8009b76:	c908      	ldmia	r1!, {r3}
 8009b78:	b292      	uxth	r2, r2
 8009b7a:	1914      	adds	r4, r2, r4
 8009b7c:	b29a      	uxth	r2, r3
 8009b7e:	1aa2      	subs	r2, r4, r2
 8009b80:	6804      	ldr	r4, [r0, #0]
 8009b82:	0c1b      	lsrs	r3, r3, #16
 8009b84:	0c24      	lsrs	r4, r4, #16
 8009b86:	1ae3      	subs	r3, r4, r3
 8009b88:	1414      	asrs	r4, r2, #16
 8009b8a:	191b      	adds	r3, r3, r4
 8009b8c:	141c      	asrs	r4, r3, #16
 8009b8e:	b292      	uxth	r2, r2
 8009b90:	041b      	lsls	r3, r3, #16
 8009b92:	4313      	orrs	r3, r2
 8009b94:	c008      	stmia	r0!, {r3}
 8009b96:	9b03      	ldr	r3, [sp, #12]
 8009b98:	428b      	cmp	r3, r1
 8009b9a:	d2eb      	bcs.n	8009b74 <quorem+0xb4>
 8009b9c:	9a01      	ldr	r2, [sp, #4]
 8009b9e:	00ab      	lsls	r3, r5, #2
 8009ba0:	18d3      	adds	r3, r2, r3
 8009ba2:	681a      	ldr	r2, [r3, #0]
 8009ba4:	2a00      	cmp	r2, #0
 8009ba6:	d010      	beq.n	8009bca <quorem+0x10a>
 8009ba8:	9800      	ldr	r0, [sp, #0]
 8009baa:	b007      	add	sp, #28
 8009bac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009bae:	6823      	ldr	r3, [r4, #0]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d104      	bne.n	8009bbe <quorem+0xfe>
 8009bb4:	3d01      	subs	r5, #1
 8009bb6:	9b01      	ldr	r3, [sp, #4]
 8009bb8:	3c04      	subs	r4, #4
 8009bba:	42a3      	cmp	r3, r4
 8009bbc:	d3f7      	bcc.n	8009bae <quorem+0xee>
 8009bbe:	6135      	str	r5, [r6, #16]
 8009bc0:	e7ca      	b.n	8009b58 <quorem+0x98>
 8009bc2:	681a      	ldr	r2, [r3, #0]
 8009bc4:	2a00      	cmp	r2, #0
 8009bc6:	d104      	bne.n	8009bd2 <quorem+0x112>
 8009bc8:	3d01      	subs	r5, #1
 8009bca:	9a01      	ldr	r2, [sp, #4]
 8009bcc:	3b04      	subs	r3, #4
 8009bce:	429a      	cmp	r2, r3
 8009bd0:	d3f7      	bcc.n	8009bc2 <quorem+0x102>
 8009bd2:	6135      	str	r5, [r6, #16]
 8009bd4:	e7e8      	b.n	8009ba8 <quorem+0xe8>
	...

08009bd8 <_dtoa_r>:
 8009bd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009bda:	b09d      	sub	sp, #116	; 0x74
 8009bdc:	9202      	str	r2, [sp, #8]
 8009bde:	9303      	str	r3, [sp, #12]
 8009be0:	9b02      	ldr	r3, [sp, #8]
 8009be2:	9c03      	ldr	r4, [sp, #12]
 8009be4:	930a      	str	r3, [sp, #40]	; 0x28
 8009be6:	940b      	str	r4, [sp, #44]	; 0x2c
 8009be8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8009bea:	0007      	movs	r7, r0
 8009bec:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8009bee:	2c00      	cmp	r4, #0
 8009bf0:	d10e      	bne.n	8009c10 <_dtoa_r+0x38>
 8009bf2:	2010      	movs	r0, #16
 8009bf4:	f001 fa8a 	bl	800b10c <malloc>
 8009bf8:	1e02      	subs	r2, r0, #0
 8009bfa:	6278      	str	r0, [r7, #36]	; 0x24
 8009bfc:	d104      	bne.n	8009c08 <_dtoa_r+0x30>
 8009bfe:	21ea      	movs	r1, #234	; 0xea
 8009c00:	4bc0      	ldr	r3, [pc, #768]	; (8009f04 <_dtoa_r+0x32c>)
 8009c02:	48c1      	ldr	r0, [pc, #772]	; (8009f08 <_dtoa_r+0x330>)
 8009c04:	f002 fc5c 	bl	800c4c0 <__assert_func>
 8009c08:	6044      	str	r4, [r0, #4]
 8009c0a:	6084      	str	r4, [r0, #8]
 8009c0c:	6004      	str	r4, [r0, #0]
 8009c0e:	60c4      	str	r4, [r0, #12]
 8009c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c12:	6819      	ldr	r1, [r3, #0]
 8009c14:	2900      	cmp	r1, #0
 8009c16:	d00a      	beq.n	8009c2e <_dtoa_r+0x56>
 8009c18:	685a      	ldr	r2, [r3, #4]
 8009c1a:	2301      	movs	r3, #1
 8009c1c:	4093      	lsls	r3, r2
 8009c1e:	604a      	str	r2, [r1, #4]
 8009c20:	608b      	str	r3, [r1, #8]
 8009c22:	0038      	movs	r0, r7
 8009c24:	f001 fae6 	bl	800b1f4 <_Bfree>
 8009c28:	2200      	movs	r2, #0
 8009c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c2c:	601a      	str	r2, [r3, #0]
 8009c2e:	9b03      	ldr	r3, [sp, #12]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	da21      	bge.n	8009c78 <_dtoa_r+0xa0>
 8009c34:	2301      	movs	r3, #1
 8009c36:	602b      	str	r3, [r5, #0]
 8009c38:	9b03      	ldr	r3, [sp, #12]
 8009c3a:	005b      	lsls	r3, r3, #1
 8009c3c:	085b      	lsrs	r3, r3, #1
 8009c3e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009c40:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8009c42:	4bb2      	ldr	r3, [pc, #712]	; (8009f0c <_dtoa_r+0x334>)
 8009c44:	002a      	movs	r2, r5
 8009c46:	9318      	str	r3, [sp, #96]	; 0x60
 8009c48:	401a      	ands	r2, r3
 8009c4a:	429a      	cmp	r2, r3
 8009c4c:	d117      	bne.n	8009c7e <_dtoa_r+0xa6>
 8009c4e:	4bb0      	ldr	r3, [pc, #704]	; (8009f10 <_dtoa_r+0x338>)
 8009c50:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009c52:	0328      	lsls	r0, r5, #12
 8009c54:	6013      	str	r3, [r2, #0]
 8009c56:	9b02      	ldr	r3, [sp, #8]
 8009c58:	0b00      	lsrs	r0, r0, #12
 8009c5a:	4318      	orrs	r0, r3
 8009c5c:	d101      	bne.n	8009c62 <_dtoa_r+0x8a>
 8009c5e:	f000 fdc3 	bl	800a7e8 <_dtoa_r+0xc10>
 8009c62:	48ac      	ldr	r0, [pc, #688]	; (8009f14 <_dtoa_r+0x33c>)
 8009c64:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009c66:	9005      	str	r0, [sp, #20]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d002      	beq.n	8009c72 <_dtoa_r+0x9a>
 8009c6c:	4baa      	ldr	r3, [pc, #680]	; (8009f18 <_dtoa_r+0x340>)
 8009c6e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009c70:	6013      	str	r3, [r2, #0]
 8009c72:	9805      	ldr	r0, [sp, #20]
 8009c74:	b01d      	add	sp, #116	; 0x74
 8009c76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c78:	2300      	movs	r3, #0
 8009c7a:	602b      	str	r3, [r5, #0]
 8009c7c:	e7e0      	b.n	8009c40 <_dtoa_r+0x68>
 8009c7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c80:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8009c82:	9312      	str	r3, [sp, #72]	; 0x48
 8009c84:	9413      	str	r4, [sp, #76]	; 0x4c
 8009c86:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009c88:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	2300      	movs	r3, #0
 8009c8e:	f7f6 fbdd 	bl	800044c <__aeabi_dcmpeq>
 8009c92:	1e04      	subs	r4, r0, #0
 8009c94:	d00b      	beq.n	8009cae <_dtoa_r+0xd6>
 8009c96:	2301      	movs	r3, #1
 8009c98:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009c9a:	6013      	str	r3, [r2, #0]
 8009c9c:	4b9f      	ldr	r3, [pc, #636]	; (8009f1c <_dtoa_r+0x344>)
 8009c9e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009ca0:	9305      	str	r3, [sp, #20]
 8009ca2:	2a00      	cmp	r2, #0
 8009ca4:	d0e5      	beq.n	8009c72 <_dtoa_r+0x9a>
 8009ca6:	4a9e      	ldr	r2, [pc, #632]	; (8009f20 <_dtoa_r+0x348>)
 8009ca8:	9926      	ldr	r1, [sp, #152]	; 0x98
 8009caa:	600a      	str	r2, [r1, #0]
 8009cac:	e7e1      	b.n	8009c72 <_dtoa_r+0x9a>
 8009cae:	ab1a      	add	r3, sp, #104	; 0x68
 8009cb0:	9301      	str	r3, [sp, #4]
 8009cb2:	ab1b      	add	r3, sp, #108	; 0x6c
 8009cb4:	9300      	str	r3, [sp, #0]
 8009cb6:	0038      	movs	r0, r7
 8009cb8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009cba:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009cbc:	f001 fe50 	bl	800b960 <__d2b>
 8009cc0:	006e      	lsls	r6, r5, #1
 8009cc2:	9004      	str	r0, [sp, #16]
 8009cc4:	0d76      	lsrs	r6, r6, #21
 8009cc6:	d100      	bne.n	8009cca <_dtoa_r+0xf2>
 8009cc8:	e07c      	b.n	8009dc4 <_dtoa_r+0x1ec>
 8009cca:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009ccc:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8009cce:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009cd0:	4a94      	ldr	r2, [pc, #592]	; (8009f24 <_dtoa_r+0x34c>)
 8009cd2:	031b      	lsls	r3, r3, #12
 8009cd4:	0b1b      	lsrs	r3, r3, #12
 8009cd6:	431a      	orrs	r2, r3
 8009cd8:	0011      	movs	r1, r2
 8009cda:	4b93      	ldr	r3, [pc, #588]	; (8009f28 <_dtoa_r+0x350>)
 8009cdc:	9416      	str	r4, [sp, #88]	; 0x58
 8009cde:	18f6      	adds	r6, r6, r3
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	4b92      	ldr	r3, [pc, #584]	; (8009f2c <_dtoa_r+0x354>)
 8009ce4:	f7f7 ff66 	bl	8001bb4 <__aeabi_dsub>
 8009ce8:	4a91      	ldr	r2, [pc, #580]	; (8009f30 <_dtoa_r+0x358>)
 8009cea:	4b92      	ldr	r3, [pc, #584]	; (8009f34 <_dtoa_r+0x35c>)
 8009cec:	f7f7 fcf6 	bl	80016dc <__aeabi_dmul>
 8009cf0:	4a91      	ldr	r2, [pc, #580]	; (8009f38 <_dtoa_r+0x360>)
 8009cf2:	4b92      	ldr	r3, [pc, #584]	; (8009f3c <_dtoa_r+0x364>)
 8009cf4:	f7f6 fd82 	bl	80007fc <__aeabi_dadd>
 8009cf8:	0004      	movs	r4, r0
 8009cfa:	0030      	movs	r0, r6
 8009cfc:	000d      	movs	r5, r1
 8009cfe:	f7f8 fb3f 	bl	8002380 <__aeabi_i2d>
 8009d02:	4a8f      	ldr	r2, [pc, #572]	; (8009f40 <_dtoa_r+0x368>)
 8009d04:	4b8f      	ldr	r3, [pc, #572]	; (8009f44 <_dtoa_r+0x36c>)
 8009d06:	f7f7 fce9 	bl	80016dc <__aeabi_dmul>
 8009d0a:	0002      	movs	r2, r0
 8009d0c:	000b      	movs	r3, r1
 8009d0e:	0020      	movs	r0, r4
 8009d10:	0029      	movs	r1, r5
 8009d12:	f7f6 fd73 	bl	80007fc <__aeabi_dadd>
 8009d16:	0004      	movs	r4, r0
 8009d18:	000d      	movs	r5, r1
 8009d1a:	f7f8 fafb 	bl	8002314 <__aeabi_d2iz>
 8009d1e:	2200      	movs	r2, #0
 8009d20:	9002      	str	r0, [sp, #8]
 8009d22:	2300      	movs	r3, #0
 8009d24:	0020      	movs	r0, r4
 8009d26:	0029      	movs	r1, r5
 8009d28:	f7f6 fb96 	bl	8000458 <__aeabi_dcmplt>
 8009d2c:	2800      	cmp	r0, #0
 8009d2e:	d00b      	beq.n	8009d48 <_dtoa_r+0x170>
 8009d30:	9802      	ldr	r0, [sp, #8]
 8009d32:	f7f8 fb25 	bl	8002380 <__aeabi_i2d>
 8009d36:	002b      	movs	r3, r5
 8009d38:	0022      	movs	r2, r4
 8009d3a:	f7f6 fb87 	bl	800044c <__aeabi_dcmpeq>
 8009d3e:	4243      	negs	r3, r0
 8009d40:	4158      	adcs	r0, r3
 8009d42:	9b02      	ldr	r3, [sp, #8]
 8009d44:	1a1b      	subs	r3, r3, r0
 8009d46:	9302      	str	r3, [sp, #8]
 8009d48:	2301      	movs	r3, #1
 8009d4a:	9315      	str	r3, [sp, #84]	; 0x54
 8009d4c:	9b02      	ldr	r3, [sp, #8]
 8009d4e:	2b16      	cmp	r3, #22
 8009d50:	d80f      	bhi.n	8009d72 <_dtoa_r+0x19a>
 8009d52:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009d54:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8009d56:	00da      	lsls	r2, r3, #3
 8009d58:	4b7b      	ldr	r3, [pc, #492]	; (8009f48 <_dtoa_r+0x370>)
 8009d5a:	189b      	adds	r3, r3, r2
 8009d5c:	681a      	ldr	r2, [r3, #0]
 8009d5e:	685b      	ldr	r3, [r3, #4]
 8009d60:	f7f6 fb7a 	bl	8000458 <__aeabi_dcmplt>
 8009d64:	2800      	cmp	r0, #0
 8009d66:	d049      	beq.n	8009dfc <_dtoa_r+0x224>
 8009d68:	9b02      	ldr	r3, [sp, #8]
 8009d6a:	3b01      	subs	r3, #1
 8009d6c:	9302      	str	r3, [sp, #8]
 8009d6e:	2300      	movs	r3, #0
 8009d70:	9315      	str	r3, [sp, #84]	; 0x54
 8009d72:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8009d74:	1b9e      	subs	r6, r3, r6
 8009d76:	2300      	movs	r3, #0
 8009d78:	9308      	str	r3, [sp, #32]
 8009d7a:	0033      	movs	r3, r6
 8009d7c:	3b01      	subs	r3, #1
 8009d7e:	930d      	str	r3, [sp, #52]	; 0x34
 8009d80:	d504      	bpl.n	8009d8c <_dtoa_r+0x1b4>
 8009d82:	2301      	movs	r3, #1
 8009d84:	1b9b      	subs	r3, r3, r6
 8009d86:	9308      	str	r3, [sp, #32]
 8009d88:	2300      	movs	r3, #0
 8009d8a:	930d      	str	r3, [sp, #52]	; 0x34
 8009d8c:	9b02      	ldr	r3, [sp, #8]
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	db36      	blt.n	8009e00 <_dtoa_r+0x228>
 8009d92:	9a02      	ldr	r2, [sp, #8]
 8009d94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009d96:	4694      	mov	ip, r2
 8009d98:	4463      	add	r3, ip
 8009d9a:	930d      	str	r3, [sp, #52]	; 0x34
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	9214      	str	r2, [sp, #80]	; 0x50
 8009da0:	930e      	str	r3, [sp, #56]	; 0x38
 8009da2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009da4:	2401      	movs	r4, #1
 8009da6:	2b09      	cmp	r3, #9
 8009da8:	d862      	bhi.n	8009e70 <_dtoa_r+0x298>
 8009daa:	2b05      	cmp	r3, #5
 8009dac:	dd02      	ble.n	8009db4 <_dtoa_r+0x1dc>
 8009dae:	2400      	movs	r4, #0
 8009db0:	3b04      	subs	r3, #4
 8009db2:	9322      	str	r3, [sp, #136]	; 0x88
 8009db4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009db6:	1e98      	subs	r0, r3, #2
 8009db8:	2803      	cmp	r0, #3
 8009dba:	d862      	bhi.n	8009e82 <_dtoa_r+0x2aa>
 8009dbc:	f7f6 f9ac 	bl	8000118 <__gnu_thumb1_case_uqi>
 8009dc0:	56343629 	.word	0x56343629
 8009dc4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8009dc6:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8009dc8:	189e      	adds	r6, r3, r2
 8009dca:	4b60      	ldr	r3, [pc, #384]	; (8009f4c <_dtoa_r+0x374>)
 8009dcc:	18f2      	adds	r2, r6, r3
 8009dce:	2a20      	cmp	r2, #32
 8009dd0:	dd0f      	ble.n	8009df2 <_dtoa_r+0x21a>
 8009dd2:	2340      	movs	r3, #64	; 0x40
 8009dd4:	1a9b      	subs	r3, r3, r2
 8009dd6:	409d      	lsls	r5, r3
 8009dd8:	4b5d      	ldr	r3, [pc, #372]	; (8009f50 <_dtoa_r+0x378>)
 8009dda:	9802      	ldr	r0, [sp, #8]
 8009ddc:	18f3      	adds	r3, r6, r3
 8009dde:	40d8      	lsrs	r0, r3
 8009de0:	4328      	orrs	r0, r5
 8009de2:	f7f8 fafd 	bl	80023e0 <__aeabi_ui2d>
 8009de6:	2301      	movs	r3, #1
 8009de8:	4c5a      	ldr	r4, [pc, #360]	; (8009f54 <_dtoa_r+0x37c>)
 8009dea:	3e01      	subs	r6, #1
 8009dec:	1909      	adds	r1, r1, r4
 8009dee:	9316      	str	r3, [sp, #88]	; 0x58
 8009df0:	e776      	b.n	8009ce0 <_dtoa_r+0x108>
 8009df2:	2320      	movs	r3, #32
 8009df4:	9802      	ldr	r0, [sp, #8]
 8009df6:	1a9b      	subs	r3, r3, r2
 8009df8:	4098      	lsls	r0, r3
 8009dfa:	e7f2      	b.n	8009de2 <_dtoa_r+0x20a>
 8009dfc:	9015      	str	r0, [sp, #84]	; 0x54
 8009dfe:	e7b8      	b.n	8009d72 <_dtoa_r+0x19a>
 8009e00:	9b08      	ldr	r3, [sp, #32]
 8009e02:	9a02      	ldr	r2, [sp, #8]
 8009e04:	1a9b      	subs	r3, r3, r2
 8009e06:	9308      	str	r3, [sp, #32]
 8009e08:	4253      	negs	r3, r2
 8009e0a:	930e      	str	r3, [sp, #56]	; 0x38
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	9314      	str	r3, [sp, #80]	; 0x50
 8009e10:	e7c7      	b.n	8009da2 <_dtoa_r+0x1ca>
 8009e12:	2300      	movs	r3, #0
 8009e14:	930f      	str	r3, [sp, #60]	; 0x3c
 8009e16:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	dc36      	bgt.n	8009e8a <_dtoa_r+0x2b2>
 8009e1c:	2301      	movs	r3, #1
 8009e1e:	001a      	movs	r2, r3
 8009e20:	930c      	str	r3, [sp, #48]	; 0x30
 8009e22:	9306      	str	r3, [sp, #24]
 8009e24:	9223      	str	r2, [sp, #140]	; 0x8c
 8009e26:	e00d      	b.n	8009e44 <_dtoa_r+0x26c>
 8009e28:	2301      	movs	r3, #1
 8009e2a:	e7f3      	b.n	8009e14 <_dtoa_r+0x23c>
 8009e2c:	2300      	movs	r3, #0
 8009e2e:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8009e30:	930f      	str	r3, [sp, #60]	; 0x3c
 8009e32:	4694      	mov	ip, r2
 8009e34:	9b02      	ldr	r3, [sp, #8]
 8009e36:	4463      	add	r3, ip
 8009e38:	930c      	str	r3, [sp, #48]	; 0x30
 8009e3a:	3301      	adds	r3, #1
 8009e3c:	9306      	str	r3, [sp, #24]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	dc00      	bgt.n	8009e44 <_dtoa_r+0x26c>
 8009e42:	2301      	movs	r3, #1
 8009e44:	2200      	movs	r2, #0
 8009e46:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009e48:	6042      	str	r2, [r0, #4]
 8009e4a:	3204      	adds	r2, #4
 8009e4c:	0015      	movs	r5, r2
 8009e4e:	3514      	adds	r5, #20
 8009e50:	6841      	ldr	r1, [r0, #4]
 8009e52:	429d      	cmp	r5, r3
 8009e54:	d91d      	bls.n	8009e92 <_dtoa_r+0x2ba>
 8009e56:	0038      	movs	r0, r7
 8009e58:	f001 f988 	bl	800b16c <_Balloc>
 8009e5c:	9005      	str	r0, [sp, #20]
 8009e5e:	2800      	cmp	r0, #0
 8009e60:	d11b      	bne.n	8009e9a <_dtoa_r+0x2c2>
 8009e62:	21d5      	movs	r1, #213	; 0xd5
 8009e64:	0002      	movs	r2, r0
 8009e66:	4b3c      	ldr	r3, [pc, #240]	; (8009f58 <_dtoa_r+0x380>)
 8009e68:	0049      	lsls	r1, r1, #1
 8009e6a:	e6ca      	b.n	8009c02 <_dtoa_r+0x2a>
 8009e6c:	2301      	movs	r3, #1
 8009e6e:	e7de      	b.n	8009e2e <_dtoa_r+0x256>
 8009e70:	2300      	movs	r3, #0
 8009e72:	940f      	str	r4, [sp, #60]	; 0x3c
 8009e74:	9322      	str	r3, [sp, #136]	; 0x88
 8009e76:	3b01      	subs	r3, #1
 8009e78:	930c      	str	r3, [sp, #48]	; 0x30
 8009e7a:	9306      	str	r3, [sp, #24]
 8009e7c:	2200      	movs	r2, #0
 8009e7e:	3313      	adds	r3, #19
 8009e80:	e7d0      	b.n	8009e24 <_dtoa_r+0x24c>
 8009e82:	2301      	movs	r3, #1
 8009e84:	930f      	str	r3, [sp, #60]	; 0x3c
 8009e86:	3b02      	subs	r3, #2
 8009e88:	e7f6      	b.n	8009e78 <_dtoa_r+0x2a0>
 8009e8a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009e8c:	930c      	str	r3, [sp, #48]	; 0x30
 8009e8e:	9306      	str	r3, [sp, #24]
 8009e90:	e7d8      	b.n	8009e44 <_dtoa_r+0x26c>
 8009e92:	3101      	adds	r1, #1
 8009e94:	6041      	str	r1, [r0, #4]
 8009e96:	0052      	lsls	r2, r2, #1
 8009e98:	e7d8      	b.n	8009e4c <_dtoa_r+0x274>
 8009e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e9c:	9a05      	ldr	r2, [sp, #20]
 8009e9e:	601a      	str	r2, [r3, #0]
 8009ea0:	9b06      	ldr	r3, [sp, #24]
 8009ea2:	2b0e      	cmp	r3, #14
 8009ea4:	d900      	bls.n	8009ea8 <_dtoa_r+0x2d0>
 8009ea6:	e0eb      	b.n	800a080 <_dtoa_r+0x4a8>
 8009ea8:	2c00      	cmp	r4, #0
 8009eaa:	d100      	bne.n	8009eae <_dtoa_r+0x2d6>
 8009eac:	e0e8      	b.n	800a080 <_dtoa_r+0x4a8>
 8009eae:	9b02      	ldr	r3, [sp, #8]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	dd68      	ble.n	8009f86 <_dtoa_r+0x3ae>
 8009eb4:	001a      	movs	r2, r3
 8009eb6:	210f      	movs	r1, #15
 8009eb8:	4b23      	ldr	r3, [pc, #140]	; (8009f48 <_dtoa_r+0x370>)
 8009eba:	400a      	ands	r2, r1
 8009ebc:	00d2      	lsls	r2, r2, #3
 8009ebe:	189b      	adds	r3, r3, r2
 8009ec0:	681d      	ldr	r5, [r3, #0]
 8009ec2:	685e      	ldr	r6, [r3, #4]
 8009ec4:	9b02      	ldr	r3, [sp, #8]
 8009ec6:	111c      	asrs	r4, r3, #4
 8009ec8:	2302      	movs	r3, #2
 8009eca:	9310      	str	r3, [sp, #64]	; 0x40
 8009ecc:	9b02      	ldr	r3, [sp, #8]
 8009ece:	05db      	lsls	r3, r3, #23
 8009ed0:	d50b      	bpl.n	8009eea <_dtoa_r+0x312>
 8009ed2:	4b22      	ldr	r3, [pc, #136]	; (8009f5c <_dtoa_r+0x384>)
 8009ed4:	400c      	ands	r4, r1
 8009ed6:	6a1a      	ldr	r2, [r3, #32]
 8009ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eda:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009edc:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8009ede:	f7f6 fff7 	bl	8000ed0 <__aeabi_ddiv>
 8009ee2:	2303      	movs	r3, #3
 8009ee4:	900a      	str	r0, [sp, #40]	; 0x28
 8009ee6:	910b      	str	r1, [sp, #44]	; 0x2c
 8009ee8:	9310      	str	r3, [sp, #64]	; 0x40
 8009eea:	4b1c      	ldr	r3, [pc, #112]	; (8009f5c <_dtoa_r+0x384>)
 8009eec:	9307      	str	r3, [sp, #28]
 8009eee:	2c00      	cmp	r4, #0
 8009ef0:	d136      	bne.n	8009f60 <_dtoa_r+0x388>
 8009ef2:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009ef4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009ef6:	002a      	movs	r2, r5
 8009ef8:	0033      	movs	r3, r6
 8009efa:	f7f6 ffe9 	bl	8000ed0 <__aeabi_ddiv>
 8009efe:	900a      	str	r0, [sp, #40]	; 0x28
 8009f00:	910b      	str	r1, [sp, #44]	; 0x2c
 8009f02:	e05c      	b.n	8009fbe <_dtoa_r+0x3e6>
 8009f04:	0800d526 	.word	0x0800d526
 8009f08:	0800d53d 	.word	0x0800d53d
 8009f0c:	7ff00000 	.word	0x7ff00000
 8009f10:	0000270f 	.word	0x0000270f
 8009f14:	0800d522 	.word	0x0800d522
 8009f18:	0800d525 	.word	0x0800d525
 8009f1c:	0800d39c 	.word	0x0800d39c
 8009f20:	0800d39d 	.word	0x0800d39d
 8009f24:	3ff00000 	.word	0x3ff00000
 8009f28:	fffffc01 	.word	0xfffffc01
 8009f2c:	3ff80000 	.word	0x3ff80000
 8009f30:	636f4361 	.word	0x636f4361
 8009f34:	3fd287a7 	.word	0x3fd287a7
 8009f38:	8b60c8b3 	.word	0x8b60c8b3
 8009f3c:	3fc68a28 	.word	0x3fc68a28
 8009f40:	509f79fb 	.word	0x509f79fb
 8009f44:	3fd34413 	.word	0x3fd34413
 8009f48:	0800d718 	.word	0x0800d718
 8009f4c:	00000432 	.word	0x00000432
 8009f50:	00000412 	.word	0x00000412
 8009f54:	fe100000 	.word	0xfe100000
 8009f58:	0800d59c 	.word	0x0800d59c
 8009f5c:	0800d6f0 	.word	0x0800d6f0
 8009f60:	2301      	movs	r3, #1
 8009f62:	421c      	tst	r4, r3
 8009f64:	d00b      	beq.n	8009f7e <_dtoa_r+0x3a6>
 8009f66:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009f68:	0028      	movs	r0, r5
 8009f6a:	3301      	adds	r3, #1
 8009f6c:	9310      	str	r3, [sp, #64]	; 0x40
 8009f6e:	9b07      	ldr	r3, [sp, #28]
 8009f70:	0031      	movs	r1, r6
 8009f72:	681a      	ldr	r2, [r3, #0]
 8009f74:	685b      	ldr	r3, [r3, #4]
 8009f76:	f7f7 fbb1 	bl	80016dc <__aeabi_dmul>
 8009f7a:	0005      	movs	r5, r0
 8009f7c:	000e      	movs	r6, r1
 8009f7e:	9b07      	ldr	r3, [sp, #28]
 8009f80:	1064      	asrs	r4, r4, #1
 8009f82:	3308      	adds	r3, #8
 8009f84:	e7b2      	b.n	8009eec <_dtoa_r+0x314>
 8009f86:	2302      	movs	r3, #2
 8009f88:	9310      	str	r3, [sp, #64]	; 0x40
 8009f8a:	9b02      	ldr	r3, [sp, #8]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d016      	beq.n	8009fbe <_dtoa_r+0x3e6>
 8009f90:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009f92:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8009f94:	425c      	negs	r4, r3
 8009f96:	230f      	movs	r3, #15
 8009f98:	4ab5      	ldr	r2, [pc, #724]	; (800a270 <_dtoa_r+0x698>)
 8009f9a:	4023      	ands	r3, r4
 8009f9c:	00db      	lsls	r3, r3, #3
 8009f9e:	18d3      	adds	r3, r2, r3
 8009fa0:	681a      	ldr	r2, [r3, #0]
 8009fa2:	685b      	ldr	r3, [r3, #4]
 8009fa4:	f7f7 fb9a 	bl	80016dc <__aeabi_dmul>
 8009fa8:	2601      	movs	r6, #1
 8009faa:	2300      	movs	r3, #0
 8009fac:	900a      	str	r0, [sp, #40]	; 0x28
 8009fae:	910b      	str	r1, [sp, #44]	; 0x2c
 8009fb0:	4db0      	ldr	r5, [pc, #704]	; (800a274 <_dtoa_r+0x69c>)
 8009fb2:	1124      	asrs	r4, r4, #4
 8009fb4:	2c00      	cmp	r4, #0
 8009fb6:	d000      	beq.n	8009fba <_dtoa_r+0x3e2>
 8009fb8:	e094      	b.n	800a0e4 <_dtoa_r+0x50c>
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d19f      	bne.n	8009efe <_dtoa_r+0x326>
 8009fbe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d100      	bne.n	8009fc6 <_dtoa_r+0x3ee>
 8009fc4:	e09b      	b.n	800a0fe <_dtoa_r+0x526>
 8009fc6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009fc8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8009fca:	2200      	movs	r2, #0
 8009fcc:	0020      	movs	r0, r4
 8009fce:	0029      	movs	r1, r5
 8009fd0:	4ba9      	ldr	r3, [pc, #676]	; (800a278 <_dtoa_r+0x6a0>)
 8009fd2:	f7f6 fa41 	bl	8000458 <__aeabi_dcmplt>
 8009fd6:	2800      	cmp	r0, #0
 8009fd8:	d100      	bne.n	8009fdc <_dtoa_r+0x404>
 8009fda:	e090      	b.n	800a0fe <_dtoa_r+0x526>
 8009fdc:	9b06      	ldr	r3, [sp, #24]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d100      	bne.n	8009fe4 <_dtoa_r+0x40c>
 8009fe2:	e08c      	b.n	800a0fe <_dtoa_r+0x526>
 8009fe4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	dd46      	ble.n	800a078 <_dtoa_r+0x4a0>
 8009fea:	9b02      	ldr	r3, [sp, #8]
 8009fec:	2200      	movs	r2, #0
 8009fee:	0020      	movs	r0, r4
 8009ff0:	0029      	movs	r1, r5
 8009ff2:	1e5e      	subs	r6, r3, #1
 8009ff4:	4ba1      	ldr	r3, [pc, #644]	; (800a27c <_dtoa_r+0x6a4>)
 8009ff6:	f7f7 fb71 	bl	80016dc <__aeabi_dmul>
 8009ffa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009ffc:	900a      	str	r0, [sp, #40]	; 0x28
 8009ffe:	910b      	str	r1, [sp, #44]	; 0x2c
 800a000:	3301      	adds	r3, #1
 800a002:	9310      	str	r3, [sp, #64]	; 0x40
 800a004:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a006:	9810      	ldr	r0, [sp, #64]	; 0x40
 800a008:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a00a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800a00c:	9307      	str	r3, [sp, #28]
 800a00e:	f7f8 f9b7 	bl	8002380 <__aeabi_i2d>
 800a012:	0022      	movs	r2, r4
 800a014:	002b      	movs	r3, r5
 800a016:	f7f7 fb61 	bl	80016dc <__aeabi_dmul>
 800a01a:	2200      	movs	r2, #0
 800a01c:	4b98      	ldr	r3, [pc, #608]	; (800a280 <_dtoa_r+0x6a8>)
 800a01e:	f7f6 fbed 	bl	80007fc <__aeabi_dadd>
 800a022:	9010      	str	r0, [sp, #64]	; 0x40
 800a024:	9111      	str	r1, [sp, #68]	; 0x44
 800a026:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a028:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a02a:	920a      	str	r2, [sp, #40]	; 0x28
 800a02c:	930b      	str	r3, [sp, #44]	; 0x2c
 800a02e:	4a95      	ldr	r2, [pc, #596]	; (800a284 <_dtoa_r+0x6ac>)
 800a030:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a032:	4694      	mov	ip, r2
 800a034:	4463      	add	r3, ip
 800a036:	9317      	str	r3, [sp, #92]	; 0x5c
 800a038:	930b      	str	r3, [sp, #44]	; 0x2c
 800a03a:	9b07      	ldr	r3, [sp, #28]
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d161      	bne.n	800a104 <_dtoa_r+0x52c>
 800a040:	2200      	movs	r2, #0
 800a042:	0020      	movs	r0, r4
 800a044:	0029      	movs	r1, r5
 800a046:	4b90      	ldr	r3, [pc, #576]	; (800a288 <_dtoa_r+0x6b0>)
 800a048:	f7f7 fdb4 	bl	8001bb4 <__aeabi_dsub>
 800a04c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a04e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a050:	0004      	movs	r4, r0
 800a052:	000d      	movs	r5, r1
 800a054:	f7f6 fa14 	bl	8000480 <__aeabi_dcmpgt>
 800a058:	2800      	cmp	r0, #0
 800a05a:	d000      	beq.n	800a05e <_dtoa_r+0x486>
 800a05c:	e2b5      	b.n	800a5ca <_dtoa_r+0x9f2>
 800a05e:	488b      	ldr	r0, [pc, #556]	; (800a28c <_dtoa_r+0x6b4>)
 800a060:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a062:	4684      	mov	ip, r0
 800a064:	4461      	add	r1, ip
 800a066:	000b      	movs	r3, r1
 800a068:	0020      	movs	r0, r4
 800a06a:	0029      	movs	r1, r5
 800a06c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a06e:	f7f6 f9f3 	bl	8000458 <__aeabi_dcmplt>
 800a072:	2800      	cmp	r0, #0
 800a074:	d000      	beq.n	800a078 <_dtoa_r+0x4a0>
 800a076:	e2a5      	b.n	800a5c4 <_dtoa_r+0x9ec>
 800a078:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a07a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800a07c:	930a      	str	r3, [sp, #40]	; 0x28
 800a07e:	940b      	str	r4, [sp, #44]	; 0x2c
 800a080:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a082:	2b00      	cmp	r3, #0
 800a084:	da00      	bge.n	800a088 <_dtoa_r+0x4b0>
 800a086:	e171      	b.n	800a36c <_dtoa_r+0x794>
 800a088:	9a02      	ldr	r2, [sp, #8]
 800a08a:	2a0e      	cmp	r2, #14
 800a08c:	dd00      	ble.n	800a090 <_dtoa_r+0x4b8>
 800a08e:	e16d      	b.n	800a36c <_dtoa_r+0x794>
 800a090:	4b77      	ldr	r3, [pc, #476]	; (800a270 <_dtoa_r+0x698>)
 800a092:	00d2      	lsls	r2, r2, #3
 800a094:	189b      	adds	r3, r3, r2
 800a096:	685c      	ldr	r4, [r3, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	9308      	str	r3, [sp, #32]
 800a09c:	9409      	str	r4, [sp, #36]	; 0x24
 800a09e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	db00      	blt.n	800a0a6 <_dtoa_r+0x4ce>
 800a0a4:	e0f6      	b.n	800a294 <_dtoa_r+0x6bc>
 800a0a6:	9b06      	ldr	r3, [sp, #24]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	dd00      	ble.n	800a0ae <_dtoa_r+0x4d6>
 800a0ac:	e0f2      	b.n	800a294 <_dtoa_r+0x6bc>
 800a0ae:	d000      	beq.n	800a0b2 <_dtoa_r+0x4da>
 800a0b0:	e288      	b.n	800a5c4 <_dtoa_r+0x9ec>
 800a0b2:	9808      	ldr	r0, [sp, #32]
 800a0b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a0b6:	2200      	movs	r2, #0
 800a0b8:	4b73      	ldr	r3, [pc, #460]	; (800a288 <_dtoa_r+0x6b0>)
 800a0ba:	f7f7 fb0f 	bl	80016dc <__aeabi_dmul>
 800a0be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a0c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a0c2:	f7f6 f9e7 	bl	8000494 <__aeabi_dcmpge>
 800a0c6:	9e06      	ldr	r6, [sp, #24]
 800a0c8:	0035      	movs	r5, r6
 800a0ca:	2800      	cmp	r0, #0
 800a0cc:	d000      	beq.n	800a0d0 <_dtoa_r+0x4f8>
 800a0ce:	e25f      	b.n	800a590 <_dtoa_r+0x9b8>
 800a0d0:	9b05      	ldr	r3, [sp, #20]
 800a0d2:	9a05      	ldr	r2, [sp, #20]
 800a0d4:	3301      	adds	r3, #1
 800a0d6:	9307      	str	r3, [sp, #28]
 800a0d8:	2331      	movs	r3, #49	; 0x31
 800a0da:	7013      	strb	r3, [r2, #0]
 800a0dc:	9b02      	ldr	r3, [sp, #8]
 800a0de:	3301      	adds	r3, #1
 800a0e0:	9302      	str	r3, [sp, #8]
 800a0e2:	e25a      	b.n	800a59a <_dtoa_r+0x9c2>
 800a0e4:	4234      	tst	r4, r6
 800a0e6:	d007      	beq.n	800a0f8 <_dtoa_r+0x520>
 800a0e8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a0ea:	3301      	adds	r3, #1
 800a0ec:	9310      	str	r3, [sp, #64]	; 0x40
 800a0ee:	682a      	ldr	r2, [r5, #0]
 800a0f0:	686b      	ldr	r3, [r5, #4]
 800a0f2:	f7f7 faf3 	bl	80016dc <__aeabi_dmul>
 800a0f6:	0033      	movs	r3, r6
 800a0f8:	1064      	asrs	r4, r4, #1
 800a0fa:	3508      	adds	r5, #8
 800a0fc:	e75a      	b.n	8009fb4 <_dtoa_r+0x3dc>
 800a0fe:	9e02      	ldr	r6, [sp, #8]
 800a100:	9b06      	ldr	r3, [sp, #24]
 800a102:	e780      	b.n	800a006 <_dtoa_r+0x42e>
 800a104:	9b07      	ldr	r3, [sp, #28]
 800a106:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a108:	1e5a      	subs	r2, r3, #1
 800a10a:	4b59      	ldr	r3, [pc, #356]	; (800a270 <_dtoa_r+0x698>)
 800a10c:	00d2      	lsls	r2, r2, #3
 800a10e:	189b      	adds	r3, r3, r2
 800a110:	681a      	ldr	r2, [r3, #0]
 800a112:	685b      	ldr	r3, [r3, #4]
 800a114:	2900      	cmp	r1, #0
 800a116:	d051      	beq.n	800a1bc <_dtoa_r+0x5e4>
 800a118:	2000      	movs	r0, #0
 800a11a:	495d      	ldr	r1, [pc, #372]	; (800a290 <_dtoa_r+0x6b8>)
 800a11c:	f7f6 fed8 	bl	8000ed0 <__aeabi_ddiv>
 800a120:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a122:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a124:	f7f7 fd46 	bl	8001bb4 <__aeabi_dsub>
 800a128:	9a05      	ldr	r2, [sp, #20]
 800a12a:	9b05      	ldr	r3, [sp, #20]
 800a12c:	4694      	mov	ip, r2
 800a12e:	9310      	str	r3, [sp, #64]	; 0x40
 800a130:	9b07      	ldr	r3, [sp, #28]
 800a132:	900a      	str	r0, [sp, #40]	; 0x28
 800a134:	910b      	str	r1, [sp, #44]	; 0x2c
 800a136:	4463      	add	r3, ip
 800a138:	9319      	str	r3, [sp, #100]	; 0x64
 800a13a:	0029      	movs	r1, r5
 800a13c:	0020      	movs	r0, r4
 800a13e:	f7f8 f8e9 	bl	8002314 <__aeabi_d2iz>
 800a142:	9017      	str	r0, [sp, #92]	; 0x5c
 800a144:	f7f8 f91c 	bl	8002380 <__aeabi_i2d>
 800a148:	0002      	movs	r2, r0
 800a14a:	000b      	movs	r3, r1
 800a14c:	0020      	movs	r0, r4
 800a14e:	0029      	movs	r1, r5
 800a150:	f7f7 fd30 	bl	8001bb4 <__aeabi_dsub>
 800a154:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a156:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a158:	3301      	adds	r3, #1
 800a15a:	9307      	str	r3, [sp, #28]
 800a15c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a15e:	0004      	movs	r4, r0
 800a160:	3330      	adds	r3, #48	; 0x30
 800a162:	7013      	strb	r3, [r2, #0]
 800a164:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a166:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a168:	000d      	movs	r5, r1
 800a16a:	f7f6 f975 	bl	8000458 <__aeabi_dcmplt>
 800a16e:	2800      	cmp	r0, #0
 800a170:	d175      	bne.n	800a25e <_dtoa_r+0x686>
 800a172:	0022      	movs	r2, r4
 800a174:	002b      	movs	r3, r5
 800a176:	2000      	movs	r0, #0
 800a178:	493f      	ldr	r1, [pc, #252]	; (800a278 <_dtoa_r+0x6a0>)
 800a17a:	f7f7 fd1b 	bl	8001bb4 <__aeabi_dsub>
 800a17e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a180:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a182:	f7f6 f969 	bl	8000458 <__aeabi_dcmplt>
 800a186:	2800      	cmp	r0, #0
 800a188:	d000      	beq.n	800a18c <_dtoa_r+0x5b4>
 800a18a:	e0d1      	b.n	800a330 <_dtoa_r+0x758>
 800a18c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a18e:	9a07      	ldr	r2, [sp, #28]
 800a190:	4293      	cmp	r3, r2
 800a192:	d100      	bne.n	800a196 <_dtoa_r+0x5be>
 800a194:	e770      	b.n	800a078 <_dtoa_r+0x4a0>
 800a196:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a198:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a19a:	2200      	movs	r2, #0
 800a19c:	4b37      	ldr	r3, [pc, #220]	; (800a27c <_dtoa_r+0x6a4>)
 800a19e:	f7f7 fa9d 	bl	80016dc <__aeabi_dmul>
 800a1a2:	4b36      	ldr	r3, [pc, #216]	; (800a27c <_dtoa_r+0x6a4>)
 800a1a4:	900a      	str	r0, [sp, #40]	; 0x28
 800a1a6:	910b      	str	r1, [sp, #44]	; 0x2c
 800a1a8:	2200      	movs	r2, #0
 800a1aa:	0020      	movs	r0, r4
 800a1ac:	0029      	movs	r1, r5
 800a1ae:	f7f7 fa95 	bl	80016dc <__aeabi_dmul>
 800a1b2:	9b07      	ldr	r3, [sp, #28]
 800a1b4:	0004      	movs	r4, r0
 800a1b6:	000d      	movs	r5, r1
 800a1b8:	9310      	str	r3, [sp, #64]	; 0x40
 800a1ba:	e7be      	b.n	800a13a <_dtoa_r+0x562>
 800a1bc:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a1be:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a1c0:	f7f7 fa8c 	bl	80016dc <__aeabi_dmul>
 800a1c4:	9a05      	ldr	r2, [sp, #20]
 800a1c6:	9b05      	ldr	r3, [sp, #20]
 800a1c8:	4694      	mov	ip, r2
 800a1ca:	930a      	str	r3, [sp, #40]	; 0x28
 800a1cc:	9b07      	ldr	r3, [sp, #28]
 800a1ce:	9010      	str	r0, [sp, #64]	; 0x40
 800a1d0:	9111      	str	r1, [sp, #68]	; 0x44
 800a1d2:	4463      	add	r3, ip
 800a1d4:	9319      	str	r3, [sp, #100]	; 0x64
 800a1d6:	0029      	movs	r1, r5
 800a1d8:	0020      	movs	r0, r4
 800a1da:	f7f8 f89b 	bl	8002314 <__aeabi_d2iz>
 800a1de:	9017      	str	r0, [sp, #92]	; 0x5c
 800a1e0:	f7f8 f8ce 	bl	8002380 <__aeabi_i2d>
 800a1e4:	0002      	movs	r2, r0
 800a1e6:	000b      	movs	r3, r1
 800a1e8:	0020      	movs	r0, r4
 800a1ea:	0029      	movs	r1, r5
 800a1ec:	f7f7 fce2 	bl	8001bb4 <__aeabi_dsub>
 800a1f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a1f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a1f4:	3330      	adds	r3, #48	; 0x30
 800a1f6:	7013      	strb	r3, [r2, #0]
 800a1f8:	0013      	movs	r3, r2
 800a1fa:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a1fc:	3301      	adds	r3, #1
 800a1fe:	0004      	movs	r4, r0
 800a200:	000d      	movs	r5, r1
 800a202:	930a      	str	r3, [sp, #40]	; 0x28
 800a204:	4293      	cmp	r3, r2
 800a206:	d12c      	bne.n	800a262 <_dtoa_r+0x68a>
 800a208:	9810      	ldr	r0, [sp, #64]	; 0x40
 800a20a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a20c:	9a05      	ldr	r2, [sp, #20]
 800a20e:	9b07      	ldr	r3, [sp, #28]
 800a210:	4694      	mov	ip, r2
 800a212:	4463      	add	r3, ip
 800a214:	2200      	movs	r2, #0
 800a216:	9307      	str	r3, [sp, #28]
 800a218:	4b1d      	ldr	r3, [pc, #116]	; (800a290 <_dtoa_r+0x6b8>)
 800a21a:	f7f6 faef 	bl	80007fc <__aeabi_dadd>
 800a21e:	0002      	movs	r2, r0
 800a220:	000b      	movs	r3, r1
 800a222:	0020      	movs	r0, r4
 800a224:	0029      	movs	r1, r5
 800a226:	f7f6 f92b 	bl	8000480 <__aeabi_dcmpgt>
 800a22a:	2800      	cmp	r0, #0
 800a22c:	d000      	beq.n	800a230 <_dtoa_r+0x658>
 800a22e:	e07f      	b.n	800a330 <_dtoa_r+0x758>
 800a230:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a232:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a234:	2000      	movs	r0, #0
 800a236:	4916      	ldr	r1, [pc, #88]	; (800a290 <_dtoa_r+0x6b8>)
 800a238:	f7f7 fcbc 	bl	8001bb4 <__aeabi_dsub>
 800a23c:	0002      	movs	r2, r0
 800a23e:	000b      	movs	r3, r1
 800a240:	0020      	movs	r0, r4
 800a242:	0029      	movs	r1, r5
 800a244:	f7f6 f908 	bl	8000458 <__aeabi_dcmplt>
 800a248:	2800      	cmp	r0, #0
 800a24a:	d100      	bne.n	800a24e <_dtoa_r+0x676>
 800a24c:	e714      	b.n	800a078 <_dtoa_r+0x4a0>
 800a24e:	9b07      	ldr	r3, [sp, #28]
 800a250:	001a      	movs	r2, r3
 800a252:	3a01      	subs	r2, #1
 800a254:	9207      	str	r2, [sp, #28]
 800a256:	7812      	ldrb	r2, [r2, #0]
 800a258:	2a30      	cmp	r2, #48	; 0x30
 800a25a:	d0f8      	beq.n	800a24e <_dtoa_r+0x676>
 800a25c:	9307      	str	r3, [sp, #28]
 800a25e:	9602      	str	r6, [sp, #8]
 800a260:	e054      	b.n	800a30c <_dtoa_r+0x734>
 800a262:	2200      	movs	r2, #0
 800a264:	4b05      	ldr	r3, [pc, #20]	; (800a27c <_dtoa_r+0x6a4>)
 800a266:	f7f7 fa39 	bl	80016dc <__aeabi_dmul>
 800a26a:	0004      	movs	r4, r0
 800a26c:	000d      	movs	r5, r1
 800a26e:	e7b2      	b.n	800a1d6 <_dtoa_r+0x5fe>
 800a270:	0800d718 	.word	0x0800d718
 800a274:	0800d6f0 	.word	0x0800d6f0
 800a278:	3ff00000 	.word	0x3ff00000
 800a27c:	40240000 	.word	0x40240000
 800a280:	401c0000 	.word	0x401c0000
 800a284:	fcc00000 	.word	0xfcc00000
 800a288:	40140000 	.word	0x40140000
 800a28c:	7cc00000 	.word	0x7cc00000
 800a290:	3fe00000 	.word	0x3fe00000
 800a294:	9b06      	ldr	r3, [sp, #24]
 800a296:	9e05      	ldr	r6, [sp, #20]
 800a298:	3b01      	subs	r3, #1
 800a29a:	199b      	adds	r3, r3, r6
 800a29c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a29e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800a2a0:	930a      	str	r3, [sp, #40]	; 0x28
 800a2a2:	9a08      	ldr	r2, [sp, #32]
 800a2a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2a6:	0020      	movs	r0, r4
 800a2a8:	0029      	movs	r1, r5
 800a2aa:	f7f6 fe11 	bl	8000ed0 <__aeabi_ddiv>
 800a2ae:	f7f8 f831 	bl	8002314 <__aeabi_d2iz>
 800a2b2:	9006      	str	r0, [sp, #24]
 800a2b4:	f7f8 f864 	bl	8002380 <__aeabi_i2d>
 800a2b8:	9a08      	ldr	r2, [sp, #32]
 800a2ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2bc:	f7f7 fa0e 	bl	80016dc <__aeabi_dmul>
 800a2c0:	0002      	movs	r2, r0
 800a2c2:	000b      	movs	r3, r1
 800a2c4:	0020      	movs	r0, r4
 800a2c6:	0029      	movs	r1, r5
 800a2c8:	f7f7 fc74 	bl	8001bb4 <__aeabi_dsub>
 800a2cc:	0033      	movs	r3, r6
 800a2ce:	9a06      	ldr	r2, [sp, #24]
 800a2d0:	3601      	adds	r6, #1
 800a2d2:	3230      	adds	r2, #48	; 0x30
 800a2d4:	701a      	strb	r2, [r3, #0]
 800a2d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a2d8:	9607      	str	r6, [sp, #28]
 800a2da:	429a      	cmp	r2, r3
 800a2dc:	d139      	bne.n	800a352 <_dtoa_r+0x77a>
 800a2de:	0002      	movs	r2, r0
 800a2e0:	000b      	movs	r3, r1
 800a2e2:	f7f6 fa8b 	bl	80007fc <__aeabi_dadd>
 800a2e6:	9a08      	ldr	r2, [sp, #32]
 800a2e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2ea:	0004      	movs	r4, r0
 800a2ec:	000d      	movs	r5, r1
 800a2ee:	f7f6 f8c7 	bl	8000480 <__aeabi_dcmpgt>
 800a2f2:	2800      	cmp	r0, #0
 800a2f4:	d11b      	bne.n	800a32e <_dtoa_r+0x756>
 800a2f6:	9a08      	ldr	r2, [sp, #32]
 800a2f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2fa:	0020      	movs	r0, r4
 800a2fc:	0029      	movs	r1, r5
 800a2fe:	f7f6 f8a5 	bl	800044c <__aeabi_dcmpeq>
 800a302:	2800      	cmp	r0, #0
 800a304:	d002      	beq.n	800a30c <_dtoa_r+0x734>
 800a306:	9b06      	ldr	r3, [sp, #24]
 800a308:	07db      	lsls	r3, r3, #31
 800a30a:	d410      	bmi.n	800a32e <_dtoa_r+0x756>
 800a30c:	0038      	movs	r0, r7
 800a30e:	9904      	ldr	r1, [sp, #16]
 800a310:	f000 ff70 	bl	800b1f4 <_Bfree>
 800a314:	2300      	movs	r3, #0
 800a316:	9a07      	ldr	r2, [sp, #28]
 800a318:	9802      	ldr	r0, [sp, #8]
 800a31a:	7013      	strb	r3, [r2, #0]
 800a31c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a31e:	3001      	adds	r0, #1
 800a320:	6018      	str	r0, [r3, #0]
 800a322:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a324:	2b00      	cmp	r3, #0
 800a326:	d100      	bne.n	800a32a <_dtoa_r+0x752>
 800a328:	e4a3      	b.n	8009c72 <_dtoa_r+0x9a>
 800a32a:	601a      	str	r2, [r3, #0]
 800a32c:	e4a1      	b.n	8009c72 <_dtoa_r+0x9a>
 800a32e:	9e02      	ldr	r6, [sp, #8]
 800a330:	9b07      	ldr	r3, [sp, #28]
 800a332:	9307      	str	r3, [sp, #28]
 800a334:	3b01      	subs	r3, #1
 800a336:	781a      	ldrb	r2, [r3, #0]
 800a338:	2a39      	cmp	r2, #57	; 0x39
 800a33a:	d106      	bne.n	800a34a <_dtoa_r+0x772>
 800a33c:	9a05      	ldr	r2, [sp, #20]
 800a33e:	429a      	cmp	r2, r3
 800a340:	d1f7      	bne.n	800a332 <_dtoa_r+0x75a>
 800a342:	2230      	movs	r2, #48	; 0x30
 800a344:	9905      	ldr	r1, [sp, #20]
 800a346:	3601      	adds	r6, #1
 800a348:	700a      	strb	r2, [r1, #0]
 800a34a:	781a      	ldrb	r2, [r3, #0]
 800a34c:	3201      	adds	r2, #1
 800a34e:	701a      	strb	r2, [r3, #0]
 800a350:	e785      	b.n	800a25e <_dtoa_r+0x686>
 800a352:	2200      	movs	r2, #0
 800a354:	4bad      	ldr	r3, [pc, #692]	; (800a60c <_dtoa_r+0xa34>)
 800a356:	f7f7 f9c1 	bl	80016dc <__aeabi_dmul>
 800a35a:	2200      	movs	r2, #0
 800a35c:	2300      	movs	r3, #0
 800a35e:	0004      	movs	r4, r0
 800a360:	000d      	movs	r5, r1
 800a362:	f7f6 f873 	bl	800044c <__aeabi_dcmpeq>
 800a366:	2800      	cmp	r0, #0
 800a368:	d09b      	beq.n	800a2a2 <_dtoa_r+0x6ca>
 800a36a:	e7cf      	b.n	800a30c <_dtoa_r+0x734>
 800a36c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a36e:	2a00      	cmp	r2, #0
 800a370:	d100      	bne.n	800a374 <_dtoa_r+0x79c>
 800a372:	e082      	b.n	800a47a <_dtoa_r+0x8a2>
 800a374:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800a376:	2a01      	cmp	r2, #1
 800a378:	dc66      	bgt.n	800a448 <_dtoa_r+0x870>
 800a37a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a37c:	2a00      	cmp	r2, #0
 800a37e:	d05f      	beq.n	800a440 <_dtoa_r+0x868>
 800a380:	4aa3      	ldr	r2, [pc, #652]	; (800a610 <_dtoa_r+0xa38>)
 800a382:	189b      	adds	r3, r3, r2
 800a384:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800a386:	9c08      	ldr	r4, [sp, #32]
 800a388:	9a08      	ldr	r2, [sp, #32]
 800a38a:	2101      	movs	r1, #1
 800a38c:	18d2      	adds	r2, r2, r3
 800a38e:	9208      	str	r2, [sp, #32]
 800a390:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a392:	0038      	movs	r0, r7
 800a394:	18d3      	adds	r3, r2, r3
 800a396:	930d      	str	r3, [sp, #52]	; 0x34
 800a398:	f001 f828 	bl	800b3ec <__i2b>
 800a39c:	0005      	movs	r5, r0
 800a39e:	2c00      	cmp	r4, #0
 800a3a0:	dd0e      	ble.n	800a3c0 <_dtoa_r+0x7e8>
 800a3a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	dd0b      	ble.n	800a3c0 <_dtoa_r+0x7e8>
 800a3a8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a3aa:	0023      	movs	r3, r4
 800a3ac:	4294      	cmp	r4, r2
 800a3ae:	dd00      	ble.n	800a3b2 <_dtoa_r+0x7da>
 800a3b0:	0013      	movs	r3, r2
 800a3b2:	9a08      	ldr	r2, [sp, #32]
 800a3b4:	1ae4      	subs	r4, r4, r3
 800a3b6:	1ad2      	subs	r2, r2, r3
 800a3b8:	9208      	str	r2, [sp, #32]
 800a3ba:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a3bc:	1ad3      	subs	r3, r2, r3
 800a3be:	930d      	str	r3, [sp, #52]	; 0x34
 800a3c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d01f      	beq.n	800a406 <_dtoa_r+0x82e>
 800a3c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d05a      	beq.n	800a482 <_dtoa_r+0x8aa>
 800a3cc:	2e00      	cmp	r6, #0
 800a3ce:	dd11      	ble.n	800a3f4 <_dtoa_r+0x81c>
 800a3d0:	0029      	movs	r1, r5
 800a3d2:	0032      	movs	r2, r6
 800a3d4:	0038      	movs	r0, r7
 800a3d6:	f001 f8cf 	bl	800b578 <__pow5mult>
 800a3da:	9a04      	ldr	r2, [sp, #16]
 800a3dc:	0001      	movs	r1, r0
 800a3de:	0005      	movs	r5, r0
 800a3e0:	0038      	movs	r0, r7
 800a3e2:	f001 f819 	bl	800b418 <__multiply>
 800a3e6:	9904      	ldr	r1, [sp, #16]
 800a3e8:	9007      	str	r0, [sp, #28]
 800a3ea:	0038      	movs	r0, r7
 800a3ec:	f000 ff02 	bl	800b1f4 <_Bfree>
 800a3f0:	9b07      	ldr	r3, [sp, #28]
 800a3f2:	9304      	str	r3, [sp, #16]
 800a3f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a3f6:	1b9a      	subs	r2, r3, r6
 800a3f8:	42b3      	cmp	r3, r6
 800a3fa:	d004      	beq.n	800a406 <_dtoa_r+0x82e>
 800a3fc:	0038      	movs	r0, r7
 800a3fe:	9904      	ldr	r1, [sp, #16]
 800a400:	f001 f8ba 	bl	800b578 <__pow5mult>
 800a404:	9004      	str	r0, [sp, #16]
 800a406:	2101      	movs	r1, #1
 800a408:	0038      	movs	r0, r7
 800a40a:	f000 ffef 	bl	800b3ec <__i2b>
 800a40e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a410:	0006      	movs	r6, r0
 800a412:	2b00      	cmp	r3, #0
 800a414:	dd37      	ble.n	800a486 <_dtoa_r+0x8ae>
 800a416:	001a      	movs	r2, r3
 800a418:	0001      	movs	r1, r0
 800a41a:	0038      	movs	r0, r7
 800a41c:	f001 f8ac 	bl	800b578 <__pow5mult>
 800a420:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a422:	0006      	movs	r6, r0
 800a424:	2b01      	cmp	r3, #1
 800a426:	dd33      	ble.n	800a490 <_dtoa_r+0x8b8>
 800a428:	2300      	movs	r3, #0
 800a42a:	9307      	str	r3, [sp, #28]
 800a42c:	6933      	ldr	r3, [r6, #16]
 800a42e:	3303      	adds	r3, #3
 800a430:	009b      	lsls	r3, r3, #2
 800a432:	18f3      	adds	r3, r6, r3
 800a434:	6858      	ldr	r0, [r3, #4]
 800a436:	f000 ff91 	bl	800b35c <__hi0bits>
 800a43a:	2320      	movs	r3, #32
 800a43c:	1a18      	subs	r0, r3, r0
 800a43e:	e03f      	b.n	800a4c0 <_dtoa_r+0x8e8>
 800a440:	2336      	movs	r3, #54	; 0x36
 800a442:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a444:	1a9b      	subs	r3, r3, r2
 800a446:	e79d      	b.n	800a384 <_dtoa_r+0x7ac>
 800a448:	9b06      	ldr	r3, [sp, #24]
 800a44a:	1e5e      	subs	r6, r3, #1
 800a44c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a44e:	42b3      	cmp	r3, r6
 800a450:	db08      	blt.n	800a464 <_dtoa_r+0x88c>
 800a452:	1b9e      	subs	r6, r3, r6
 800a454:	9b06      	ldr	r3, [sp, #24]
 800a456:	2b00      	cmp	r3, #0
 800a458:	da0c      	bge.n	800a474 <_dtoa_r+0x89c>
 800a45a:	9b08      	ldr	r3, [sp, #32]
 800a45c:	9a06      	ldr	r2, [sp, #24]
 800a45e:	1a9c      	subs	r4, r3, r2
 800a460:	2300      	movs	r3, #0
 800a462:	e791      	b.n	800a388 <_dtoa_r+0x7b0>
 800a464:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a466:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a468:	1af3      	subs	r3, r6, r3
 800a46a:	18d3      	adds	r3, r2, r3
 800a46c:	960e      	str	r6, [sp, #56]	; 0x38
 800a46e:	9314      	str	r3, [sp, #80]	; 0x50
 800a470:	2600      	movs	r6, #0
 800a472:	e7ef      	b.n	800a454 <_dtoa_r+0x87c>
 800a474:	9c08      	ldr	r4, [sp, #32]
 800a476:	9b06      	ldr	r3, [sp, #24]
 800a478:	e786      	b.n	800a388 <_dtoa_r+0x7b0>
 800a47a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800a47c:	9c08      	ldr	r4, [sp, #32]
 800a47e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a480:	e78d      	b.n	800a39e <_dtoa_r+0x7c6>
 800a482:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a484:	e7ba      	b.n	800a3fc <_dtoa_r+0x824>
 800a486:	2300      	movs	r3, #0
 800a488:	9307      	str	r3, [sp, #28]
 800a48a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a48c:	2b01      	cmp	r3, #1
 800a48e:	dc13      	bgt.n	800a4b8 <_dtoa_r+0x8e0>
 800a490:	2300      	movs	r3, #0
 800a492:	9307      	str	r3, [sp, #28]
 800a494:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a496:	2b00      	cmp	r3, #0
 800a498:	d10e      	bne.n	800a4b8 <_dtoa_r+0x8e0>
 800a49a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a49c:	031b      	lsls	r3, r3, #12
 800a49e:	d10b      	bne.n	800a4b8 <_dtoa_r+0x8e0>
 800a4a0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800a4a2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a4a4:	4213      	tst	r3, r2
 800a4a6:	d007      	beq.n	800a4b8 <_dtoa_r+0x8e0>
 800a4a8:	9b08      	ldr	r3, [sp, #32]
 800a4aa:	3301      	adds	r3, #1
 800a4ac:	9308      	str	r3, [sp, #32]
 800a4ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a4b0:	3301      	adds	r3, #1
 800a4b2:	930d      	str	r3, [sp, #52]	; 0x34
 800a4b4:	2301      	movs	r3, #1
 800a4b6:	9307      	str	r3, [sp, #28]
 800a4b8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a4ba:	2001      	movs	r0, #1
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d1b5      	bne.n	800a42c <_dtoa_r+0x854>
 800a4c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a4c2:	221f      	movs	r2, #31
 800a4c4:	1818      	adds	r0, r3, r0
 800a4c6:	0003      	movs	r3, r0
 800a4c8:	4013      	ands	r3, r2
 800a4ca:	4210      	tst	r0, r2
 800a4cc:	d046      	beq.n	800a55c <_dtoa_r+0x984>
 800a4ce:	3201      	adds	r2, #1
 800a4d0:	1ad2      	subs	r2, r2, r3
 800a4d2:	2a04      	cmp	r2, #4
 800a4d4:	dd3f      	ble.n	800a556 <_dtoa_r+0x97e>
 800a4d6:	221c      	movs	r2, #28
 800a4d8:	1ad3      	subs	r3, r2, r3
 800a4da:	9a08      	ldr	r2, [sp, #32]
 800a4dc:	18e4      	adds	r4, r4, r3
 800a4de:	18d2      	adds	r2, r2, r3
 800a4e0:	9208      	str	r2, [sp, #32]
 800a4e2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a4e4:	18d3      	adds	r3, r2, r3
 800a4e6:	930d      	str	r3, [sp, #52]	; 0x34
 800a4e8:	9b08      	ldr	r3, [sp, #32]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	dd05      	ble.n	800a4fa <_dtoa_r+0x922>
 800a4ee:	001a      	movs	r2, r3
 800a4f0:	0038      	movs	r0, r7
 800a4f2:	9904      	ldr	r1, [sp, #16]
 800a4f4:	f001 f89c 	bl	800b630 <__lshift>
 800a4f8:	9004      	str	r0, [sp, #16]
 800a4fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	dd05      	ble.n	800a50c <_dtoa_r+0x934>
 800a500:	0031      	movs	r1, r6
 800a502:	001a      	movs	r2, r3
 800a504:	0038      	movs	r0, r7
 800a506:	f001 f893 	bl	800b630 <__lshift>
 800a50a:	0006      	movs	r6, r0
 800a50c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d026      	beq.n	800a560 <_dtoa_r+0x988>
 800a512:	0031      	movs	r1, r6
 800a514:	9804      	ldr	r0, [sp, #16]
 800a516:	f001 f8fb 	bl	800b710 <__mcmp>
 800a51a:	2800      	cmp	r0, #0
 800a51c:	da20      	bge.n	800a560 <_dtoa_r+0x988>
 800a51e:	9b02      	ldr	r3, [sp, #8]
 800a520:	220a      	movs	r2, #10
 800a522:	3b01      	subs	r3, #1
 800a524:	9302      	str	r3, [sp, #8]
 800a526:	0038      	movs	r0, r7
 800a528:	2300      	movs	r3, #0
 800a52a:	9904      	ldr	r1, [sp, #16]
 800a52c:	f000 fe86 	bl	800b23c <__multadd>
 800a530:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a532:	9004      	str	r0, [sp, #16]
 800a534:	2b00      	cmp	r3, #0
 800a536:	d100      	bne.n	800a53a <_dtoa_r+0x962>
 800a538:	e160      	b.n	800a7fc <_dtoa_r+0xc24>
 800a53a:	2300      	movs	r3, #0
 800a53c:	0029      	movs	r1, r5
 800a53e:	220a      	movs	r2, #10
 800a540:	0038      	movs	r0, r7
 800a542:	f000 fe7b 	bl	800b23c <__multadd>
 800a546:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a548:	0005      	movs	r5, r0
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	dc47      	bgt.n	800a5de <_dtoa_r+0xa06>
 800a54e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a550:	2b02      	cmp	r3, #2
 800a552:	dc0d      	bgt.n	800a570 <_dtoa_r+0x998>
 800a554:	e043      	b.n	800a5de <_dtoa_r+0xa06>
 800a556:	2a04      	cmp	r2, #4
 800a558:	d0c6      	beq.n	800a4e8 <_dtoa_r+0x910>
 800a55a:	0013      	movs	r3, r2
 800a55c:	331c      	adds	r3, #28
 800a55e:	e7bc      	b.n	800a4da <_dtoa_r+0x902>
 800a560:	9b06      	ldr	r3, [sp, #24]
 800a562:	2b00      	cmp	r3, #0
 800a564:	dc35      	bgt.n	800a5d2 <_dtoa_r+0x9fa>
 800a566:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a568:	2b02      	cmp	r3, #2
 800a56a:	dd32      	ble.n	800a5d2 <_dtoa_r+0x9fa>
 800a56c:	9b06      	ldr	r3, [sp, #24]
 800a56e:	930c      	str	r3, [sp, #48]	; 0x30
 800a570:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a572:	2b00      	cmp	r3, #0
 800a574:	d10c      	bne.n	800a590 <_dtoa_r+0x9b8>
 800a576:	0031      	movs	r1, r6
 800a578:	2205      	movs	r2, #5
 800a57a:	0038      	movs	r0, r7
 800a57c:	f000 fe5e 	bl	800b23c <__multadd>
 800a580:	0006      	movs	r6, r0
 800a582:	0001      	movs	r1, r0
 800a584:	9804      	ldr	r0, [sp, #16]
 800a586:	f001 f8c3 	bl	800b710 <__mcmp>
 800a58a:	2800      	cmp	r0, #0
 800a58c:	dd00      	ble.n	800a590 <_dtoa_r+0x9b8>
 800a58e:	e59f      	b.n	800a0d0 <_dtoa_r+0x4f8>
 800a590:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a592:	43db      	mvns	r3, r3
 800a594:	9302      	str	r3, [sp, #8]
 800a596:	9b05      	ldr	r3, [sp, #20]
 800a598:	9307      	str	r3, [sp, #28]
 800a59a:	2400      	movs	r4, #0
 800a59c:	0031      	movs	r1, r6
 800a59e:	0038      	movs	r0, r7
 800a5a0:	f000 fe28 	bl	800b1f4 <_Bfree>
 800a5a4:	2d00      	cmp	r5, #0
 800a5a6:	d100      	bne.n	800a5aa <_dtoa_r+0x9d2>
 800a5a8:	e6b0      	b.n	800a30c <_dtoa_r+0x734>
 800a5aa:	2c00      	cmp	r4, #0
 800a5ac:	d005      	beq.n	800a5ba <_dtoa_r+0x9e2>
 800a5ae:	42ac      	cmp	r4, r5
 800a5b0:	d003      	beq.n	800a5ba <_dtoa_r+0x9e2>
 800a5b2:	0021      	movs	r1, r4
 800a5b4:	0038      	movs	r0, r7
 800a5b6:	f000 fe1d 	bl	800b1f4 <_Bfree>
 800a5ba:	0029      	movs	r1, r5
 800a5bc:	0038      	movs	r0, r7
 800a5be:	f000 fe19 	bl	800b1f4 <_Bfree>
 800a5c2:	e6a3      	b.n	800a30c <_dtoa_r+0x734>
 800a5c4:	2600      	movs	r6, #0
 800a5c6:	0035      	movs	r5, r6
 800a5c8:	e7e2      	b.n	800a590 <_dtoa_r+0x9b8>
 800a5ca:	9602      	str	r6, [sp, #8]
 800a5cc:	9e07      	ldr	r6, [sp, #28]
 800a5ce:	0035      	movs	r5, r6
 800a5d0:	e57e      	b.n	800a0d0 <_dtoa_r+0x4f8>
 800a5d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d100      	bne.n	800a5da <_dtoa_r+0xa02>
 800a5d8:	e0c8      	b.n	800a76c <_dtoa_r+0xb94>
 800a5da:	9b06      	ldr	r3, [sp, #24]
 800a5dc:	930c      	str	r3, [sp, #48]	; 0x30
 800a5de:	2c00      	cmp	r4, #0
 800a5e0:	dd05      	ble.n	800a5ee <_dtoa_r+0xa16>
 800a5e2:	0029      	movs	r1, r5
 800a5e4:	0022      	movs	r2, r4
 800a5e6:	0038      	movs	r0, r7
 800a5e8:	f001 f822 	bl	800b630 <__lshift>
 800a5ec:	0005      	movs	r5, r0
 800a5ee:	9b07      	ldr	r3, [sp, #28]
 800a5f0:	0028      	movs	r0, r5
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d01f      	beq.n	800a636 <_dtoa_r+0xa5e>
 800a5f6:	0038      	movs	r0, r7
 800a5f8:	6869      	ldr	r1, [r5, #4]
 800a5fa:	f000 fdb7 	bl	800b16c <_Balloc>
 800a5fe:	1e04      	subs	r4, r0, #0
 800a600:	d10c      	bne.n	800a61c <_dtoa_r+0xa44>
 800a602:	0002      	movs	r2, r0
 800a604:	4b03      	ldr	r3, [pc, #12]	; (800a614 <_dtoa_r+0xa3c>)
 800a606:	4904      	ldr	r1, [pc, #16]	; (800a618 <_dtoa_r+0xa40>)
 800a608:	f7ff fafb 	bl	8009c02 <_dtoa_r+0x2a>
 800a60c:	40240000 	.word	0x40240000
 800a610:	00000433 	.word	0x00000433
 800a614:	0800d59c 	.word	0x0800d59c
 800a618:	000002ea 	.word	0x000002ea
 800a61c:	0029      	movs	r1, r5
 800a61e:	692b      	ldr	r3, [r5, #16]
 800a620:	310c      	adds	r1, #12
 800a622:	1c9a      	adds	r2, r3, #2
 800a624:	0092      	lsls	r2, r2, #2
 800a626:	300c      	adds	r0, #12
 800a628:	f000 fd97 	bl	800b15a <memcpy>
 800a62c:	2201      	movs	r2, #1
 800a62e:	0021      	movs	r1, r4
 800a630:	0038      	movs	r0, r7
 800a632:	f000 fffd 	bl	800b630 <__lshift>
 800a636:	002c      	movs	r4, r5
 800a638:	0005      	movs	r5, r0
 800a63a:	9b05      	ldr	r3, [sp, #20]
 800a63c:	9308      	str	r3, [sp, #32]
 800a63e:	0031      	movs	r1, r6
 800a640:	9804      	ldr	r0, [sp, #16]
 800a642:	f7ff fa3d 	bl	8009ac0 <quorem>
 800a646:	0003      	movs	r3, r0
 800a648:	0021      	movs	r1, r4
 800a64a:	3330      	adds	r3, #48	; 0x30
 800a64c:	900e      	str	r0, [sp, #56]	; 0x38
 800a64e:	9804      	ldr	r0, [sp, #16]
 800a650:	9306      	str	r3, [sp, #24]
 800a652:	f001 f85d 	bl	800b710 <__mcmp>
 800a656:	002a      	movs	r2, r5
 800a658:	900f      	str	r0, [sp, #60]	; 0x3c
 800a65a:	0031      	movs	r1, r6
 800a65c:	0038      	movs	r0, r7
 800a65e:	f001 f873 	bl	800b748 <__mdiff>
 800a662:	68c3      	ldr	r3, [r0, #12]
 800a664:	9007      	str	r0, [sp, #28]
 800a666:	9310      	str	r3, [sp, #64]	; 0x40
 800a668:	2301      	movs	r3, #1
 800a66a:	930d      	str	r3, [sp, #52]	; 0x34
 800a66c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d104      	bne.n	800a67c <_dtoa_r+0xaa4>
 800a672:	0001      	movs	r1, r0
 800a674:	9804      	ldr	r0, [sp, #16]
 800a676:	f001 f84b 	bl	800b710 <__mcmp>
 800a67a:	900d      	str	r0, [sp, #52]	; 0x34
 800a67c:	0038      	movs	r0, r7
 800a67e:	9907      	ldr	r1, [sp, #28]
 800a680:	f000 fdb8 	bl	800b1f4 <_Bfree>
 800a684:	2301      	movs	r3, #1
 800a686:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a688:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a68a:	4018      	ands	r0, r3
 800a68c:	9b08      	ldr	r3, [sp, #32]
 800a68e:	3301      	adds	r3, #1
 800a690:	9307      	str	r3, [sp, #28]
 800a692:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a694:	4313      	orrs	r3, r2
 800a696:	4303      	orrs	r3, r0
 800a698:	d10c      	bne.n	800a6b4 <_dtoa_r+0xadc>
 800a69a:	9b06      	ldr	r3, [sp, #24]
 800a69c:	2b39      	cmp	r3, #57	; 0x39
 800a69e:	d025      	beq.n	800a6ec <_dtoa_r+0xb14>
 800a6a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	dd02      	ble.n	800a6ac <_dtoa_r+0xad4>
 800a6a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a6a8:	3331      	adds	r3, #49	; 0x31
 800a6aa:	9306      	str	r3, [sp, #24]
 800a6ac:	9b08      	ldr	r3, [sp, #32]
 800a6ae:	9a06      	ldr	r2, [sp, #24]
 800a6b0:	701a      	strb	r2, [r3, #0]
 800a6b2:	e773      	b.n	800a59c <_dtoa_r+0x9c4>
 800a6b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	db03      	blt.n	800a6c2 <_dtoa_r+0xaea>
 800a6ba:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800a6bc:	4313      	orrs	r3, r2
 800a6be:	4303      	orrs	r3, r0
 800a6c0:	d11f      	bne.n	800a702 <_dtoa_r+0xb2a>
 800a6c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	ddf1      	ble.n	800a6ac <_dtoa_r+0xad4>
 800a6c8:	9904      	ldr	r1, [sp, #16]
 800a6ca:	2201      	movs	r2, #1
 800a6cc:	0038      	movs	r0, r7
 800a6ce:	f000 ffaf 	bl	800b630 <__lshift>
 800a6d2:	0031      	movs	r1, r6
 800a6d4:	9004      	str	r0, [sp, #16]
 800a6d6:	f001 f81b 	bl	800b710 <__mcmp>
 800a6da:	2800      	cmp	r0, #0
 800a6dc:	dc03      	bgt.n	800a6e6 <_dtoa_r+0xb0e>
 800a6de:	d1e5      	bne.n	800a6ac <_dtoa_r+0xad4>
 800a6e0:	9b06      	ldr	r3, [sp, #24]
 800a6e2:	07db      	lsls	r3, r3, #31
 800a6e4:	d5e2      	bpl.n	800a6ac <_dtoa_r+0xad4>
 800a6e6:	9b06      	ldr	r3, [sp, #24]
 800a6e8:	2b39      	cmp	r3, #57	; 0x39
 800a6ea:	d1dc      	bne.n	800a6a6 <_dtoa_r+0xace>
 800a6ec:	2339      	movs	r3, #57	; 0x39
 800a6ee:	9a08      	ldr	r2, [sp, #32]
 800a6f0:	7013      	strb	r3, [r2, #0]
 800a6f2:	9b07      	ldr	r3, [sp, #28]
 800a6f4:	9307      	str	r3, [sp, #28]
 800a6f6:	3b01      	subs	r3, #1
 800a6f8:	781a      	ldrb	r2, [r3, #0]
 800a6fa:	2a39      	cmp	r2, #57	; 0x39
 800a6fc:	d06c      	beq.n	800a7d8 <_dtoa_r+0xc00>
 800a6fe:	3201      	adds	r2, #1
 800a700:	e7d6      	b.n	800a6b0 <_dtoa_r+0xad8>
 800a702:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a704:	2b00      	cmp	r3, #0
 800a706:	dd07      	ble.n	800a718 <_dtoa_r+0xb40>
 800a708:	9b06      	ldr	r3, [sp, #24]
 800a70a:	2b39      	cmp	r3, #57	; 0x39
 800a70c:	d0ee      	beq.n	800a6ec <_dtoa_r+0xb14>
 800a70e:	9b06      	ldr	r3, [sp, #24]
 800a710:	9a08      	ldr	r2, [sp, #32]
 800a712:	3301      	adds	r3, #1
 800a714:	7013      	strb	r3, [r2, #0]
 800a716:	e741      	b.n	800a59c <_dtoa_r+0x9c4>
 800a718:	9b08      	ldr	r3, [sp, #32]
 800a71a:	9a06      	ldr	r2, [sp, #24]
 800a71c:	701a      	strb	r2, [r3, #0]
 800a71e:	2301      	movs	r3, #1
 800a720:	9a05      	ldr	r2, [sp, #20]
 800a722:	1a9b      	subs	r3, r3, r2
 800a724:	9a08      	ldr	r2, [sp, #32]
 800a726:	189b      	adds	r3, r3, r2
 800a728:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a72a:	429a      	cmp	r2, r3
 800a72c:	d03e      	beq.n	800a7ac <_dtoa_r+0xbd4>
 800a72e:	2300      	movs	r3, #0
 800a730:	220a      	movs	r2, #10
 800a732:	9904      	ldr	r1, [sp, #16]
 800a734:	0038      	movs	r0, r7
 800a736:	f000 fd81 	bl	800b23c <__multadd>
 800a73a:	2300      	movs	r3, #0
 800a73c:	9004      	str	r0, [sp, #16]
 800a73e:	220a      	movs	r2, #10
 800a740:	0021      	movs	r1, r4
 800a742:	0038      	movs	r0, r7
 800a744:	42ac      	cmp	r4, r5
 800a746:	d106      	bne.n	800a756 <_dtoa_r+0xb7e>
 800a748:	f000 fd78 	bl	800b23c <__multadd>
 800a74c:	0004      	movs	r4, r0
 800a74e:	0005      	movs	r5, r0
 800a750:	9b07      	ldr	r3, [sp, #28]
 800a752:	9308      	str	r3, [sp, #32]
 800a754:	e773      	b.n	800a63e <_dtoa_r+0xa66>
 800a756:	f000 fd71 	bl	800b23c <__multadd>
 800a75a:	0029      	movs	r1, r5
 800a75c:	0004      	movs	r4, r0
 800a75e:	2300      	movs	r3, #0
 800a760:	220a      	movs	r2, #10
 800a762:	0038      	movs	r0, r7
 800a764:	f000 fd6a 	bl	800b23c <__multadd>
 800a768:	0005      	movs	r5, r0
 800a76a:	e7f1      	b.n	800a750 <_dtoa_r+0xb78>
 800a76c:	9b06      	ldr	r3, [sp, #24]
 800a76e:	930c      	str	r3, [sp, #48]	; 0x30
 800a770:	2400      	movs	r4, #0
 800a772:	0031      	movs	r1, r6
 800a774:	9804      	ldr	r0, [sp, #16]
 800a776:	f7ff f9a3 	bl	8009ac0 <quorem>
 800a77a:	9b05      	ldr	r3, [sp, #20]
 800a77c:	3030      	adds	r0, #48	; 0x30
 800a77e:	5518      	strb	r0, [r3, r4]
 800a780:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a782:	3401      	adds	r4, #1
 800a784:	9006      	str	r0, [sp, #24]
 800a786:	42a3      	cmp	r3, r4
 800a788:	dd07      	ble.n	800a79a <_dtoa_r+0xbc2>
 800a78a:	2300      	movs	r3, #0
 800a78c:	220a      	movs	r2, #10
 800a78e:	0038      	movs	r0, r7
 800a790:	9904      	ldr	r1, [sp, #16]
 800a792:	f000 fd53 	bl	800b23c <__multadd>
 800a796:	9004      	str	r0, [sp, #16]
 800a798:	e7eb      	b.n	800a772 <_dtoa_r+0xb9a>
 800a79a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a79c:	2001      	movs	r0, #1
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	dd00      	ble.n	800a7a4 <_dtoa_r+0xbcc>
 800a7a2:	0018      	movs	r0, r3
 800a7a4:	2400      	movs	r4, #0
 800a7a6:	9b05      	ldr	r3, [sp, #20]
 800a7a8:	181b      	adds	r3, r3, r0
 800a7aa:	9307      	str	r3, [sp, #28]
 800a7ac:	9904      	ldr	r1, [sp, #16]
 800a7ae:	2201      	movs	r2, #1
 800a7b0:	0038      	movs	r0, r7
 800a7b2:	f000 ff3d 	bl	800b630 <__lshift>
 800a7b6:	0031      	movs	r1, r6
 800a7b8:	9004      	str	r0, [sp, #16]
 800a7ba:	f000 ffa9 	bl	800b710 <__mcmp>
 800a7be:	2800      	cmp	r0, #0
 800a7c0:	dc97      	bgt.n	800a6f2 <_dtoa_r+0xb1a>
 800a7c2:	d102      	bne.n	800a7ca <_dtoa_r+0xbf2>
 800a7c4:	9b06      	ldr	r3, [sp, #24]
 800a7c6:	07db      	lsls	r3, r3, #31
 800a7c8:	d493      	bmi.n	800a6f2 <_dtoa_r+0xb1a>
 800a7ca:	9b07      	ldr	r3, [sp, #28]
 800a7cc:	9307      	str	r3, [sp, #28]
 800a7ce:	3b01      	subs	r3, #1
 800a7d0:	781a      	ldrb	r2, [r3, #0]
 800a7d2:	2a30      	cmp	r2, #48	; 0x30
 800a7d4:	d0fa      	beq.n	800a7cc <_dtoa_r+0xbf4>
 800a7d6:	e6e1      	b.n	800a59c <_dtoa_r+0x9c4>
 800a7d8:	9a05      	ldr	r2, [sp, #20]
 800a7da:	429a      	cmp	r2, r3
 800a7dc:	d18a      	bne.n	800a6f4 <_dtoa_r+0xb1c>
 800a7de:	9b02      	ldr	r3, [sp, #8]
 800a7e0:	3301      	adds	r3, #1
 800a7e2:	9302      	str	r3, [sp, #8]
 800a7e4:	2331      	movs	r3, #49	; 0x31
 800a7e6:	e795      	b.n	800a714 <_dtoa_r+0xb3c>
 800a7e8:	4b08      	ldr	r3, [pc, #32]	; (800a80c <_dtoa_r+0xc34>)
 800a7ea:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a7ec:	9305      	str	r3, [sp, #20]
 800a7ee:	4b08      	ldr	r3, [pc, #32]	; (800a810 <_dtoa_r+0xc38>)
 800a7f0:	2a00      	cmp	r2, #0
 800a7f2:	d001      	beq.n	800a7f8 <_dtoa_r+0xc20>
 800a7f4:	f7ff fa3b 	bl	8009c6e <_dtoa_r+0x96>
 800a7f8:	f7ff fa3b 	bl	8009c72 <_dtoa_r+0x9a>
 800a7fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	dcb6      	bgt.n	800a770 <_dtoa_r+0xb98>
 800a802:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a804:	2b02      	cmp	r3, #2
 800a806:	dd00      	ble.n	800a80a <_dtoa_r+0xc32>
 800a808:	e6b2      	b.n	800a570 <_dtoa_r+0x998>
 800a80a:	e7b1      	b.n	800a770 <_dtoa_r+0xb98>
 800a80c:	0800d519 	.word	0x0800d519
 800a810:	0800d521 	.word	0x0800d521

0800a814 <std>:
 800a814:	2300      	movs	r3, #0
 800a816:	b510      	push	{r4, lr}
 800a818:	0004      	movs	r4, r0
 800a81a:	6003      	str	r3, [r0, #0]
 800a81c:	6043      	str	r3, [r0, #4]
 800a81e:	6083      	str	r3, [r0, #8]
 800a820:	8181      	strh	r1, [r0, #12]
 800a822:	6643      	str	r3, [r0, #100]	; 0x64
 800a824:	0019      	movs	r1, r3
 800a826:	81c2      	strh	r2, [r0, #14]
 800a828:	6103      	str	r3, [r0, #16]
 800a82a:	6143      	str	r3, [r0, #20]
 800a82c:	6183      	str	r3, [r0, #24]
 800a82e:	2208      	movs	r2, #8
 800a830:	305c      	adds	r0, #92	; 0x5c
 800a832:	f7fd fba7 	bl	8007f84 <memset>
 800a836:	4b05      	ldr	r3, [pc, #20]	; (800a84c <std+0x38>)
 800a838:	6263      	str	r3, [r4, #36]	; 0x24
 800a83a:	4b05      	ldr	r3, [pc, #20]	; (800a850 <std+0x3c>)
 800a83c:	6224      	str	r4, [r4, #32]
 800a83e:	62a3      	str	r3, [r4, #40]	; 0x28
 800a840:	4b04      	ldr	r3, [pc, #16]	; (800a854 <std+0x40>)
 800a842:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a844:	4b04      	ldr	r3, [pc, #16]	; (800a858 <std+0x44>)
 800a846:	6323      	str	r3, [r4, #48]	; 0x30
 800a848:	bd10      	pop	{r4, pc}
 800a84a:	46c0      	nop			; (mov r8, r8)
 800a84c:	0800c225 	.word	0x0800c225
 800a850:	0800c24d 	.word	0x0800c24d
 800a854:	0800c285 	.word	0x0800c285
 800a858:	0800c2b1 	.word	0x0800c2b1

0800a85c <_cleanup_r>:
 800a85c:	b510      	push	{r4, lr}
 800a85e:	4902      	ldr	r1, [pc, #8]	; (800a868 <_cleanup_r+0xc>)
 800a860:	f000 f8ba 	bl	800a9d8 <_fwalk_reent>
 800a864:	bd10      	pop	{r4, pc}
 800a866:	46c0      	nop			; (mov r8, r8)
 800a868:	0800c639 	.word	0x0800c639

0800a86c <__sfmoreglue>:
 800a86c:	b570      	push	{r4, r5, r6, lr}
 800a86e:	2568      	movs	r5, #104	; 0x68
 800a870:	1e4a      	subs	r2, r1, #1
 800a872:	4355      	muls	r5, r2
 800a874:	000e      	movs	r6, r1
 800a876:	0029      	movs	r1, r5
 800a878:	3174      	adds	r1, #116	; 0x74
 800a87a:	f001 f999 	bl	800bbb0 <_malloc_r>
 800a87e:	1e04      	subs	r4, r0, #0
 800a880:	d008      	beq.n	800a894 <__sfmoreglue+0x28>
 800a882:	2100      	movs	r1, #0
 800a884:	002a      	movs	r2, r5
 800a886:	6001      	str	r1, [r0, #0]
 800a888:	6046      	str	r6, [r0, #4]
 800a88a:	300c      	adds	r0, #12
 800a88c:	60a0      	str	r0, [r4, #8]
 800a88e:	3268      	adds	r2, #104	; 0x68
 800a890:	f7fd fb78 	bl	8007f84 <memset>
 800a894:	0020      	movs	r0, r4
 800a896:	bd70      	pop	{r4, r5, r6, pc}

0800a898 <__sfp_lock_acquire>:
 800a898:	b510      	push	{r4, lr}
 800a89a:	4802      	ldr	r0, [pc, #8]	; (800a8a4 <__sfp_lock_acquire+0xc>)
 800a89c:	f000 fc33 	bl	800b106 <__retarget_lock_acquire_recursive>
 800a8a0:	bd10      	pop	{r4, pc}
 800a8a2:	46c0      	nop			; (mov r8, r8)
 800a8a4:	200003b4 	.word	0x200003b4

0800a8a8 <__sfp_lock_release>:
 800a8a8:	b510      	push	{r4, lr}
 800a8aa:	4802      	ldr	r0, [pc, #8]	; (800a8b4 <__sfp_lock_release+0xc>)
 800a8ac:	f000 fc2c 	bl	800b108 <__retarget_lock_release_recursive>
 800a8b0:	bd10      	pop	{r4, pc}
 800a8b2:	46c0      	nop			; (mov r8, r8)
 800a8b4:	200003b4 	.word	0x200003b4

0800a8b8 <__sinit_lock_acquire>:
 800a8b8:	b510      	push	{r4, lr}
 800a8ba:	4802      	ldr	r0, [pc, #8]	; (800a8c4 <__sinit_lock_acquire+0xc>)
 800a8bc:	f000 fc23 	bl	800b106 <__retarget_lock_acquire_recursive>
 800a8c0:	bd10      	pop	{r4, pc}
 800a8c2:	46c0      	nop			; (mov r8, r8)
 800a8c4:	200003af 	.word	0x200003af

0800a8c8 <__sinit_lock_release>:
 800a8c8:	b510      	push	{r4, lr}
 800a8ca:	4802      	ldr	r0, [pc, #8]	; (800a8d4 <__sinit_lock_release+0xc>)
 800a8cc:	f000 fc1c 	bl	800b108 <__retarget_lock_release_recursive>
 800a8d0:	bd10      	pop	{r4, pc}
 800a8d2:	46c0      	nop			; (mov r8, r8)
 800a8d4:	200003af 	.word	0x200003af

0800a8d8 <__sinit>:
 800a8d8:	b513      	push	{r0, r1, r4, lr}
 800a8da:	0004      	movs	r4, r0
 800a8dc:	f7ff ffec 	bl	800a8b8 <__sinit_lock_acquire>
 800a8e0:	69a3      	ldr	r3, [r4, #24]
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d002      	beq.n	800a8ec <__sinit+0x14>
 800a8e6:	f7ff ffef 	bl	800a8c8 <__sinit_lock_release>
 800a8ea:	bd13      	pop	{r0, r1, r4, pc}
 800a8ec:	64a3      	str	r3, [r4, #72]	; 0x48
 800a8ee:	64e3      	str	r3, [r4, #76]	; 0x4c
 800a8f0:	6523      	str	r3, [r4, #80]	; 0x50
 800a8f2:	4b13      	ldr	r3, [pc, #76]	; (800a940 <__sinit+0x68>)
 800a8f4:	4a13      	ldr	r2, [pc, #76]	; (800a944 <__sinit+0x6c>)
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	62a2      	str	r2, [r4, #40]	; 0x28
 800a8fa:	9301      	str	r3, [sp, #4]
 800a8fc:	42a3      	cmp	r3, r4
 800a8fe:	d101      	bne.n	800a904 <__sinit+0x2c>
 800a900:	2301      	movs	r3, #1
 800a902:	61a3      	str	r3, [r4, #24]
 800a904:	0020      	movs	r0, r4
 800a906:	f000 f81f 	bl	800a948 <__sfp>
 800a90a:	6060      	str	r0, [r4, #4]
 800a90c:	0020      	movs	r0, r4
 800a90e:	f000 f81b 	bl	800a948 <__sfp>
 800a912:	60a0      	str	r0, [r4, #8]
 800a914:	0020      	movs	r0, r4
 800a916:	f000 f817 	bl	800a948 <__sfp>
 800a91a:	2200      	movs	r2, #0
 800a91c:	2104      	movs	r1, #4
 800a91e:	60e0      	str	r0, [r4, #12]
 800a920:	6860      	ldr	r0, [r4, #4]
 800a922:	f7ff ff77 	bl	800a814 <std>
 800a926:	2201      	movs	r2, #1
 800a928:	2109      	movs	r1, #9
 800a92a:	68a0      	ldr	r0, [r4, #8]
 800a92c:	f7ff ff72 	bl	800a814 <std>
 800a930:	2202      	movs	r2, #2
 800a932:	2112      	movs	r1, #18
 800a934:	68e0      	ldr	r0, [r4, #12]
 800a936:	f7ff ff6d 	bl	800a814 <std>
 800a93a:	2301      	movs	r3, #1
 800a93c:	61a3      	str	r3, [r4, #24]
 800a93e:	e7d2      	b.n	800a8e6 <__sinit+0xe>
 800a940:	0800d388 	.word	0x0800d388
 800a944:	0800a85d 	.word	0x0800a85d

0800a948 <__sfp>:
 800a948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a94a:	0007      	movs	r7, r0
 800a94c:	f7ff ffa4 	bl	800a898 <__sfp_lock_acquire>
 800a950:	4b1f      	ldr	r3, [pc, #124]	; (800a9d0 <__sfp+0x88>)
 800a952:	681e      	ldr	r6, [r3, #0]
 800a954:	69b3      	ldr	r3, [r6, #24]
 800a956:	2b00      	cmp	r3, #0
 800a958:	d102      	bne.n	800a960 <__sfp+0x18>
 800a95a:	0030      	movs	r0, r6
 800a95c:	f7ff ffbc 	bl	800a8d8 <__sinit>
 800a960:	3648      	adds	r6, #72	; 0x48
 800a962:	68b4      	ldr	r4, [r6, #8]
 800a964:	6873      	ldr	r3, [r6, #4]
 800a966:	3b01      	subs	r3, #1
 800a968:	d504      	bpl.n	800a974 <__sfp+0x2c>
 800a96a:	6833      	ldr	r3, [r6, #0]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d022      	beq.n	800a9b6 <__sfp+0x6e>
 800a970:	6836      	ldr	r6, [r6, #0]
 800a972:	e7f6      	b.n	800a962 <__sfp+0x1a>
 800a974:	220c      	movs	r2, #12
 800a976:	5ea5      	ldrsh	r5, [r4, r2]
 800a978:	2d00      	cmp	r5, #0
 800a97a:	d11a      	bne.n	800a9b2 <__sfp+0x6a>
 800a97c:	0020      	movs	r0, r4
 800a97e:	4b15      	ldr	r3, [pc, #84]	; (800a9d4 <__sfp+0x8c>)
 800a980:	3058      	adds	r0, #88	; 0x58
 800a982:	60e3      	str	r3, [r4, #12]
 800a984:	6665      	str	r5, [r4, #100]	; 0x64
 800a986:	f000 fbbd 	bl	800b104 <__retarget_lock_init_recursive>
 800a98a:	f7ff ff8d 	bl	800a8a8 <__sfp_lock_release>
 800a98e:	0020      	movs	r0, r4
 800a990:	2208      	movs	r2, #8
 800a992:	0029      	movs	r1, r5
 800a994:	6025      	str	r5, [r4, #0]
 800a996:	60a5      	str	r5, [r4, #8]
 800a998:	6065      	str	r5, [r4, #4]
 800a99a:	6125      	str	r5, [r4, #16]
 800a99c:	6165      	str	r5, [r4, #20]
 800a99e:	61a5      	str	r5, [r4, #24]
 800a9a0:	305c      	adds	r0, #92	; 0x5c
 800a9a2:	f7fd faef 	bl	8007f84 <memset>
 800a9a6:	6365      	str	r5, [r4, #52]	; 0x34
 800a9a8:	63a5      	str	r5, [r4, #56]	; 0x38
 800a9aa:	64a5      	str	r5, [r4, #72]	; 0x48
 800a9ac:	64e5      	str	r5, [r4, #76]	; 0x4c
 800a9ae:	0020      	movs	r0, r4
 800a9b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a9b2:	3468      	adds	r4, #104	; 0x68
 800a9b4:	e7d7      	b.n	800a966 <__sfp+0x1e>
 800a9b6:	2104      	movs	r1, #4
 800a9b8:	0038      	movs	r0, r7
 800a9ba:	f7ff ff57 	bl	800a86c <__sfmoreglue>
 800a9be:	1e04      	subs	r4, r0, #0
 800a9c0:	6030      	str	r0, [r6, #0]
 800a9c2:	d1d5      	bne.n	800a970 <__sfp+0x28>
 800a9c4:	f7ff ff70 	bl	800a8a8 <__sfp_lock_release>
 800a9c8:	230c      	movs	r3, #12
 800a9ca:	603b      	str	r3, [r7, #0]
 800a9cc:	e7ef      	b.n	800a9ae <__sfp+0x66>
 800a9ce:	46c0      	nop			; (mov r8, r8)
 800a9d0:	0800d388 	.word	0x0800d388
 800a9d4:	ffff0001 	.word	0xffff0001

0800a9d8 <_fwalk_reent>:
 800a9d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a9da:	0004      	movs	r4, r0
 800a9dc:	0006      	movs	r6, r0
 800a9de:	2700      	movs	r7, #0
 800a9e0:	9101      	str	r1, [sp, #4]
 800a9e2:	3448      	adds	r4, #72	; 0x48
 800a9e4:	6863      	ldr	r3, [r4, #4]
 800a9e6:	68a5      	ldr	r5, [r4, #8]
 800a9e8:	9300      	str	r3, [sp, #0]
 800a9ea:	9b00      	ldr	r3, [sp, #0]
 800a9ec:	3b01      	subs	r3, #1
 800a9ee:	9300      	str	r3, [sp, #0]
 800a9f0:	d504      	bpl.n	800a9fc <_fwalk_reent+0x24>
 800a9f2:	6824      	ldr	r4, [r4, #0]
 800a9f4:	2c00      	cmp	r4, #0
 800a9f6:	d1f5      	bne.n	800a9e4 <_fwalk_reent+0xc>
 800a9f8:	0038      	movs	r0, r7
 800a9fa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a9fc:	89ab      	ldrh	r3, [r5, #12]
 800a9fe:	2b01      	cmp	r3, #1
 800aa00:	d908      	bls.n	800aa14 <_fwalk_reent+0x3c>
 800aa02:	220e      	movs	r2, #14
 800aa04:	5eab      	ldrsh	r3, [r5, r2]
 800aa06:	3301      	adds	r3, #1
 800aa08:	d004      	beq.n	800aa14 <_fwalk_reent+0x3c>
 800aa0a:	0029      	movs	r1, r5
 800aa0c:	0030      	movs	r0, r6
 800aa0e:	9b01      	ldr	r3, [sp, #4]
 800aa10:	4798      	blx	r3
 800aa12:	4307      	orrs	r7, r0
 800aa14:	3568      	adds	r5, #104	; 0x68
 800aa16:	e7e8      	b.n	800a9ea <_fwalk_reent+0x12>

0800aa18 <rshift>:
 800aa18:	0002      	movs	r2, r0
 800aa1a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aa1c:	6907      	ldr	r7, [r0, #16]
 800aa1e:	3214      	adds	r2, #20
 800aa20:	0013      	movs	r3, r2
 800aa22:	b085      	sub	sp, #20
 800aa24:	114e      	asrs	r6, r1, #5
 800aa26:	42b7      	cmp	r7, r6
 800aa28:	dd31      	ble.n	800aa8e <rshift+0x76>
 800aa2a:	00b3      	lsls	r3, r6, #2
 800aa2c:	18d3      	adds	r3, r2, r3
 800aa2e:	251f      	movs	r5, #31
 800aa30:	9301      	str	r3, [sp, #4]
 800aa32:	000b      	movs	r3, r1
 800aa34:	00bc      	lsls	r4, r7, #2
 800aa36:	402b      	ands	r3, r5
 800aa38:	1914      	adds	r4, r2, r4
 800aa3a:	9302      	str	r3, [sp, #8]
 800aa3c:	4229      	tst	r1, r5
 800aa3e:	d10c      	bne.n	800aa5a <rshift+0x42>
 800aa40:	0015      	movs	r5, r2
 800aa42:	9901      	ldr	r1, [sp, #4]
 800aa44:	428c      	cmp	r4, r1
 800aa46:	d838      	bhi.n	800aaba <rshift+0xa2>
 800aa48:	9901      	ldr	r1, [sp, #4]
 800aa4a:	2300      	movs	r3, #0
 800aa4c:	3903      	subs	r1, #3
 800aa4e:	428c      	cmp	r4, r1
 800aa50:	d301      	bcc.n	800aa56 <rshift+0x3e>
 800aa52:	1bbb      	subs	r3, r7, r6
 800aa54:	009b      	lsls	r3, r3, #2
 800aa56:	18d3      	adds	r3, r2, r3
 800aa58:	e019      	b.n	800aa8e <rshift+0x76>
 800aa5a:	2120      	movs	r1, #32
 800aa5c:	9b02      	ldr	r3, [sp, #8]
 800aa5e:	9d01      	ldr	r5, [sp, #4]
 800aa60:	1acb      	subs	r3, r1, r3
 800aa62:	9303      	str	r3, [sp, #12]
 800aa64:	cd02      	ldmia	r5!, {r1}
 800aa66:	9b02      	ldr	r3, [sp, #8]
 800aa68:	4694      	mov	ip, r2
 800aa6a:	40d9      	lsrs	r1, r3
 800aa6c:	9100      	str	r1, [sp, #0]
 800aa6e:	42ac      	cmp	r4, r5
 800aa70:	d816      	bhi.n	800aaa0 <rshift+0x88>
 800aa72:	9d01      	ldr	r5, [sp, #4]
 800aa74:	2300      	movs	r3, #0
 800aa76:	3501      	adds	r5, #1
 800aa78:	42ac      	cmp	r4, r5
 800aa7a:	d302      	bcc.n	800aa82 <rshift+0x6a>
 800aa7c:	1bbb      	subs	r3, r7, r6
 800aa7e:	009b      	lsls	r3, r3, #2
 800aa80:	3b04      	subs	r3, #4
 800aa82:	9900      	ldr	r1, [sp, #0]
 800aa84:	18d3      	adds	r3, r2, r3
 800aa86:	6019      	str	r1, [r3, #0]
 800aa88:	2900      	cmp	r1, #0
 800aa8a:	d000      	beq.n	800aa8e <rshift+0x76>
 800aa8c:	3304      	adds	r3, #4
 800aa8e:	1a99      	subs	r1, r3, r2
 800aa90:	1089      	asrs	r1, r1, #2
 800aa92:	6101      	str	r1, [r0, #16]
 800aa94:	4293      	cmp	r3, r2
 800aa96:	d101      	bne.n	800aa9c <rshift+0x84>
 800aa98:	2300      	movs	r3, #0
 800aa9a:	6143      	str	r3, [r0, #20]
 800aa9c:	b005      	add	sp, #20
 800aa9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aaa0:	682b      	ldr	r3, [r5, #0]
 800aaa2:	9903      	ldr	r1, [sp, #12]
 800aaa4:	408b      	lsls	r3, r1
 800aaa6:	9900      	ldr	r1, [sp, #0]
 800aaa8:	4319      	orrs	r1, r3
 800aaaa:	4663      	mov	r3, ip
 800aaac:	c302      	stmia	r3!, {r1}
 800aaae:	469c      	mov	ip, r3
 800aab0:	cd02      	ldmia	r5!, {r1}
 800aab2:	9b02      	ldr	r3, [sp, #8]
 800aab4:	40d9      	lsrs	r1, r3
 800aab6:	9100      	str	r1, [sp, #0]
 800aab8:	e7d9      	b.n	800aa6e <rshift+0x56>
 800aaba:	c908      	ldmia	r1!, {r3}
 800aabc:	c508      	stmia	r5!, {r3}
 800aabe:	e7c1      	b.n	800aa44 <rshift+0x2c>

0800aac0 <__hexdig_fun>:
 800aac0:	0002      	movs	r2, r0
 800aac2:	3a30      	subs	r2, #48	; 0x30
 800aac4:	0003      	movs	r3, r0
 800aac6:	2a09      	cmp	r2, #9
 800aac8:	d802      	bhi.n	800aad0 <__hexdig_fun+0x10>
 800aaca:	3b20      	subs	r3, #32
 800aacc:	b2d8      	uxtb	r0, r3
 800aace:	4770      	bx	lr
 800aad0:	0002      	movs	r2, r0
 800aad2:	3a61      	subs	r2, #97	; 0x61
 800aad4:	2a05      	cmp	r2, #5
 800aad6:	d801      	bhi.n	800aadc <__hexdig_fun+0x1c>
 800aad8:	3b47      	subs	r3, #71	; 0x47
 800aada:	e7f7      	b.n	800aacc <__hexdig_fun+0xc>
 800aadc:	001a      	movs	r2, r3
 800aade:	3a41      	subs	r2, #65	; 0x41
 800aae0:	2000      	movs	r0, #0
 800aae2:	2a05      	cmp	r2, #5
 800aae4:	d8f3      	bhi.n	800aace <__hexdig_fun+0xe>
 800aae6:	3b27      	subs	r3, #39	; 0x27
 800aae8:	e7f0      	b.n	800aacc <__hexdig_fun+0xc>
	...

0800aaec <__gethex>:
 800aaec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aaee:	b08d      	sub	sp, #52	; 0x34
 800aaf0:	930a      	str	r3, [sp, #40]	; 0x28
 800aaf2:	4bbd      	ldr	r3, [pc, #756]	; (800ade8 <__gethex+0x2fc>)
 800aaf4:	9005      	str	r0, [sp, #20]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	9109      	str	r1, [sp, #36]	; 0x24
 800aafa:	0018      	movs	r0, r3
 800aafc:	9202      	str	r2, [sp, #8]
 800aafe:	9307      	str	r3, [sp, #28]
 800ab00:	f7f5 fb02 	bl	8000108 <strlen>
 800ab04:	2202      	movs	r2, #2
 800ab06:	9b07      	ldr	r3, [sp, #28]
 800ab08:	4252      	negs	r2, r2
 800ab0a:	181b      	adds	r3, r3, r0
 800ab0c:	3b01      	subs	r3, #1
 800ab0e:	781b      	ldrb	r3, [r3, #0]
 800ab10:	9003      	str	r0, [sp, #12]
 800ab12:	930b      	str	r3, [sp, #44]	; 0x2c
 800ab14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab16:	6819      	ldr	r1, [r3, #0]
 800ab18:	1c8b      	adds	r3, r1, #2
 800ab1a:	1a52      	subs	r2, r2, r1
 800ab1c:	18d1      	adds	r1, r2, r3
 800ab1e:	9301      	str	r3, [sp, #4]
 800ab20:	9108      	str	r1, [sp, #32]
 800ab22:	9901      	ldr	r1, [sp, #4]
 800ab24:	3301      	adds	r3, #1
 800ab26:	7808      	ldrb	r0, [r1, #0]
 800ab28:	2830      	cmp	r0, #48	; 0x30
 800ab2a:	d0f7      	beq.n	800ab1c <__gethex+0x30>
 800ab2c:	f7ff ffc8 	bl	800aac0 <__hexdig_fun>
 800ab30:	1e04      	subs	r4, r0, #0
 800ab32:	d13e      	bne.n	800abb2 <__gethex+0xc6>
 800ab34:	9a03      	ldr	r2, [sp, #12]
 800ab36:	9907      	ldr	r1, [sp, #28]
 800ab38:	9801      	ldr	r0, [sp, #4]
 800ab3a:	f001 fbbf 	bl	800c2bc <strncmp>
 800ab3e:	1e07      	subs	r7, r0, #0
 800ab40:	d000      	beq.n	800ab44 <__gethex+0x58>
 800ab42:	e06f      	b.n	800ac24 <__gethex+0x138>
 800ab44:	9b01      	ldr	r3, [sp, #4]
 800ab46:	9a03      	ldr	r2, [sp, #12]
 800ab48:	5c98      	ldrb	r0, [r3, r2]
 800ab4a:	189d      	adds	r5, r3, r2
 800ab4c:	f7ff ffb8 	bl	800aac0 <__hexdig_fun>
 800ab50:	2301      	movs	r3, #1
 800ab52:	9304      	str	r3, [sp, #16]
 800ab54:	2800      	cmp	r0, #0
 800ab56:	d034      	beq.n	800abc2 <__gethex+0xd6>
 800ab58:	9501      	str	r5, [sp, #4]
 800ab5a:	9b01      	ldr	r3, [sp, #4]
 800ab5c:	7818      	ldrb	r0, [r3, #0]
 800ab5e:	2830      	cmp	r0, #48	; 0x30
 800ab60:	d009      	beq.n	800ab76 <__gethex+0x8a>
 800ab62:	f7ff ffad 	bl	800aac0 <__hexdig_fun>
 800ab66:	4243      	negs	r3, r0
 800ab68:	4143      	adcs	r3, r0
 800ab6a:	9304      	str	r3, [sp, #16]
 800ab6c:	2301      	movs	r3, #1
 800ab6e:	002c      	movs	r4, r5
 800ab70:	9308      	str	r3, [sp, #32]
 800ab72:	9d01      	ldr	r5, [sp, #4]
 800ab74:	e004      	b.n	800ab80 <__gethex+0x94>
 800ab76:	9b01      	ldr	r3, [sp, #4]
 800ab78:	3301      	adds	r3, #1
 800ab7a:	9301      	str	r3, [sp, #4]
 800ab7c:	e7ed      	b.n	800ab5a <__gethex+0x6e>
 800ab7e:	3501      	adds	r5, #1
 800ab80:	7828      	ldrb	r0, [r5, #0]
 800ab82:	f7ff ff9d 	bl	800aac0 <__hexdig_fun>
 800ab86:	1e07      	subs	r7, r0, #0
 800ab88:	d1f9      	bne.n	800ab7e <__gethex+0x92>
 800ab8a:	0028      	movs	r0, r5
 800ab8c:	9a03      	ldr	r2, [sp, #12]
 800ab8e:	9907      	ldr	r1, [sp, #28]
 800ab90:	f001 fb94 	bl	800c2bc <strncmp>
 800ab94:	2800      	cmp	r0, #0
 800ab96:	d112      	bne.n	800abbe <__gethex+0xd2>
 800ab98:	2c00      	cmp	r4, #0
 800ab9a:	d107      	bne.n	800abac <__gethex+0xc0>
 800ab9c:	9b03      	ldr	r3, [sp, #12]
 800ab9e:	18ed      	adds	r5, r5, r3
 800aba0:	002c      	movs	r4, r5
 800aba2:	7828      	ldrb	r0, [r5, #0]
 800aba4:	f7ff ff8c 	bl	800aac0 <__hexdig_fun>
 800aba8:	2800      	cmp	r0, #0
 800abaa:	d106      	bne.n	800abba <__gethex+0xce>
 800abac:	1b67      	subs	r7, r4, r5
 800abae:	00bf      	lsls	r7, r7, #2
 800abb0:	e007      	b.n	800abc2 <__gethex+0xd6>
 800abb2:	2300      	movs	r3, #0
 800abb4:	001c      	movs	r4, r3
 800abb6:	9304      	str	r3, [sp, #16]
 800abb8:	e7db      	b.n	800ab72 <__gethex+0x86>
 800abba:	3501      	adds	r5, #1
 800abbc:	e7f1      	b.n	800aba2 <__gethex+0xb6>
 800abbe:	2c00      	cmp	r4, #0
 800abc0:	d1f4      	bne.n	800abac <__gethex+0xc0>
 800abc2:	2220      	movs	r2, #32
 800abc4:	782b      	ldrb	r3, [r5, #0]
 800abc6:	002e      	movs	r6, r5
 800abc8:	4393      	bics	r3, r2
 800abca:	2b50      	cmp	r3, #80	; 0x50
 800abcc:	d11d      	bne.n	800ac0a <__gethex+0x11e>
 800abce:	786b      	ldrb	r3, [r5, #1]
 800abd0:	2b2b      	cmp	r3, #43	; 0x2b
 800abd2:	d02c      	beq.n	800ac2e <__gethex+0x142>
 800abd4:	2b2d      	cmp	r3, #45	; 0x2d
 800abd6:	d02e      	beq.n	800ac36 <__gethex+0x14a>
 800abd8:	2300      	movs	r3, #0
 800abda:	1c6e      	adds	r6, r5, #1
 800abdc:	9306      	str	r3, [sp, #24]
 800abde:	7830      	ldrb	r0, [r6, #0]
 800abe0:	f7ff ff6e 	bl	800aac0 <__hexdig_fun>
 800abe4:	1e43      	subs	r3, r0, #1
 800abe6:	b2db      	uxtb	r3, r3
 800abe8:	2b18      	cmp	r3, #24
 800abea:	d82b      	bhi.n	800ac44 <__gethex+0x158>
 800abec:	3810      	subs	r0, #16
 800abee:	0004      	movs	r4, r0
 800abf0:	7870      	ldrb	r0, [r6, #1]
 800abf2:	f7ff ff65 	bl	800aac0 <__hexdig_fun>
 800abf6:	1e43      	subs	r3, r0, #1
 800abf8:	b2db      	uxtb	r3, r3
 800abfa:	3601      	adds	r6, #1
 800abfc:	2b18      	cmp	r3, #24
 800abfe:	d91c      	bls.n	800ac3a <__gethex+0x14e>
 800ac00:	9b06      	ldr	r3, [sp, #24]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d000      	beq.n	800ac08 <__gethex+0x11c>
 800ac06:	4264      	negs	r4, r4
 800ac08:	193f      	adds	r7, r7, r4
 800ac0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac0c:	601e      	str	r6, [r3, #0]
 800ac0e:	9b04      	ldr	r3, [sp, #16]
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d019      	beq.n	800ac48 <__gethex+0x15c>
 800ac14:	2600      	movs	r6, #0
 800ac16:	9b08      	ldr	r3, [sp, #32]
 800ac18:	42b3      	cmp	r3, r6
 800ac1a:	d100      	bne.n	800ac1e <__gethex+0x132>
 800ac1c:	3606      	adds	r6, #6
 800ac1e:	0030      	movs	r0, r6
 800ac20:	b00d      	add	sp, #52	; 0x34
 800ac22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac24:	2301      	movs	r3, #1
 800ac26:	0027      	movs	r7, r4
 800ac28:	9d01      	ldr	r5, [sp, #4]
 800ac2a:	9304      	str	r3, [sp, #16]
 800ac2c:	e7c9      	b.n	800abc2 <__gethex+0xd6>
 800ac2e:	2300      	movs	r3, #0
 800ac30:	9306      	str	r3, [sp, #24]
 800ac32:	1cae      	adds	r6, r5, #2
 800ac34:	e7d3      	b.n	800abde <__gethex+0xf2>
 800ac36:	2301      	movs	r3, #1
 800ac38:	e7fa      	b.n	800ac30 <__gethex+0x144>
 800ac3a:	230a      	movs	r3, #10
 800ac3c:	435c      	muls	r4, r3
 800ac3e:	1824      	adds	r4, r4, r0
 800ac40:	3c10      	subs	r4, #16
 800ac42:	e7d5      	b.n	800abf0 <__gethex+0x104>
 800ac44:	002e      	movs	r6, r5
 800ac46:	e7e0      	b.n	800ac0a <__gethex+0x11e>
 800ac48:	9b01      	ldr	r3, [sp, #4]
 800ac4a:	9904      	ldr	r1, [sp, #16]
 800ac4c:	1aeb      	subs	r3, r5, r3
 800ac4e:	3b01      	subs	r3, #1
 800ac50:	2b07      	cmp	r3, #7
 800ac52:	dc0a      	bgt.n	800ac6a <__gethex+0x17e>
 800ac54:	9805      	ldr	r0, [sp, #20]
 800ac56:	f000 fa89 	bl	800b16c <_Balloc>
 800ac5a:	1e04      	subs	r4, r0, #0
 800ac5c:	d108      	bne.n	800ac70 <__gethex+0x184>
 800ac5e:	0002      	movs	r2, r0
 800ac60:	21de      	movs	r1, #222	; 0xde
 800ac62:	4b62      	ldr	r3, [pc, #392]	; (800adec <__gethex+0x300>)
 800ac64:	4862      	ldr	r0, [pc, #392]	; (800adf0 <__gethex+0x304>)
 800ac66:	f001 fc2b 	bl	800c4c0 <__assert_func>
 800ac6a:	3101      	adds	r1, #1
 800ac6c:	105b      	asrs	r3, r3, #1
 800ac6e:	e7ef      	b.n	800ac50 <__gethex+0x164>
 800ac70:	0003      	movs	r3, r0
 800ac72:	3314      	adds	r3, #20
 800ac74:	9304      	str	r3, [sp, #16]
 800ac76:	9309      	str	r3, [sp, #36]	; 0x24
 800ac78:	2300      	movs	r3, #0
 800ac7a:	001e      	movs	r6, r3
 800ac7c:	9306      	str	r3, [sp, #24]
 800ac7e:	9b01      	ldr	r3, [sp, #4]
 800ac80:	42ab      	cmp	r3, r5
 800ac82:	d340      	bcc.n	800ad06 <__gethex+0x21a>
 800ac84:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800ac86:	9b04      	ldr	r3, [sp, #16]
 800ac88:	c540      	stmia	r5!, {r6}
 800ac8a:	1aed      	subs	r5, r5, r3
 800ac8c:	10ad      	asrs	r5, r5, #2
 800ac8e:	0030      	movs	r0, r6
 800ac90:	6125      	str	r5, [r4, #16]
 800ac92:	f000 fb63 	bl	800b35c <__hi0bits>
 800ac96:	9b02      	ldr	r3, [sp, #8]
 800ac98:	016d      	lsls	r5, r5, #5
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	1a2e      	subs	r6, r5, r0
 800ac9e:	9301      	str	r3, [sp, #4]
 800aca0:	429e      	cmp	r6, r3
 800aca2:	dd5a      	ble.n	800ad5a <__gethex+0x26e>
 800aca4:	1af6      	subs	r6, r6, r3
 800aca6:	0031      	movs	r1, r6
 800aca8:	0020      	movs	r0, r4
 800acaa:	f000 ff06 	bl	800baba <__any_on>
 800acae:	1e05      	subs	r5, r0, #0
 800acb0:	d016      	beq.n	800ace0 <__gethex+0x1f4>
 800acb2:	2501      	movs	r5, #1
 800acb4:	211f      	movs	r1, #31
 800acb6:	0028      	movs	r0, r5
 800acb8:	1e73      	subs	r3, r6, #1
 800acba:	4019      	ands	r1, r3
 800acbc:	4088      	lsls	r0, r1
 800acbe:	0001      	movs	r1, r0
 800acc0:	115a      	asrs	r2, r3, #5
 800acc2:	9804      	ldr	r0, [sp, #16]
 800acc4:	0092      	lsls	r2, r2, #2
 800acc6:	5812      	ldr	r2, [r2, r0]
 800acc8:	420a      	tst	r2, r1
 800acca:	d009      	beq.n	800ace0 <__gethex+0x1f4>
 800accc:	42ab      	cmp	r3, r5
 800acce:	dd06      	ble.n	800acde <__gethex+0x1f2>
 800acd0:	0020      	movs	r0, r4
 800acd2:	1eb1      	subs	r1, r6, #2
 800acd4:	f000 fef1 	bl	800baba <__any_on>
 800acd8:	3502      	adds	r5, #2
 800acda:	2800      	cmp	r0, #0
 800acdc:	d100      	bne.n	800ace0 <__gethex+0x1f4>
 800acde:	2502      	movs	r5, #2
 800ace0:	0031      	movs	r1, r6
 800ace2:	0020      	movs	r0, r4
 800ace4:	f7ff fe98 	bl	800aa18 <rshift>
 800ace8:	19bf      	adds	r7, r7, r6
 800acea:	9b02      	ldr	r3, [sp, #8]
 800acec:	689b      	ldr	r3, [r3, #8]
 800acee:	9303      	str	r3, [sp, #12]
 800acf0:	42bb      	cmp	r3, r7
 800acf2:	da42      	bge.n	800ad7a <__gethex+0x28e>
 800acf4:	0021      	movs	r1, r4
 800acf6:	9805      	ldr	r0, [sp, #20]
 800acf8:	f000 fa7c 	bl	800b1f4 <_Bfree>
 800acfc:	2300      	movs	r3, #0
 800acfe:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ad00:	26a3      	movs	r6, #163	; 0xa3
 800ad02:	6013      	str	r3, [r2, #0]
 800ad04:	e78b      	b.n	800ac1e <__gethex+0x132>
 800ad06:	1e6b      	subs	r3, r5, #1
 800ad08:	9308      	str	r3, [sp, #32]
 800ad0a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ad0c:	781b      	ldrb	r3, [r3, #0]
 800ad0e:	4293      	cmp	r3, r2
 800ad10:	d014      	beq.n	800ad3c <__gethex+0x250>
 800ad12:	9b06      	ldr	r3, [sp, #24]
 800ad14:	2b20      	cmp	r3, #32
 800ad16:	d104      	bne.n	800ad22 <__gethex+0x236>
 800ad18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad1a:	c340      	stmia	r3!, {r6}
 800ad1c:	2600      	movs	r6, #0
 800ad1e:	9309      	str	r3, [sp, #36]	; 0x24
 800ad20:	9606      	str	r6, [sp, #24]
 800ad22:	9b08      	ldr	r3, [sp, #32]
 800ad24:	7818      	ldrb	r0, [r3, #0]
 800ad26:	f7ff fecb 	bl	800aac0 <__hexdig_fun>
 800ad2a:	230f      	movs	r3, #15
 800ad2c:	4018      	ands	r0, r3
 800ad2e:	9b06      	ldr	r3, [sp, #24]
 800ad30:	9d08      	ldr	r5, [sp, #32]
 800ad32:	4098      	lsls	r0, r3
 800ad34:	3304      	adds	r3, #4
 800ad36:	4306      	orrs	r6, r0
 800ad38:	9306      	str	r3, [sp, #24]
 800ad3a:	e7a0      	b.n	800ac7e <__gethex+0x192>
 800ad3c:	2301      	movs	r3, #1
 800ad3e:	9a03      	ldr	r2, [sp, #12]
 800ad40:	1a9d      	subs	r5, r3, r2
 800ad42:	9b08      	ldr	r3, [sp, #32]
 800ad44:	195d      	adds	r5, r3, r5
 800ad46:	9b01      	ldr	r3, [sp, #4]
 800ad48:	429d      	cmp	r5, r3
 800ad4a:	d3e2      	bcc.n	800ad12 <__gethex+0x226>
 800ad4c:	0028      	movs	r0, r5
 800ad4e:	9907      	ldr	r1, [sp, #28]
 800ad50:	f001 fab4 	bl	800c2bc <strncmp>
 800ad54:	2800      	cmp	r0, #0
 800ad56:	d1dc      	bne.n	800ad12 <__gethex+0x226>
 800ad58:	e791      	b.n	800ac7e <__gethex+0x192>
 800ad5a:	9b01      	ldr	r3, [sp, #4]
 800ad5c:	2500      	movs	r5, #0
 800ad5e:	429e      	cmp	r6, r3
 800ad60:	dac3      	bge.n	800acea <__gethex+0x1fe>
 800ad62:	1b9e      	subs	r6, r3, r6
 800ad64:	0021      	movs	r1, r4
 800ad66:	0032      	movs	r2, r6
 800ad68:	9805      	ldr	r0, [sp, #20]
 800ad6a:	f000 fc61 	bl	800b630 <__lshift>
 800ad6e:	0003      	movs	r3, r0
 800ad70:	3314      	adds	r3, #20
 800ad72:	0004      	movs	r4, r0
 800ad74:	1bbf      	subs	r7, r7, r6
 800ad76:	9304      	str	r3, [sp, #16]
 800ad78:	e7b7      	b.n	800acea <__gethex+0x1fe>
 800ad7a:	9b02      	ldr	r3, [sp, #8]
 800ad7c:	685e      	ldr	r6, [r3, #4]
 800ad7e:	42be      	cmp	r6, r7
 800ad80:	dd71      	ble.n	800ae66 <__gethex+0x37a>
 800ad82:	9b01      	ldr	r3, [sp, #4]
 800ad84:	1bf6      	subs	r6, r6, r7
 800ad86:	42b3      	cmp	r3, r6
 800ad88:	dc38      	bgt.n	800adfc <__gethex+0x310>
 800ad8a:	9b02      	ldr	r3, [sp, #8]
 800ad8c:	68db      	ldr	r3, [r3, #12]
 800ad8e:	2b02      	cmp	r3, #2
 800ad90:	d026      	beq.n	800ade0 <__gethex+0x2f4>
 800ad92:	2b03      	cmp	r3, #3
 800ad94:	d02e      	beq.n	800adf4 <__gethex+0x308>
 800ad96:	2b01      	cmp	r3, #1
 800ad98:	d119      	bne.n	800adce <__gethex+0x2e2>
 800ad9a:	9b01      	ldr	r3, [sp, #4]
 800ad9c:	42b3      	cmp	r3, r6
 800ad9e:	d116      	bne.n	800adce <__gethex+0x2e2>
 800ada0:	2b01      	cmp	r3, #1
 800ada2:	d10d      	bne.n	800adc0 <__gethex+0x2d4>
 800ada4:	9b02      	ldr	r3, [sp, #8]
 800ada6:	2662      	movs	r6, #98	; 0x62
 800ada8:	685b      	ldr	r3, [r3, #4]
 800adaa:	9301      	str	r3, [sp, #4]
 800adac:	9a01      	ldr	r2, [sp, #4]
 800adae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800adb0:	601a      	str	r2, [r3, #0]
 800adb2:	2301      	movs	r3, #1
 800adb4:	9a04      	ldr	r2, [sp, #16]
 800adb6:	6123      	str	r3, [r4, #16]
 800adb8:	6013      	str	r3, [r2, #0]
 800adba:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800adbc:	601c      	str	r4, [r3, #0]
 800adbe:	e72e      	b.n	800ac1e <__gethex+0x132>
 800adc0:	9901      	ldr	r1, [sp, #4]
 800adc2:	0020      	movs	r0, r4
 800adc4:	3901      	subs	r1, #1
 800adc6:	f000 fe78 	bl	800baba <__any_on>
 800adca:	2800      	cmp	r0, #0
 800adcc:	d1ea      	bne.n	800ada4 <__gethex+0x2b8>
 800adce:	0021      	movs	r1, r4
 800add0:	9805      	ldr	r0, [sp, #20]
 800add2:	f000 fa0f 	bl	800b1f4 <_Bfree>
 800add6:	2300      	movs	r3, #0
 800add8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800adda:	2650      	movs	r6, #80	; 0x50
 800addc:	6013      	str	r3, [r2, #0]
 800adde:	e71e      	b.n	800ac1e <__gethex+0x132>
 800ade0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d1f3      	bne.n	800adce <__gethex+0x2e2>
 800ade6:	e7dd      	b.n	800ada4 <__gethex+0x2b8>
 800ade8:	0800d67c 	.word	0x0800d67c
 800adec:	0800d59c 	.word	0x0800d59c
 800adf0:	0800d610 	.word	0x0800d610
 800adf4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d1d4      	bne.n	800ada4 <__gethex+0x2b8>
 800adfa:	e7e8      	b.n	800adce <__gethex+0x2e2>
 800adfc:	1e77      	subs	r7, r6, #1
 800adfe:	2d00      	cmp	r5, #0
 800ae00:	d12f      	bne.n	800ae62 <__gethex+0x376>
 800ae02:	2f00      	cmp	r7, #0
 800ae04:	d004      	beq.n	800ae10 <__gethex+0x324>
 800ae06:	0039      	movs	r1, r7
 800ae08:	0020      	movs	r0, r4
 800ae0a:	f000 fe56 	bl	800baba <__any_on>
 800ae0e:	0005      	movs	r5, r0
 800ae10:	231f      	movs	r3, #31
 800ae12:	117a      	asrs	r2, r7, #5
 800ae14:	401f      	ands	r7, r3
 800ae16:	3b1e      	subs	r3, #30
 800ae18:	40bb      	lsls	r3, r7
 800ae1a:	9904      	ldr	r1, [sp, #16]
 800ae1c:	0092      	lsls	r2, r2, #2
 800ae1e:	5852      	ldr	r2, [r2, r1]
 800ae20:	421a      	tst	r2, r3
 800ae22:	d001      	beq.n	800ae28 <__gethex+0x33c>
 800ae24:	2302      	movs	r3, #2
 800ae26:	431d      	orrs	r5, r3
 800ae28:	9b01      	ldr	r3, [sp, #4]
 800ae2a:	0031      	movs	r1, r6
 800ae2c:	1b9b      	subs	r3, r3, r6
 800ae2e:	2602      	movs	r6, #2
 800ae30:	0020      	movs	r0, r4
 800ae32:	9301      	str	r3, [sp, #4]
 800ae34:	f7ff fdf0 	bl	800aa18 <rshift>
 800ae38:	9b02      	ldr	r3, [sp, #8]
 800ae3a:	685f      	ldr	r7, [r3, #4]
 800ae3c:	2d00      	cmp	r5, #0
 800ae3e:	d041      	beq.n	800aec4 <__gethex+0x3d8>
 800ae40:	9b02      	ldr	r3, [sp, #8]
 800ae42:	68db      	ldr	r3, [r3, #12]
 800ae44:	2b02      	cmp	r3, #2
 800ae46:	d010      	beq.n	800ae6a <__gethex+0x37e>
 800ae48:	2b03      	cmp	r3, #3
 800ae4a:	d012      	beq.n	800ae72 <__gethex+0x386>
 800ae4c:	2b01      	cmp	r3, #1
 800ae4e:	d106      	bne.n	800ae5e <__gethex+0x372>
 800ae50:	07aa      	lsls	r2, r5, #30
 800ae52:	d504      	bpl.n	800ae5e <__gethex+0x372>
 800ae54:	9a04      	ldr	r2, [sp, #16]
 800ae56:	6810      	ldr	r0, [r2, #0]
 800ae58:	4305      	orrs	r5, r0
 800ae5a:	421d      	tst	r5, r3
 800ae5c:	d10c      	bne.n	800ae78 <__gethex+0x38c>
 800ae5e:	2310      	movs	r3, #16
 800ae60:	e02f      	b.n	800aec2 <__gethex+0x3d6>
 800ae62:	2501      	movs	r5, #1
 800ae64:	e7d4      	b.n	800ae10 <__gethex+0x324>
 800ae66:	2601      	movs	r6, #1
 800ae68:	e7e8      	b.n	800ae3c <__gethex+0x350>
 800ae6a:	2301      	movs	r3, #1
 800ae6c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ae6e:	1a9b      	subs	r3, r3, r2
 800ae70:	9313      	str	r3, [sp, #76]	; 0x4c
 800ae72:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d0f2      	beq.n	800ae5e <__gethex+0x372>
 800ae78:	6923      	ldr	r3, [r4, #16]
 800ae7a:	2000      	movs	r0, #0
 800ae7c:	9303      	str	r3, [sp, #12]
 800ae7e:	009b      	lsls	r3, r3, #2
 800ae80:	9304      	str	r3, [sp, #16]
 800ae82:	0023      	movs	r3, r4
 800ae84:	9a04      	ldr	r2, [sp, #16]
 800ae86:	3314      	adds	r3, #20
 800ae88:	1899      	adds	r1, r3, r2
 800ae8a:	681a      	ldr	r2, [r3, #0]
 800ae8c:	1c55      	adds	r5, r2, #1
 800ae8e:	d01e      	beq.n	800aece <__gethex+0x3e2>
 800ae90:	3201      	adds	r2, #1
 800ae92:	601a      	str	r2, [r3, #0]
 800ae94:	0023      	movs	r3, r4
 800ae96:	3314      	adds	r3, #20
 800ae98:	2e02      	cmp	r6, #2
 800ae9a:	d140      	bne.n	800af1e <__gethex+0x432>
 800ae9c:	9a02      	ldr	r2, [sp, #8]
 800ae9e:	9901      	ldr	r1, [sp, #4]
 800aea0:	6812      	ldr	r2, [r2, #0]
 800aea2:	3a01      	subs	r2, #1
 800aea4:	428a      	cmp	r2, r1
 800aea6:	d10b      	bne.n	800aec0 <__gethex+0x3d4>
 800aea8:	114a      	asrs	r2, r1, #5
 800aeaa:	211f      	movs	r1, #31
 800aeac:	9801      	ldr	r0, [sp, #4]
 800aeae:	0092      	lsls	r2, r2, #2
 800aeb0:	4001      	ands	r1, r0
 800aeb2:	2001      	movs	r0, #1
 800aeb4:	0005      	movs	r5, r0
 800aeb6:	408d      	lsls	r5, r1
 800aeb8:	58d3      	ldr	r3, [r2, r3]
 800aeba:	422b      	tst	r3, r5
 800aebc:	d000      	beq.n	800aec0 <__gethex+0x3d4>
 800aebe:	2601      	movs	r6, #1
 800aec0:	2320      	movs	r3, #32
 800aec2:	431e      	orrs	r6, r3
 800aec4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800aec6:	601c      	str	r4, [r3, #0]
 800aec8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aeca:	601f      	str	r7, [r3, #0]
 800aecc:	e6a7      	b.n	800ac1e <__gethex+0x132>
 800aece:	c301      	stmia	r3!, {r0}
 800aed0:	4299      	cmp	r1, r3
 800aed2:	d8da      	bhi.n	800ae8a <__gethex+0x39e>
 800aed4:	9b03      	ldr	r3, [sp, #12]
 800aed6:	68a2      	ldr	r2, [r4, #8]
 800aed8:	4293      	cmp	r3, r2
 800aeda:	db17      	blt.n	800af0c <__gethex+0x420>
 800aedc:	6863      	ldr	r3, [r4, #4]
 800aede:	9805      	ldr	r0, [sp, #20]
 800aee0:	1c59      	adds	r1, r3, #1
 800aee2:	f000 f943 	bl	800b16c <_Balloc>
 800aee6:	1e05      	subs	r5, r0, #0
 800aee8:	d103      	bne.n	800aef2 <__gethex+0x406>
 800aeea:	0002      	movs	r2, r0
 800aeec:	2184      	movs	r1, #132	; 0x84
 800aeee:	4b1c      	ldr	r3, [pc, #112]	; (800af60 <__gethex+0x474>)
 800aef0:	e6b8      	b.n	800ac64 <__gethex+0x178>
 800aef2:	0021      	movs	r1, r4
 800aef4:	6923      	ldr	r3, [r4, #16]
 800aef6:	310c      	adds	r1, #12
 800aef8:	1c9a      	adds	r2, r3, #2
 800aefa:	0092      	lsls	r2, r2, #2
 800aefc:	300c      	adds	r0, #12
 800aefe:	f000 f92c 	bl	800b15a <memcpy>
 800af02:	0021      	movs	r1, r4
 800af04:	9805      	ldr	r0, [sp, #20]
 800af06:	f000 f975 	bl	800b1f4 <_Bfree>
 800af0a:	002c      	movs	r4, r5
 800af0c:	6923      	ldr	r3, [r4, #16]
 800af0e:	1c5a      	adds	r2, r3, #1
 800af10:	6122      	str	r2, [r4, #16]
 800af12:	2201      	movs	r2, #1
 800af14:	3304      	adds	r3, #4
 800af16:	009b      	lsls	r3, r3, #2
 800af18:	18e3      	adds	r3, r4, r3
 800af1a:	605a      	str	r2, [r3, #4]
 800af1c:	e7ba      	b.n	800ae94 <__gethex+0x3a8>
 800af1e:	6922      	ldr	r2, [r4, #16]
 800af20:	9903      	ldr	r1, [sp, #12]
 800af22:	428a      	cmp	r2, r1
 800af24:	dd09      	ble.n	800af3a <__gethex+0x44e>
 800af26:	2101      	movs	r1, #1
 800af28:	0020      	movs	r0, r4
 800af2a:	f7ff fd75 	bl	800aa18 <rshift>
 800af2e:	9b02      	ldr	r3, [sp, #8]
 800af30:	3701      	adds	r7, #1
 800af32:	689b      	ldr	r3, [r3, #8]
 800af34:	42bb      	cmp	r3, r7
 800af36:	dac2      	bge.n	800aebe <__gethex+0x3d2>
 800af38:	e6dc      	b.n	800acf4 <__gethex+0x208>
 800af3a:	221f      	movs	r2, #31
 800af3c:	9d01      	ldr	r5, [sp, #4]
 800af3e:	9901      	ldr	r1, [sp, #4]
 800af40:	2601      	movs	r6, #1
 800af42:	4015      	ands	r5, r2
 800af44:	4211      	tst	r1, r2
 800af46:	d0bb      	beq.n	800aec0 <__gethex+0x3d4>
 800af48:	9a04      	ldr	r2, [sp, #16]
 800af4a:	189b      	adds	r3, r3, r2
 800af4c:	3b04      	subs	r3, #4
 800af4e:	6818      	ldr	r0, [r3, #0]
 800af50:	f000 fa04 	bl	800b35c <__hi0bits>
 800af54:	2320      	movs	r3, #32
 800af56:	1b5d      	subs	r5, r3, r5
 800af58:	42a8      	cmp	r0, r5
 800af5a:	dbe4      	blt.n	800af26 <__gethex+0x43a>
 800af5c:	e7b0      	b.n	800aec0 <__gethex+0x3d4>
 800af5e:	46c0      	nop			; (mov r8, r8)
 800af60:	0800d59c 	.word	0x0800d59c

0800af64 <L_shift>:
 800af64:	2308      	movs	r3, #8
 800af66:	b570      	push	{r4, r5, r6, lr}
 800af68:	2520      	movs	r5, #32
 800af6a:	1a9a      	subs	r2, r3, r2
 800af6c:	0092      	lsls	r2, r2, #2
 800af6e:	1aad      	subs	r5, r5, r2
 800af70:	6843      	ldr	r3, [r0, #4]
 800af72:	6806      	ldr	r6, [r0, #0]
 800af74:	001c      	movs	r4, r3
 800af76:	40ac      	lsls	r4, r5
 800af78:	40d3      	lsrs	r3, r2
 800af7a:	4334      	orrs	r4, r6
 800af7c:	6004      	str	r4, [r0, #0]
 800af7e:	6043      	str	r3, [r0, #4]
 800af80:	3004      	adds	r0, #4
 800af82:	4288      	cmp	r0, r1
 800af84:	d3f4      	bcc.n	800af70 <L_shift+0xc>
 800af86:	bd70      	pop	{r4, r5, r6, pc}

0800af88 <__match>:
 800af88:	b530      	push	{r4, r5, lr}
 800af8a:	6803      	ldr	r3, [r0, #0]
 800af8c:	780c      	ldrb	r4, [r1, #0]
 800af8e:	3301      	adds	r3, #1
 800af90:	2c00      	cmp	r4, #0
 800af92:	d102      	bne.n	800af9a <__match+0x12>
 800af94:	6003      	str	r3, [r0, #0]
 800af96:	2001      	movs	r0, #1
 800af98:	bd30      	pop	{r4, r5, pc}
 800af9a:	781a      	ldrb	r2, [r3, #0]
 800af9c:	0015      	movs	r5, r2
 800af9e:	3d41      	subs	r5, #65	; 0x41
 800afa0:	2d19      	cmp	r5, #25
 800afa2:	d800      	bhi.n	800afa6 <__match+0x1e>
 800afa4:	3220      	adds	r2, #32
 800afa6:	3101      	adds	r1, #1
 800afa8:	42a2      	cmp	r2, r4
 800afaa:	d0ef      	beq.n	800af8c <__match+0x4>
 800afac:	2000      	movs	r0, #0
 800afae:	e7f3      	b.n	800af98 <__match+0x10>

0800afb0 <__hexnan>:
 800afb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800afb2:	680b      	ldr	r3, [r1, #0]
 800afb4:	b08b      	sub	sp, #44	; 0x2c
 800afb6:	115c      	asrs	r4, r3, #5
 800afb8:	00a4      	lsls	r4, r4, #2
 800afba:	9201      	str	r2, [sp, #4]
 800afbc:	1912      	adds	r2, r2, r4
 800afbe:	0019      	movs	r1, r3
 800afc0:	9202      	str	r2, [sp, #8]
 800afc2:	221f      	movs	r2, #31
 800afc4:	4011      	ands	r1, r2
 800afc6:	9008      	str	r0, [sp, #32]
 800afc8:	9106      	str	r1, [sp, #24]
 800afca:	4213      	tst	r3, r2
 800afcc:	d002      	beq.n	800afd4 <__hexnan+0x24>
 800afce:	9b02      	ldr	r3, [sp, #8]
 800afd0:	3304      	adds	r3, #4
 800afd2:	9302      	str	r3, [sp, #8]
 800afd4:	9b02      	ldr	r3, [sp, #8]
 800afd6:	2500      	movs	r5, #0
 800afd8:	1f1e      	subs	r6, r3, #4
 800afda:	0037      	movs	r7, r6
 800afdc:	0034      	movs	r4, r6
 800afde:	9b08      	ldr	r3, [sp, #32]
 800afe0:	6035      	str	r5, [r6, #0]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	9507      	str	r5, [sp, #28]
 800afe6:	9305      	str	r3, [sp, #20]
 800afe8:	9503      	str	r5, [sp, #12]
 800afea:	9b05      	ldr	r3, [sp, #20]
 800afec:	3301      	adds	r3, #1
 800afee:	9309      	str	r3, [sp, #36]	; 0x24
 800aff0:	9b05      	ldr	r3, [sp, #20]
 800aff2:	785b      	ldrb	r3, [r3, #1]
 800aff4:	9304      	str	r3, [sp, #16]
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d028      	beq.n	800b04c <__hexnan+0x9c>
 800affa:	9804      	ldr	r0, [sp, #16]
 800affc:	f7ff fd60 	bl	800aac0 <__hexdig_fun>
 800b000:	2800      	cmp	r0, #0
 800b002:	d154      	bne.n	800b0ae <__hexnan+0xfe>
 800b004:	9b04      	ldr	r3, [sp, #16]
 800b006:	2b20      	cmp	r3, #32
 800b008:	d819      	bhi.n	800b03e <__hexnan+0x8e>
 800b00a:	9b03      	ldr	r3, [sp, #12]
 800b00c:	9a07      	ldr	r2, [sp, #28]
 800b00e:	4293      	cmp	r3, r2
 800b010:	dd12      	ble.n	800b038 <__hexnan+0x88>
 800b012:	42bc      	cmp	r4, r7
 800b014:	d206      	bcs.n	800b024 <__hexnan+0x74>
 800b016:	2d07      	cmp	r5, #7
 800b018:	dc04      	bgt.n	800b024 <__hexnan+0x74>
 800b01a:	002a      	movs	r2, r5
 800b01c:	0039      	movs	r1, r7
 800b01e:	0020      	movs	r0, r4
 800b020:	f7ff ffa0 	bl	800af64 <L_shift>
 800b024:	9b01      	ldr	r3, [sp, #4]
 800b026:	2508      	movs	r5, #8
 800b028:	429c      	cmp	r4, r3
 800b02a:	d905      	bls.n	800b038 <__hexnan+0x88>
 800b02c:	1f27      	subs	r7, r4, #4
 800b02e:	2500      	movs	r5, #0
 800b030:	003c      	movs	r4, r7
 800b032:	9b03      	ldr	r3, [sp, #12]
 800b034:	603d      	str	r5, [r7, #0]
 800b036:	9307      	str	r3, [sp, #28]
 800b038:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b03a:	9305      	str	r3, [sp, #20]
 800b03c:	e7d5      	b.n	800afea <__hexnan+0x3a>
 800b03e:	9b04      	ldr	r3, [sp, #16]
 800b040:	2b29      	cmp	r3, #41	; 0x29
 800b042:	d158      	bne.n	800b0f6 <__hexnan+0x146>
 800b044:	9b05      	ldr	r3, [sp, #20]
 800b046:	9a08      	ldr	r2, [sp, #32]
 800b048:	3302      	adds	r3, #2
 800b04a:	6013      	str	r3, [r2, #0]
 800b04c:	9b03      	ldr	r3, [sp, #12]
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d051      	beq.n	800b0f6 <__hexnan+0x146>
 800b052:	42bc      	cmp	r4, r7
 800b054:	d206      	bcs.n	800b064 <__hexnan+0xb4>
 800b056:	2d07      	cmp	r5, #7
 800b058:	dc04      	bgt.n	800b064 <__hexnan+0xb4>
 800b05a:	002a      	movs	r2, r5
 800b05c:	0039      	movs	r1, r7
 800b05e:	0020      	movs	r0, r4
 800b060:	f7ff ff80 	bl	800af64 <L_shift>
 800b064:	9b01      	ldr	r3, [sp, #4]
 800b066:	429c      	cmp	r4, r3
 800b068:	d935      	bls.n	800b0d6 <__hexnan+0x126>
 800b06a:	001a      	movs	r2, r3
 800b06c:	0023      	movs	r3, r4
 800b06e:	cb02      	ldmia	r3!, {r1}
 800b070:	c202      	stmia	r2!, {r1}
 800b072:	429e      	cmp	r6, r3
 800b074:	d2fb      	bcs.n	800b06e <__hexnan+0xbe>
 800b076:	9b02      	ldr	r3, [sp, #8]
 800b078:	1c61      	adds	r1, r4, #1
 800b07a:	1eda      	subs	r2, r3, #3
 800b07c:	2304      	movs	r3, #4
 800b07e:	4291      	cmp	r1, r2
 800b080:	d805      	bhi.n	800b08e <__hexnan+0xde>
 800b082:	9b02      	ldr	r3, [sp, #8]
 800b084:	3b04      	subs	r3, #4
 800b086:	1b1c      	subs	r4, r3, r4
 800b088:	08a4      	lsrs	r4, r4, #2
 800b08a:	3401      	adds	r4, #1
 800b08c:	00a3      	lsls	r3, r4, #2
 800b08e:	9a01      	ldr	r2, [sp, #4]
 800b090:	18d4      	adds	r4, r2, r3
 800b092:	2300      	movs	r3, #0
 800b094:	c408      	stmia	r4!, {r3}
 800b096:	42a6      	cmp	r6, r4
 800b098:	d2fc      	bcs.n	800b094 <__hexnan+0xe4>
 800b09a:	6833      	ldr	r3, [r6, #0]
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d104      	bne.n	800b0aa <__hexnan+0xfa>
 800b0a0:	9b01      	ldr	r3, [sp, #4]
 800b0a2:	429e      	cmp	r6, r3
 800b0a4:	d125      	bne.n	800b0f2 <__hexnan+0x142>
 800b0a6:	2301      	movs	r3, #1
 800b0a8:	6033      	str	r3, [r6, #0]
 800b0aa:	2005      	movs	r0, #5
 800b0ac:	e024      	b.n	800b0f8 <__hexnan+0x148>
 800b0ae:	9b03      	ldr	r3, [sp, #12]
 800b0b0:	3501      	adds	r5, #1
 800b0b2:	3301      	adds	r3, #1
 800b0b4:	9303      	str	r3, [sp, #12]
 800b0b6:	2d08      	cmp	r5, #8
 800b0b8:	dd06      	ble.n	800b0c8 <__hexnan+0x118>
 800b0ba:	9b01      	ldr	r3, [sp, #4]
 800b0bc:	429c      	cmp	r4, r3
 800b0be:	d9bb      	bls.n	800b038 <__hexnan+0x88>
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	2501      	movs	r5, #1
 800b0c4:	3c04      	subs	r4, #4
 800b0c6:	6023      	str	r3, [r4, #0]
 800b0c8:	220f      	movs	r2, #15
 800b0ca:	6823      	ldr	r3, [r4, #0]
 800b0cc:	4010      	ands	r0, r2
 800b0ce:	011b      	lsls	r3, r3, #4
 800b0d0:	4318      	orrs	r0, r3
 800b0d2:	6020      	str	r0, [r4, #0]
 800b0d4:	e7b0      	b.n	800b038 <__hexnan+0x88>
 800b0d6:	9b06      	ldr	r3, [sp, #24]
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d0de      	beq.n	800b09a <__hexnan+0xea>
 800b0dc:	2220      	movs	r2, #32
 800b0de:	1ad2      	subs	r2, r2, r3
 800b0e0:	2301      	movs	r3, #1
 800b0e2:	425b      	negs	r3, r3
 800b0e4:	40d3      	lsrs	r3, r2
 800b0e6:	9c02      	ldr	r4, [sp, #8]
 800b0e8:	3c04      	subs	r4, #4
 800b0ea:	6822      	ldr	r2, [r4, #0]
 800b0ec:	4013      	ands	r3, r2
 800b0ee:	6023      	str	r3, [r4, #0]
 800b0f0:	e7d3      	b.n	800b09a <__hexnan+0xea>
 800b0f2:	3e04      	subs	r6, #4
 800b0f4:	e7d1      	b.n	800b09a <__hexnan+0xea>
 800b0f6:	2004      	movs	r0, #4
 800b0f8:	b00b      	add	sp, #44	; 0x2c
 800b0fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b0fc <_localeconv_r>:
 800b0fc:	4800      	ldr	r0, [pc, #0]	; (800b100 <_localeconv_r+0x4>)
 800b0fe:	4770      	bx	lr
 800b100:	20000168 	.word	0x20000168

0800b104 <__retarget_lock_init_recursive>:
 800b104:	4770      	bx	lr

0800b106 <__retarget_lock_acquire_recursive>:
 800b106:	4770      	bx	lr

0800b108 <__retarget_lock_release_recursive>:
 800b108:	4770      	bx	lr
	...

0800b10c <malloc>:
 800b10c:	b510      	push	{r4, lr}
 800b10e:	4b03      	ldr	r3, [pc, #12]	; (800b11c <malloc+0x10>)
 800b110:	0001      	movs	r1, r0
 800b112:	6818      	ldr	r0, [r3, #0]
 800b114:	f000 fd4c 	bl	800bbb0 <_malloc_r>
 800b118:	bd10      	pop	{r4, pc}
 800b11a:	46c0      	nop			; (mov r8, r8)
 800b11c:	20000010 	.word	0x20000010

0800b120 <__ascii_mbtowc>:
 800b120:	b082      	sub	sp, #8
 800b122:	2900      	cmp	r1, #0
 800b124:	d100      	bne.n	800b128 <__ascii_mbtowc+0x8>
 800b126:	a901      	add	r1, sp, #4
 800b128:	1e10      	subs	r0, r2, #0
 800b12a:	d006      	beq.n	800b13a <__ascii_mbtowc+0x1a>
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d006      	beq.n	800b13e <__ascii_mbtowc+0x1e>
 800b130:	7813      	ldrb	r3, [r2, #0]
 800b132:	600b      	str	r3, [r1, #0]
 800b134:	7810      	ldrb	r0, [r2, #0]
 800b136:	1e43      	subs	r3, r0, #1
 800b138:	4198      	sbcs	r0, r3
 800b13a:	b002      	add	sp, #8
 800b13c:	4770      	bx	lr
 800b13e:	2002      	movs	r0, #2
 800b140:	4240      	negs	r0, r0
 800b142:	e7fa      	b.n	800b13a <__ascii_mbtowc+0x1a>

0800b144 <memchr>:
 800b144:	b2c9      	uxtb	r1, r1
 800b146:	1882      	adds	r2, r0, r2
 800b148:	4290      	cmp	r0, r2
 800b14a:	d101      	bne.n	800b150 <memchr+0xc>
 800b14c:	2000      	movs	r0, #0
 800b14e:	4770      	bx	lr
 800b150:	7803      	ldrb	r3, [r0, #0]
 800b152:	428b      	cmp	r3, r1
 800b154:	d0fb      	beq.n	800b14e <memchr+0xa>
 800b156:	3001      	adds	r0, #1
 800b158:	e7f6      	b.n	800b148 <memchr+0x4>

0800b15a <memcpy>:
 800b15a:	2300      	movs	r3, #0
 800b15c:	b510      	push	{r4, lr}
 800b15e:	429a      	cmp	r2, r3
 800b160:	d100      	bne.n	800b164 <memcpy+0xa>
 800b162:	bd10      	pop	{r4, pc}
 800b164:	5ccc      	ldrb	r4, [r1, r3]
 800b166:	54c4      	strb	r4, [r0, r3]
 800b168:	3301      	adds	r3, #1
 800b16a:	e7f8      	b.n	800b15e <memcpy+0x4>

0800b16c <_Balloc>:
 800b16c:	b570      	push	{r4, r5, r6, lr}
 800b16e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b170:	0006      	movs	r6, r0
 800b172:	000c      	movs	r4, r1
 800b174:	2d00      	cmp	r5, #0
 800b176:	d10e      	bne.n	800b196 <_Balloc+0x2a>
 800b178:	2010      	movs	r0, #16
 800b17a:	f7ff ffc7 	bl	800b10c <malloc>
 800b17e:	1e02      	subs	r2, r0, #0
 800b180:	6270      	str	r0, [r6, #36]	; 0x24
 800b182:	d104      	bne.n	800b18e <_Balloc+0x22>
 800b184:	2166      	movs	r1, #102	; 0x66
 800b186:	4b19      	ldr	r3, [pc, #100]	; (800b1ec <_Balloc+0x80>)
 800b188:	4819      	ldr	r0, [pc, #100]	; (800b1f0 <_Balloc+0x84>)
 800b18a:	f001 f999 	bl	800c4c0 <__assert_func>
 800b18e:	6045      	str	r5, [r0, #4]
 800b190:	6085      	str	r5, [r0, #8]
 800b192:	6005      	str	r5, [r0, #0]
 800b194:	60c5      	str	r5, [r0, #12]
 800b196:	6a75      	ldr	r5, [r6, #36]	; 0x24
 800b198:	68eb      	ldr	r3, [r5, #12]
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d013      	beq.n	800b1c6 <_Balloc+0x5a>
 800b19e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800b1a0:	00a2      	lsls	r2, r4, #2
 800b1a2:	68db      	ldr	r3, [r3, #12]
 800b1a4:	189b      	adds	r3, r3, r2
 800b1a6:	6818      	ldr	r0, [r3, #0]
 800b1a8:	2800      	cmp	r0, #0
 800b1aa:	d118      	bne.n	800b1de <_Balloc+0x72>
 800b1ac:	2101      	movs	r1, #1
 800b1ae:	000d      	movs	r5, r1
 800b1b0:	40a5      	lsls	r5, r4
 800b1b2:	1d6a      	adds	r2, r5, #5
 800b1b4:	0030      	movs	r0, r6
 800b1b6:	0092      	lsls	r2, r2, #2
 800b1b8:	f000 fca2 	bl	800bb00 <_calloc_r>
 800b1bc:	2800      	cmp	r0, #0
 800b1be:	d00c      	beq.n	800b1da <_Balloc+0x6e>
 800b1c0:	6044      	str	r4, [r0, #4]
 800b1c2:	6085      	str	r5, [r0, #8]
 800b1c4:	e00d      	b.n	800b1e2 <_Balloc+0x76>
 800b1c6:	2221      	movs	r2, #33	; 0x21
 800b1c8:	2104      	movs	r1, #4
 800b1ca:	0030      	movs	r0, r6
 800b1cc:	f000 fc98 	bl	800bb00 <_calloc_r>
 800b1d0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800b1d2:	60e8      	str	r0, [r5, #12]
 800b1d4:	68db      	ldr	r3, [r3, #12]
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d1e1      	bne.n	800b19e <_Balloc+0x32>
 800b1da:	2000      	movs	r0, #0
 800b1dc:	bd70      	pop	{r4, r5, r6, pc}
 800b1de:	6802      	ldr	r2, [r0, #0]
 800b1e0:	601a      	str	r2, [r3, #0]
 800b1e2:	2300      	movs	r3, #0
 800b1e4:	6103      	str	r3, [r0, #16]
 800b1e6:	60c3      	str	r3, [r0, #12]
 800b1e8:	e7f8      	b.n	800b1dc <_Balloc+0x70>
 800b1ea:	46c0      	nop			; (mov r8, r8)
 800b1ec:	0800d526 	.word	0x0800d526
 800b1f0:	0800d690 	.word	0x0800d690

0800b1f4 <_Bfree>:
 800b1f4:	b570      	push	{r4, r5, r6, lr}
 800b1f6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b1f8:	0005      	movs	r5, r0
 800b1fa:	000c      	movs	r4, r1
 800b1fc:	2e00      	cmp	r6, #0
 800b1fe:	d10e      	bne.n	800b21e <_Bfree+0x2a>
 800b200:	2010      	movs	r0, #16
 800b202:	f7ff ff83 	bl	800b10c <malloc>
 800b206:	1e02      	subs	r2, r0, #0
 800b208:	6268      	str	r0, [r5, #36]	; 0x24
 800b20a:	d104      	bne.n	800b216 <_Bfree+0x22>
 800b20c:	218a      	movs	r1, #138	; 0x8a
 800b20e:	4b09      	ldr	r3, [pc, #36]	; (800b234 <_Bfree+0x40>)
 800b210:	4809      	ldr	r0, [pc, #36]	; (800b238 <_Bfree+0x44>)
 800b212:	f001 f955 	bl	800c4c0 <__assert_func>
 800b216:	6046      	str	r6, [r0, #4]
 800b218:	6086      	str	r6, [r0, #8]
 800b21a:	6006      	str	r6, [r0, #0]
 800b21c:	60c6      	str	r6, [r0, #12]
 800b21e:	2c00      	cmp	r4, #0
 800b220:	d007      	beq.n	800b232 <_Bfree+0x3e>
 800b222:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b224:	6862      	ldr	r2, [r4, #4]
 800b226:	68db      	ldr	r3, [r3, #12]
 800b228:	0092      	lsls	r2, r2, #2
 800b22a:	189b      	adds	r3, r3, r2
 800b22c:	681a      	ldr	r2, [r3, #0]
 800b22e:	6022      	str	r2, [r4, #0]
 800b230:	601c      	str	r4, [r3, #0]
 800b232:	bd70      	pop	{r4, r5, r6, pc}
 800b234:	0800d526 	.word	0x0800d526
 800b238:	0800d690 	.word	0x0800d690

0800b23c <__multadd>:
 800b23c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b23e:	000e      	movs	r6, r1
 800b240:	9001      	str	r0, [sp, #4]
 800b242:	000c      	movs	r4, r1
 800b244:	001d      	movs	r5, r3
 800b246:	2000      	movs	r0, #0
 800b248:	690f      	ldr	r7, [r1, #16]
 800b24a:	3614      	adds	r6, #20
 800b24c:	6833      	ldr	r3, [r6, #0]
 800b24e:	3001      	adds	r0, #1
 800b250:	b299      	uxth	r1, r3
 800b252:	4351      	muls	r1, r2
 800b254:	0c1b      	lsrs	r3, r3, #16
 800b256:	4353      	muls	r3, r2
 800b258:	1949      	adds	r1, r1, r5
 800b25a:	0c0d      	lsrs	r5, r1, #16
 800b25c:	195b      	adds	r3, r3, r5
 800b25e:	0c1d      	lsrs	r5, r3, #16
 800b260:	b289      	uxth	r1, r1
 800b262:	041b      	lsls	r3, r3, #16
 800b264:	185b      	adds	r3, r3, r1
 800b266:	c608      	stmia	r6!, {r3}
 800b268:	4287      	cmp	r7, r0
 800b26a:	dcef      	bgt.n	800b24c <__multadd+0x10>
 800b26c:	2d00      	cmp	r5, #0
 800b26e:	d022      	beq.n	800b2b6 <__multadd+0x7a>
 800b270:	68a3      	ldr	r3, [r4, #8]
 800b272:	42bb      	cmp	r3, r7
 800b274:	dc19      	bgt.n	800b2aa <__multadd+0x6e>
 800b276:	6863      	ldr	r3, [r4, #4]
 800b278:	9801      	ldr	r0, [sp, #4]
 800b27a:	1c59      	adds	r1, r3, #1
 800b27c:	f7ff ff76 	bl	800b16c <_Balloc>
 800b280:	1e06      	subs	r6, r0, #0
 800b282:	d105      	bne.n	800b290 <__multadd+0x54>
 800b284:	0002      	movs	r2, r0
 800b286:	21b5      	movs	r1, #181	; 0xb5
 800b288:	4b0c      	ldr	r3, [pc, #48]	; (800b2bc <__multadd+0x80>)
 800b28a:	480d      	ldr	r0, [pc, #52]	; (800b2c0 <__multadd+0x84>)
 800b28c:	f001 f918 	bl	800c4c0 <__assert_func>
 800b290:	0021      	movs	r1, r4
 800b292:	6923      	ldr	r3, [r4, #16]
 800b294:	310c      	adds	r1, #12
 800b296:	1c9a      	adds	r2, r3, #2
 800b298:	0092      	lsls	r2, r2, #2
 800b29a:	300c      	adds	r0, #12
 800b29c:	f7ff ff5d 	bl	800b15a <memcpy>
 800b2a0:	0021      	movs	r1, r4
 800b2a2:	9801      	ldr	r0, [sp, #4]
 800b2a4:	f7ff ffa6 	bl	800b1f4 <_Bfree>
 800b2a8:	0034      	movs	r4, r6
 800b2aa:	1d3b      	adds	r3, r7, #4
 800b2ac:	009b      	lsls	r3, r3, #2
 800b2ae:	18e3      	adds	r3, r4, r3
 800b2b0:	605d      	str	r5, [r3, #4]
 800b2b2:	1c7b      	adds	r3, r7, #1
 800b2b4:	6123      	str	r3, [r4, #16]
 800b2b6:	0020      	movs	r0, r4
 800b2b8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b2ba:	46c0      	nop			; (mov r8, r8)
 800b2bc:	0800d59c 	.word	0x0800d59c
 800b2c0:	0800d690 	.word	0x0800d690

0800b2c4 <__s2b>:
 800b2c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b2c6:	0006      	movs	r6, r0
 800b2c8:	0018      	movs	r0, r3
 800b2ca:	000c      	movs	r4, r1
 800b2cc:	3008      	adds	r0, #8
 800b2ce:	2109      	movs	r1, #9
 800b2d0:	9301      	str	r3, [sp, #4]
 800b2d2:	0015      	movs	r5, r2
 800b2d4:	f7f4 ffbe 	bl	8000254 <__divsi3>
 800b2d8:	2301      	movs	r3, #1
 800b2da:	2100      	movs	r1, #0
 800b2dc:	4283      	cmp	r3, r0
 800b2de:	db0a      	blt.n	800b2f6 <__s2b+0x32>
 800b2e0:	0030      	movs	r0, r6
 800b2e2:	f7ff ff43 	bl	800b16c <_Balloc>
 800b2e6:	1e01      	subs	r1, r0, #0
 800b2e8:	d108      	bne.n	800b2fc <__s2b+0x38>
 800b2ea:	0002      	movs	r2, r0
 800b2ec:	4b19      	ldr	r3, [pc, #100]	; (800b354 <__s2b+0x90>)
 800b2ee:	481a      	ldr	r0, [pc, #104]	; (800b358 <__s2b+0x94>)
 800b2f0:	31ce      	adds	r1, #206	; 0xce
 800b2f2:	f001 f8e5 	bl	800c4c0 <__assert_func>
 800b2f6:	005b      	lsls	r3, r3, #1
 800b2f8:	3101      	adds	r1, #1
 800b2fa:	e7ef      	b.n	800b2dc <__s2b+0x18>
 800b2fc:	9b08      	ldr	r3, [sp, #32]
 800b2fe:	6143      	str	r3, [r0, #20]
 800b300:	2301      	movs	r3, #1
 800b302:	6103      	str	r3, [r0, #16]
 800b304:	2d09      	cmp	r5, #9
 800b306:	dd18      	ble.n	800b33a <__s2b+0x76>
 800b308:	0023      	movs	r3, r4
 800b30a:	3309      	adds	r3, #9
 800b30c:	001f      	movs	r7, r3
 800b30e:	9300      	str	r3, [sp, #0]
 800b310:	1964      	adds	r4, r4, r5
 800b312:	783b      	ldrb	r3, [r7, #0]
 800b314:	220a      	movs	r2, #10
 800b316:	0030      	movs	r0, r6
 800b318:	3b30      	subs	r3, #48	; 0x30
 800b31a:	f7ff ff8f 	bl	800b23c <__multadd>
 800b31e:	3701      	adds	r7, #1
 800b320:	0001      	movs	r1, r0
 800b322:	42a7      	cmp	r7, r4
 800b324:	d1f5      	bne.n	800b312 <__s2b+0x4e>
 800b326:	002c      	movs	r4, r5
 800b328:	9b00      	ldr	r3, [sp, #0]
 800b32a:	3c08      	subs	r4, #8
 800b32c:	191c      	adds	r4, r3, r4
 800b32e:	002f      	movs	r7, r5
 800b330:	9b01      	ldr	r3, [sp, #4]
 800b332:	429f      	cmp	r7, r3
 800b334:	db04      	blt.n	800b340 <__s2b+0x7c>
 800b336:	0008      	movs	r0, r1
 800b338:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b33a:	2509      	movs	r5, #9
 800b33c:	340a      	adds	r4, #10
 800b33e:	e7f6      	b.n	800b32e <__s2b+0x6a>
 800b340:	1b63      	subs	r3, r4, r5
 800b342:	5ddb      	ldrb	r3, [r3, r7]
 800b344:	220a      	movs	r2, #10
 800b346:	0030      	movs	r0, r6
 800b348:	3b30      	subs	r3, #48	; 0x30
 800b34a:	f7ff ff77 	bl	800b23c <__multadd>
 800b34e:	3701      	adds	r7, #1
 800b350:	0001      	movs	r1, r0
 800b352:	e7ed      	b.n	800b330 <__s2b+0x6c>
 800b354:	0800d59c 	.word	0x0800d59c
 800b358:	0800d690 	.word	0x0800d690

0800b35c <__hi0bits>:
 800b35c:	0003      	movs	r3, r0
 800b35e:	0c02      	lsrs	r2, r0, #16
 800b360:	2000      	movs	r0, #0
 800b362:	4282      	cmp	r2, r0
 800b364:	d101      	bne.n	800b36a <__hi0bits+0xe>
 800b366:	041b      	lsls	r3, r3, #16
 800b368:	3010      	adds	r0, #16
 800b36a:	0e1a      	lsrs	r2, r3, #24
 800b36c:	d101      	bne.n	800b372 <__hi0bits+0x16>
 800b36e:	3008      	adds	r0, #8
 800b370:	021b      	lsls	r3, r3, #8
 800b372:	0f1a      	lsrs	r2, r3, #28
 800b374:	d101      	bne.n	800b37a <__hi0bits+0x1e>
 800b376:	3004      	adds	r0, #4
 800b378:	011b      	lsls	r3, r3, #4
 800b37a:	0f9a      	lsrs	r2, r3, #30
 800b37c:	d101      	bne.n	800b382 <__hi0bits+0x26>
 800b37e:	3002      	adds	r0, #2
 800b380:	009b      	lsls	r3, r3, #2
 800b382:	2b00      	cmp	r3, #0
 800b384:	db03      	blt.n	800b38e <__hi0bits+0x32>
 800b386:	3001      	adds	r0, #1
 800b388:	005b      	lsls	r3, r3, #1
 800b38a:	d400      	bmi.n	800b38e <__hi0bits+0x32>
 800b38c:	2020      	movs	r0, #32
 800b38e:	4770      	bx	lr

0800b390 <__lo0bits>:
 800b390:	6803      	ldr	r3, [r0, #0]
 800b392:	0002      	movs	r2, r0
 800b394:	2107      	movs	r1, #7
 800b396:	0018      	movs	r0, r3
 800b398:	4008      	ands	r0, r1
 800b39a:	420b      	tst	r3, r1
 800b39c:	d00d      	beq.n	800b3ba <__lo0bits+0x2a>
 800b39e:	3906      	subs	r1, #6
 800b3a0:	2000      	movs	r0, #0
 800b3a2:	420b      	tst	r3, r1
 800b3a4:	d105      	bne.n	800b3b2 <__lo0bits+0x22>
 800b3a6:	3002      	adds	r0, #2
 800b3a8:	4203      	tst	r3, r0
 800b3aa:	d003      	beq.n	800b3b4 <__lo0bits+0x24>
 800b3ac:	40cb      	lsrs	r3, r1
 800b3ae:	0008      	movs	r0, r1
 800b3b0:	6013      	str	r3, [r2, #0]
 800b3b2:	4770      	bx	lr
 800b3b4:	089b      	lsrs	r3, r3, #2
 800b3b6:	6013      	str	r3, [r2, #0]
 800b3b8:	e7fb      	b.n	800b3b2 <__lo0bits+0x22>
 800b3ba:	b299      	uxth	r1, r3
 800b3bc:	2900      	cmp	r1, #0
 800b3be:	d101      	bne.n	800b3c4 <__lo0bits+0x34>
 800b3c0:	2010      	movs	r0, #16
 800b3c2:	0c1b      	lsrs	r3, r3, #16
 800b3c4:	b2d9      	uxtb	r1, r3
 800b3c6:	2900      	cmp	r1, #0
 800b3c8:	d101      	bne.n	800b3ce <__lo0bits+0x3e>
 800b3ca:	3008      	adds	r0, #8
 800b3cc:	0a1b      	lsrs	r3, r3, #8
 800b3ce:	0719      	lsls	r1, r3, #28
 800b3d0:	d101      	bne.n	800b3d6 <__lo0bits+0x46>
 800b3d2:	3004      	adds	r0, #4
 800b3d4:	091b      	lsrs	r3, r3, #4
 800b3d6:	0799      	lsls	r1, r3, #30
 800b3d8:	d101      	bne.n	800b3de <__lo0bits+0x4e>
 800b3da:	3002      	adds	r0, #2
 800b3dc:	089b      	lsrs	r3, r3, #2
 800b3de:	07d9      	lsls	r1, r3, #31
 800b3e0:	d4e9      	bmi.n	800b3b6 <__lo0bits+0x26>
 800b3e2:	3001      	adds	r0, #1
 800b3e4:	085b      	lsrs	r3, r3, #1
 800b3e6:	d1e6      	bne.n	800b3b6 <__lo0bits+0x26>
 800b3e8:	2020      	movs	r0, #32
 800b3ea:	e7e2      	b.n	800b3b2 <__lo0bits+0x22>

0800b3ec <__i2b>:
 800b3ec:	b510      	push	{r4, lr}
 800b3ee:	000c      	movs	r4, r1
 800b3f0:	2101      	movs	r1, #1
 800b3f2:	f7ff febb 	bl	800b16c <_Balloc>
 800b3f6:	2800      	cmp	r0, #0
 800b3f8:	d106      	bne.n	800b408 <__i2b+0x1c>
 800b3fa:	21a0      	movs	r1, #160	; 0xa0
 800b3fc:	0002      	movs	r2, r0
 800b3fe:	4b04      	ldr	r3, [pc, #16]	; (800b410 <__i2b+0x24>)
 800b400:	4804      	ldr	r0, [pc, #16]	; (800b414 <__i2b+0x28>)
 800b402:	0049      	lsls	r1, r1, #1
 800b404:	f001 f85c 	bl	800c4c0 <__assert_func>
 800b408:	2301      	movs	r3, #1
 800b40a:	6144      	str	r4, [r0, #20]
 800b40c:	6103      	str	r3, [r0, #16]
 800b40e:	bd10      	pop	{r4, pc}
 800b410:	0800d59c 	.word	0x0800d59c
 800b414:	0800d690 	.word	0x0800d690

0800b418 <__multiply>:
 800b418:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b41a:	690b      	ldr	r3, [r1, #16]
 800b41c:	0014      	movs	r4, r2
 800b41e:	6912      	ldr	r2, [r2, #16]
 800b420:	000d      	movs	r5, r1
 800b422:	b089      	sub	sp, #36	; 0x24
 800b424:	4293      	cmp	r3, r2
 800b426:	da01      	bge.n	800b42c <__multiply+0x14>
 800b428:	0025      	movs	r5, r4
 800b42a:	000c      	movs	r4, r1
 800b42c:	692f      	ldr	r7, [r5, #16]
 800b42e:	6926      	ldr	r6, [r4, #16]
 800b430:	6869      	ldr	r1, [r5, #4]
 800b432:	19bb      	adds	r3, r7, r6
 800b434:	9302      	str	r3, [sp, #8]
 800b436:	68ab      	ldr	r3, [r5, #8]
 800b438:	19ba      	adds	r2, r7, r6
 800b43a:	4293      	cmp	r3, r2
 800b43c:	da00      	bge.n	800b440 <__multiply+0x28>
 800b43e:	3101      	adds	r1, #1
 800b440:	f7ff fe94 	bl	800b16c <_Balloc>
 800b444:	9001      	str	r0, [sp, #4]
 800b446:	2800      	cmp	r0, #0
 800b448:	d106      	bne.n	800b458 <__multiply+0x40>
 800b44a:	215e      	movs	r1, #94	; 0x5e
 800b44c:	0002      	movs	r2, r0
 800b44e:	4b48      	ldr	r3, [pc, #288]	; (800b570 <__multiply+0x158>)
 800b450:	4848      	ldr	r0, [pc, #288]	; (800b574 <__multiply+0x15c>)
 800b452:	31ff      	adds	r1, #255	; 0xff
 800b454:	f001 f834 	bl	800c4c0 <__assert_func>
 800b458:	9b01      	ldr	r3, [sp, #4]
 800b45a:	2200      	movs	r2, #0
 800b45c:	3314      	adds	r3, #20
 800b45e:	469c      	mov	ip, r3
 800b460:	19bb      	adds	r3, r7, r6
 800b462:	009b      	lsls	r3, r3, #2
 800b464:	4463      	add	r3, ip
 800b466:	9303      	str	r3, [sp, #12]
 800b468:	4663      	mov	r3, ip
 800b46a:	9903      	ldr	r1, [sp, #12]
 800b46c:	428b      	cmp	r3, r1
 800b46e:	d32c      	bcc.n	800b4ca <__multiply+0xb2>
 800b470:	002b      	movs	r3, r5
 800b472:	0022      	movs	r2, r4
 800b474:	3314      	adds	r3, #20
 800b476:	00bf      	lsls	r7, r7, #2
 800b478:	3214      	adds	r2, #20
 800b47a:	9306      	str	r3, [sp, #24]
 800b47c:	00b6      	lsls	r6, r6, #2
 800b47e:	19db      	adds	r3, r3, r7
 800b480:	9304      	str	r3, [sp, #16]
 800b482:	1993      	adds	r3, r2, r6
 800b484:	9307      	str	r3, [sp, #28]
 800b486:	2304      	movs	r3, #4
 800b488:	9305      	str	r3, [sp, #20]
 800b48a:	002b      	movs	r3, r5
 800b48c:	9904      	ldr	r1, [sp, #16]
 800b48e:	3315      	adds	r3, #21
 800b490:	9200      	str	r2, [sp, #0]
 800b492:	4299      	cmp	r1, r3
 800b494:	d305      	bcc.n	800b4a2 <__multiply+0x8a>
 800b496:	1b4b      	subs	r3, r1, r5
 800b498:	3b15      	subs	r3, #21
 800b49a:	089b      	lsrs	r3, r3, #2
 800b49c:	3301      	adds	r3, #1
 800b49e:	009b      	lsls	r3, r3, #2
 800b4a0:	9305      	str	r3, [sp, #20]
 800b4a2:	9b07      	ldr	r3, [sp, #28]
 800b4a4:	9a00      	ldr	r2, [sp, #0]
 800b4a6:	429a      	cmp	r2, r3
 800b4a8:	d311      	bcc.n	800b4ce <__multiply+0xb6>
 800b4aa:	9b02      	ldr	r3, [sp, #8]
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	dd06      	ble.n	800b4be <__multiply+0xa6>
 800b4b0:	9b03      	ldr	r3, [sp, #12]
 800b4b2:	3b04      	subs	r3, #4
 800b4b4:	9303      	str	r3, [sp, #12]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	9300      	str	r3, [sp, #0]
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d054      	beq.n	800b568 <__multiply+0x150>
 800b4be:	9b01      	ldr	r3, [sp, #4]
 800b4c0:	9a02      	ldr	r2, [sp, #8]
 800b4c2:	0018      	movs	r0, r3
 800b4c4:	611a      	str	r2, [r3, #16]
 800b4c6:	b009      	add	sp, #36	; 0x24
 800b4c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b4ca:	c304      	stmia	r3!, {r2}
 800b4cc:	e7cd      	b.n	800b46a <__multiply+0x52>
 800b4ce:	9b00      	ldr	r3, [sp, #0]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	b298      	uxth	r0, r3
 800b4d4:	2800      	cmp	r0, #0
 800b4d6:	d01c      	beq.n	800b512 <__multiply+0xfa>
 800b4d8:	4667      	mov	r7, ip
 800b4da:	2400      	movs	r4, #0
 800b4dc:	9e06      	ldr	r6, [sp, #24]
 800b4de:	ce02      	ldmia	r6!, {r1}
 800b4e0:	683a      	ldr	r2, [r7, #0]
 800b4e2:	b28b      	uxth	r3, r1
 800b4e4:	4343      	muls	r3, r0
 800b4e6:	0c09      	lsrs	r1, r1, #16
 800b4e8:	4341      	muls	r1, r0
 800b4ea:	b292      	uxth	r2, r2
 800b4ec:	189b      	adds	r3, r3, r2
 800b4ee:	191b      	adds	r3, r3, r4
 800b4f0:	000c      	movs	r4, r1
 800b4f2:	683a      	ldr	r2, [r7, #0]
 800b4f4:	0c11      	lsrs	r1, r2, #16
 800b4f6:	1861      	adds	r1, r4, r1
 800b4f8:	0c1c      	lsrs	r4, r3, #16
 800b4fa:	1909      	adds	r1, r1, r4
 800b4fc:	0c0c      	lsrs	r4, r1, #16
 800b4fe:	b29b      	uxth	r3, r3
 800b500:	0409      	lsls	r1, r1, #16
 800b502:	430b      	orrs	r3, r1
 800b504:	c708      	stmia	r7!, {r3}
 800b506:	9b04      	ldr	r3, [sp, #16]
 800b508:	42b3      	cmp	r3, r6
 800b50a:	d8e8      	bhi.n	800b4de <__multiply+0xc6>
 800b50c:	4663      	mov	r3, ip
 800b50e:	9a05      	ldr	r2, [sp, #20]
 800b510:	509c      	str	r4, [r3, r2]
 800b512:	9b00      	ldr	r3, [sp, #0]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	0c1e      	lsrs	r6, r3, #16
 800b518:	d020      	beq.n	800b55c <__multiply+0x144>
 800b51a:	4663      	mov	r3, ip
 800b51c:	002c      	movs	r4, r5
 800b51e:	4660      	mov	r0, ip
 800b520:	2700      	movs	r7, #0
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	3414      	adds	r4, #20
 800b526:	6822      	ldr	r2, [r4, #0]
 800b528:	b29b      	uxth	r3, r3
 800b52a:	b291      	uxth	r1, r2
 800b52c:	4371      	muls	r1, r6
 800b52e:	6802      	ldr	r2, [r0, #0]
 800b530:	0c12      	lsrs	r2, r2, #16
 800b532:	1889      	adds	r1, r1, r2
 800b534:	19cf      	adds	r7, r1, r7
 800b536:	0439      	lsls	r1, r7, #16
 800b538:	430b      	orrs	r3, r1
 800b53a:	6003      	str	r3, [r0, #0]
 800b53c:	cc02      	ldmia	r4!, {r1}
 800b53e:	6843      	ldr	r3, [r0, #4]
 800b540:	0c09      	lsrs	r1, r1, #16
 800b542:	4371      	muls	r1, r6
 800b544:	b29b      	uxth	r3, r3
 800b546:	0c3f      	lsrs	r7, r7, #16
 800b548:	18cb      	adds	r3, r1, r3
 800b54a:	9a04      	ldr	r2, [sp, #16]
 800b54c:	19db      	adds	r3, r3, r7
 800b54e:	0c1f      	lsrs	r7, r3, #16
 800b550:	3004      	adds	r0, #4
 800b552:	42a2      	cmp	r2, r4
 800b554:	d8e7      	bhi.n	800b526 <__multiply+0x10e>
 800b556:	4662      	mov	r2, ip
 800b558:	9905      	ldr	r1, [sp, #20]
 800b55a:	5053      	str	r3, [r2, r1]
 800b55c:	9b00      	ldr	r3, [sp, #0]
 800b55e:	3304      	adds	r3, #4
 800b560:	9300      	str	r3, [sp, #0]
 800b562:	2304      	movs	r3, #4
 800b564:	449c      	add	ip, r3
 800b566:	e79c      	b.n	800b4a2 <__multiply+0x8a>
 800b568:	9b02      	ldr	r3, [sp, #8]
 800b56a:	3b01      	subs	r3, #1
 800b56c:	9302      	str	r3, [sp, #8]
 800b56e:	e79c      	b.n	800b4aa <__multiply+0x92>
 800b570:	0800d59c 	.word	0x0800d59c
 800b574:	0800d690 	.word	0x0800d690

0800b578 <__pow5mult>:
 800b578:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b57a:	2303      	movs	r3, #3
 800b57c:	0015      	movs	r5, r2
 800b57e:	0007      	movs	r7, r0
 800b580:	000e      	movs	r6, r1
 800b582:	401a      	ands	r2, r3
 800b584:	421d      	tst	r5, r3
 800b586:	d008      	beq.n	800b59a <__pow5mult+0x22>
 800b588:	4925      	ldr	r1, [pc, #148]	; (800b620 <__pow5mult+0xa8>)
 800b58a:	3a01      	subs	r2, #1
 800b58c:	0092      	lsls	r2, r2, #2
 800b58e:	5852      	ldr	r2, [r2, r1]
 800b590:	2300      	movs	r3, #0
 800b592:	0031      	movs	r1, r6
 800b594:	f7ff fe52 	bl	800b23c <__multadd>
 800b598:	0006      	movs	r6, r0
 800b59a:	10ad      	asrs	r5, r5, #2
 800b59c:	d03d      	beq.n	800b61a <__pow5mult+0xa2>
 800b59e:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800b5a0:	2c00      	cmp	r4, #0
 800b5a2:	d10f      	bne.n	800b5c4 <__pow5mult+0x4c>
 800b5a4:	2010      	movs	r0, #16
 800b5a6:	f7ff fdb1 	bl	800b10c <malloc>
 800b5aa:	1e02      	subs	r2, r0, #0
 800b5ac:	6278      	str	r0, [r7, #36]	; 0x24
 800b5ae:	d105      	bne.n	800b5bc <__pow5mult+0x44>
 800b5b0:	21d7      	movs	r1, #215	; 0xd7
 800b5b2:	4b1c      	ldr	r3, [pc, #112]	; (800b624 <__pow5mult+0xac>)
 800b5b4:	481c      	ldr	r0, [pc, #112]	; (800b628 <__pow5mult+0xb0>)
 800b5b6:	0049      	lsls	r1, r1, #1
 800b5b8:	f000 ff82 	bl	800c4c0 <__assert_func>
 800b5bc:	6044      	str	r4, [r0, #4]
 800b5be:	6084      	str	r4, [r0, #8]
 800b5c0:	6004      	str	r4, [r0, #0]
 800b5c2:	60c4      	str	r4, [r0, #12]
 800b5c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5c6:	689c      	ldr	r4, [r3, #8]
 800b5c8:	9301      	str	r3, [sp, #4]
 800b5ca:	2c00      	cmp	r4, #0
 800b5cc:	d108      	bne.n	800b5e0 <__pow5mult+0x68>
 800b5ce:	0038      	movs	r0, r7
 800b5d0:	4916      	ldr	r1, [pc, #88]	; (800b62c <__pow5mult+0xb4>)
 800b5d2:	f7ff ff0b 	bl	800b3ec <__i2b>
 800b5d6:	9b01      	ldr	r3, [sp, #4]
 800b5d8:	0004      	movs	r4, r0
 800b5da:	6098      	str	r0, [r3, #8]
 800b5dc:	2300      	movs	r3, #0
 800b5de:	6003      	str	r3, [r0, #0]
 800b5e0:	2301      	movs	r3, #1
 800b5e2:	421d      	tst	r5, r3
 800b5e4:	d00a      	beq.n	800b5fc <__pow5mult+0x84>
 800b5e6:	0031      	movs	r1, r6
 800b5e8:	0022      	movs	r2, r4
 800b5ea:	0038      	movs	r0, r7
 800b5ec:	f7ff ff14 	bl	800b418 <__multiply>
 800b5f0:	0031      	movs	r1, r6
 800b5f2:	9001      	str	r0, [sp, #4]
 800b5f4:	0038      	movs	r0, r7
 800b5f6:	f7ff fdfd 	bl	800b1f4 <_Bfree>
 800b5fa:	9e01      	ldr	r6, [sp, #4]
 800b5fc:	106d      	asrs	r5, r5, #1
 800b5fe:	d00c      	beq.n	800b61a <__pow5mult+0xa2>
 800b600:	6820      	ldr	r0, [r4, #0]
 800b602:	2800      	cmp	r0, #0
 800b604:	d107      	bne.n	800b616 <__pow5mult+0x9e>
 800b606:	0022      	movs	r2, r4
 800b608:	0021      	movs	r1, r4
 800b60a:	0038      	movs	r0, r7
 800b60c:	f7ff ff04 	bl	800b418 <__multiply>
 800b610:	2300      	movs	r3, #0
 800b612:	6020      	str	r0, [r4, #0]
 800b614:	6003      	str	r3, [r0, #0]
 800b616:	0004      	movs	r4, r0
 800b618:	e7e2      	b.n	800b5e0 <__pow5mult+0x68>
 800b61a:	0030      	movs	r0, r6
 800b61c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b61e:	46c0      	nop			; (mov r8, r8)
 800b620:	0800d7e0 	.word	0x0800d7e0
 800b624:	0800d526 	.word	0x0800d526
 800b628:	0800d690 	.word	0x0800d690
 800b62c:	00000271 	.word	0x00000271

0800b630 <__lshift>:
 800b630:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b632:	000c      	movs	r4, r1
 800b634:	0017      	movs	r7, r2
 800b636:	6923      	ldr	r3, [r4, #16]
 800b638:	1155      	asrs	r5, r2, #5
 800b63a:	b087      	sub	sp, #28
 800b63c:	18eb      	adds	r3, r5, r3
 800b63e:	9302      	str	r3, [sp, #8]
 800b640:	3301      	adds	r3, #1
 800b642:	9301      	str	r3, [sp, #4]
 800b644:	6849      	ldr	r1, [r1, #4]
 800b646:	68a3      	ldr	r3, [r4, #8]
 800b648:	9004      	str	r0, [sp, #16]
 800b64a:	9a01      	ldr	r2, [sp, #4]
 800b64c:	4293      	cmp	r3, r2
 800b64e:	db11      	blt.n	800b674 <__lshift+0x44>
 800b650:	9804      	ldr	r0, [sp, #16]
 800b652:	f7ff fd8b 	bl	800b16c <_Balloc>
 800b656:	0002      	movs	r2, r0
 800b658:	2300      	movs	r3, #0
 800b65a:	3214      	adds	r2, #20
 800b65c:	0006      	movs	r6, r0
 800b65e:	0011      	movs	r1, r2
 800b660:	9203      	str	r2, [sp, #12]
 800b662:	4298      	cmp	r0, r3
 800b664:	d10d      	bne.n	800b682 <__lshift+0x52>
 800b666:	21da      	movs	r1, #218	; 0xda
 800b668:	0002      	movs	r2, r0
 800b66a:	4b27      	ldr	r3, [pc, #156]	; (800b708 <__lshift+0xd8>)
 800b66c:	4827      	ldr	r0, [pc, #156]	; (800b70c <__lshift+0xdc>)
 800b66e:	31ff      	adds	r1, #255	; 0xff
 800b670:	f000 ff26 	bl	800c4c0 <__assert_func>
 800b674:	3101      	adds	r1, #1
 800b676:	005b      	lsls	r3, r3, #1
 800b678:	e7e7      	b.n	800b64a <__lshift+0x1a>
 800b67a:	2200      	movs	r2, #0
 800b67c:	0098      	lsls	r0, r3, #2
 800b67e:	500a      	str	r2, [r1, r0]
 800b680:	3301      	adds	r3, #1
 800b682:	42ab      	cmp	r3, r5
 800b684:	dbf9      	blt.n	800b67a <__lshift+0x4a>
 800b686:	43eb      	mvns	r3, r5
 800b688:	17db      	asrs	r3, r3, #31
 800b68a:	401d      	ands	r5, r3
 800b68c:	9b03      	ldr	r3, [sp, #12]
 800b68e:	00ad      	lsls	r5, r5, #2
 800b690:	211f      	movs	r1, #31
 800b692:	0038      	movs	r0, r7
 800b694:	195d      	adds	r5, r3, r5
 800b696:	0023      	movs	r3, r4
 800b698:	6922      	ldr	r2, [r4, #16]
 800b69a:	3314      	adds	r3, #20
 800b69c:	0092      	lsls	r2, r2, #2
 800b69e:	4008      	ands	r0, r1
 800b6a0:	4684      	mov	ip, r0
 800b6a2:	189a      	adds	r2, r3, r2
 800b6a4:	420f      	tst	r7, r1
 800b6a6:	d02a      	beq.n	800b6fe <__lshift+0xce>
 800b6a8:	3101      	adds	r1, #1
 800b6aa:	1a09      	subs	r1, r1, r0
 800b6ac:	9105      	str	r1, [sp, #20]
 800b6ae:	2100      	movs	r1, #0
 800b6b0:	9503      	str	r5, [sp, #12]
 800b6b2:	4667      	mov	r7, ip
 800b6b4:	6818      	ldr	r0, [r3, #0]
 800b6b6:	40b8      	lsls	r0, r7
 800b6b8:	4301      	orrs	r1, r0
 800b6ba:	9803      	ldr	r0, [sp, #12]
 800b6bc:	c002      	stmia	r0!, {r1}
 800b6be:	cb02      	ldmia	r3!, {r1}
 800b6c0:	9003      	str	r0, [sp, #12]
 800b6c2:	9805      	ldr	r0, [sp, #20]
 800b6c4:	40c1      	lsrs	r1, r0
 800b6c6:	429a      	cmp	r2, r3
 800b6c8:	d8f3      	bhi.n	800b6b2 <__lshift+0x82>
 800b6ca:	0020      	movs	r0, r4
 800b6cc:	3015      	adds	r0, #21
 800b6ce:	2304      	movs	r3, #4
 800b6d0:	4282      	cmp	r2, r0
 800b6d2:	d304      	bcc.n	800b6de <__lshift+0xae>
 800b6d4:	1b13      	subs	r3, r2, r4
 800b6d6:	3b15      	subs	r3, #21
 800b6d8:	089b      	lsrs	r3, r3, #2
 800b6da:	3301      	adds	r3, #1
 800b6dc:	009b      	lsls	r3, r3, #2
 800b6de:	50e9      	str	r1, [r5, r3]
 800b6e0:	2900      	cmp	r1, #0
 800b6e2:	d002      	beq.n	800b6ea <__lshift+0xba>
 800b6e4:	9b02      	ldr	r3, [sp, #8]
 800b6e6:	3302      	adds	r3, #2
 800b6e8:	9301      	str	r3, [sp, #4]
 800b6ea:	9b01      	ldr	r3, [sp, #4]
 800b6ec:	9804      	ldr	r0, [sp, #16]
 800b6ee:	3b01      	subs	r3, #1
 800b6f0:	0021      	movs	r1, r4
 800b6f2:	6133      	str	r3, [r6, #16]
 800b6f4:	f7ff fd7e 	bl	800b1f4 <_Bfree>
 800b6f8:	0030      	movs	r0, r6
 800b6fa:	b007      	add	sp, #28
 800b6fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b6fe:	cb02      	ldmia	r3!, {r1}
 800b700:	c502      	stmia	r5!, {r1}
 800b702:	429a      	cmp	r2, r3
 800b704:	d8fb      	bhi.n	800b6fe <__lshift+0xce>
 800b706:	e7f0      	b.n	800b6ea <__lshift+0xba>
 800b708:	0800d59c 	.word	0x0800d59c
 800b70c:	0800d690 	.word	0x0800d690

0800b710 <__mcmp>:
 800b710:	6902      	ldr	r2, [r0, #16]
 800b712:	690b      	ldr	r3, [r1, #16]
 800b714:	b530      	push	{r4, r5, lr}
 800b716:	0004      	movs	r4, r0
 800b718:	1ad0      	subs	r0, r2, r3
 800b71a:	429a      	cmp	r2, r3
 800b71c:	d10d      	bne.n	800b73a <__mcmp+0x2a>
 800b71e:	009b      	lsls	r3, r3, #2
 800b720:	3414      	adds	r4, #20
 800b722:	3114      	adds	r1, #20
 800b724:	18e2      	adds	r2, r4, r3
 800b726:	18c9      	adds	r1, r1, r3
 800b728:	3a04      	subs	r2, #4
 800b72a:	3904      	subs	r1, #4
 800b72c:	6815      	ldr	r5, [r2, #0]
 800b72e:	680b      	ldr	r3, [r1, #0]
 800b730:	429d      	cmp	r5, r3
 800b732:	d003      	beq.n	800b73c <__mcmp+0x2c>
 800b734:	2001      	movs	r0, #1
 800b736:	429d      	cmp	r5, r3
 800b738:	d303      	bcc.n	800b742 <__mcmp+0x32>
 800b73a:	bd30      	pop	{r4, r5, pc}
 800b73c:	4294      	cmp	r4, r2
 800b73e:	d3f3      	bcc.n	800b728 <__mcmp+0x18>
 800b740:	e7fb      	b.n	800b73a <__mcmp+0x2a>
 800b742:	4240      	negs	r0, r0
 800b744:	e7f9      	b.n	800b73a <__mcmp+0x2a>
	...

0800b748 <__mdiff>:
 800b748:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b74a:	000e      	movs	r6, r1
 800b74c:	0007      	movs	r7, r0
 800b74e:	0011      	movs	r1, r2
 800b750:	0030      	movs	r0, r6
 800b752:	b087      	sub	sp, #28
 800b754:	0014      	movs	r4, r2
 800b756:	f7ff ffdb 	bl	800b710 <__mcmp>
 800b75a:	1e05      	subs	r5, r0, #0
 800b75c:	d110      	bne.n	800b780 <__mdiff+0x38>
 800b75e:	0001      	movs	r1, r0
 800b760:	0038      	movs	r0, r7
 800b762:	f7ff fd03 	bl	800b16c <_Balloc>
 800b766:	1e02      	subs	r2, r0, #0
 800b768:	d104      	bne.n	800b774 <__mdiff+0x2c>
 800b76a:	4b40      	ldr	r3, [pc, #256]	; (800b86c <__mdiff+0x124>)
 800b76c:	4940      	ldr	r1, [pc, #256]	; (800b870 <__mdiff+0x128>)
 800b76e:	4841      	ldr	r0, [pc, #260]	; (800b874 <__mdiff+0x12c>)
 800b770:	f000 fea6 	bl	800c4c0 <__assert_func>
 800b774:	2301      	movs	r3, #1
 800b776:	6145      	str	r5, [r0, #20]
 800b778:	6103      	str	r3, [r0, #16]
 800b77a:	0010      	movs	r0, r2
 800b77c:	b007      	add	sp, #28
 800b77e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b780:	2301      	movs	r3, #1
 800b782:	9301      	str	r3, [sp, #4]
 800b784:	2800      	cmp	r0, #0
 800b786:	db04      	blt.n	800b792 <__mdiff+0x4a>
 800b788:	0023      	movs	r3, r4
 800b78a:	0034      	movs	r4, r6
 800b78c:	001e      	movs	r6, r3
 800b78e:	2300      	movs	r3, #0
 800b790:	9301      	str	r3, [sp, #4]
 800b792:	0038      	movs	r0, r7
 800b794:	6861      	ldr	r1, [r4, #4]
 800b796:	f7ff fce9 	bl	800b16c <_Balloc>
 800b79a:	1e02      	subs	r2, r0, #0
 800b79c:	d103      	bne.n	800b7a6 <__mdiff+0x5e>
 800b79e:	2190      	movs	r1, #144	; 0x90
 800b7a0:	4b32      	ldr	r3, [pc, #200]	; (800b86c <__mdiff+0x124>)
 800b7a2:	0089      	lsls	r1, r1, #2
 800b7a4:	e7e3      	b.n	800b76e <__mdiff+0x26>
 800b7a6:	9b01      	ldr	r3, [sp, #4]
 800b7a8:	2700      	movs	r7, #0
 800b7aa:	60c3      	str	r3, [r0, #12]
 800b7ac:	6920      	ldr	r0, [r4, #16]
 800b7ae:	3414      	adds	r4, #20
 800b7b0:	9401      	str	r4, [sp, #4]
 800b7b2:	9b01      	ldr	r3, [sp, #4]
 800b7b4:	0084      	lsls	r4, r0, #2
 800b7b6:	191b      	adds	r3, r3, r4
 800b7b8:	0034      	movs	r4, r6
 800b7ba:	9302      	str	r3, [sp, #8]
 800b7bc:	6933      	ldr	r3, [r6, #16]
 800b7be:	3414      	adds	r4, #20
 800b7c0:	0099      	lsls	r1, r3, #2
 800b7c2:	1863      	adds	r3, r4, r1
 800b7c4:	9303      	str	r3, [sp, #12]
 800b7c6:	0013      	movs	r3, r2
 800b7c8:	3314      	adds	r3, #20
 800b7ca:	469c      	mov	ip, r3
 800b7cc:	9305      	str	r3, [sp, #20]
 800b7ce:	9b01      	ldr	r3, [sp, #4]
 800b7d0:	9304      	str	r3, [sp, #16]
 800b7d2:	9b04      	ldr	r3, [sp, #16]
 800b7d4:	cc02      	ldmia	r4!, {r1}
 800b7d6:	cb20      	ldmia	r3!, {r5}
 800b7d8:	9304      	str	r3, [sp, #16]
 800b7da:	b2ab      	uxth	r3, r5
 800b7dc:	19df      	adds	r7, r3, r7
 800b7de:	b28b      	uxth	r3, r1
 800b7e0:	1afb      	subs	r3, r7, r3
 800b7e2:	0c2d      	lsrs	r5, r5, #16
 800b7e4:	0c09      	lsrs	r1, r1, #16
 800b7e6:	1a69      	subs	r1, r5, r1
 800b7e8:	141d      	asrs	r5, r3, #16
 800b7ea:	1949      	adds	r1, r1, r5
 800b7ec:	140f      	asrs	r7, r1, #16
 800b7ee:	b29b      	uxth	r3, r3
 800b7f0:	0409      	lsls	r1, r1, #16
 800b7f2:	430b      	orrs	r3, r1
 800b7f4:	4661      	mov	r1, ip
 800b7f6:	c108      	stmia	r1!, {r3}
 800b7f8:	9b03      	ldr	r3, [sp, #12]
 800b7fa:	468c      	mov	ip, r1
 800b7fc:	42a3      	cmp	r3, r4
 800b7fe:	d8e8      	bhi.n	800b7d2 <__mdiff+0x8a>
 800b800:	0031      	movs	r1, r6
 800b802:	9c03      	ldr	r4, [sp, #12]
 800b804:	3115      	adds	r1, #21
 800b806:	2304      	movs	r3, #4
 800b808:	428c      	cmp	r4, r1
 800b80a:	d304      	bcc.n	800b816 <__mdiff+0xce>
 800b80c:	1ba3      	subs	r3, r4, r6
 800b80e:	3b15      	subs	r3, #21
 800b810:	089b      	lsrs	r3, r3, #2
 800b812:	3301      	adds	r3, #1
 800b814:	009b      	lsls	r3, r3, #2
 800b816:	9901      	ldr	r1, [sp, #4]
 800b818:	18cc      	adds	r4, r1, r3
 800b81a:	9905      	ldr	r1, [sp, #20]
 800b81c:	0026      	movs	r6, r4
 800b81e:	18cb      	adds	r3, r1, r3
 800b820:	469c      	mov	ip, r3
 800b822:	9902      	ldr	r1, [sp, #8]
 800b824:	428e      	cmp	r6, r1
 800b826:	d310      	bcc.n	800b84a <__mdiff+0x102>
 800b828:	9e02      	ldr	r6, [sp, #8]
 800b82a:	1ee5      	subs	r5, r4, #3
 800b82c:	2100      	movs	r1, #0
 800b82e:	42ae      	cmp	r6, r5
 800b830:	d304      	bcc.n	800b83c <__mdiff+0xf4>
 800b832:	0031      	movs	r1, r6
 800b834:	3103      	adds	r1, #3
 800b836:	1b09      	subs	r1, r1, r4
 800b838:	0889      	lsrs	r1, r1, #2
 800b83a:	0089      	lsls	r1, r1, #2
 800b83c:	185b      	adds	r3, r3, r1
 800b83e:	3b04      	subs	r3, #4
 800b840:	6819      	ldr	r1, [r3, #0]
 800b842:	2900      	cmp	r1, #0
 800b844:	d00f      	beq.n	800b866 <__mdiff+0x11e>
 800b846:	6110      	str	r0, [r2, #16]
 800b848:	e797      	b.n	800b77a <__mdiff+0x32>
 800b84a:	ce02      	ldmia	r6!, {r1}
 800b84c:	b28d      	uxth	r5, r1
 800b84e:	19ed      	adds	r5, r5, r7
 800b850:	0c0f      	lsrs	r7, r1, #16
 800b852:	1429      	asrs	r1, r5, #16
 800b854:	1879      	adds	r1, r7, r1
 800b856:	140f      	asrs	r7, r1, #16
 800b858:	b2ad      	uxth	r5, r5
 800b85a:	0409      	lsls	r1, r1, #16
 800b85c:	430d      	orrs	r5, r1
 800b85e:	4661      	mov	r1, ip
 800b860:	c120      	stmia	r1!, {r5}
 800b862:	468c      	mov	ip, r1
 800b864:	e7dd      	b.n	800b822 <__mdiff+0xda>
 800b866:	3801      	subs	r0, #1
 800b868:	e7e9      	b.n	800b83e <__mdiff+0xf6>
 800b86a:	46c0      	nop			; (mov r8, r8)
 800b86c:	0800d59c 	.word	0x0800d59c
 800b870:	00000232 	.word	0x00000232
 800b874:	0800d690 	.word	0x0800d690

0800b878 <__ulp>:
 800b878:	4b0f      	ldr	r3, [pc, #60]	; (800b8b8 <__ulp+0x40>)
 800b87a:	4019      	ands	r1, r3
 800b87c:	4b0f      	ldr	r3, [pc, #60]	; (800b8bc <__ulp+0x44>)
 800b87e:	18c9      	adds	r1, r1, r3
 800b880:	2900      	cmp	r1, #0
 800b882:	dd04      	ble.n	800b88e <__ulp+0x16>
 800b884:	2200      	movs	r2, #0
 800b886:	000b      	movs	r3, r1
 800b888:	0010      	movs	r0, r2
 800b88a:	0019      	movs	r1, r3
 800b88c:	4770      	bx	lr
 800b88e:	4249      	negs	r1, r1
 800b890:	2200      	movs	r2, #0
 800b892:	2300      	movs	r3, #0
 800b894:	1509      	asrs	r1, r1, #20
 800b896:	2913      	cmp	r1, #19
 800b898:	dc04      	bgt.n	800b8a4 <__ulp+0x2c>
 800b89a:	2080      	movs	r0, #128	; 0x80
 800b89c:	0300      	lsls	r0, r0, #12
 800b89e:	4108      	asrs	r0, r1
 800b8a0:	0003      	movs	r3, r0
 800b8a2:	e7f1      	b.n	800b888 <__ulp+0x10>
 800b8a4:	3914      	subs	r1, #20
 800b8a6:	2001      	movs	r0, #1
 800b8a8:	291e      	cmp	r1, #30
 800b8aa:	dc02      	bgt.n	800b8b2 <__ulp+0x3a>
 800b8ac:	2080      	movs	r0, #128	; 0x80
 800b8ae:	0600      	lsls	r0, r0, #24
 800b8b0:	40c8      	lsrs	r0, r1
 800b8b2:	0002      	movs	r2, r0
 800b8b4:	e7e8      	b.n	800b888 <__ulp+0x10>
 800b8b6:	46c0      	nop			; (mov r8, r8)
 800b8b8:	7ff00000 	.word	0x7ff00000
 800b8bc:	fcc00000 	.word	0xfcc00000

0800b8c0 <__b2d>:
 800b8c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b8c2:	0006      	movs	r6, r0
 800b8c4:	6903      	ldr	r3, [r0, #16]
 800b8c6:	3614      	adds	r6, #20
 800b8c8:	009b      	lsls	r3, r3, #2
 800b8ca:	18f3      	adds	r3, r6, r3
 800b8cc:	1f1d      	subs	r5, r3, #4
 800b8ce:	682c      	ldr	r4, [r5, #0]
 800b8d0:	000f      	movs	r7, r1
 800b8d2:	0020      	movs	r0, r4
 800b8d4:	9301      	str	r3, [sp, #4]
 800b8d6:	f7ff fd41 	bl	800b35c <__hi0bits>
 800b8da:	2320      	movs	r3, #32
 800b8dc:	1a1b      	subs	r3, r3, r0
 800b8de:	491f      	ldr	r1, [pc, #124]	; (800b95c <__b2d+0x9c>)
 800b8e0:	603b      	str	r3, [r7, #0]
 800b8e2:	280a      	cmp	r0, #10
 800b8e4:	dc16      	bgt.n	800b914 <__b2d+0x54>
 800b8e6:	230b      	movs	r3, #11
 800b8e8:	0027      	movs	r7, r4
 800b8ea:	1a1b      	subs	r3, r3, r0
 800b8ec:	40df      	lsrs	r7, r3
 800b8ee:	4339      	orrs	r1, r7
 800b8f0:	469c      	mov	ip, r3
 800b8f2:	000b      	movs	r3, r1
 800b8f4:	2100      	movs	r1, #0
 800b8f6:	42ae      	cmp	r6, r5
 800b8f8:	d202      	bcs.n	800b900 <__b2d+0x40>
 800b8fa:	9901      	ldr	r1, [sp, #4]
 800b8fc:	3908      	subs	r1, #8
 800b8fe:	6809      	ldr	r1, [r1, #0]
 800b900:	3015      	adds	r0, #21
 800b902:	4084      	lsls	r4, r0
 800b904:	4660      	mov	r0, ip
 800b906:	40c1      	lsrs	r1, r0
 800b908:	430c      	orrs	r4, r1
 800b90a:	0022      	movs	r2, r4
 800b90c:	0010      	movs	r0, r2
 800b90e:	0019      	movs	r1, r3
 800b910:	b003      	add	sp, #12
 800b912:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b914:	2700      	movs	r7, #0
 800b916:	42ae      	cmp	r6, r5
 800b918:	d202      	bcs.n	800b920 <__b2d+0x60>
 800b91a:	9d01      	ldr	r5, [sp, #4]
 800b91c:	3d08      	subs	r5, #8
 800b91e:	682f      	ldr	r7, [r5, #0]
 800b920:	230b      	movs	r3, #11
 800b922:	425b      	negs	r3, r3
 800b924:	469c      	mov	ip, r3
 800b926:	4484      	add	ip, r0
 800b928:	280b      	cmp	r0, #11
 800b92a:	d013      	beq.n	800b954 <__b2d+0x94>
 800b92c:	4663      	mov	r3, ip
 800b92e:	2020      	movs	r0, #32
 800b930:	409c      	lsls	r4, r3
 800b932:	1ac0      	subs	r0, r0, r3
 800b934:	003b      	movs	r3, r7
 800b936:	40c3      	lsrs	r3, r0
 800b938:	431c      	orrs	r4, r3
 800b93a:	4321      	orrs	r1, r4
 800b93c:	000b      	movs	r3, r1
 800b93e:	2100      	movs	r1, #0
 800b940:	42b5      	cmp	r5, r6
 800b942:	d901      	bls.n	800b948 <__b2d+0x88>
 800b944:	3d04      	subs	r5, #4
 800b946:	6829      	ldr	r1, [r5, #0]
 800b948:	4664      	mov	r4, ip
 800b94a:	40c1      	lsrs	r1, r0
 800b94c:	40a7      	lsls	r7, r4
 800b94e:	430f      	orrs	r7, r1
 800b950:	003a      	movs	r2, r7
 800b952:	e7db      	b.n	800b90c <__b2d+0x4c>
 800b954:	4321      	orrs	r1, r4
 800b956:	000b      	movs	r3, r1
 800b958:	e7fa      	b.n	800b950 <__b2d+0x90>
 800b95a:	46c0      	nop			; (mov r8, r8)
 800b95c:	3ff00000 	.word	0x3ff00000

0800b960 <__d2b>:
 800b960:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b962:	2101      	movs	r1, #1
 800b964:	0014      	movs	r4, r2
 800b966:	001e      	movs	r6, r3
 800b968:	9f08      	ldr	r7, [sp, #32]
 800b96a:	f7ff fbff 	bl	800b16c <_Balloc>
 800b96e:	1e05      	subs	r5, r0, #0
 800b970:	d105      	bne.n	800b97e <__d2b+0x1e>
 800b972:	0002      	movs	r2, r0
 800b974:	4b26      	ldr	r3, [pc, #152]	; (800ba10 <__d2b+0xb0>)
 800b976:	4927      	ldr	r1, [pc, #156]	; (800ba14 <__d2b+0xb4>)
 800b978:	4827      	ldr	r0, [pc, #156]	; (800ba18 <__d2b+0xb8>)
 800b97a:	f000 fda1 	bl	800c4c0 <__assert_func>
 800b97e:	0333      	lsls	r3, r6, #12
 800b980:	0076      	lsls	r6, r6, #1
 800b982:	0b1b      	lsrs	r3, r3, #12
 800b984:	0d76      	lsrs	r6, r6, #21
 800b986:	d124      	bne.n	800b9d2 <__d2b+0x72>
 800b988:	9301      	str	r3, [sp, #4]
 800b98a:	2c00      	cmp	r4, #0
 800b98c:	d027      	beq.n	800b9de <__d2b+0x7e>
 800b98e:	4668      	mov	r0, sp
 800b990:	9400      	str	r4, [sp, #0]
 800b992:	f7ff fcfd 	bl	800b390 <__lo0bits>
 800b996:	9c00      	ldr	r4, [sp, #0]
 800b998:	2800      	cmp	r0, #0
 800b99a:	d01e      	beq.n	800b9da <__d2b+0x7a>
 800b99c:	9b01      	ldr	r3, [sp, #4]
 800b99e:	2120      	movs	r1, #32
 800b9a0:	001a      	movs	r2, r3
 800b9a2:	1a09      	subs	r1, r1, r0
 800b9a4:	408a      	lsls	r2, r1
 800b9a6:	40c3      	lsrs	r3, r0
 800b9a8:	4322      	orrs	r2, r4
 800b9aa:	616a      	str	r2, [r5, #20]
 800b9ac:	9301      	str	r3, [sp, #4]
 800b9ae:	9c01      	ldr	r4, [sp, #4]
 800b9b0:	61ac      	str	r4, [r5, #24]
 800b9b2:	1e63      	subs	r3, r4, #1
 800b9b4:	419c      	sbcs	r4, r3
 800b9b6:	3401      	adds	r4, #1
 800b9b8:	612c      	str	r4, [r5, #16]
 800b9ba:	2e00      	cmp	r6, #0
 800b9bc:	d018      	beq.n	800b9f0 <__d2b+0x90>
 800b9be:	4b17      	ldr	r3, [pc, #92]	; (800ba1c <__d2b+0xbc>)
 800b9c0:	18f6      	adds	r6, r6, r3
 800b9c2:	2335      	movs	r3, #53	; 0x35
 800b9c4:	1836      	adds	r6, r6, r0
 800b9c6:	1a18      	subs	r0, r3, r0
 800b9c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9ca:	603e      	str	r6, [r7, #0]
 800b9cc:	6018      	str	r0, [r3, #0]
 800b9ce:	0028      	movs	r0, r5
 800b9d0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b9d2:	2280      	movs	r2, #128	; 0x80
 800b9d4:	0352      	lsls	r2, r2, #13
 800b9d6:	4313      	orrs	r3, r2
 800b9d8:	e7d6      	b.n	800b988 <__d2b+0x28>
 800b9da:	616c      	str	r4, [r5, #20]
 800b9dc:	e7e7      	b.n	800b9ae <__d2b+0x4e>
 800b9de:	a801      	add	r0, sp, #4
 800b9e0:	f7ff fcd6 	bl	800b390 <__lo0bits>
 800b9e4:	2401      	movs	r4, #1
 800b9e6:	9b01      	ldr	r3, [sp, #4]
 800b9e8:	612c      	str	r4, [r5, #16]
 800b9ea:	616b      	str	r3, [r5, #20]
 800b9ec:	3020      	adds	r0, #32
 800b9ee:	e7e4      	b.n	800b9ba <__d2b+0x5a>
 800b9f0:	4b0b      	ldr	r3, [pc, #44]	; (800ba20 <__d2b+0xc0>)
 800b9f2:	18c0      	adds	r0, r0, r3
 800b9f4:	4b0b      	ldr	r3, [pc, #44]	; (800ba24 <__d2b+0xc4>)
 800b9f6:	6038      	str	r0, [r7, #0]
 800b9f8:	18e3      	adds	r3, r4, r3
 800b9fa:	009b      	lsls	r3, r3, #2
 800b9fc:	18eb      	adds	r3, r5, r3
 800b9fe:	6958      	ldr	r0, [r3, #20]
 800ba00:	f7ff fcac 	bl	800b35c <__hi0bits>
 800ba04:	0164      	lsls	r4, r4, #5
 800ba06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba08:	1a24      	subs	r4, r4, r0
 800ba0a:	601c      	str	r4, [r3, #0]
 800ba0c:	e7df      	b.n	800b9ce <__d2b+0x6e>
 800ba0e:	46c0      	nop			; (mov r8, r8)
 800ba10:	0800d59c 	.word	0x0800d59c
 800ba14:	0000030a 	.word	0x0000030a
 800ba18:	0800d690 	.word	0x0800d690
 800ba1c:	fffffbcd 	.word	0xfffffbcd
 800ba20:	fffffbce 	.word	0xfffffbce
 800ba24:	3fffffff 	.word	0x3fffffff

0800ba28 <__ratio>:
 800ba28:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ba2a:	b085      	sub	sp, #20
 800ba2c:	000d      	movs	r5, r1
 800ba2e:	a902      	add	r1, sp, #8
 800ba30:	0004      	movs	r4, r0
 800ba32:	f7ff ff45 	bl	800b8c0 <__b2d>
 800ba36:	9000      	str	r0, [sp, #0]
 800ba38:	9101      	str	r1, [sp, #4]
 800ba3a:	9e00      	ldr	r6, [sp, #0]
 800ba3c:	9f01      	ldr	r7, [sp, #4]
 800ba3e:	0028      	movs	r0, r5
 800ba40:	a903      	add	r1, sp, #12
 800ba42:	f7ff ff3d 	bl	800b8c0 <__b2d>
 800ba46:	6924      	ldr	r4, [r4, #16]
 800ba48:	692d      	ldr	r5, [r5, #16]
 800ba4a:	0002      	movs	r2, r0
 800ba4c:	1b65      	subs	r5, r4, r5
 800ba4e:	016c      	lsls	r4, r5, #5
 800ba50:	46a4      	mov	ip, r4
 800ba52:	9d03      	ldr	r5, [sp, #12]
 800ba54:	9c02      	ldr	r4, [sp, #8]
 800ba56:	000b      	movs	r3, r1
 800ba58:	1b64      	subs	r4, r4, r5
 800ba5a:	4464      	add	r4, ip
 800ba5c:	0525      	lsls	r5, r4, #20
 800ba5e:	2c00      	cmp	r4, #0
 800ba60:	dd07      	ble.n	800ba72 <__ratio+0x4a>
 800ba62:	9901      	ldr	r1, [sp, #4]
 800ba64:	186f      	adds	r7, r5, r1
 800ba66:	0030      	movs	r0, r6
 800ba68:	0039      	movs	r1, r7
 800ba6a:	f7f5 fa31 	bl	8000ed0 <__aeabi_ddiv>
 800ba6e:	b005      	add	sp, #20
 800ba70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba72:	1b4b      	subs	r3, r1, r5
 800ba74:	e7f7      	b.n	800ba66 <__ratio+0x3e>

0800ba76 <__copybits>:
 800ba76:	b570      	push	{r4, r5, r6, lr}
 800ba78:	0015      	movs	r5, r2
 800ba7a:	6913      	ldr	r3, [r2, #16]
 800ba7c:	3514      	adds	r5, #20
 800ba7e:	009c      	lsls	r4, r3, #2
 800ba80:	0006      	movs	r6, r0
 800ba82:	002b      	movs	r3, r5
 800ba84:	3901      	subs	r1, #1
 800ba86:	1149      	asrs	r1, r1, #5
 800ba88:	3101      	adds	r1, #1
 800ba8a:	0089      	lsls	r1, r1, #2
 800ba8c:	1841      	adds	r1, r0, r1
 800ba8e:	192c      	adds	r4, r5, r4
 800ba90:	429c      	cmp	r4, r3
 800ba92:	d80d      	bhi.n	800bab0 <__copybits+0x3a>
 800ba94:	0015      	movs	r5, r2
 800ba96:	3511      	adds	r5, #17
 800ba98:	2300      	movs	r3, #0
 800ba9a:	42a5      	cmp	r5, r4
 800ba9c:	d803      	bhi.n	800baa6 <__copybits+0x30>
 800ba9e:	1aa3      	subs	r3, r4, r2
 800baa0:	3b11      	subs	r3, #17
 800baa2:	089b      	lsrs	r3, r3, #2
 800baa4:	009b      	lsls	r3, r3, #2
 800baa6:	18c0      	adds	r0, r0, r3
 800baa8:	2300      	movs	r3, #0
 800baaa:	4281      	cmp	r1, r0
 800baac:	d803      	bhi.n	800bab6 <__copybits+0x40>
 800baae:	bd70      	pop	{r4, r5, r6, pc}
 800bab0:	cb20      	ldmia	r3!, {r5}
 800bab2:	c620      	stmia	r6!, {r5}
 800bab4:	e7ec      	b.n	800ba90 <__copybits+0x1a>
 800bab6:	c008      	stmia	r0!, {r3}
 800bab8:	e7f7      	b.n	800baaa <__copybits+0x34>

0800baba <__any_on>:
 800baba:	0002      	movs	r2, r0
 800babc:	6900      	ldr	r0, [r0, #16]
 800babe:	b510      	push	{r4, lr}
 800bac0:	3214      	adds	r2, #20
 800bac2:	114b      	asrs	r3, r1, #5
 800bac4:	4298      	cmp	r0, r3
 800bac6:	db13      	blt.n	800baf0 <__any_on+0x36>
 800bac8:	dd0c      	ble.n	800bae4 <__any_on+0x2a>
 800baca:	241f      	movs	r4, #31
 800bacc:	0008      	movs	r0, r1
 800bace:	4020      	ands	r0, r4
 800bad0:	4221      	tst	r1, r4
 800bad2:	d007      	beq.n	800bae4 <__any_on+0x2a>
 800bad4:	0099      	lsls	r1, r3, #2
 800bad6:	588c      	ldr	r4, [r1, r2]
 800bad8:	0021      	movs	r1, r4
 800bada:	40c1      	lsrs	r1, r0
 800badc:	4081      	lsls	r1, r0
 800bade:	2001      	movs	r0, #1
 800bae0:	428c      	cmp	r4, r1
 800bae2:	d104      	bne.n	800baee <__any_on+0x34>
 800bae4:	009b      	lsls	r3, r3, #2
 800bae6:	18d3      	adds	r3, r2, r3
 800bae8:	4293      	cmp	r3, r2
 800baea:	d803      	bhi.n	800baf4 <__any_on+0x3a>
 800baec:	2000      	movs	r0, #0
 800baee:	bd10      	pop	{r4, pc}
 800baf0:	0003      	movs	r3, r0
 800baf2:	e7f7      	b.n	800bae4 <__any_on+0x2a>
 800baf4:	3b04      	subs	r3, #4
 800baf6:	6819      	ldr	r1, [r3, #0]
 800baf8:	2900      	cmp	r1, #0
 800bafa:	d0f5      	beq.n	800bae8 <__any_on+0x2e>
 800bafc:	2001      	movs	r0, #1
 800bafe:	e7f6      	b.n	800baee <__any_on+0x34>

0800bb00 <_calloc_r>:
 800bb00:	434a      	muls	r2, r1
 800bb02:	b570      	push	{r4, r5, r6, lr}
 800bb04:	0011      	movs	r1, r2
 800bb06:	0015      	movs	r5, r2
 800bb08:	f000 f852 	bl	800bbb0 <_malloc_r>
 800bb0c:	1e04      	subs	r4, r0, #0
 800bb0e:	d003      	beq.n	800bb18 <_calloc_r+0x18>
 800bb10:	002a      	movs	r2, r5
 800bb12:	2100      	movs	r1, #0
 800bb14:	f7fc fa36 	bl	8007f84 <memset>
 800bb18:	0020      	movs	r0, r4
 800bb1a:	bd70      	pop	{r4, r5, r6, pc}

0800bb1c <_free_r>:
 800bb1c:	b570      	push	{r4, r5, r6, lr}
 800bb1e:	0005      	movs	r5, r0
 800bb20:	2900      	cmp	r1, #0
 800bb22:	d010      	beq.n	800bb46 <_free_r+0x2a>
 800bb24:	1f0c      	subs	r4, r1, #4
 800bb26:	6823      	ldr	r3, [r4, #0]
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	da00      	bge.n	800bb2e <_free_r+0x12>
 800bb2c:	18e4      	adds	r4, r4, r3
 800bb2e:	0028      	movs	r0, r5
 800bb30:	f000 fe66 	bl	800c800 <__malloc_lock>
 800bb34:	4a1d      	ldr	r2, [pc, #116]	; (800bbac <_free_r+0x90>)
 800bb36:	6813      	ldr	r3, [r2, #0]
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d105      	bne.n	800bb48 <_free_r+0x2c>
 800bb3c:	6063      	str	r3, [r4, #4]
 800bb3e:	6014      	str	r4, [r2, #0]
 800bb40:	0028      	movs	r0, r5
 800bb42:	f000 fe65 	bl	800c810 <__malloc_unlock>
 800bb46:	bd70      	pop	{r4, r5, r6, pc}
 800bb48:	42a3      	cmp	r3, r4
 800bb4a:	d908      	bls.n	800bb5e <_free_r+0x42>
 800bb4c:	6821      	ldr	r1, [r4, #0]
 800bb4e:	1860      	adds	r0, r4, r1
 800bb50:	4283      	cmp	r3, r0
 800bb52:	d1f3      	bne.n	800bb3c <_free_r+0x20>
 800bb54:	6818      	ldr	r0, [r3, #0]
 800bb56:	685b      	ldr	r3, [r3, #4]
 800bb58:	1841      	adds	r1, r0, r1
 800bb5a:	6021      	str	r1, [r4, #0]
 800bb5c:	e7ee      	b.n	800bb3c <_free_r+0x20>
 800bb5e:	001a      	movs	r2, r3
 800bb60:	685b      	ldr	r3, [r3, #4]
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d001      	beq.n	800bb6a <_free_r+0x4e>
 800bb66:	42a3      	cmp	r3, r4
 800bb68:	d9f9      	bls.n	800bb5e <_free_r+0x42>
 800bb6a:	6811      	ldr	r1, [r2, #0]
 800bb6c:	1850      	adds	r0, r2, r1
 800bb6e:	42a0      	cmp	r0, r4
 800bb70:	d10b      	bne.n	800bb8a <_free_r+0x6e>
 800bb72:	6820      	ldr	r0, [r4, #0]
 800bb74:	1809      	adds	r1, r1, r0
 800bb76:	1850      	adds	r0, r2, r1
 800bb78:	6011      	str	r1, [r2, #0]
 800bb7a:	4283      	cmp	r3, r0
 800bb7c:	d1e0      	bne.n	800bb40 <_free_r+0x24>
 800bb7e:	6818      	ldr	r0, [r3, #0]
 800bb80:	685b      	ldr	r3, [r3, #4]
 800bb82:	1841      	adds	r1, r0, r1
 800bb84:	6011      	str	r1, [r2, #0]
 800bb86:	6053      	str	r3, [r2, #4]
 800bb88:	e7da      	b.n	800bb40 <_free_r+0x24>
 800bb8a:	42a0      	cmp	r0, r4
 800bb8c:	d902      	bls.n	800bb94 <_free_r+0x78>
 800bb8e:	230c      	movs	r3, #12
 800bb90:	602b      	str	r3, [r5, #0]
 800bb92:	e7d5      	b.n	800bb40 <_free_r+0x24>
 800bb94:	6821      	ldr	r1, [r4, #0]
 800bb96:	1860      	adds	r0, r4, r1
 800bb98:	4283      	cmp	r3, r0
 800bb9a:	d103      	bne.n	800bba4 <_free_r+0x88>
 800bb9c:	6818      	ldr	r0, [r3, #0]
 800bb9e:	685b      	ldr	r3, [r3, #4]
 800bba0:	1841      	adds	r1, r0, r1
 800bba2:	6021      	str	r1, [r4, #0]
 800bba4:	6063      	str	r3, [r4, #4]
 800bba6:	6054      	str	r4, [r2, #4]
 800bba8:	e7ca      	b.n	800bb40 <_free_r+0x24>
 800bbaa:	46c0      	nop			; (mov r8, r8)
 800bbac:	20000228 	.word	0x20000228

0800bbb0 <_malloc_r>:
 800bbb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbb2:	2303      	movs	r3, #3
 800bbb4:	1ccd      	adds	r5, r1, #3
 800bbb6:	439d      	bics	r5, r3
 800bbb8:	3508      	adds	r5, #8
 800bbba:	0006      	movs	r6, r0
 800bbbc:	2d0c      	cmp	r5, #12
 800bbbe:	d21f      	bcs.n	800bc00 <_malloc_r+0x50>
 800bbc0:	250c      	movs	r5, #12
 800bbc2:	42a9      	cmp	r1, r5
 800bbc4:	d81e      	bhi.n	800bc04 <_malloc_r+0x54>
 800bbc6:	0030      	movs	r0, r6
 800bbc8:	f000 fe1a 	bl	800c800 <__malloc_lock>
 800bbcc:	4925      	ldr	r1, [pc, #148]	; (800bc64 <_malloc_r+0xb4>)
 800bbce:	680a      	ldr	r2, [r1, #0]
 800bbd0:	0014      	movs	r4, r2
 800bbd2:	2c00      	cmp	r4, #0
 800bbd4:	d11a      	bne.n	800bc0c <_malloc_r+0x5c>
 800bbd6:	4f24      	ldr	r7, [pc, #144]	; (800bc68 <_malloc_r+0xb8>)
 800bbd8:	683b      	ldr	r3, [r7, #0]
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d104      	bne.n	800bbe8 <_malloc_r+0x38>
 800bbde:	0021      	movs	r1, r4
 800bbe0:	0030      	movs	r0, r6
 800bbe2:	f000 fb0d 	bl	800c200 <_sbrk_r>
 800bbe6:	6038      	str	r0, [r7, #0]
 800bbe8:	0029      	movs	r1, r5
 800bbea:	0030      	movs	r0, r6
 800bbec:	f000 fb08 	bl	800c200 <_sbrk_r>
 800bbf0:	1c43      	adds	r3, r0, #1
 800bbf2:	d12b      	bne.n	800bc4c <_malloc_r+0x9c>
 800bbf4:	230c      	movs	r3, #12
 800bbf6:	0030      	movs	r0, r6
 800bbf8:	6033      	str	r3, [r6, #0]
 800bbfa:	f000 fe09 	bl	800c810 <__malloc_unlock>
 800bbfe:	e003      	b.n	800bc08 <_malloc_r+0x58>
 800bc00:	2d00      	cmp	r5, #0
 800bc02:	dade      	bge.n	800bbc2 <_malloc_r+0x12>
 800bc04:	230c      	movs	r3, #12
 800bc06:	6033      	str	r3, [r6, #0]
 800bc08:	2000      	movs	r0, #0
 800bc0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bc0c:	6823      	ldr	r3, [r4, #0]
 800bc0e:	1b5b      	subs	r3, r3, r5
 800bc10:	d419      	bmi.n	800bc46 <_malloc_r+0x96>
 800bc12:	2b0b      	cmp	r3, #11
 800bc14:	d903      	bls.n	800bc1e <_malloc_r+0x6e>
 800bc16:	6023      	str	r3, [r4, #0]
 800bc18:	18e4      	adds	r4, r4, r3
 800bc1a:	6025      	str	r5, [r4, #0]
 800bc1c:	e003      	b.n	800bc26 <_malloc_r+0x76>
 800bc1e:	6863      	ldr	r3, [r4, #4]
 800bc20:	42a2      	cmp	r2, r4
 800bc22:	d10e      	bne.n	800bc42 <_malloc_r+0x92>
 800bc24:	600b      	str	r3, [r1, #0]
 800bc26:	0030      	movs	r0, r6
 800bc28:	f000 fdf2 	bl	800c810 <__malloc_unlock>
 800bc2c:	0020      	movs	r0, r4
 800bc2e:	2207      	movs	r2, #7
 800bc30:	300b      	adds	r0, #11
 800bc32:	1d23      	adds	r3, r4, #4
 800bc34:	4390      	bics	r0, r2
 800bc36:	1ac2      	subs	r2, r0, r3
 800bc38:	4298      	cmp	r0, r3
 800bc3a:	d0e6      	beq.n	800bc0a <_malloc_r+0x5a>
 800bc3c:	1a1b      	subs	r3, r3, r0
 800bc3e:	50a3      	str	r3, [r4, r2]
 800bc40:	e7e3      	b.n	800bc0a <_malloc_r+0x5a>
 800bc42:	6053      	str	r3, [r2, #4]
 800bc44:	e7ef      	b.n	800bc26 <_malloc_r+0x76>
 800bc46:	0022      	movs	r2, r4
 800bc48:	6864      	ldr	r4, [r4, #4]
 800bc4a:	e7c2      	b.n	800bbd2 <_malloc_r+0x22>
 800bc4c:	2303      	movs	r3, #3
 800bc4e:	1cc4      	adds	r4, r0, #3
 800bc50:	439c      	bics	r4, r3
 800bc52:	42a0      	cmp	r0, r4
 800bc54:	d0e1      	beq.n	800bc1a <_malloc_r+0x6a>
 800bc56:	1a21      	subs	r1, r4, r0
 800bc58:	0030      	movs	r0, r6
 800bc5a:	f000 fad1 	bl	800c200 <_sbrk_r>
 800bc5e:	1c43      	adds	r3, r0, #1
 800bc60:	d1db      	bne.n	800bc1a <_malloc_r+0x6a>
 800bc62:	e7c7      	b.n	800bbf4 <_malloc_r+0x44>
 800bc64:	20000228 	.word	0x20000228
 800bc68:	2000022c 	.word	0x2000022c

0800bc6c <__ssputs_r>:
 800bc6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bc6e:	688e      	ldr	r6, [r1, #8]
 800bc70:	b085      	sub	sp, #20
 800bc72:	0007      	movs	r7, r0
 800bc74:	000c      	movs	r4, r1
 800bc76:	9203      	str	r2, [sp, #12]
 800bc78:	9301      	str	r3, [sp, #4]
 800bc7a:	429e      	cmp	r6, r3
 800bc7c:	d83c      	bhi.n	800bcf8 <__ssputs_r+0x8c>
 800bc7e:	2390      	movs	r3, #144	; 0x90
 800bc80:	898a      	ldrh	r2, [r1, #12]
 800bc82:	00db      	lsls	r3, r3, #3
 800bc84:	421a      	tst	r2, r3
 800bc86:	d034      	beq.n	800bcf2 <__ssputs_r+0x86>
 800bc88:	2503      	movs	r5, #3
 800bc8a:	6909      	ldr	r1, [r1, #16]
 800bc8c:	6823      	ldr	r3, [r4, #0]
 800bc8e:	1a5b      	subs	r3, r3, r1
 800bc90:	9302      	str	r3, [sp, #8]
 800bc92:	6963      	ldr	r3, [r4, #20]
 800bc94:	9802      	ldr	r0, [sp, #8]
 800bc96:	435d      	muls	r5, r3
 800bc98:	0feb      	lsrs	r3, r5, #31
 800bc9a:	195d      	adds	r5, r3, r5
 800bc9c:	9b01      	ldr	r3, [sp, #4]
 800bc9e:	106d      	asrs	r5, r5, #1
 800bca0:	3301      	adds	r3, #1
 800bca2:	181b      	adds	r3, r3, r0
 800bca4:	42ab      	cmp	r3, r5
 800bca6:	d900      	bls.n	800bcaa <__ssputs_r+0x3e>
 800bca8:	001d      	movs	r5, r3
 800bcaa:	0553      	lsls	r3, r2, #21
 800bcac:	d532      	bpl.n	800bd14 <__ssputs_r+0xa8>
 800bcae:	0029      	movs	r1, r5
 800bcb0:	0038      	movs	r0, r7
 800bcb2:	f7ff ff7d 	bl	800bbb0 <_malloc_r>
 800bcb6:	1e06      	subs	r6, r0, #0
 800bcb8:	d109      	bne.n	800bcce <__ssputs_r+0x62>
 800bcba:	230c      	movs	r3, #12
 800bcbc:	603b      	str	r3, [r7, #0]
 800bcbe:	2340      	movs	r3, #64	; 0x40
 800bcc0:	2001      	movs	r0, #1
 800bcc2:	89a2      	ldrh	r2, [r4, #12]
 800bcc4:	4240      	negs	r0, r0
 800bcc6:	4313      	orrs	r3, r2
 800bcc8:	81a3      	strh	r3, [r4, #12]
 800bcca:	b005      	add	sp, #20
 800bccc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bcce:	9a02      	ldr	r2, [sp, #8]
 800bcd0:	6921      	ldr	r1, [r4, #16]
 800bcd2:	f7ff fa42 	bl	800b15a <memcpy>
 800bcd6:	89a3      	ldrh	r3, [r4, #12]
 800bcd8:	4a14      	ldr	r2, [pc, #80]	; (800bd2c <__ssputs_r+0xc0>)
 800bcda:	401a      	ands	r2, r3
 800bcdc:	2380      	movs	r3, #128	; 0x80
 800bcde:	4313      	orrs	r3, r2
 800bce0:	81a3      	strh	r3, [r4, #12]
 800bce2:	9b02      	ldr	r3, [sp, #8]
 800bce4:	6126      	str	r6, [r4, #16]
 800bce6:	18f6      	adds	r6, r6, r3
 800bce8:	6026      	str	r6, [r4, #0]
 800bcea:	6165      	str	r5, [r4, #20]
 800bcec:	9e01      	ldr	r6, [sp, #4]
 800bcee:	1aed      	subs	r5, r5, r3
 800bcf0:	60a5      	str	r5, [r4, #8]
 800bcf2:	9b01      	ldr	r3, [sp, #4]
 800bcf4:	429e      	cmp	r6, r3
 800bcf6:	d900      	bls.n	800bcfa <__ssputs_r+0x8e>
 800bcf8:	9e01      	ldr	r6, [sp, #4]
 800bcfa:	0032      	movs	r2, r6
 800bcfc:	9903      	ldr	r1, [sp, #12]
 800bcfe:	6820      	ldr	r0, [r4, #0]
 800bd00:	f000 fd6a 	bl	800c7d8 <memmove>
 800bd04:	68a3      	ldr	r3, [r4, #8]
 800bd06:	2000      	movs	r0, #0
 800bd08:	1b9b      	subs	r3, r3, r6
 800bd0a:	60a3      	str	r3, [r4, #8]
 800bd0c:	6823      	ldr	r3, [r4, #0]
 800bd0e:	199e      	adds	r6, r3, r6
 800bd10:	6026      	str	r6, [r4, #0]
 800bd12:	e7da      	b.n	800bcca <__ssputs_r+0x5e>
 800bd14:	002a      	movs	r2, r5
 800bd16:	0038      	movs	r0, r7
 800bd18:	f000 fd82 	bl	800c820 <_realloc_r>
 800bd1c:	1e06      	subs	r6, r0, #0
 800bd1e:	d1e0      	bne.n	800bce2 <__ssputs_r+0x76>
 800bd20:	0038      	movs	r0, r7
 800bd22:	6921      	ldr	r1, [r4, #16]
 800bd24:	f7ff fefa 	bl	800bb1c <_free_r>
 800bd28:	e7c7      	b.n	800bcba <__ssputs_r+0x4e>
 800bd2a:	46c0      	nop			; (mov r8, r8)
 800bd2c:	fffffb7f 	.word	0xfffffb7f

0800bd30 <_svfiprintf_r>:
 800bd30:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bd32:	b0a1      	sub	sp, #132	; 0x84
 800bd34:	9003      	str	r0, [sp, #12]
 800bd36:	001d      	movs	r5, r3
 800bd38:	898b      	ldrh	r3, [r1, #12]
 800bd3a:	000f      	movs	r7, r1
 800bd3c:	0016      	movs	r6, r2
 800bd3e:	061b      	lsls	r3, r3, #24
 800bd40:	d511      	bpl.n	800bd66 <_svfiprintf_r+0x36>
 800bd42:	690b      	ldr	r3, [r1, #16]
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d10e      	bne.n	800bd66 <_svfiprintf_r+0x36>
 800bd48:	2140      	movs	r1, #64	; 0x40
 800bd4a:	f7ff ff31 	bl	800bbb0 <_malloc_r>
 800bd4e:	6038      	str	r0, [r7, #0]
 800bd50:	6138      	str	r0, [r7, #16]
 800bd52:	2800      	cmp	r0, #0
 800bd54:	d105      	bne.n	800bd62 <_svfiprintf_r+0x32>
 800bd56:	230c      	movs	r3, #12
 800bd58:	9a03      	ldr	r2, [sp, #12]
 800bd5a:	3801      	subs	r0, #1
 800bd5c:	6013      	str	r3, [r2, #0]
 800bd5e:	b021      	add	sp, #132	; 0x84
 800bd60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd62:	2340      	movs	r3, #64	; 0x40
 800bd64:	617b      	str	r3, [r7, #20]
 800bd66:	2300      	movs	r3, #0
 800bd68:	ac08      	add	r4, sp, #32
 800bd6a:	6163      	str	r3, [r4, #20]
 800bd6c:	3320      	adds	r3, #32
 800bd6e:	7663      	strb	r3, [r4, #25]
 800bd70:	3310      	adds	r3, #16
 800bd72:	76a3      	strb	r3, [r4, #26]
 800bd74:	9507      	str	r5, [sp, #28]
 800bd76:	0035      	movs	r5, r6
 800bd78:	782b      	ldrb	r3, [r5, #0]
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d001      	beq.n	800bd82 <_svfiprintf_r+0x52>
 800bd7e:	2b25      	cmp	r3, #37	; 0x25
 800bd80:	d147      	bne.n	800be12 <_svfiprintf_r+0xe2>
 800bd82:	1bab      	subs	r3, r5, r6
 800bd84:	9305      	str	r3, [sp, #20]
 800bd86:	42b5      	cmp	r5, r6
 800bd88:	d00c      	beq.n	800bda4 <_svfiprintf_r+0x74>
 800bd8a:	0032      	movs	r2, r6
 800bd8c:	0039      	movs	r1, r7
 800bd8e:	9803      	ldr	r0, [sp, #12]
 800bd90:	f7ff ff6c 	bl	800bc6c <__ssputs_r>
 800bd94:	1c43      	adds	r3, r0, #1
 800bd96:	d100      	bne.n	800bd9a <_svfiprintf_r+0x6a>
 800bd98:	e0ae      	b.n	800bef8 <_svfiprintf_r+0x1c8>
 800bd9a:	6962      	ldr	r2, [r4, #20]
 800bd9c:	9b05      	ldr	r3, [sp, #20]
 800bd9e:	4694      	mov	ip, r2
 800bda0:	4463      	add	r3, ip
 800bda2:	6163      	str	r3, [r4, #20]
 800bda4:	782b      	ldrb	r3, [r5, #0]
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d100      	bne.n	800bdac <_svfiprintf_r+0x7c>
 800bdaa:	e0a5      	b.n	800bef8 <_svfiprintf_r+0x1c8>
 800bdac:	2201      	movs	r2, #1
 800bdae:	2300      	movs	r3, #0
 800bdb0:	4252      	negs	r2, r2
 800bdb2:	6062      	str	r2, [r4, #4]
 800bdb4:	a904      	add	r1, sp, #16
 800bdb6:	3254      	adds	r2, #84	; 0x54
 800bdb8:	1852      	adds	r2, r2, r1
 800bdba:	1c6e      	adds	r6, r5, #1
 800bdbc:	6023      	str	r3, [r4, #0]
 800bdbe:	60e3      	str	r3, [r4, #12]
 800bdc0:	60a3      	str	r3, [r4, #8]
 800bdc2:	7013      	strb	r3, [r2, #0]
 800bdc4:	65a3      	str	r3, [r4, #88]	; 0x58
 800bdc6:	2205      	movs	r2, #5
 800bdc8:	7831      	ldrb	r1, [r6, #0]
 800bdca:	4854      	ldr	r0, [pc, #336]	; (800bf1c <_svfiprintf_r+0x1ec>)
 800bdcc:	f7ff f9ba 	bl	800b144 <memchr>
 800bdd0:	1c75      	adds	r5, r6, #1
 800bdd2:	2800      	cmp	r0, #0
 800bdd4:	d11f      	bne.n	800be16 <_svfiprintf_r+0xe6>
 800bdd6:	6822      	ldr	r2, [r4, #0]
 800bdd8:	06d3      	lsls	r3, r2, #27
 800bdda:	d504      	bpl.n	800bde6 <_svfiprintf_r+0xb6>
 800bddc:	2353      	movs	r3, #83	; 0x53
 800bdde:	a904      	add	r1, sp, #16
 800bde0:	185b      	adds	r3, r3, r1
 800bde2:	2120      	movs	r1, #32
 800bde4:	7019      	strb	r1, [r3, #0]
 800bde6:	0713      	lsls	r3, r2, #28
 800bde8:	d504      	bpl.n	800bdf4 <_svfiprintf_r+0xc4>
 800bdea:	2353      	movs	r3, #83	; 0x53
 800bdec:	a904      	add	r1, sp, #16
 800bdee:	185b      	adds	r3, r3, r1
 800bdf0:	212b      	movs	r1, #43	; 0x2b
 800bdf2:	7019      	strb	r1, [r3, #0]
 800bdf4:	7833      	ldrb	r3, [r6, #0]
 800bdf6:	2b2a      	cmp	r3, #42	; 0x2a
 800bdf8:	d016      	beq.n	800be28 <_svfiprintf_r+0xf8>
 800bdfa:	0035      	movs	r5, r6
 800bdfc:	2100      	movs	r1, #0
 800bdfe:	200a      	movs	r0, #10
 800be00:	68e3      	ldr	r3, [r4, #12]
 800be02:	782a      	ldrb	r2, [r5, #0]
 800be04:	1c6e      	adds	r6, r5, #1
 800be06:	3a30      	subs	r2, #48	; 0x30
 800be08:	2a09      	cmp	r2, #9
 800be0a:	d94e      	bls.n	800beaa <_svfiprintf_r+0x17a>
 800be0c:	2900      	cmp	r1, #0
 800be0e:	d111      	bne.n	800be34 <_svfiprintf_r+0x104>
 800be10:	e017      	b.n	800be42 <_svfiprintf_r+0x112>
 800be12:	3501      	adds	r5, #1
 800be14:	e7b0      	b.n	800bd78 <_svfiprintf_r+0x48>
 800be16:	4b41      	ldr	r3, [pc, #260]	; (800bf1c <_svfiprintf_r+0x1ec>)
 800be18:	6822      	ldr	r2, [r4, #0]
 800be1a:	1ac0      	subs	r0, r0, r3
 800be1c:	2301      	movs	r3, #1
 800be1e:	4083      	lsls	r3, r0
 800be20:	4313      	orrs	r3, r2
 800be22:	002e      	movs	r6, r5
 800be24:	6023      	str	r3, [r4, #0]
 800be26:	e7ce      	b.n	800bdc6 <_svfiprintf_r+0x96>
 800be28:	9b07      	ldr	r3, [sp, #28]
 800be2a:	1d19      	adds	r1, r3, #4
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	9107      	str	r1, [sp, #28]
 800be30:	2b00      	cmp	r3, #0
 800be32:	db01      	blt.n	800be38 <_svfiprintf_r+0x108>
 800be34:	930b      	str	r3, [sp, #44]	; 0x2c
 800be36:	e004      	b.n	800be42 <_svfiprintf_r+0x112>
 800be38:	425b      	negs	r3, r3
 800be3a:	60e3      	str	r3, [r4, #12]
 800be3c:	2302      	movs	r3, #2
 800be3e:	4313      	orrs	r3, r2
 800be40:	6023      	str	r3, [r4, #0]
 800be42:	782b      	ldrb	r3, [r5, #0]
 800be44:	2b2e      	cmp	r3, #46	; 0x2e
 800be46:	d10a      	bne.n	800be5e <_svfiprintf_r+0x12e>
 800be48:	786b      	ldrb	r3, [r5, #1]
 800be4a:	2b2a      	cmp	r3, #42	; 0x2a
 800be4c:	d135      	bne.n	800beba <_svfiprintf_r+0x18a>
 800be4e:	9b07      	ldr	r3, [sp, #28]
 800be50:	3502      	adds	r5, #2
 800be52:	1d1a      	adds	r2, r3, #4
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	9207      	str	r2, [sp, #28]
 800be58:	2b00      	cmp	r3, #0
 800be5a:	db2b      	blt.n	800beb4 <_svfiprintf_r+0x184>
 800be5c:	9309      	str	r3, [sp, #36]	; 0x24
 800be5e:	4e30      	ldr	r6, [pc, #192]	; (800bf20 <_svfiprintf_r+0x1f0>)
 800be60:	2203      	movs	r2, #3
 800be62:	0030      	movs	r0, r6
 800be64:	7829      	ldrb	r1, [r5, #0]
 800be66:	f7ff f96d 	bl	800b144 <memchr>
 800be6a:	2800      	cmp	r0, #0
 800be6c:	d006      	beq.n	800be7c <_svfiprintf_r+0x14c>
 800be6e:	2340      	movs	r3, #64	; 0x40
 800be70:	1b80      	subs	r0, r0, r6
 800be72:	4083      	lsls	r3, r0
 800be74:	6822      	ldr	r2, [r4, #0]
 800be76:	3501      	adds	r5, #1
 800be78:	4313      	orrs	r3, r2
 800be7a:	6023      	str	r3, [r4, #0]
 800be7c:	7829      	ldrb	r1, [r5, #0]
 800be7e:	2206      	movs	r2, #6
 800be80:	4828      	ldr	r0, [pc, #160]	; (800bf24 <_svfiprintf_r+0x1f4>)
 800be82:	1c6e      	adds	r6, r5, #1
 800be84:	7621      	strb	r1, [r4, #24]
 800be86:	f7ff f95d 	bl	800b144 <memchr>
 800be8a:	2800      	cmp	r0, #0
 800be8c:	d03c      	beq.n	800bf08 <_svfiprintf_r+0x1d8>
 800be8e:	4b26      	ldr	r3, [pc, #152]	; (800bf28 <_svfiprintf_r+0x1f8>)
 800be90:	2b00      	cmp	r3, #0
 800be92:	d125      	bne.n	800bee0 <_svfiprintf_r+0x1b0>
 800be94:	2207      	movs	r2, #7
 800be96:	9b07      	ldr	r3, [sp, #28]
 800be98:	3307      	adds	r3, #7
 800be9a:	4393      	bics	r3, r2
 800be9c:	3308      	adds	r3, #8
 800be9e:	9307      	str	r3, [sp, #28]
 800bea0:	6963      	ldr	r3, [r4, #20]
 800bea2:	9a04      	ldr	r2, [sp, #16]
 800bea4:	189b      	adds	r3, r3, r2
 800bea6:	6163      	str	r3, [r4, #20]
 800bea8:	e765      	b.n	800bd76 <_svfiprintf_r+0x46>
 800beaa:	4343      	muls	r3, r0
 800beac:	0035      	movs	r5, r6
 800beae:	2101      	movs	r1, #1
 800beb0:	189b      	adds	r3, r3, r2
 800beb2:	e7a6      	b.n	800be02 <_svfiprintf_r+0xd2>
 800beb4:	2301      	movs	r3, #1
 800beb6:	425b      	negs	r3, r3
 800beb8:	e7d0      	b.n	800be5c <_svfiprintf_r+0x12c>
 800beba:	2300      	movs	r3, #0
 800bebc:	200a      	movs	r0, #10
 800bebe:	001a      	movs	r2, r3
 800bec0:	3501      	adds	r5, #1
 800bec2:	6063      	str	r3, [r4, #4]
 800bec4:	7829      	ldrb	r1, [r5, #0]
 800bec6:	1c6e      	adds	r6, r5, #1
 800bec8:	3930      	subs	r1, #48	; 0x30
 800beca:	2909      	cmp	r1, #9
 800becc:	d903      	bls.n	800bed6 <_svfiprintf_r+0x1a6>
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d0c5      	beq.n	800be5e <_svfiprintf_r+0x12e>
 800bed2:	9209      	str	r2, [sp, #36]	; 0x24
 800bed4:	e7c3      	b.n	800be5e <_svfiprintf_r+0x12e>
 800bed6:	4342      	muls	r2, r0
 800bed8:	0035      	movs	r5, r6
 800beda:	2301      	movs	r3, #1
 800bedc:	1852      	adds	r2, r2, r1
 800bede:	e7f1      	b.n	800bec4 <_svfiprintf_r+0x194>
 800bee0:	ab07      	add	r3, sp, #28
 800bee2:	9300      	str	r3, [sp, #0]
 800bee4:	003a      	movs	r2, r7
 800bee6:	0021      	movs	r1, r4
 800bee8:	4b10      	ldr	r3, [pc, #64]	; (800bf2c <_svfiprintf_r+0x1fc>)
 800beea:	9803      	ldr	r0, [sp, #12]
 800beec:	f7fc f8fc 	bl	80080e8 <_printf_float>
 800bef0:	9004      	str	r0, [sp, #16]
 800bef2:	9b04      	ldr	r3, [sp, #16]
 800bef4:	3301      	adds	r3, #1
 800bef6:	d1d3      	bne.n	800bea0 <_svfiprintf_r+0x170>
 800bef8:	89bb      	ldrh	r3, [r7, #12]
 800befa:	980d      	ldr	r0, [sp, #52]	; 0x34
 800befc:	065b      	lsls	r3, r3, #25
 800befe:	d400      	bmi.n	800bf02 <_svfiprintf_r+0x1d2>
 800bf00:	e72d      	b.n	800bd5e <_svfiprintf_r+0x2e>
 800bf02:	2001      	movs	r0, #1
 800bf04:	4240      	negs	r0, r0
 800bf06:	e72a      	b.n	800bd5e <_svfiprintf_r+0x2e>
 800bf08:	ab07      	add	r3, sp, #28
 800bf0a:	9300      	str	r3, [sp, #0]
 800bf0c:	003a      	movs	r2, r7
 800bf0e:	0021      	movs	r1, r4
 800bf10:	4b06      	ldr	r3, [pc, #24]	; (800bf2c <_svfiprintf_r+0x1fc>)
 800bf12:	9803      	ldr	r0, [sp, #12]
 800bf14:	f7fc fba6 	bl	8008664 <_printf_i>
 800bf18:	e7ea      	b.n	800bef0 <_svfiprintf_r+0x1c0>
 800bf1a:	46c0      	nop			; (mov r8, r8)
 800bf1c:	0800d7ec 	.word	0x0800d7ec
 800bf20:	0800d7f2 	.word	0x0800d7f2
 800bf24:	0800d7f6 	.word	0x0800d7f6
 800bf28:	080080e9 	.word	0x080080e9
 800bf2c:	0800bc6d 	.word	0x0800bc6d

0800bf30 <__sfputc_r>:
 800bf30:	6893      	ldr	r3, [r2, #8]
 800bf32:	b510      	push	{r4, lr}
 800bf34:	3b01      	subs	r3, #1
 800bf36:	6093      	str	r3, [r2, #8]
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	da04      	bge.n	800bf46 <__sfputc_r+0x16>
 800bf3c:	6994      	ldr	r4, [r2, #24]
 800bf3e:	42a3      	cmp	r3, r4
 800bf40:	db07      	blt.n	800bf52 <__sfputc_r+0x22>
 800bf42:	290a      	cmp	r1, #10
 800bf44:	d005      	beq.n	800bf52 <__sfputc_r+0x22>
 800bf46:	6813      	ldr	r3, [r2, #0]
 800bf48:	1c58      	adds	r0, r3, #1
 800bf4a:	6010      	str	r0, [r2, #0]
 800bf4c:	7019      	strb	r1, [r3, #0]
 800bf4e:	0008      	movs	r0, r1
 800bf50:	bd10      	pop	{r4, pc}
 800bf52:	f000 f9c5 	bl	800c2e0 <__swbuf_r>
 800bf56:	0001      	movs	r1, r0
 800bf58:	e7f9      	b.n	800bf4e <__sfputc_r+0x1e>

0800bf5a <__sfputs_r>:
 800bf5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf5c:	0006      	movs	r6, r0
 800bf5e:	000f      	movs	r7, r1
 800bf60:	0014      	movs	r4, r2
 800bf62:	18d5      	adds	r5, r2, r3
 800bf64:	42ac      	cmp	r4, r5
 800bf66:	d101      	bne.n	800bf6c <__sfputs_r+0x12>
 800bf68:	2000      	movs	r0, #0
 800bf6a:	e007      	b.n	800bf7c <__sfputs_r+0x22>
 800bf6c:	7821      	ldrb	r1, [r4, #0]
 800bf6e:	003a      	movs	r2, r7
 800bf70:	0030      	movs	r0, r6
 800bf72:	f7ff ffdd 	bl	800bf30 <__sfputc_r>
 800bf76:	3401      	adds	r4, #1
 800bf78:	1c43      	adds	r3, r0, #1
 800bf7a:	d1f3      	bne.n	800bf64 <__sfputs_r+0xa>
 800bf7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bf80 <_vfiprintf_r>:
 800bf80:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bf82:	b0a1      	sub	sp, #132	; 0x84
 800bf84:	0006      	movs	r6, r0
 800bf86:	000c      	movs	r4, r1
 800bf88:	001f      	movs	r7, r3
 800bf8a:	9203      	str	r2, [sp, #12]
 800bf8c:	2800      	cmp	r0, #0
 800bf8e:	d004      	beq.n	800bf9a <_vfiprintf_r+0x1a>
 800bf90:	6983      	ldr	r3, [r0, #24]
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d101      	bne.n	800bf9a <_vfiprintf_r+0x1a>
 800bf96:	f7fe fc9f 	bl	800a8d8 <__sinit>
 800bf9a:	4b8e      	ldr	r3, [pc, #568]	; (800c1d4 <_vfiprintf_r+0x254>)
 800bf9c:	429c      	cmp	r4, r3
 800bf9e:	d11c      	bne.n	800bfda <_vfiprintf_r+0x5a>
 800bfa0:	6874      	ldr	r4, [r6, #4]
 800bfa2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bfa4:	07db      	lsls	r3, r3, #31
 800bfa6:	d405      	bmi.n	800bfb4 <_vfiprintf_r+0x34>
 800bfa8:	89a3      	ldrh	r3, [r4, #12]
 800bfaa:	059b      	lsls	r3, r3, #22
 800bfac:	d402      	bmi.n	800bfb4 <_vfiprintf_r+0x34>
 800bfae:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bfb0:	f7ff f8a9 	bl	800b106 <__retarget_lock_acquire_recursive>
 800bfb4:	89a3      	ldrh	r3, [r4, #12]
 800bfb6:	071b      	lsls	r3, r3, #28
 800bfb8:	d502      	bpl.n	800bfc0 <_vfiprintf_r+0x40>
 800bfba:	6923      	ldr	r3, [r4, #16]
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d11d      	bne.n	800bffc <_vfiprintf_r+0x7c>
 800bfc0:	0021      	movs	r1, r4
 800bfc2:	0030      	movs	r0, r6
 800bfc4:	f000 fa04 	bl	800c3d0 <__swsetup_r>
 800bfc8:	2800      	cmp	r0, #0
 800bfca:	d017      	beq.n	800bffc <_vfiprintf_r+0x7c>
 800bfcc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bfce:	07db      	lsls	r3, r3, #31
 800bfd0:	d50d      	bpl.n	800bfee <_vfiprintf_r+0x6e>
 800bfd2:	2001      	movs	r0, #1
 800bfd4:	4240      	negs	r0, r0
 800bfd6:	b021      	add	sp, #132	; 0x84
 800bfd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bfda:	4b7f      	ldr	r3, [pc, #508]	; (800c1d8 <_vfiprintf_r+0x258>)
 800bfdc:	429c      	cmp	r4, r3
 800bfde:	d101      	bne.n	800bfe4 <_vfiprintf_r+0x64>
 800bfe0:	68b4      	ldr	r4, [r6, #8]
 800bfe2:	e7de      	b.n	800bfa2 <_vfiprintf_r+0x22>
 800bfe4:	4b7d      	ldr	r3, [pc, #500]	; (800c1dc <_vfiprintf_r+0x25c>)
 800bfe6:	429c      	cmp	r4, r3
 800bfe8:	d1db      	bne.n	800bfa2 <_vfiprintf_r+0x22>
 800bfea:	68f4      	ldr	r4, [r6, #12]
 800bfec:	e7d9      	b.n	800bfa2 <_vfiprintf_r+0x22>
 800bfee:	89a3      	ldrh	r3, [r4, #12]
 800bff0:	059b      	lsls	r3, r3, #22
 800bff2:	d4ee      	bmi.n	800bfd2 <_vfiprintf_r+0x52>
 800bff4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bff6:	f7ff f887 	bl	800b108 <__retarget_lock_release_recursive>
 800bffa:	e7ea      	b.n	800bfd2 <_vfiprintf_r+0x52>
 800bffc:	2300      	movs	r3, #0
 800bffe:	ad08      	add	r5, sp, #32
 800c000:	616b      	str	r3, [r5, #20]
 800c002:	3320      	adds	r3, #32
 800c004:	766b      	strb	r3, [r5, #25]
 800c006:	3310      	adds	r3, #16
 800c008:	76ab      	strb	r3, [r5, #26]
 800c00a:	9707      	str	r7, [sp, #28]
 800c00c:	9f03      	ldr	r7, [sp, #12]
 800c00e:	783b      	ldrb	r3, [r7, #0]
 800c010:	2b00      	cmp	r3, #0
 800c012:	d001      	beq.n	800c018 <_vfiprintf_r+0x98>
 800c014:	2b25      	cmp	r3, #37	; 0x25
 800c016:	d14e      	bne.n	800c0b6 <_vfiprintf_r+0x136>
 800c018:	9b03      	ldr	r3, [sp, #12]
 800c01a:	1afb      	subs	r3, r7, r3
 800c01c:	9305      	str	r3, [sp, #20]
 800c01e:	9b03      	ldr	r3, [sp, #12]
 800c020:	429f      	cmp	r7, r3
 800c022:	d00d      	beq.n	800c040 <_vfiprintf_r+0xc0>
 800c024:	9b05      	ldr	r3, [sp, #20]
 800c026:	0021      	movs	r1, r4
 800c028:	0030      	movs	r0, r6
 800c02a:	9a03      	ldr	r2, [sp, #12]
 800c02c:	f7ff ff95 	bl	800bf5a <__sfputs_r>
 800c030:	1c43      	adds	r3, r0, #1
 800c032:	d100      	bne.n	800c036 <_vfiprintf_r+0xb6>
 800c034:	e0b5      	b.n	800c1a2 <_vfiprintf_r+0x222>
 800c036:	696a      	ldr	r2, [r5, #20]
 800c038:	9b05      	ldr	r3, [sp, #20]
 800c03a:	4694      	mov	ip, r2
 800c03c:	4463      	add	r3, ip
 800c03e:	616b      	str	r3, [r5, #20]
 800c040:	783b      	ldrb	r3, [r7, #0]
 800c042:	2b00      	cmp	r3, #0
 800c044:	d100      	bne.n	800c048 <_vfiprintf_r+0xc8>
 800c046:	e0ac      	b.n	800c1a2 <_vfiprintf_r+0x222>
 800c048:	2201      	movs	r2, #1
 800c04a:	1c7b      	adds	r3, r7, #1
 800c04c:	9303      	str	r3, [sp, #12]
 800c04e:	2300      	movs	r3, #0
 800c050:	4252      	negs	r2, r2
 800c052:	606a      	str	r2, [r5, #4]
 800c054:	a904      	add	r1, sp, #16
 800c056:	3254      	adds	r2, #84	; 0x54
 800c058:	1852      	adds	r2, r2, r1
 800c05a:	602b      	str	r3, [r5, #0]
 800c05c:	60eb      	str	r3, [r5, #12]
 800c05e:	60ab      	str	r3, [r5, #8]
 800c060:	7013      	strb	r3, [r2, #0]
 800c062:	65ab      	str	r3, [r5, #88]	; 0x58
 800c064:	9b03      	ldr	r3, [sp, #12]
 800c066:	2205      	movs	r2, #5
 800c068:	7819      	ldrb	r1, [r3, #0]
 800c06a:	485d      	ldr	r0, [pc, #372]	; (800c1e0 <_vfiprintf_r+0x260>)
 800c06c:	f7ff f86a 	bl	800b144 <memchr>
 800c070:	9b03      	ldr	r3, [sp, #12]
 800c072:	1c5f      	adds	r7, r3, #1
 800c074:	2800      	cmp	r0, #0
 800c076:	d120      	bne.n	800c0ba <_vfiprintf_r+0x13a>
 800c078:	682a      	ldr	r2, [r5, #0]
 800c07a:	06d3      	lsls	r3, r2, #27
 800c07c:	d504      	bpl.n	800c088 <_vfiprintf_r+0x108>
 800c07e:	2353      	movs	r3, #83	; 0x53
 800c080:	a904      	add	r1, sp, #16
 800c082:	185b      	adds	r3, r3, r1
 800c084:	2120      	movs	r1, #32
 800c086:	7019      	strb	r1, [r3, #0]
 800c088:	0713      	lsls	r3, r2, #28
 800c08a:	d504      	bpl.n	800c096 <_vfiprintf_r+0x116>
 800c08c:	2353      	movs	r3, #83	; 0x53
 800c08e:	a904      	add	r1, sp, #16
 800c090:	185b      	adds	r3, r3, r1
 800c092:	212b      	movs	r1, #43	; 0x2b
 800c094:	7019      	strb	r1, [r3, #0]
 800c096:	9b03      	ldr	r3, [sp, #12]
 800c098:	781b      	ldrb	r3, [r3, #0]
 800c09a:	2b2a      	cmp	r3, #42	; 0x2a
 800c09c:	d016      	beq.n	800c0cc <_vfiprintf_r+0x14c>
 800c09e:	2100      	movs	r1, #0
 800c0a0:	68eb      	ldr	r3, [r5, #12]
 800c0a2:	9f03      	ldr	r7, [sp, #12]
 800c0a4:	783a      	ldrb	r2, [r7, #0]
 800c0a6:	1c78      	adds	r0, r7, #1
 800c0a8:	3a30      	subs	r2, #48	; 0x30
 800c0aa:	4684      	mov	ip, r0
 800c0ac:	2a09      	cmp	r2, #9
 800c0ae:	d94f      	bls.n	800c150 <_vfiprintf_r+0x1d0>
 800c0b0:	2900      	cmp	r1, #0
 800c0b2:	d111      	bne.n	800c0d8 <_vfiprintf_r+0x158>
 800c0b4:	e017      	b.n	800c0e6 <_vfiprintf_r+0x166>
 800c0b6:	3701      	adds	r7, #1
 800c0b8:	e7a9      	b.n	800c00e <_vfiprintf_r+0x8e>
 800c0ba:	4b49      	ldr	r3, [pc, #292]	; (800c1e0 <_vfiprintf_r+0x260>)
 800c0bc:	682a      	ldr	r2, [r5, #0]
 800c0be:	1ac0      	subs	r0, r0, r3
 800c0c0:	2301      	movs	r3, #1
 800c0c2:	4083      	lsls	r3, r0
 800c0c4:	4313      	orrs	r3, r2
 800c0c6:	602b      	str	r3, [r5, #0]
 800c0c8:	9703      	str	r7, [sp, #12]
 800c0ca:	e7cb      	b.n	800c064 <_vfiprintf_r+0xe4>
 800c0cc:	9b07      	ldr	r3, [sp, #28]
 800c0ce:	1d19      	adds	r1, r3, #4
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	9107      	str	r1, [sp, #28]
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	db01      	blt.n	800c0dc <_vfiprintf_r+0x15c>
 800c0d8:	930b      	str	r3, [sp, #44]	; 0x2c
 800c0da:	e004      	b.n	800c0e6 <_vfiprintf_r+0x166>
 800c0dc:	425b      	negs	r3, r3
 800c0de:	60eb      	str	r3, [r5, #12]
 800c0e0:	2302      	movs	r3, #2
 800c0e2:	4313      	orrs	r3, r2
 800c0e4:	602b      	str	r3, [r5, #0]
 800c0e6:	783b      	ldrb	r3, [r7, #0]
 800c0e8:	2b2e      	cmp	r3, #46	; 0x2e
 800c0ea:	d10a      	bne.n	800c102 <_vfiprintf_r+0x182>
 800c0ec:	787b      	ldrb	r3, [r7, #1]
 800c0ee:	2b2a      	cmp	r3, #42	; 0x2a
 800c0f0:	d137      	bne.n	800c162 <_vfiprintf_r+0x1e2>
 800c0f2:	9b07      	ldr	r3, [sp, #28]
 800c0f4:	3702      	adds	r7, #2
 800c0f6:	1d1a      	adds	r2, r3, #4
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	9207      	str	r2, [sp, #28]
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	db2d      	blt.n	800c15c <_vfiprintf_r+0x1dc>
 800c100:	9309      	str	r3, [sp, #36]	; 0x24
 800c102:	2203      	movs	r2, #3
 800c104:	7839      	ldrb	r1, [r7, #0]
 800c106:	4837      	ldr	r0, [pc, #220]	; (800c1e4 <_vfiprintf_r+0x264>)
 800c108:	f7ff f81c 	bl	800b144 <memchr>
 800c10c:	2800      	cmp	r0, #0
 800c10e:	d007      	beq.n	800c120 <_vfiprintf_r+0x1a0>
 800c110:	4b34      	ldr	r3, [pc, #208]	; (800c1e4 <_vfiprintf_r+0x264>)
 800c112:	682a      	ldr	r2, [r5, #0]
 800c114:	1ac0      	subs	r0, r0, r3
 800c116:	2340      	movs	r3, #64	; 0x40
 800c118:	4083      	lsls	r3, r0
 800c11a:	4313      	orrs	r3, r2
 800c11c:	3701      	adds	r7, #1
 800c11e:	602b      	str	r3, [r5, #0]
 800c120:	7839      	ldrb	r1, [r7, #0]
 800c122:	1c7b      	adds	r3, r7, #1
 800c124:	2206      	movs	r2, #6
 800c126:	4830      	ldr	r0, [pc, #192]	; (800c1e8 <_vfiprintf_r+0x268>)
 800c128:	9303      	str	r3, [sp, #12]
 800c12a:	7629      	strb	r1, [r5, #24]
 800c12c:	f7ff f80a 	bl	800b144 <memchr>
 800c130:	2800      	cmp	r0, #0
 800c132:	d045      	beq.n	800c1c0 <_vfiprintf_r+0x240>
 800c134:	4b2d      	ldr	r3, [pc, #180]	; (800c1ec <_vfiprintf_r+0x26c>)
 800c136:	2b00      	cmp	r3, #0
 800c138:	d127      	bne.n	800c18a <_vfiprintf_r+0x20a>
 800c13a:	2207      	movs	r2, #7
 800c13c:	9b07      	ldr	r3, [sp, #28]
 800c13e:	3307      	adds	r3, #7
 800c140:	4393      	bics	r3, r2
 800c142:	3308      	adds	r3, #8
 800c144:	9307      	str	r3, [sp, #28]
 800c146:	696b      	ldr	r3, [r5, #20]
 800c148:	9a04      	ldr	r2, [sp, #16]
 800c14a:	189b      	adds	r3, r3, r2
 800c14c:	616b      	str	r3, [r5, #20]
 800c14e:	e75d      	b.n	800c00c <_vfiprintf_r+0x8c>
 800c150:	210a      	movs	r1, #10
 800c152:	434b      	muls	r3, r1
 800c154:	4667      	mov	r7, ip
 800c156:	189b      	adds	r3, r3, r2
 800c158:	3909      	subs	r1, #9
 800c15a:	e7a3      	b.n	800c0a4 <_vfiprintf_r+0x124>
 800c15c:	2301      	movs	r3, #1
 800c15e:	425b      	negs	r3, r3
 800c160:	e7ce      	b.n	800c100 <_vfiprintf_r+0x180>
 800c162:	2300      	movs	r3, #0
 800c164:	001a      	movs	r2, r3
 800c166:	3701      	adds	r7, #1
 800c168:	606b      	str	r3, [r5, #4]
 800c16a:	7839      	ldrb	r1, [r7, #0]
 800c16c:	1c78      	adds	r0, r7, #1
 800c16e:	3930      	subs	r1, #48	; 0x30
 800c170:	4684      	mov	ip, r0
 800c172:	2909      	cmp	r1, #9
 800c174:	d903      	bls.n	800c17e <_vfiprintf_r+0x1fe>
 800c176:	2b00      	cmp	r3, #0
 800c178:	d0c3      	beq.n	800c102 <_vfiprintf_r+0x182>
 800c17a:	9209      	str	r2, [sp, #36]	; 0x24
 800c17c:	e7c1      	b.n	800c102 <_vfiprintf_r+0x182>
 800c17e:	230a      	movs	r3, #10
 800c180:	435a      	muls	r2, r3
 800c182:	4667      	mov	r7, ip
 800c184:	1852      	adds	r2, r2, r1
 800c186:	3b09      	subs	r3, #9
 800c188:	e7ef      	b.n	800c16a <_vfiprintf_r+0x1ea>
 800c18a:	ab07      	add	r3, sp, #28
 800c18c:	9300      	str	r3, [sp, #0]
 800c18e:	0022      	movs	r2, r4
 800c190:	0029      	movs	r1, r5
 800c192:	0030      	movs	r0, r6
 800c194:	4b16      	ldr	r3, [pc, #88]	; (800c1f0 <_vfiprintf_r+0x270>)
 800c196:	f7fb ffa7 	bl	80080e8 <_printf_float>
 800c19a:	9004      	str	r0, [sp, #16]
 800c19c:	9b04      	ldr	r3, [sp, #16]
 800c19e:	3301      	adds	r3, #1
 800c1a0:	d1d1      	bne.n	800c146 <_vfiprintf_r+0x1c6>
 800c1a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c1a4:	07db      	lsls	r3, r3, #31
 800c1a6:	d405      	bmi.n	800c1b4 <_vfiprintf_r+0x234>
 800c1a8:	89a3      	ldrh	r3, [r4, #12]
 800c1aa:	059b      	lsls	r3, r3, #22
 800c1ac:	d402      	bmi.n	800c1b4 <_vfiprintf_r+0x234>
 800c1ae:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c1b0:	f7fe ffaa 	bl	800b108 <__retarget_lock_release_recursive>
 800c1b4:	89a3      	ldrh	r3, [r4, #12]
 800c1b6:	065b      	lsls	r3, r3, #25
 800c1b8:	d500      	bpl.n	800c1bc <_vfiprintf_r+0x23c>
 800c1ba:	e70a      	b.n	800bfd2 <_vfiprintf_r+0x52>
 800c1bc:	980d      	ldr	r0, [sp, #52]	; 0x34
 800c1be:	e70a      	b.n	800bfd6 <_vfiprintf_r+0x56>
 800c1c0:	ab07      	add	r3, sp, #28
 800c1c2:	9300      	str	r3, [sp, #0]
 800c1c4:	0022      	movs	r2, r4
 800c1c6:	0029      	movs	r1, r5
 800c1c8:	0030      	movs	r0, r6
 800c1ca:	4b09      	ldr	r3, [pc, #36]	; (800c1f0 <_vfiprintf_r+0x270>)
 800c1cc:	f7fc fa4a 	bl	8008664 <_printf_i>
 800c1d0:	e7e3      	b.n	800c19a <_vfiprintf_r+0x21a>
 800c1d2:	46c0      	nop			; (mov r8, r8)
 800c1d4:	0800d5d0 	.word	0x0800d5d0
 800c1d8:	0800d5f0 	.word	0x0800d5f0
 800c1dc:	0800d5b0 	.word	0x0800d5b0
 800c1e0:	0800d7ec 	.word	0x0800d7ec
 800c1e4:	0800d7f2 	.word	0x0800d7f2
 800c1e8:	0800d7f6 	.word	0x0800d7f6
 800c1ec:	080080e9 	.word	0x080080e9
 800c1f0:	0800bf5b 	.word	0x0800bf5b

0800c1f4 <nan>:
 800c1f4:	2000      	movs	r0, #0
 800c1f6:	4901      	ldr	r1, [pc, #4]	; (800c1fc <nan+0x8>)
 800c1f8:	4770      	bx	lr
 800c1fa:	46c0      	nop			; (mov r8, r8)
 800c1fc:	7ff80000 	.word	0x7ff80000

0800c200 <_sbrk_r>:
 800c200:	2300      	movs	r3, #0
 800c202:	b570      	push	{r4, r5, r6, lr}
 800c204:	4d06      	ldr	r5, [pc, #24]	; (800c220 <_sbrk_r+0x20>)
 800c206:	0004      	movs	r4, r0
 800c208:	0008      	movs	r0, r1
 800c20a:	602b      	str	r3, [r5, #0]
 800c20c:	f7f6 ff1a 	bl	8003044 <_sbrk>
 800c210:	1c43      	adds	r3, r0, #1
 800c212:	d103      	bne.n	800c21c <_sbrk_r+0x1c>
 800c214:	682b      	ldr	r3, [r5, #0]
 800c216:	2b00      	cmp	r3, #0
 800c218:	d000      	beq.n	800c21c <_sbrk_r+0x1c>
 800c21a:	6023      	str	r3, [r4, #0]
 800c21c:	bd70      	pop	{r4, r5, r6, pc}
 800c21e:	46c0      	nop			; (mov r8, r8)
 800c220:	200003b8 	.word	0x200003b8

0800c224 <__sread>:
 800c224:	b570      	push	{r4, r5, r6, lr}
 800c226:	000c      	movs	r4, r1
 800c228:	250e      	movs	r5, #14
 800c22a:	5f49      	ldrsh	r1, [r1, r5]
 800c22c:	f000 fb1e 	bl	800c86c <_read_r>
 800c230:	2800      	cmp	r0, #0
 800c232:	db03      	blt.n	800c23c <__sread+0x18>
 800c234:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800c236:	181b      	adds	r3, r3, r0
 800c238:	6563      	str	r3, [r4, #84]	; 0x54
 800c23a:	bd70      	pop	{r4, r5, r6, pc}
 800c23c:	89a3      	ldrh	r3, [r4, #12]
 800c23e:	4a02      	ldr	r2, [pc, #8]	; (800c248 <__sread+0x24>)
 800c240:	4013      	ands	r3, r2
 800c242:	81a3      	strh	r3, [r4, #12]
 800c244:	e7f9      	b.n	800c23a <__sread+0x16>
 800c246:	46c0      	nop			; (mov r8, r8)
 800c248:	ffffefff 	.word	0xffffefff

0800c24c <__swrite>:
 800c24c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c24e:	001f      	movs	r7, r3
 800c250:	898b      	ldrh	r3, [r1, #12]
 800c252:	0005      	movs	r5, r0
 800c254:	000c      	movs	r4, r1
 800c256:	0016      	movs	r6, r2
 800c258:	05db      	lsls	r3, r3, #23
 800c25a:	d505      	bpl.n	800c268 <__swrite+0x1c>
 800c25c:	230e      	movs	r3, #14
 800c25e:	5ec9      	ldrsh	r1, [r1, r3]
 800c260:	2200      	movs	r2, #0
 800c262:	2302      	movs	r3, #2
 800c264:	f000 fa38 	bl	800c6d8 <_lseek_r>
 800c268:	89a3      	ldrh	r3, [r4, #12]
 800c26a:	4a05      	ldr	r2, [pc, #20]	; (800c280 <__swrite+0x34>)
 800c26c:	0028      	movs	r0, r5
 800c26e:	4013      	ands	r3, r2
 800c270:	81a3      	strh	r3, [r4, #12]
 800c272:	0032      	movs	r2, r6
 800c274:	230e      	movs	r3, #14
 800c276:	5ee1      	ldrsh	r1, [r4, r3]
 800c278:	003b      	movs	r3, r7
 800c27a:	f000 f895 	bl	800c3a8 <_write_r>
 800c27e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c280:	ffffefff 	.word	0xffffefff

0800c284 <__sseek>:
 800c284:	b570      	push	{r4, r5, r6, lr}
 800c286:	000c      	movs	r4, r1
 800c288:	250e      	movs	r5, #14
 800c28a:	5f49      	ldrsh	r1, [r1, r5]
 800c28c:	f000 fa24 	bl	800c6d8 <_lseek_r>
 800c290:	89a3      	ldrh	r3, [r4, #12]
 800c292:	1c42      	adds	r2, r0, #1
 800c294:	d103      	bne.n	800c29e <__sseek+0x1a>
 800c296:	4a05      	ldr	r2, [pc, #20]	; (800c2ac <__sseek+0x28>)
 800c298:	4013      	ands	r3, r2
 800c29a:	81a3      	strh	r3, [r4, #12]
 800c29c:	bd70      	pop	{r4, r5, r6, pc}
 800c29e:	2280      	movs	r2, #128	; 0x80
 800c2a0:	0152      	lsls	r2, r2, #5
 800c2a2:	4313      	orrs	r3, r2
 800c2a4:	81a3      	strh	r3, [r4, #12]
 800c2a6:	6560      	str	r0, [r4, #84]	; 0x54
 800c2a8:	e7f8      	b.n	800c29c <__sseek+0x18>
 800c2aa:	46c0      	nop			; (mov r8, r8)
 800c2ac:	ffffefff 	.word	0xffffefff

0800c2b0 <__sclose>:
 800c2b0:	b510      	push	{r4, lr}
 800c2b2:	230e      	movs	r3, #14
 800c2b4:	5ec9      	ldrsh	r1, [r1, r3]
 800c2b6:	f000 f921 	bl	800c4fc <_close_r>
 800c2ba:	bd10      	pop	{r4, pc}

0800c2bc <strncmp>:
 800c2bc:	b530      	push	{r4, r5, lr}
 800c2be:	0005      	movs	r5, r0
 800c2c0:	1e10      	subs	r0, r2, #0
 800c2c2:	d00b      	beq.n	800c2dc <strncmp+0x20>
 800c2c4:	2400      	movs	r4, #0
 800c2c6:	3a01      	subs	r2, #1
 800c2c8:	5d2b      	ldrb	r3, [r5, r4]
 800c2ca:	5d08      	ldrb	r0, [r1, r4]
 800c2cc:	4283      	cmp	r3, r0
 800c2ce:	d104      	bne.n	800c2da <strncmp+0x1e>
 800c2d0:	4294      	cmp	r4, r2
 800c2d2:	d002      	beq.n	800c2da <strncmp+0x1e>
 800c2d4:	3401      	adds	r4, #1
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d1f6      	bne.n	800c2c8 <strncmp+0xc>
 800c2da:	1a18      	subs	r0, r3, r0
 800c2dc:	bd30      	pop	{r4, r5, pc}
	...

0800c2e0 <__swbuf_r>:
 800c2e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2e2:	0005      	movs	r5, r0
 800c2e4:	000e      	movs	r6, r1
 800c2e6:	0014      	movs	r4, r2
 800c2e8:	2800      	cmp	r0, #0
 800c2ea:	d004      	beq.n	800c2f6 <__swbuf_r+0x16>
 800c2ec:	6983      	ldr	r3, [r0, #24]
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d101      	bne.n	800c2f6 <__swbuf_r+0x16>
 800c2f2:	f7fe faf1 	bl	800a8d8 <__sinit>
 800c2f6:	4b22      	ldr	r3, [pc, #136]	; (800c380 <__swbuf_r+0xa0>)
 800c2f8:	429c      	cmp	r4, r3
 800c2fa:	d12e      	bne.n	800c35a <__swbuf_r+0x7a>
 800c2fc:	686c      	ldr	r4, [r5, #4]
 800c2fe:	69a3      	ldr	r3, [r4, #24]
 800c300:	60a3      	str	r3, [r4, #8]
 800c302:	89a3      	ldrh	r3, [r4, #12]
 800c304:	071b      	lsls	r3, r3, #28
 800c306:	d532      	bpl.n	800c36e <__swbuf_r+0x8e>
 800c308:	6923      	ldr	r3, [r4, #16]
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d02f      	beq.n	800c36e <__swbuf_r+0x8e>
 800c30e:	6823      	ldr	r3, [r4, #0]
 800c310:	6922      	ldr	r2, [r4, #16]
 800c312:	b2f7      	uxtb	r7, r6
 800c314:	1a98      	subs	r0, r3, r2
 800c316:	6963      	ldr	r3, [r4, #20]
 800c318:	b2f6      	uxtb	r6, r6
 800c31a:	4283      	cmp	r3, r0
 800c31c:	dc05      	bgt.n	800c32a <__swbuf_r+0x4a>
 800c31e:	0021      	movs	r1, r4
 800c320:	0028      	movs	r0, r5
 800c322:	f000 f989 	bl	800c638 <_fflush_r>
 800c326:	2800      	cmp	r0, #0
 800c328:	d127      	bne.n	800c37a <__swbuf_r+0x9a>
 800c32a:	68a3      	ldr	r3, [r4, #8]
 800c32c:	3001      	adds	r0, #1
 800c32e:	3b01      	subs	r3, #1
 800c330:	60a3      	str	r3, [r4, #8]
 800c332:	6823      	ldr	r3, [r4, #0]
 800c334:	1c5a      	adds	r2, r3, #1
 800c336:	6022      	str	r2, [r4, #0]
 800c338:	701f      	strb	r7, [r3, #0]
 800c33a:	6963      	ldr	r3, [r4, #20]
 800c33c:	4283      	cmp	r3, r0
 800c33e:	d004      	beq.n	800c34a <__swbuf_r+0x6a>
 800c340:	89a3      	ldrh	r3, [r4, #12]
 800c342:	07db      	lsls	r3, r3, #31
 800c344:	d507      	bpl.n	800c356 <__swbuf_r+0x76>
 800c346:	2e0a      	cmp	r6, #10
 800c348:	d105      	bne.n	800c356 <__swbuf_r+0x76>
 800c34a:	0021      	movs	r1, r4
 800c34c:	0028      	movs	r0, r5
 800c34e:	f000 f973 	bl	800c638 <_fflush_r>
 800c352:	2800      	cmp	r0, #0
 800c354:	d111      	bne.n	800c37a <__swbuf_r+0x9a>
 800c356:	0030      	movs	r0, r6
 800c358:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c35a:	4b0a      	ldr	r3, [pc, #40]	; (800c384 <__swbuf_r+0xa4>)
 800c35c:	429c      	cmp	r4, r3
 800c35e:	d101      	bne.n	800c364 <__swbuf_r+0x84>
 800c360:	68ac      	ldr	r4, [r5, #8]
 800c362:	e7cc      	b.n	800c2fe <__swbuf_r+0x1e>
 800c364:	4b08      	ldr	r3, [pc, #32]	; (800c388 <__swbuf_r+0xa8>)
 800c366:	429c      	cmp	r4, r3
 800c368:	d1c9      	bne.n	800c2fe <__swbuf_r+0x1e>
 800c36a:	68ec      	ldr	r4, [r5, #12]
 800c36c:	e7c7      	b.n	800c2fe <__swbuf_r+0x1e>
 800c36e:	0021      	movs	r1, r4
 800c370:	0028      	movs	r0, r5
 800c372:	f000 f82d 	bl	800c3d0 <__swsetup_r>
 800c376:	2800      	cmp	r0, #0
 800c378:	d0c9      	beq.n	800c30e <__swbuf_r+0x2e>
 800c37a:	2601      	movs	r6, #1
 800c37c:	4276      	negs	r6, r6
 800c37e:	e7ea      	b.n	800c356 <__swbuf_r+0x76>
 800c380:	0800d5d0 	.word	0x0800d5d0
 800c384:	0800d5f0 	.word	0x0800d5f0
 800c388:	0800d5b0 	.word	0x0800d5b0

0800c38c <__ascii_wctomb>:
 800c38c:	0003      	movs	r3, r0
 800c38e:	1e08      	subs	r0, r1, #0
 800c390:	d005      	beq.n	800c39e <__ascii_wctomb+0x12>
 800c392:	2aff      	cmp	r2, #255	; 0xff
 800c394:	d904      	bls.n	800c3a0 <__ascii_wctomb+0x14>
 800c396:	228a      	movs	r2, #138	; 0x8a
 800c398:	2001      	movs	r0, #1
 800c39a:	601a      	str	r2, [r3, #0]
 800c39c:	4240      	negs	r0, r0
 800c39e:	4770      	bx	lr
 800c3a0:	2001      	movs	r0, #1
 800c3a2:	700a      	strb	r2, [r1, #0]
 800c3a4:	e7fb      	b.n	800c39e <__ascii_wctomb+0x12>
	...

0800c3a8 <_write_r>:
 800c3a8:	b570      	push	{r4, r5, r6, lr}
 800c3aa:	0004      	movs	r4, r0
 800c3ac:	0008      	movs	r0, r1
 800c3ae:	0011      	movs	r1, r2
 800c3b0:	001a      	movs	r2, r3
 800c3b2:	2300      	movs	r3, #0
 800c3b4:	4d05      	ldr	r5, [pc, #20]	; (800c3cc <_write_r+0x24>)
 800c3b6:	602b      	str	r3, [r5, #0]
 800c3b8:	f7f6 fdfb 	bl	8002fb2 <_write>
 800c3bc:	1c43      	adds	r3, r0, #1
 800c3be:	d103      	bne.n	800c3c8 <_write_r+0x20>
 800c3c0:	682b      	ldr	r3, [r5, #0]
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d000      	beq.n	800c3c8 <_write_r+0x20>
 800c3c6:	6023      	str	r3, [r4, #0]
 800c3c8:	bd70      	pop	{r4, r5, r6, pc}
 800c3ca:	46c0      	nop			; (mov r8, r8)
 800c3cc:	200003b8 	.word	0x200003b8

0800c3d0 <__swsetup_r>:
 800c3d0:	4b37      	ldr	r3, [pc, #220]	; (800c4b0 <__swsetup_r+0xe0>)
 800c3d2:	b570      	push	{r4, r5, r6, lr}
 800c3d4:	681d      	ldr	r5, [r3, #0]
 800c3d6:	0006      	movs	r6, r0
 800c3d8:	000c      	movs	r4, r1
 800c3da:	2d00      	cmp	r5, #0
 800c3dc:	d005      	beq.n	800c3ea <__swsetup_r+0x1a>
 800c3de:	69ab      	ldr	r3, [r5, #24]
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d102      	bne.n	800c3ea <__swsetup_r+0x1a>
 800c3e4:	0028      	movs	r0, r5
 800c3e6:	f7fe fa77 	bl	800a8d8 <__sinit>
 800c3ea:	4b32      	ldr	r3, [pc, #200]	; (800c4b4 <__swsetup_r+0xe4>)
 800c3ec:	429c      	cmp	r4, r3
 800c3ee:	d10f      	bne.n	800c410 <__swsetup_r+0x40>
 800c3f0:	686c      	ldr	r4, [r5, #4]
 800c3f2:	230c      	movs	r3, #12
 800c3f4:	5ee2      	ldrsh	r2, [r4, r3]
 800c3f6:	b293      	uxth	r3, r2
 800c3f8:	0711      	lsls	r1, r2, #28
 800c3fa:	d42d      	bmi.n	800c458 <__swsetup_r+0x88>
 800c3fc:	06d9      	lsls	r1, r3, #27
 800c3fe:	d411      	bmi.n	800c424 <__swsetup_r+0x54>
 800c400:	2309      	movs	r3, #9
 800c402:	2001      	movs	r0, #1
 800c404:	6033      	str	r3, [r6, #0]
 800c406:	3337      	adds	r3, #55	; 0x37
 800c408:	4313      	orrs	r3, r2
 800c40a:	81a3      	strh	r3, [r4, #12]
 800c40c:	4240      	negs	r0, r0
 800c40e:	bd70      	pop	{r4, r5, r6, pc}
 800c410:	4b29      	ldr	r3, [pc, #164]	; (800c4b8 <__swsetup_r+0xe8>)
 800c412:	429c      	cmp	r4, r3
 800c414:	d101      	bne.n	800c41a <__swsetup_r+0x4a>
 800c416:	68ac      	ldr	r4, [r5, #8]
 800c418:	e7eb      	b.n	800c3f2 <__swsetup_r+0x22>
 800c41a:	4b28      	ldr	r3, [pc, #160]	; (800c4bc <__swsetup_r+0xec>)
 800c41c:	429c      	cmp	r4, r3
 800c41e:	d1e8      	bne.n	800c3f2 <__swsetup_r+0x22>
 800c420:	68ec      	ldr	r4, [r5, #12]
 800c422:	e7e6      	b.n	800c3f2 <__swsetup_r+0x22>
 800c424:	075b      	lsls	r3, r3, #29
 800c426:	d513      	bpl.n	800c450 <__swsetup_r+0x80>
 800c428:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c42a:	2900      	cmp	r1, #0
 800c42c:	d008      	beq.n	800c440 <__swsetup_r+0x70>
 800c42e:	0023      	movs	r3, r4
 800c430:	3344      	adds	r3, #68	; 0x44
 800c432:	4299      	cmp	r1, r3
 800c434:	d002      	beq.n	800c43c <__swsetup_r+0x6c>
 800c436:	0030      	movs	r0, r6
 800c438:	f7ff fb70 	bl	800bb1c <_free_r>
 800c43c:	2300      	movs	r3, #0
 800c43e:	6363      	str	r3, [r4, #52]	; 0x34
 800c440:	2224      	movs	r2, #36	; 0x24
 800c442:	89a3      	ldrh	r3, [r4, #12]
 800c444:	4393      	bics	r3, r2
 800c446:	81a3      	strh	r3, [r4, #12]
 800c448:	2300      	movs	r3, #0
 800c44a:	6063      	str	r3, [r4, #4]
 800c44c:	6923      	ldr	r3, [r4, #16]
 800c44e:	6023      	str	r3, [r4, #0]
 800c450:	2308      	movs	r3, #8
 800c452:	89a2      	ldrh	r2, [r4, #12]
 800c454:	4313      	orrs	r3, r2
 800c456:	81a3      	strh	r3, [r4, #12]
 800c458:	6923      	ldr	r3, [r4, #16]
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d10b      	bne.n	800c476 <__swsetup_r+0xa6>
 800c45e:	21a0      	movs	r1, #160	; 0xa0
 800c460:	2280      	movs	r2, #128	; 0x80
 800c462:	89a3      	ldrh	r3, [r4, #12]
 800c464:	0089      	lsls	r1, r1, #2
 800c466:	0092      	lsls	r2, r2, #2
 800c468:	400b      	ands	r3, r1
 800c46a:	4293      	cmp	r3, r2
 800c46c:	d003      	beq.n	800c476 <__swsetup_r+0xa6>
 800c46e:	0021      	movs	r1, r4
 800c470:	0030      	movs	r0, r6
 800c472:	f000 f96d 	bl	800c750 <__smakebuf_r>
 800c476:	220c      	movs	r2, #12
 800c478:	5ea3      	ldrsh	r3, [r4, r2]
 800c47a:	2001      	movs	r0, #1
 800c47c:	001a      	movs	r2, r3
 800c47e:	b299      	uxth	r1, r3
 800c480:	4002      	ands	r2, r0
 800c482:	4203      	tst	r3, r0
 800c484:	d00f      	beq.n	800c4a6 <__swsetup_r+0xd6>
 800c486:	2200      	movs	r2, #0
 800c488:	60a2      	str	r2, [r4, #8]
 800c48a:	6962      	ldr	r2, [r4, #20]
 800c48c:	4252      	negs	r2, r2
 800c48e:	61a2      	str	r2, [r4, #24]
 800c490:	2000      	movs	r0, #0
 800c492:	6922      	ldr	r2, [r4, #16]
 800c494:	4282      	cmp	r2, r0
 800c496:	d1ba      	bne.n	800c40e <__swsetup_r+0x3e>
 800c498:	060a      	lsls	r2, r1, #24
 800c49a:	d5b8      	bpl.n	800c40e <__swsetup_r+0x3e>
 800c49c:	2240      	movs	r2, #64	; 0x40
 800c49e:	4313      	orrs	r3, r2
 800c4a0:	81a3      	strh	r3, [r4, #12]
 800c4a2:	3801      	subs	r0, #1
 800c4a4:	e7b3      	b.n	800c40e <__swsetup_r+0x3e>
 800c4a6:	0788      	lsls	r0, r1, #30
 800c4a8:	d400      	bmi.n	800c4ac <__swsetup_r+0xdc>
 800c4aa:	6962      	ldr	r2, [r4, #20]
 800c4ac:	60a2      	str	r2, [r4, #8]
 800c4ae:	e7ef      	b.n	800c490 <__swsetup_r+0xc0>
 800c4b0:	20000010 	.word	0x20000010
 800c4b4:	0800d5d0 	.word	0x0800d5d0
 800c4b8:	0800d5f0 	.word	0x0800d5f0
 800c4bc:	0800d5b0 	.word	0x0800d5b0

0800c4c0 <__assert_func>:
 800c4c0:	b530      	push	{r4, r5, lr}
 800c4c2:	0014      	movs	r4, r2
 800c4c4:	001a      	movs	r2, r3
 800c4c6:	4b09      	ldr	r3, [pc, #36]	; (800c4ec <__assert_func+0x2c>)
 800c4c8:	0005      	movs	r5, r0
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	b085      	sub	sp, #20
 800c4ce:	68d8      	ldr	r0, [r3, #12]
 800c4d0:	4b07      	ldr	r3, [pc, #28]	; (800c4f0 <__assert_func+0x30>)
 800c4d2:	2c00      	cmp	r4, #0
 800c4d4:	d101      	bne.n	800c4da <__assert_func+0x1a>
 800c4d6:	4b07      	ldr	r3, [pc, #28]	; (800c4f4 <__assert_func+0x34>)
 800c4d8:	001c      	movs	r4, r3
 800c4da:	9301      	str	r3, [sp, #4]
 800c4dc:	9100      	str	r1, [sp, #0]
 800c4de:	002b      	movs	r3, r5
 800c4e0:	4905      	ldr	r1, [pc, #20]	; (800c4f8 <__assert_func+0x38>)
 800c4e2:	9402      	str	r4, [sp, #8]
 800c4e4:	f000 f8e8 	bl	800c6b8 <fiprintf>
 800c4e8:	f000 f9d4 	bl	800c894 <abort>
 800c4ec:	20000010 	.word	0x20000010
 800c4f0:	0800d7fd 	.word	0x0800d7fd
 800c4f4:	0800d838 	.word	0x0800d838
 800c4f8:	0800d80a 	.word	0x0800d80a

0800c4fc <_close_r>:
 800c4fc:	2300      	movs	r3, #0
 800c4fe:	b570      	push	{r4, r5, r6, lr}
 800c500:	4d06      	ldr	r5, [pc, #24]	; (800c51c <_close_r+0x20>)
 800c502:	0004      	movs	r4, r0
 800c504:	0008      	movs	r0, r1
 800c506:	602b      	str	r3, [r5, #0]
 800c508:	f7f6 fd6f 	bl	8002fea <_close>
 800c50c:	1c43      	adds	r3, r0, #1
 800c50e:	d103      	bne.n	800c518 <_close_r+0x1c>
 800c510:	682b      	ldr	r3, [r5, #0]
 800c512:	2b00      	cmp	r3, #0
 800c514:	d000      	beq.n	800c518 <_close_r+0x1c>
 800c516:	6023      	str	r3, [r4, #0]
 800c518:	bd70      	pop	{r4, r5, r6, pc}
 800c51a:	46c0      	nop			; (mov r8, r8)
 800c51c:	200003b8 	.word	0x200003b8

0800c520 <__sflush_r>:
 800c520:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c522:	898b      	ldrh	r3, [r1, #12]
 800c524:	0005      	movs	r5, r0
 800c526:	000c      	movs	r4, r1
 800c528:	071a      	lsls	r2, r3, #28
 800c52a:	d45f      	bmi.n	800c5ec <__sflush_r+0xcc>
 800c52c:	684a      	ldr	r2, [r1, #4]
 800c52e:	2a00      	cmp	r2, #0
 800c530:	dc04      	bgt.n	800c53c <__sflush_r+0x1c>
 800c532:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800c534:	2a00      	cmp	r2, #0
 800c536:	dc01      	bgt.n	800c53c <__sflush_r+0x1c>
 800c538:	2000      	movs	r0, #0
 800c53a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c53c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800c53e:	2f00      	cmp	r7, #0
 800c540:	d0fa      	beq.n	800c538 <__sflush_r+0x18>
 800c542:	2200      	movs	r2, #0
 800c544:	2180      	movs	r1, #128	; 0x80
 800c546:	682e      	ldr	r6, [r5, #0]
 800c548:	602a      	str	r2, [r5, #0]
 800c54a:	001a      	movs	r2, r3
 800c54c:	0149      	lsls	r1, r1, #5
 800c54e:	400a      	ands	r2, r1
 800c550:	420b      	tst	r3, r1
 800c552:	d034      	beq.n	800c5be <__sflush_r+0x9e>
 800c554:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c556:	89a3      	ldrh	r3, [r4, #12]
 800c558:	075b      	lsls	r3, r3, #29
 800c55a:	d506      	bpl.n	800c56a <__sflush_r+0x4a>
 800c55c:	6863      	ldr	r3, [r4, #4]
 800c55e:	1ac0      	subs	r0, r0, r3
 800c560:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c562:	2b00      	cmp	r3, #0
 800c564:	d001      	beq.n	800c56a <__sflush_r+0x4a>
 800c566:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c568:	1ac0      	subs	r0, r0, r3
 800c56a:	0002      	movs	r2, r0
 800c56c:	6a21      	ldr	r1, [r4, #32]
 800c56e:	2300      	movs	r3, #0
 800c570:	0028      	movs	r0, r5
 800c572:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800c574:	47b8      	blx	r7
 800c576:	89a1      	ldrh	r1, [r4, #12]
 800c578:	1c43      	adds	r3, r0, #1
 800c57a:	d106      	bne.n	800c58a <__sflush_r+0x6a>
 800c57c:	682b      	ldr	r3, [r5, #0]
 800c57e:	2b1d      	cmp	r3, #29
 800c580:	d831      	bhi.n	800c5e6 <__sflush_r+0xc6>
 800c582:	4a2c      	ldr	r2, [pc, #176]	; (800c634 <__sflush_r+0x114>)
 800c584:	40da      	lsrs	r2, r3
 800c586:	07d3      	lsls	r3, r2, #31
 800c588:	d52d      	bpl.n	800c5e6 <__sflush_r+0xc6>
 800c58a:	2300      	movs	r3, #0
 800c58c:	6063      	str	r3, [r4, #4]
 800c58e:	6923      	ldr	r3, [r4, #16]
 800c590:	6023      	str	r3, [r4, #0]
 800c592:	04cb      	lsls	r3, r1, #19
 800c594:	d505      	bpl.n	800c5a2 <__sflush_r+0x82>
 800c596:	1c43      	adds	r3, r0, #1
 800c598:	d102      	bne.n	800c5a0 <__sflush_r+0x80>
 800c59a:	682b      	ldr	r3, [r5, #0]
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d100      	bne.n	800c5a2 <__sflush_r+0x82>
 800c5a0:	6560      	str	r0, [r4, #84]	; 0x54
 800c5a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c5a4:	602e      	str	r6, [r5, #0]
 800c5a6:	2900      	cmp	r1, #0
 800c5a8:	d0c6      	beq.n	800c538 <__sflush_r+0x18>
 800c5aa:	0023      	movs	r3, r4
 800c5ac:	3344      	adds	r3, #68	; 0x44
 800c5ae:	4299      	cmp	r1, r3
 800c5b0:	d002      	beq.n	800c5b8 <__sflush_r+0x98>
 800c5b2:	0028      	movs	r0, r5
 800c5b4:	f7ff fab2 	bl	800bb1c <_free_r>
 800c5b8:	2000      	movs	r0, #0
 800c5ba:	6360      	str	r0, [r4, #52]	; 0x34
 800c5bc:	e7bd      	b.n	800c53a <__sflush_r+0x1a>
 800c5be:	2301      	movs	r3, #1
 800c5c0:	0028      	movs	r0, r5
 800c5c2:	6a21      	ldr	r1, [r4, #32]
 800c5c4:	47b8      	blx	r7
 800c5c6:	1c43      	adds	r3, r0, #1
 800c5c8:	d1c5      	bne.n	800c556 <__sflush_r+0x36>
 800c5ca:	682b      	ldr	r3, [r5, #0]
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d0c2      	beq.n	800c556 <__sflush_r+0x36>
 800c5d0:	2b1d      	cmp	r3, #29
 800c5d2:	d001      	beq.n	800c5d8 <__sflush_r+0xb8>
 800c5d4:	2b16      	cmp	r3, #22
 800c5d6:	d101      	bne.n	800c5dc <__sflush_r+0xbc>
 800c5d8:	602e      	str	r6, [r5, #0]
 800c5da:	e7ad      	b.n	800c538 <__sflush_r+0x18>
 800c5dc:	2340      	movs	r3, #64	; 0x40
 800c5de:	89a2      	ldrh	r2, [r4, #12]
 800c5e0:	4313      	orrs	r3, r2
 800c5e2:	81a3      	strh	r3, [r4, #12]
 800c5e4:	e7a9      	b.n	800c53a <__sflush_r+0x1a>
 800c5e6:	2340      	movs	r3, #64	; 0x40
 800c5e8:	430b      	orrs	r3, r1
 800c5ea:	e7fa      	b.n	800c5e2 <__sflush_r+0xc2>
 800c5ec:	690f      	ldr	r7, [r1, #16]
 800c5ee:	2f00      	cmp	r7, #0
 800c5f0:	d0a2      	beq.n	800c538 <__sflush_r+0x18>
 800c5f2:	680a      	ldr	r2, [r1, #0]
 800c5f4:	600f      	str	r7, [r1, #0]
 800c5f6:	1bd2      	subs	r2, r2, r7
 800c5f8:	9201      	str	r2, [sp, #4]
 800c5fa:	2200      	movs	r2, #0
 800c5fc:	079b      	lsls	r3, r3, #30
 800c5fe:	d100      	bne.n	800c602 <__sflush_r+0xe2>
 800c600:	694a      	ldr	r2, [r1, #20]
 800c602:	60a2      	str	r2, [r4, #8]
 800c604:	9b01      	ldr	r3, [sp, #4]
 800c606:	2b00      	cmp	r3, #0
 800c608:	dc00      	bgt.n	800c60c <__sflush_r+0xec>
 800c60a:	e795      	b.n	800c538 <__sflush_r+0x18>
 800c60c:	003a      	movs	r2, r7
 800c60e:	0028      	movs	r0, r5
 800c610:	9b01      	ldr	r3, [sp, #4]
 800c612:	6a21      	ldr	r1, [r4, #32]
 800c614:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c616:	47b0      	blx	r6
 800c618:	2800      	cmp	r0, #0
 800c61a:	dc06      	bgt.n	800c62a <__sflush_r+0x10a>
 800c61c:	2340      	movs	r3, #64	; 0x40
 800c61e:	2001      	movs	r0, #1
 800c620:	89a2      	ldrh	r2, [r4, #12]
 800c622:	4240      	negs	r0, r0
 800c624:	4313      	orrs	r3, r2
 800c626:	81a3      	strh	r3, [r4, #12]
 800c628:	e787      	b.n	800c53a <__sflush_r+0x1a>
 800c62a:	9b01      	ldr	r3, [sp, #4]
 800c62c:	183f      	adds	r7, r7, r0
 800c62e:	1a1b      	subs	r3, r3, r0
 800c630:	9301      	str	r3, [sp, #4]
 800c632:	e7e7      	b.n	800c604 <__sflush_r+0xe4>
 800c634:	20400001 	.word	0x20400001

0800c638 <_fflush_r>:
 800c638:	690b      	ldr	r3, [r1, #16]
 800c63a:	b570      	push	{r4, r5, r6, lr}
 800c63c:	0005      	movs	r5, r0
 800c63e:	000c      	movs	r4, r1
 800c640:	2b00      	cmp	r3, #0
 800c642:	d102      	bne.n	800c64a <_fflush_r+0x12>
 800c644:	2500      	movs	r5, #0
 800c646:	0028      	movs	r0, r5
 800c648:	bd70      	pop	{r4, r5, r6, pc}
 800c64a:	2800      	cmp	r0, #0
 800c64c:	d004      	beq.n	800c658 <_fflush_r+0x20>
 800c64e:	6983      	ldr	r3, [r0, #24]
 800c650:	2b00      	cmp	r3, #0
 800c652:	d101      	bne.n	800c658 <_fflush_r+0x20>
 800c654:	f7fe f940 	bl	800a8d8 <__sinit>
 800c658:	4b14      	ldr	r3, [pc, #80]	; (800c6ac <_fflush_r+0x74>)
 800c65a:	429c      	cmp	r4, r3
 800c65c:	d11b      	bne.n	800c696 <_fflush_r+0x5e>
 800c65e:	686c      	ldr	r4, [r5, #4]
 800c660:	220c      	movs	r2, #12
 800c662:	5ea3      	ldrsh	r3, [r4, r2]
 800c664:	2b00      	cmp	r3, #0
 800c666:	d0ed      	beq.n	800c644 <_fflush_r+0xc>
 800c668:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c66a:	07d2      	lsls	r2, r2, #31
 800c66c:	d404      	bmi.n	800c678 <_fflush_r+0x40>
 800c66e:	059b      	lsls	r3, r3, #22
 800c670:	d402      	bmi.n	800c678 <_fflush_r+0x40>
 800c672:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c674:	f7fe fd47 	bl	800b106 <__retarget_lock_acquire_recursive>
 800c678:	0028      	movs	r0, r5
 800c67a:	0021      	movs	r1, r4
 800c67c:	f7ff ff50 	bl	800c520 <__sflush_r>
 800c680:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c682:	0005      	movs	r5, r0
 800c684:	07db      	lsls	r3, r3, #31
 800c686:	d4de      	bmi.n	800c646 <_fflush_r+0xe>
 800c688:	89a3      	ldrh	r3, [r4, #12]
 800c68a:	059b      	lsls	r3, r3, #22
 800c68c:	d4db      	bmi.n	800c646 <_fflush_r+0xe>
 800c68e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c690:	f7fe fd3a 	bl	800b108 <__retarget_lock_release_recursive>
 800c694:	e7d7      	b.n	800c646 <_fflush_r+0xe>
 800c696:	4b06      	ldr	r3, [pc, #24]	; (800c6b0 <_fflush_r+0x78>)
 800c698:	429c      	cmp	r4, r3
 800c69a:	d101      	bne.n	800c6a0 <_fflush_r+0x68>
 800c69c:	68ac      	ldr	r4, [r5, #8]
 800c69e:	e7df      	b.n	800c660 <_fflush_r+0x28>
 800c6a0:	4b04      	ldr	r3, [pc, #16]	; (800c6b4 <_fflush_r+0x7c>)
 800c6a2:	429c      	cmp	r4, r3
 800c6a4:	d1dc      	bne.n	800c660 <_fflush_r+0x28>
 800c6a6:	68ec      	ldr	r4, [r5, #12]
 800c6a8:	e7da      	b.n	800c660 <_fflush_r+0x28>
 800c6aa:	46c0      	nop			; (mov r8, r8)
 800c6ac:	0800d5d0 	.word	0x0800d5d0
 800c6b0:	0800d5f0 	.word	0x0800d5f0
 800c6b4:	0800d5b0 	.word	0x0800d5b0

0800c6b8 <fiprintf>:
 800c6b8:	b40e      	push	{r1, r2, r3}
 800c6ba:	b503      	push	{r0, r1, lr}
 800c6bc:	0001      	movs	r1, r0
 800c6be:	ab03      	add	r3, sp, #12
 800c6c0:	4804      	ldr	r0, [pc, #16]	; (800c6d4 <fiprintf+0x1c>)
 800c6c2:	cb04      	ldmia	r3!, {r2}
 800c6c4:	6800      	ldr	r0, [r0, #0]
 800c6c6:	9301      	str	r3, [sp, #4]
 800c6c8:	f7ff fc5a 	bl	800bf80 <_vfiprintf_r>
 800c6cc:	b002      	add	sp, #8
 800c6ce:	bc08      	pop	{r3}
 800c6d0:	b003      	add	sp, #12
 800c6d2:	4718      	bx	r3
 800c6d4:	20000010 	.word	0x20000010

0800c6d8 <_lseek_r>:
 800c6d8:	b570      	push	{r4, r5, r6, lr}
 800c6da:	0004      	movs	r4, r0
 800c6dc:	0008      	movs	r0, r1
 800c6de:	0011      	movs	r1, r2
 800c6e0:	001a      	movs	r2, r3
 800c6e2:	2300      	movs	r3, #0
 800c6e4:	4d05      	ldr	r5, [pc, #20]	; (800c6fc <_lseek_r+0x24>)
 800c6e6:	602b      	str	r3, [r5, #0]
 800c6e8:	f7f6 fca0 	bl	800302c <_lseek>
 800c6ec:	1c43      	adds	r3, r0, #1
 800c6ee:	d103      	bne.n	800c6f8 <_lseek_r+0x20>
 800c6f0:	682b      	ldr	r3, [r5, #0]
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d000      	beq.n	800c6f8 <_lseek_r+0x20>
 800c6f6:	6023      	str	r3, [r4, #0]
 800c6f8:	bd70      	pop	{r4, r5, r6, pc}
 800c6fa:	46c0      	nop			; (mov r8, r8)
 800c6fc:	200003b8 	.word	0x200003b8

0800c700 <__swhatbuf_r>:
 800c700:	b570      	push	{r4, r5, r6, lr}
 800c702:	000e      	movs	r6, r1
 800c704:	001d      	movs	r5, r3
 800c706:	230e      	movs	r3, #14
 800c708:	5ec9      	ldrsh	r1, [r1, r3]
 800c70a:	0014      	movs	r4, r2
 800c70c:	b096      	sub	sp, #88	; 0x58
 800c70e:	2900      	cmp	r1, #0
 800c710:	da07      	bge.n	800c722 <__swhatbuf_r+0x22>
 800c712:	2300      	movs	r3, #0
 800c714:	602b      	str	r3, [r5, #0]
 800c716:	89b3      	ldrh	r3, [r6, #12]
 800c718:	061b      	lsls	r3, r3, #24
 800c71a:	d411      	bmi.n	800c740 <__swhatbuf_r+0x40>
 800c71c:	2380      	movs	r3, #128	; 0x80
 800c71e:	00db      	lsls	r3, r3, #3
 800c720:	e00f      	b.n	800c742 <__swhatbuf_r+0x42>
 800c722:	466a      	mov	r2, sp
 800c724:	f000 f8be 	bl	800c8a4 <_fstat_r>
 800c728:	2800      	cmp	r0, #0
 800c72a:	dbf2      	blt.n	800c712 <__swhatbuf_r+0x12>
 800c72c:	23f0      	movs	r3, #240	; 0xf0
 800c72e:	9901      	ldr	r1, [sp, #4]
 800c730:	021b      	lsls	r3, r3, #8
 800c732:	4019      	ands	r1, r3
 800c734:	4b05      	ldr	r3, [pc, #20]	; (800c74c <__swhatbuf_r+0x4c>)
 800c736:	18c9      	adds	r1, r1, r3
 800c738:	424b      	negs	r3, r1
 800c73a:	4159      	adcs	r1, r3
 800c73c:	6029      	str	r1, [r5, #0]
 800c73e:	e7ed      	b.n	800c71c <__swhatbuf_r+0x1c>
 800c740:	2340      	movs	r3, #64	; 0x40
 800c742:	2000      	movs	r0, #0
 800c744:	6023      	str	r3, [r4, #0]
 800c746:	b016      	add	sp, #88	; 0x58
 800c748:	bd70      	pop	{r4, r5, r6, pc}
 800c74a:	46c0      	nop			; (mov r8, r8)
 800c74c:	ffffe000 	.word	0xffffe000

0800c750 <__smakebuf_r>:
 800c750:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c752:	2602      	movs	r6, #2
 800c754:	898b      	ldrh	r3, [r1, #12]
 800c756:	0005      	movs	r5, r0
 800c758:	000c      	movs	r4, r1
 800c75a:	4233      	tst	r3, r6
 800c75c:	d006      	beq.n	800c76c <__smakebuf_r+0x1c>
 800c75e:	0023      	movs	r3, r4
 800c760:	3347      	adds	r3, #71	; 0x47
 800c762:	6023      	str	r3, [r4, #0]
 800c764:	6123      	str	r3, [r4, #16]
 800c766:	2301      	movs	r3, #1
 800c768:	6163      	str	r3, [r4, #20]
 800c76a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800c76c:	466a      	mov	r2, sp
 800c76e:	ab01      	add	r3, sp, #4
 800c770:	f7ff ffc6 	bl	800c700 <__swhatbuf_r>
 800c774:	9900      	ldr	r1, [sp, #0]
 800c776:	0007      	movs	r7, r0
 800c778:	0028      	movs	r0, r5
 800c77a:	f7ff fa19 	bl	800bbb0 <_malloc_r>
 800c77e:	2800      	cmp	r0, #0
 800c780:	d108      	bne.n	800c794 <__smakebuf_r+0x44>
 800c782:	220c      	movs	r2, #12
 800c784:	5ea3      	ldrsh	r3, [r4, r2]
 800c786:	059a      	lsls	r2, r3, #22
 800c788:	d4ef      	bmi.n	800c76a <__smakebuf_r+0x1a>
 800c78a:	2203      	movs	r2, #3
 800c78c:	4393      	bics	r3, r2
 800c78e:	431e      	orrs	r6, r3
 800c790:	81a6      	strh	r6, [r4, #12]
 800c792:	e7e4      	b.n	800c75e <__smakebuf_r+0xe>
 800c794:	4b0f      	ldr	r3, [pc, #60]	; (800c7d4 <__smakebuf_r+0x84>)
 800c796:	62ab      	str	r3, [r5, #40]	; 0x28
 800c798:	2380      	movs	r3, #128	; 0x80
 800c79a:	89a2      	ldrh	r2, [r4, #12]
 800c79c:	6020      	str	r0, [r4, #0]
 800c79e:	4313      	orrs	r3, r2
 800c7a0:	81a3      	strh	r3, [r4, #12]
 800c7a2:	9b00      	ldr	r3, [sp, #0]
 800c7a4:	6120      	str	r0, [r4, #16]
 800c7a6:	6163      	str	r3, [r4, #20]
 800c7a8:	9b01      	ldr	r3, [sp, #4]
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d00d      	beq.n	800c7ca <__smakebuf_r+0x7a>
 800c7ae:	0028      	movs	r0, r5
 800c7b0:	230e      	movs	r3, #14
 800c7b2:	5ee1      	ldrsh	r1, [r4, r3]
 800c7b4:	f000 f888 	bl	800c8c8 <_isatty_r>
 800c7b8:	2800      	cmp	r0, #0
 800c7ba:	d006      	beq.n	800c7ca <__smakebuf_r+0x7a>
 800c7bc:	2203      	movs	r2, #3
 800c7be:	89a3      	ldrh	r3, [r4, #12]
 800c7c0:	4393      	bics	r3, r2
 800c7c2:	001a      	movs	r2, r3
 800c7c4:	2301      	movs	r3, #1
 800c7c6:	4313      	orrs	r3, r2
 800c7c8:	81a3      	strh	r3, [r4, #12]
 800c7ca:	89a0      	ldrh	r0, [r4, #12]
 800c7cc:	4307      	orrs	r7, r0
 800c7ce:	81a7      	strh	r7, [r4, #12]
 800c7d0:	e7cb      	b.n	800c76a <__smakebuf_r+0x1a>
 800c7d2:	46c0      	nop			; (mov r8, r8)
 800c7d4:	0800a85d 	.word	0x0800a85d

0800c7d8 <memmove>:
 800c7d8:	b510      	push	{r4, lr}
 800c7da:	4288      	cmp	r0, r1
 800c7dc:	d902      	bls.n	800c7e4 <memmove+0xc>
 800c7de:	188b      	adds	r3, r1, r2
 800c7e0:	4298      	cmp	r0, r3
 800c7e2:	d303      	bcc.n	800c7ec <memmove+0x14>
 800c7e4:	2300      	movs	r3, #0
 800c7e6:	e007      	b.n	800c7f8 <memmove+0x20>
 800c7e8:	5c8b      	ldrb	r3, [r1, r2]
 800c7ea:	5483      	strb	r3, [r0, r2]
 800c7ec:	3a01      	subs	r2, #1
 800c7ee:	d2fb      	bcs.n	800c7e8 <memmove+0x10>
 800c7f0:	bd10      	pop	{r4, pc}
 800c7f2:	5ccc      	ldrb	r4, [r1, r3]
 800c7f4:	54c4      	strb	r4, [r0, r3]
 800c7f6:	3301      	adds	r3, #1
 800c7f8:	429a      	cmp	r2, r3
 800c7fa:	d1fa      	bne.n	800c7f2 <memmove+0x1a>
 800c7fc:	e7f8      	b.n	800c7f0 <memmove+0x18>
	...

0800c800 <__malloc_lock>:
 800c800:	b510      	push	{r4, lr}
 800c802:	4802      	ldr	r0, [pc, #8]	; (800c80c <__malloc_lock+0xc>)
 800c804:	f7fe fc7f 	bl	800b106 <__retarget_lock_acquire_recursive>
 800c808:	bd10      	pop	{r4, pc}
 800c80a:	46c0      	nop			; (mov r8, r8)
 800c80c:	200003b0 	.word	0x200003b0

0800c810 <__malloc_unlock>:
 800c810:	b510      	push	{r4, lr}
 800c812:	4802      	ldr	r0, [pc, #8]	; (800c81c <__malloc_unlock+0xc>)
 800c814:	f7fe fc78 	bl	800b108 <__retarget_lock_release_recursive>
 800c818:	bd10      	pop	{r4, pc}
 800c81a:	46c0      	nop			; (mov r8, r8)
 800c81c:	200003b0 	.word	0x200003b0

0800c820 <_realloc_r>:
 800c820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c822:	0007      	movs	r7, r0
 800c824:	000d      	movs	r5, r1
 800c826:	0016      	movs	r6, r2
 800c828:	2900      	cmp	r1, #0
 800c82a:	d105      	bne.n	800c838 <_realloc_r+0x18>
 800c82c:	0011      	movs	r1, r2
 800c82e:	f7ff f9bf 	bl	800bbb0 <_malloc_r>
 800c832:	0004      	movs	r4, r0
 800c834:	0020      	movs	r0, r4
 800c836:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c838:	2a00      	cmp	r2, #0
 800c83a:	d103      	bne.n	800c844 <_realloc_r+0x24>
 800c83c:	f7ff f96e 	bl	800bb1c <_free_r>
 800c840:	0034      	movs	r4, r6
 800c842:	e7f7      	b.n	800c834 <_realloc_r+0x14>
 800c844:	f000 f852 	bl	800c8ec <_malloc_usable_size_r>
 800c848:	002c      	movs	r4, r5
 800c84a:	42b0      	cmp	r0, r6
 800c84c:	d2f2      	bcs.n	800c834 <_realloc_r+0x14>
 800c84e:	0031      	movs	r1, r6
 800c850:	0038      	movs	r0, r7
 800c852:	f7ff f9ad 	bl	800bbb0 <_malloc_r>
 800c856:	1e04      	subs	r4, r0, #0
 800c858:	d0ec      	beq.n	800c834 <_realloc_r+0x14>
 800c85a:	0029      	movs	r1, r5
 800c85c:	0032      	movs	r2, r6
 800c85e:	f7fe fc7c 	bl	800b15a <memcpy>
 800c862:	0029      	movs	r1, r5
 800c864:	0038      	movs	r0, r7
 800c866:	f7ff f959 	bl	800bb1c <_free_r>
 800c86a:	e7e3      	b.n	800c834 <_realloc_r+0x14>

0800c86c <_read_r>:
 800c86c:	b570      	push	{r4, r5, r6, lr}
 800c86e:	0004      	movs	r4, r0
 800c870:	0008      	movs	r0, r1
 800c872:	0011      	movs	r1, r2
 800c874:	001a      	movs	r2, r3
 800c876:	2300      	movs	r3, #0
 800c878:	4d05      	ldr	r5, [pc, #20]	; (800c890 <_read_r+0x24>)
 800c87a:	602b      	str	r3, [r5, #0]
 800c87c:	f7f6 fb7c 	bl	8002f78 <_read>
 800c880:	1c43      	adds	r3, r0, #1
 800c882:	d103      	bne.n	800c88c <_read_r+0x20>
 800c884:	682b      	ldr	r3, [r5, #0]
 800c886:	2b00      	cmp	r3, #0
 800c888:	d000      	beq.n	800c88c <_read_r+0x20>
 800c88a:	6023      	str	r3, [r4, #0]
 800c88c:	bd70      	pop	{r4, r5, r6, pc}
 800c88e:	46c0      	nop			; (mov r8, r8)
 800c890:	200003b8 	.word	0x200003b8

0800c894 <abort>:
 800c894:	2006      	movs	r0, #6
 800c896:	b510      	push	{r4, lr}
 800c898:	f000 f85a 	bl	800c950 <raise>
 800c89c:	2001      	movs	r0, #1
 800c89e:	f7f6 fb5f 	bl	8002f60 <_exit>
	...

0800c8a4 <_fstat_r>:
 800c8a4:	2300      	movs	r3, #0
 800c8a6:	b570      	push	{r4, r5, r6, lr}
 800c8a8:	4d06      	ldr	r5, [pc, #24]	; (800c8c4 <_fstat_r+0x20>)
 800c8aa:	0004      	movs	r4, r0
 800c8ac:	0008      	movs	r0, r1
 800c8ae:	0011      	movs	r1, r2
 800c8b0:	602b      	str	r3, [r5, #0]
 800c8b2:	f7f6 fba4 	bl	8002ffe <_fstat>
 800c8b6:	1c43      	adds	r3, r0, #1
 800c8b8:	d103      	bne.n	800c8c2 <_fstat_r+0x1e>
 800c8ba:	682b      	ldr	r3, [r5, #0]
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d000      	beq.n	800c8c2 <_fstat_r+0x1e>
 800c8c0:	6023      	str	r3, [r4, #0]
 800c8c2:	bd70      	pop	{r4, r5, r6, pc}
 800c8c4:	200003b8 	.word	0x200003b8

0800c8c8 <_isatty_r>:
 800c8c8:	2300      	movs	r3, #0
 800c8ca:	b570      	push	{r4, r5, r6, lr}
 800c8cc:	4d06      	ldr	r5, [pc, #24]	; (800c8e8 <_isatty_r+0x20>)
 800c8ce:	0004      	movs	r4, r0
 800c8d0:	0008      	movs	r0, r1
 800c8d2:	602b      	str	r3, [r5, #0]
 800c8d4:	f7f6 fba1 	bl	800301a <_isatty>
 800c8d8:	1c43      	adds	r3, r0, #1
 800c8da:	d103      	bne.n	800c8e4 <_isatty_r+0x1c>
 800c8dc:	682b      	ldr	r3, [r5, #0]
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d000      	beq.n	800c8e4 <_isatty_r+0x1c>
 800c8e2:	6023      	str	r3, [r4, #0]
 800c8e4:	bd70      	pop	{r4, r5, r6, pc}
 800c8e6:	46c0      	nop			; (mov r8, r8)
 800c8e8:	200003b8 	.word	0x200003b8

0800c8ec <_malloc_usable_size_r>:
 800c8ec:	1f0b      	subs	r3, r1, #4
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	1f18      	subs	r0, r3, #4
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	da01      	bge.n	800c8fa <_malloc_usable_size_r+0xe>
 800c8f6:	580b      	ldr	r3, [r1, r0]
 800c8f8:	18c0      	adds	r0, r0, r3
 800c8fa:	4770      	bx	lr

0800c8fc <_raise_r>:
 800c8fc:	b570      	push	{r4, r5, r6, lr}
 800c8fe:	0004      	movs	r4, r0
 800c900:	000d      	movs	r5, r1
 800c902:	291f      	cmp	r1, #31
 800c904:	d904      	bls.n	800c910 <_raise_r+0x14>
 800c906:	2316      	movs	r3, #22
 800c908:	6003      	str	r3, [r0, #0]
 800c90a:	2001      	movs	r0, #1
 800c90c:	4240      	negs	r0, r0
 800c90e:	bd70      	pop	{r4, r5, r6, pc}
 800c910:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800c912:	2b00      	cmp	r3, #0
 800c914:	d004      	beq.n	800c920 <_raise_r+0x24>
 800c916:	008a      	lsls	r2, r1, #2
 800c918:	189b      	adds	r3, r3, r2
 800c91a:	681a      	ldr	r2, [r3, #0]
 800c91c:	2a00      	cmp	r2, #0
 800c91e:	d108      	bne.n	800c932 <_raise_r+0x36>
 800c920:	0020      	movs	r0, r4
 800c922:	f000 f831 	bl	800c988 <_getpid_r>
 800c926:	002a      	movs	r2, r5
 800c928:	0001      	movs	r1, r0
 800c92a:	0020      	movs	r0, r4
 800c92c:	f000 f81a 	bl	800c964 <_kill_r>
 800c930:	e7ed      	b.n	800c90e <_raise_r+0x12>
 800c932:	2000      	movs	r0, #0
 800c934:	2a01      	cmp	r2, #1
 800c936:	d0ea      	beq.n	800c90e <_raise_r+0x12>
 800c938:	1c51      	adds	r1, r2, #1
 800c93a:	d103      	bne.n	800c944 <_raise_r+0x48>
 800c93c:	2316      	movs	r3, #22
 800c93e:	3001      	adds	r0, #1
 800c940:	6023      	str	r3, [r4, #0]
 800c942:	e7e4      	b.n	800c90e <_raise_r+0x12>
 800c944:	2400      	movs	r4, #0
 800c946:	0028      	movs	r0, r5
 800c948:	601c      	str	r4, [r3, #0]
 800c94a:	4790      	blx	r2
 800c94c:	0020      	movs	r0, r4
 800c94e:	e7de      	b.n	800c90e <_raise_r+0x12>

0800c950 <raise>:
 800c950:	b510      	push	{r4, lr}
 800c952:	4b03      	ldr	r3, [pc, #12]	; (800c960 <raise+0x10>)
 800c954:	0001      	movs	r1, r0
 800c956:	6818      	ldr	r0, [r3, #0]
 800c958:	f7ff ffd0 	bl	800c8fc <_raise_r>
 800c95c:	bd10      	pop	{r4, pc}
 800c95e:	46c0      	nop			; (mov r8, r8)
 800c960:	20000010 	.word	0x20000010

0800c964 <_kill_r>:
 800c964:	2300      	movs	r3, #0
 800c966:	b570      	push	{r4, r5, r6, lr}
 800c968:	4d06      	ldr	r5, [pc, #24]	; (800c984 <_kill_r+0x20>)
 800c96a:	0004      	movs	r4, r0
 800c96c:	0008      	movs	r0, r1
 800c96e:	0011      	movs	r1, r2
 800c970:	602b      	str	r3, [r5, #0]
 800c972:	f7f6 fae5 	bl	8002f40 <_kill>
 800c976:	1c43      	adds	r3, r0, #1
 800c978:	d103      	bne.n	800c982 <_kill_r+0x1e>
 800c97a:	682b      	ldr	r3, [r5, #0]
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d000      	beq.n	800c982 <_kill_r+0x1e>
 800c980:	6023      	str	r3, [r4, #0]
 800c982:	bd70      	pop	{r4, r5, r6, pc}
 800c984:	200003b8 	.word	0x200003b8

0800c988 <_getpid_r>:
 800c988:	b510      	push	{r4, lr}
 800c98a:	f7f6 fad3 	bl	8002f34 <_getpid>
 800c98e:	bd10      	pop	{r4, pc}

0800c990 <_init>:
 800c990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c992:	46c0      	nop			; (mov r8, r8)
 800c994:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c996:	bc08      	pop	{r3}
 800c998:	469e      	mov	lr, r3
 800c99a:	4770      	bx	lr

0800c99c <_fini>:
 800c99c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c99e:	46c0      	nop			; (mov r8, r8)
 800c9a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c9a2:	bc08      	pop	{r3}
 800c9a4:	469e      	mov	lr, r3
 800c9a6:	4770      	bx	lr
